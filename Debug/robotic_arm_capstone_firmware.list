
robotic_arm_capstone_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d28  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  08009eb8  08009eb8  0000aeb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a520  0800a520  0000c1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a520  0800a520  0000b520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a528  0800a528  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a528  0800a528  0000b528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a52c  0800a52c  0000b52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800a530  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d0  200001e0  0800a710  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ab0  0800a710  0000cab0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca69  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002248  00000000  00000000  00018c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  0001aec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a50  00000000  00000000  0001bc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001977e  00000000  00000000  0001c690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e01f  00000000  00000000  00035e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eca6  00000000  00000000  00043e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2ad3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fa4  00000000  00000000  000d2b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000d7abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ea0 	.word	0x08009ea0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009ea0 	.word	0x08009ea0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <DWT_Init>:
/* USER CODE BEGIN 0 */
/**
  * @brief  Initialize the DWT cycle counter for microsecond delays.
  */
void DWT_Init(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <DWT_Init+0x38>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d105      	bne.n	8000d10 <DWT_Init+0x1c>
  {
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000d04:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <DWT_Init+0x38>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	4a08      	ldr	r2, [pc, #32]	@ (8000d2c <DWT_Init+0x38>)
 8000d0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d0e:	60d3      	str	r3, [r2, #12]
  }
  DWT->CYCCNT = 0;
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <DWT_Init+0x3c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <DWT_Init+0x3c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <DWT_Init+0x3c>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6013      	str	r3, [r2, #0]
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000edf0 	.word	0xe000edf0
 8000d30:	e0001000 	.word	0xe0001000

08000d34 <delay_us>:
///**
//  * @brief  Provides a delay (in microseconds) using the DWT cycle counter.
//  * @param  us: Delay in microseconds.
//  */
void delay_us(uint32_t us)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <delay_us+0x40>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (SystemCoreClock / 1000000);
 8000d42:	4b0d      	ldr	r3, [pc, #52]	@ (8000d78 <delay_us+0x44>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a0d      	ldr	r2, [pc, #52]	@ (8000d7c <delay_us+0x48>)
 8000d48:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4c:	0c9a      	lsrs	r2, r3, #18
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	fb02 f303 	mul.w	r3, r2, r3
 8000d54:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks);
 8000d56:	bf00      	nop
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <delay_us+0x40>)
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	68ba      	ldr	r2, [r7, #8]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d8f8      	bhi.n	8000d58 <delay_us+0x24>
}
 8000d66:	bf00      	nop
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e0001000 	.word	0xe0001000
 8000d78:	2000000c 	.word	0x2000000c
 8000d7c:	431bde83 	.word	0x431bde83

08000d80 <get_micros>:
/**
 * @brief Get the current time in microseconds using DWT.
 * @return Current time in microseconds.
 */
uint32_t get_micros(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000);
 8000d84:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <get_micros+0x24>)
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <get_micros+0x28>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4907      	ldr	r1, [pc, #28]	@ (8000dac <get_micros+0x2c>)
 8000d8e:	fba1 1303 	umull	r1, r3, r1, r3
 8000d92:	0c9b      	lsrs	r3, r3, #18
 8000d94:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e0001000 	.word	0xe0001000
 8000da8:	2000000c 	.word	0x2000000c
 8000dac:	431bde83 	.word	0x431bde83

08000db0 <isQueueEmpty>:

int isQueueEmpty(CommandQueue *q) {
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
    return (q->head == q->tail);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f8d3 2600 	ldr.w	r2, [r3, #1536]	@ 0x600
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f8d3 3604 	ldr.w	r3, [r3, #1540]	@ 0x604
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	bf0c      	ite	eq
 8000dc8:	2301      	moveq	r3, #1
 8000dca:	2300      	movne	r3, #0
 8000dcc:	b2db      	uxtb	r3, r3
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <isQueueFull>:

int isQueueFull(CommandQueue *q) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
    return (((q->tail + 1) % CMD_QUEUE_SIZE) == q->head);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f8d3 3604 	ldr.w	r3, [r3, #1540]	@ 0x604
 8000dea:	1c59      	adds	r1, r3, #1
 8000dec:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <isQueueFull+0x44>)
 8000dee:	fb83 2301 	smull	r2, r3, r3, r1
 8000df2:	109a      	asrs	r2, r3, #2
 8000df4:	17cb      	asrs	r3, r1, #31
 8000df6:	1ad2      	subs	r2, r2, r3
 8000df8:	4613      	mov	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4413      	add	r3, r2
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	1aca      	subs	r2, r1, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f8d3 3600 	ldr.w	r3, [r3, #1536]	@ 0x600
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	bf0c      	ite	eq
 8000e0c:	2301      	moveq	r3, #1
 8000e0e:	2300      	movne	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	2aaaaaab 	.word	0x2aaaaaab

08000e24 <flushQueue>:

int flushQueue(CommandQueue *q)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
    q->head = 0;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f8c3 2600 	str.w	r2, [r3, #1536]	@ 0x600
    q->tail = 0;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	f8c3 2604 	str.w	r2, [r3, #1540]	@ 0x604
    return 0;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <enqueueCommand>:

int enqueueCommand(CommandQueue *q, const char *cmd) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
    if (isQueueFull(q)) {
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ffc0 	bl	8000ddc <isQueueFull>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d002      	beq.n	8000e68 <enqueueCommand+0x1c>
        return -1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e66:	e026      	b.n	8000eb6 <enqueueCommand+0x6a>
    }
    strncpy(q->commands[q->tail], cmd, CMD_MAX_LENGTH - 1);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f8d3 3604 	ldr.w	r3, [r3, #1540]	@ 0x604
 8000e6e:	019b      	lsls	r3, r3, #6
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	4413      	add	r3, r2
 8000e74:	223f      	movs	r2, #63	@ 0x3f
 8000e76:	6839      	ldr	r1, [r7, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f005 febe 	bl	8006bfa <strncpy>
    q->commands[q->tail][CMD_MAX_LENGTH - 1] = '\0';
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f8d3 3604 	ldr.w	r3, [r3, #1540]	@ 0x604
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	019b      	lsls	r3, r3, #6
 8000e88:	4413      	add	r3, r2
 8000e8a:	333f      	adds	r3, #63	@ 0x3f
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
    q->tail = (q->tail + 1) % CMD_QUEUE_SIZE;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f8d3 3604 	ldr.w	r3, [r3, #1540]	@ 0x604
 8000e96:	1c59      	adds	r1, r3, #1
 8000e98:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <enqueueCommand+0x74>)
 8000e9a:	fb83 2301 	smull	r2, r3, r3, r1
 8000e9e:	109a      	asrs	r2, r3, #2
 8000ea0:	17cb      	asrs	r3, r1, #31
 8000ea2:	1ad2      	subs	r2, r2, r3
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4413      	add	r3, r2
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	1aca      	subs	r2, r1, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f8c3 2604 	str.w	r2, [r3, #1540]	@ 0x604
    return 0;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2aaaaaab 	.word	0x2aaaaaab

08000ec4 <dequeueCommand>:

int dequeueCommand(CommandQueue *q, char *cmd, size_t maxLen) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
    if (isQueueEmpty(q)) {
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f7ff ff6d 	bl	8000db0 <isQueueEmpty>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <dequeueCommand+0x1e>
        return -1;
 8000edc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ee0:	e024      	b.n	8000f2c <dequeueCommand+0x68>
    }
    strncpy(cmd, q->commands[q->head], maxLen - 1);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	@ 0x600
 8000ee8:	019b      	lsls	r3, r3, #6
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	18d1      	adds	r1, r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	68b8      	ldr	r0, [r7, #8]
 8000ef6:	f005 fe80 	bl	8006bfa <strncpy>
    cmd[maxLen - 1] = '\0';
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3b01      	subs	r3, #1
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	4413      	add	r3, r2
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
    q->head = (q->head + 1) % CMD_QUEUE_SIZE;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f8d3 3600 	ldr.w	r3, [r3, #1536]	@ 0x600
 8000f0c:	1c59      	adds	r1, r3, #1
 8000f0e:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <dequeueCommand+0x70>)
 8000f10:	fb83 2301 	smull	r2, r3, r3, r1
 8000f14:	109a      	asrs	r2, r3, #2
 8000f16:	17cb      	asrs	r3, r1, #31
 8000f18:	1ad2      	subs	r2, r2, r3
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	4413      	add	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	1aca      	subs	r2, r1, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f8c3 2600 	str.w	r2, [r3, #1536]	@ 0x600
    return 0;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	2aaaaaab 	.word	0x2aaaaaab

08000f38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a1a      	ldr	r2, [pc, #104]	@ (8000fb0 <HAL_UART_RxCpltCallback+0x78>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d12d      	bne.n	8000fa6 <HAL_UART_RxCpltCallback+0x6e>
    {
        if ((rxChar == '\n') || (rxChar == '\r'))
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb4 <HAL_UART_RxCpltCallback+0x7c>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b0a      	cmp	r3, #10
 8000f50:	d003      	beq.n	8000f5a <HAL_UART_RxCpltCallback+0x22>
 8000f52:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <HAL_UART_RxCpltCallback+0x7c>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b0d      	cmp	r3, #13
 8000f58:	d111      	bne.n	8000f7e <HAL_UART_RxCpltCallback+0x46>
        {
            commandBuffer[commandIndex] = '\0';
 8000f5a:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x80>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b16      	ldr	r3, [pc, #88]	@ (8000fbc <HAL_UART_RxCpltCallback+0x84>)
 8000f62:	2100      	movs	r1, #0
 8000f64:	5499      	strb	r1, [r3, r2]
            if (commandIndex > 0)
 8000f66:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x80>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_UART_RxCpltCallback+0x3e>
            {
                if (enqueueCommand(&cmdQueue, commandBuffer) != 0)
 8000f6e:	4913      	ldr	r1, [pc, #76]	@ (8000fbc <HAL_UART_RxCpltCallback+0x84>)
 8000f70:	4813      	ldr	r0, [pc, #76]	@ (8000fc0 <HAL_UART_RxCpltCallback+0x88>)
 8000f72:	f7ff ff6b 	bl	8000e4c <enqueueCommand>
                {
                    // TODO: handle full queue
                }
            }
            commandIndex = 0;
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x80>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	801a      	strh	r2, [r3, #0]
 8000f7c:	e00e      	b.n	8000f9c <HAL_UART_RxCpltCallback+0x64>
        }
        else
        {
            if (commandIndex < CMD_MAX_LENGTH - 1)
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x80>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	2b3e      	cmp	r3, #62	@ 0x3e
 8000f84:	d80a      	bhi.n	8000f9c <HAL_UART_RxCpltCallback+0x64>
            {
                commandBuffer[commandIndex++] = rxChar;
 8000f86:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x80>)
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	b291      	uxth	r1, r2
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x80>)
 8000f90:	8011      	strh	r1, [r2, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <HAL_UART_RxCpltCallback+0x7c>)
 8000f96:	7819      	ldrb	r1, [r3, #0]
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <HAL_UART_RxCpltCallback+0x84>)
 8000f9a:	5499      	strb	r1, [r3, r2]
            }
        }
        HAL_UART_Receive_IT(&huart2, &rxChar, 1);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4905      	ldr	r1, [pc, #20]	@ (8000fb4 <HAL_UART_RxCpltCallback+0x7c>)
 8000fa0:	4808      	ldr	r0, [pc, #32]	@ (8000fc4 <HAL_UART_RxCpltCallback+0x8c>)
 8000fa2:	f003 f979 	bl	8004298 <HAL_UART_Receive_IT>
    }
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40004400 	.word	0x40004400
 8000fb4:	2000030e 	.word	0x2000030e
 8000fb8:	20000350 	.word	0x20000350
 8000fbc:	20000310 	.word	0x20000310
 8000fc0:	20000354 	.word	0x20000354
 8000fc4:	2000027c 	.word	0x2000027c

08000fc8 <getEncoderPos.1>:

/**
* @brief Get the encoder count for the specified motor.
*/
int32_t getEncoderPos(uint8_t motorNum)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	f8c7 c000 	str.w	ip, [r7]
  if (motorNum == 1)
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d103      	bne.n	8000fe4 <getEncoderPos.1+0x1c>
    return __HAL_TIM_GET_COUNTER(&htim2);
 8000fdc:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <getEncoderPos.1+0x38>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe2:	e007      	b.n	8000ff4 <getEncoderPos.1+0x2c>
  else if (motorNum == 2)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d103      	bne.n	8000ff2 <getEncoderPos.1+0x2a>
    return __HAL_TIM_GET_COUNTER(&htim1);
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <getEncoderPos.1+0x3c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff0:	e000      	b.n	8000ff4 <getEncoderPos.1+0x2c>
  return 0;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	2000023c 	.word	0x2000023c
 8001004:	200001fc 	.word	0x200001fc

08001008 <main>:
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b0a6      	sub	sp, #152	@ 0x98
 800100c:	af00      	add	r7, sp, #0
int main(void)
 800100e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001012:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HAL_Init();
 8001016:	f000 ff71 	bl	8001efc <HAL_Init>
  SystemClock_Config();
 800101a:	f000 fb95 	bl	8001748 <SystemClock_Config>
  DWT_Init();
 800101e:	f7ff fe69 	bl	8000cf4 <DWT_Init>
  MX_GPIO_Init();
 8001022:	f000 fcc7 	bl	80019b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001026:	f000 fc41 	bl	80018ac <MX_TIM2_Init>
  MX_TIM1_Init();
 800102a:	f000 fbe5 	bl	80017f8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800102e:	f000 fc91 	bl	8001954 <MX_USART2_UART_Init>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001032:	213c      	movs	r1, #60	@ 0x3c
 8001034:	4823      	ldr	r0, [pc, #140]	@ (80010c4 <main+0xbc>)
 8001036:	f002 ff1d 	bl	8003e74 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800103a:	213c      	movs	r1, #60	@ 0x3c
 800103c:	4822      	ldr	r0, [pc, #136]	@ (80010c8 <main+0xc0>)
 800103e:	f002 ff19 	bl	8003e74 <HAL_TIM_Encoder_Start>
  HAL_UART_Receive_IT(&huart2, &rxChar, 1);
 8001042:	2201      	movs	r2, #1
 8001044:	4921      	ldr	r1, [pc, #132]	@ (80010cc <main+0xc4>)
 8001046:	4822      	ldr	r0, [pc, #136]	@ (80010d0 <main+0xc8>)
 8001048:	f003 f926 	bl	8004298 <HAL_UART_Receive_IT>
  const char *initMsg = "(+) initialized, waiting for commands...\n";
 800104c:	4b21      	ldr	r3, [pc, #132]	@ (80010d4 <main+0xcc>)
 800104e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HAL_UART_Transmit(&huart2, (uint8_t*)initMsg, strlen(initMsg), 100);
 8001052:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8001056:	f7ff f90b 	bl	8000270 <strlen>
 800105a:	4603      	mov	r3, r0
 800105c:	b29a      	uxth	r2, r3
 800105e:	2364      	movs	r3, #100	@ 0x64
 8001060:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8001064:	481a      	ldr	r0, [pc, #104]	@ (80010d0 <main+0xc8>)
 8001066:	f003 f885 	bl	8004174 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	char cmd[CMD_MAX_LENGTH];
	if (dequeueCommand(&cmdQueue, cmd, sizeof(cmd)) == 0) {
 800106a:	463b      	mov	r3, r7
 800106c:	2240      	movs	r2, #64	@ 0x40
 800106e:	4619      	mov	r1, r3
 8001070:	4819      	ldr	r0, [pc, #100]	@ (80010d8 <main+0xd0>)
 8001072:	f7ff ff27 	bl	8000ec4 <dequeueCommand>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d11a      	bne.n	80010b2 <main+0xaa>
		char echoMsg[80];
		sprintf(echoMsg, "Received command: %s\n", cmd);
 800107c:	463a      	mov	r2, r7
 800107e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001082:	4916      	ldr	r1, [pc, #88]	@ (80010dc <main+0xd4>)
 8001084:	4618      	mov	r0, r3
 8001086:	f004 fd47 	bl	8005b18 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)echoMsg, strlen(echoMsg), 100);
 800108a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff f8ee 	bl	8000270 <strlen>
 8001094:	4603      	mov	r3, r0
 8001096:	b29a      	uxth	r2, r3
 8001098:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800109c:	2364      	movs	r3, #100	@ 0x64
 800109e:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <main+0xc8>)
 80010a0:	f003 f868 	bl	8004174 <HAL_UART_Transmit>
		parseCommand(cmd);
 80010a4:	463b      	mov	r3, r7
 80010a6:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80010aa:	4694      	mov	ip, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f817 	bl	80010e0 <parseCommand.0>
	}

	doMotorStepping();
 80010b2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80010b6:	469c      	mov	ip, r3
 80010b8:	f000 fa14 	bl	80014e4 <doMotorStepping.2>
    HAL_Delay(1);
 80010bc:	2001      	movs	r0, #1
 80010be:	f000 ff83 	bl	8001fc8 <HAL_Delay>
  {
 80010c2:	e7d2      	b.n	800106a <main+0x62>
 80010c4:	2000023c 	.word	0x2000023c
 80010c8:	200001fc 	.word	0x200001fc
 80010cc:	2000030e 	.word	0x2000030e
 80010d0:	2000027c 	.word	0x2000027c
 80010d4:	08009eb8 	.word	0x08009eb8
 80010d8:	20000354 	.word	0x20000354
 80010dc:	08009ee4 	.word	0x08009ee4

080010e0 <parseCommand.0>:
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b0c1      	sub	sp, #260	@ 0x104
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	4664      	mov	r4, ip
 80010ea:	f8c7 c000 	str.w	ip, [r7]
    if (line[0] == 'M')
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b4d      	cmp	r3, #77	@ 0x4d
 80010f4:	f040 80f6 	bne.w	80012e4 <parseCommand.0+0x204>
        uint8_t motorNum = line[1] - '0'; // single-digit motor ID
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3301      	adds	r3, #1
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	3b30      	subs	r3, #48	@ 0x30
 8001100:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        char *colon1 = strchr(line, ':');
 8001104:	213a      	movs	r1, #58	@ 0x3a
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f005 fd58 	bl	8006bbc <strchr>
 800110c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (!colon1)
 8001110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10f      	bne.n	8001138 <parseCommand.0+0x58>
            const char *err = "ERR: no colon found\n";
 8001118:	4bc3      	ldr	r3, [pc, #780]	@ (8001428 <parseCommand.0+0x348>)
 800111a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            HAL_UART_Transmit(&huart2, (uint8_t*)err, strlen(err), 100);
 800111e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001122:	f7ff f8a5 	bl	8000270 <strlen>
 8001126:	4603      	mov	r3, r0
 8001128:	b29a      	uxth	r2, r3
 800112a:	2364      	movs	r3, #100	@ 0x64
 800112c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8001130:	48be      	ldr	r0, [pc, #760]	@ (800142c <parseCommand.0+0x34c>)
 8001132:	f003 f81f 	bl	8004174 <HAL_UART_Transmit>
            return;
 8001136:	e1cb      	b.n	80014d0 <parseCommand.0+0x3f0>
        char *colon2 = strchr(colon1 + 1, ':');
 8001138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800113c:	3301      	adds	r3, #1
 800113e:	213a      	movs	r1, #58	@ 0x3a
 8001140:	4618      	mov	r0, r3
 8001142:	f005 fd3b 	bl	8006bbc <strchr>
 8001146:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
        if (!colon2)
 800114a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10f      	bne.n	8001172 <parseCommand.0+0x92>
            const char *err = "ERR: second colon not found\n";
 8001152:	4bb7      	ldr	r3, [pc, #732]	@ (8001430 <parseCommand.0+0x350>)
 8001154:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            HAL_UART_Transmit(&huart2, (uint8_t*)err, strlen(err), 100);
 8001158:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800115c:	f7ff f888 	bl	8000270 <strlen>
 8001160:	4603      	mov	r3, r0
 8001162:	b29a      	uxth	r2, r3
 8001164:	2364      	movs	r3, #100	@ 0x64
 8001166:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 800116a:	48b0      	ldr	r0, [pc, #704]	@ (800142c <parseCommand.0+0x34c>)
 800116c:	f003 f802 	bl	8004174 <HAL_UART_Transmit>
            return;
 8001170:	e1ae      	b.n	80014d0 <parseCommand.0+0x3f0>
        int32_t stepsInput = strtol(colon1 + 1, NULL, 10);
 8001172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001176:	3301      	adds	r3, #1
 8001178:	220a      	movs	r2, #10
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f005 fced 	bl	8006b5c <strtol>
 8001182:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
        float speedVal = strtof(colon2 + 1, NULL);
 8001186:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800118a:	3301      	adds	r3, #1
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f005 fc04 	bl	800699c <strtof>
 8001194:	ed87 0a3d 	vstr	s0, [r7, #244]	@ 0xf4
        if (speedVal > 1.0f) speedVal = 1.0f;
 8001198:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 800119c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a8:	dd03      	ble.n	80011b2 <parseCommand.0+0xd2>
 80011aa:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80011ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        if (speedVal < 0.0f) speedVal = 0.0f;
 80011b2:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 80011b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011be:	d503      	bpl.n	80011c8 <parseCommand.0+0xe8>
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        GPIO_PinState dir = (stepsInput >= 0) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80011c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80011cc:	43db      	mvns	r3, r3
 80011ce:	0fdb      	lsrs	r3, r3, #31
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        int32_t absSteps = (stepsInput >= 0) ? stepsInput : -stepsInput;
 80011d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80011da:	2b00      	cmp	r3, #0
 80011dc:	bfb8      	it	lt
 80011de:	425b      	neglt	r3, r3
 80011e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        float speedFactor = fabsf(speedVal);
 80011e4:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 80011e8:	eef0 7ae7 	vabs.f32	s15, s15
 80011ec:	edc7 7a32 	vstr	s15, [r7, #200]	@ 0xc8
        if (motorNum == 1)
 80011f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d130      	bne.n	800125a <parseCommand.0+0x17a>
            motor1_stepsRemaining = absSteps;
 80011f8:	4a8e      	ldr	r2, [pc, #568]	@ (8001434 <parseCommand.0+0x354>)
 80011fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80011fe:	6013      	str	r3, [r2, #0]
            motor1_direction = dir;
 8001200:	4a8d      	ldr	r2, [pc, #564]	@ (8001438 <parseCommand.0+0x358>)
 8001202:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8001206:	7013      	strb	r3, [r2, #0]
            motor1_speedFactor = speedFactor;
 8001208:	4a8c      	ldr	r2, [pc, #560]	@ (800143c <parseCommand.0+0x35c>)
 800120a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800120e:	6013      	str	r3, [r2, #0]
            sprintf(resp, "Command: M1 => %ld steps, dir=%s, speed=%.2f\n",
 8001210:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <parseCommand.0+0x13c>
 8001218:	4c89      	ldr	r4, [pc, #548]	@ (8001440 <parseCommand.0+0x360>)
 800121a:	e000      	b.n	800121e <parseCommand.0+0x13e>
 800121c:	4c89      	ldr	r4, [pc, #548]	@ (8001444 <parseCommand.0+0x364>)
 800121e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8001222:	f7ff f991 	bl	8000548 <__aeabi_f2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800122e:	e9cd 2300 	strd	r2, r3, [sp]
 8001232:	4623      	mov	r3, r4
 8001234:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001238:	4983      	ldr	r1, [pc, #524]	@ (8001448 <parseCommand.0+0x368>)
 800123a:	f004 fc6d 	bl	8005b18 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)resp, strlen(resp), 100);
 800123e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f814 	bl	8000270 <strlen>
 8001248:	4603      	mov	r3, r0
 800124a:	b29a      	uxth	r2, r3
 800124c:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8001250:	2364      	movs	r3, #100	@ 0x64
 8001252:	4876      	ldr	r0, [pc, #472]	@ (800142c <parseCommand.0+0x34c>)
 8001254:	f002 ff8e 	bl	8004174 <HAL_UART_Transmit>
 8001258:	e13a      	b.n	80014d0 <parseCommand.0+0x3f0>
        else if (motorNum == 2)
 800125a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d130      	bne.n	80012c4 <parseCommand.0+0x1e4>
            motor2_stepsRemaining = absSteps;
 8001262:	4a7a      	ldr	r2, [pc, #488]	@ (800144c <parseCommand.0+0x36c>)
 8001264:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001268:	6013      	str	r3, [r2, #0]
            motor2_direction = dir;
 800126a:	4a79      	ldr	r2, [pc, #484]	@ (8001450 <parseCommand.0+0x370>)
 800126c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8001270:	7013      	strb	r3, [r2, #0]
            motor2_speedFactor = speedFactor;
 8001272:	4a78      	ldr	r2, [pc, #480]	@ (8001454 <parseCommand.0+0x374>)
 8001274:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001278:	6013      	str	r3, [r2, #0]
            sprintf(resp, "Command: M2 => %ld steps, dir=%s, speed=%.2f\n",
 800127a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800127e:	2b01      	cmp	r3, #1
 8001280:	d101      	bne.n	8001286 <parseCommand.0+0x1a6>
 8001282:	4c6f      	ldr	r4, [pc, #444]	@ (8001440 <parseCommand.0+0x360>)
 8001284:	e000      	b.n	8001288 <parseCommand.0+0x1a8>
 8001286:	4c6f      	ldr	r4, [pc, #444]	@ (8001444 <parseCommand.0+0x364>)
 8001288:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 800128c:	f7ff f95c 	bl	8000548 <__aeabi_f2d>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8001298:	e9cd 2300 	strd	r2, r3, [sp]
 800129c:	4623      	mov	r3, r4
 800129e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80012a2:	496d      	ldr	r1, [pc, #436]	@ (8001458 <parseCommand.0+0x378>)
 80012a4:	f004 fc38 	bl	8005b18 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)resp, strlen(resp), 100);
 80012a8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7fe ffdf 	bl	8000270 <strlen>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80012ba:	2364      	movs	r3, #100	@ 0x64
 80012bc:	485b      	ldr	r0, [pc, #364]	@ (800142c <parseCommand.0+0x34c>)
 80012be:	f002 ff59 	bl	8004174 <HAL_UART_Transmit>
 80012c2:	e105      	b.n	80014d0 <parseCommand.0+0x3f0>
            const char *err2 = "ERR: motorNum invalid\n";
 80012c4:	4b65      	ldr	r3, [pc, #404]	@ (800145c <parseCommand.0+0x37c>)
 80012c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            HAL_UART_Transmit(&huart2, (uint8_t*)err2, strlen(err2), 100);
 80012ca:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 80012ce:	f7fe ffcf 	bl	8000270 <strlen>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	2364      	movs	r3, #100	@ 0x64
 80012d8:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 80012dc:	4853      	ldr	r0, [pc, #332]	@ (800142c <parseCommand.0+0x34c>)
 80012de:	f002 ff49 	bl	8004174 <HAL_UART_Transmit>
 80012e2:	e0f5      	b.n	80014d0 <parseCommand.0+0x3f0>
    else if (line[0] == 'H')
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b48      	cmp	r3, #72	@ 0x48
 80012ea:	d11e      	bne.n	800132a <parseCommand.0+0x24a>
        flushQueue(&cmdQueue);
 80012ec:	485c      	ldr	r0, [pc, #368]	@ (8001460 <parseCommand.0+0x380>)
 80012ee:	f7ff fd99 	bl	8000e24 <flushQueue>
        motor1_stepsRemaining = 0;
 80012f2:	4b50      	ldr	r3, [pc, #320]	@ (8001434 <parseCommand.0+0x354>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
        motor2_stepsRemaining = 0;
 80012f8:	4b54      	ldr	r3, [pc, #336]	@ (800144c <parseCommand.0+0x36c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
        motor1_resetting = false;
 80012fe:	4b59      	ldr	r3, [pc, #356]	@ (8001464 <parseCommand.0+0x384>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
        motor2_resetting = false;
 8001304:	4b58      	ldr	r3, [pc, #352]	@ (8001468 <parseCommand.0+0x388>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
        const char *msg = "Command queue cleared and motors stopped\n";
 800130a:	4b58      	ldr	r3, [pc, #352]	@ (800146c <parseCommand.0+0x38c>)
 800130c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 8001310:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8001314:	f7fe ffac 	bl	8000270 <strlen>
 8001318:	4603      	mov	r3, r0
 800131a:	b29a      	uxth	r2, r3
 800131c:	2364      	movs	r3, #100	@ 0x64
 800131e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8001322:	4842      	ldr	r0, [pc, #264]	@ (800142c <parseCommand.0+0x34c>)
 8001324:	f002 ff26 	bl	8004174 <HAL_UART_Transmit>
 8001328:	e0d2      	b.n	80014d0 <parseCommand.0+0x3f0>
    else if (strncmp(line, "GET:E:", 6) == 0)
 800132a:	2206      	movs	r2, #6
 800132c:	4950      	ldr	r1, [pc, #320]	@ (8001470 <parseCommand.0+0x390>)
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f005 fc51 	bl	8006bd6 <strncmp>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d129      	bne.n	800138e <parseCommand.0+0x2ae>
        uint8_t motorNum = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
        sscanf(line, "GET:E:%hhu", &motorNum);
 8001340:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 8001344:	461a      	mov	r2, r3
 8001346:	494b      	ldr	r1, [pc, #300]	@ (8001474 <parseCommand.0+0x394>)
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f004 fc07 	bl	8005b5c <siscanf>
        int32_t pos = getEncoderPos(motorNum);
 800134e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001352:	46a4      	mov	ip, r4
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fe37 	bl	8000fc8 <getEncoderPos.1>
 800135a:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
        sprintf(resp, "E:%u:POS=%ld\n", (unsigned)motorNum, (long)pos);
 800135e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001362:	461a      	mov	r2, r3
 8001364:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8001368:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800136c:	4942      	ldr	r1, [pc, #264]	@ (8001478 <parseCommand.0+0x398>)
 800136e:	f004 fbd3 	bl	8005b18 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)resp, strlen(resp), 100);
 8001372:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001376:	4618      	mov	r0, r3
 8001378:	f7fe ff7a 	bl	8000270 <strlen>
 800137c:	4603      	mov	r3, r0
 800137e:	b29a      	uxth	r2, r3
 8001380:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8001384:	2364      	movs	r3, #100	@ 0x64
 8001386:	4829      	ldr	r0, [pc, #164]	@ (800142c <parseCommand.0+0x34c>)
 8001388:	f002 fef4 	bl	8004174 <HAL_UART_Transmit>
 800138c:	e0a0      	b.n	80014d0 <parseCommand.0+0x3f0>
    else if (strncmp(line, "RESET:", 6) == 0)
 800138e:	2206      	movs	r2, #6
 8001390:	493a      	ldr	r1, [pc, #232]	@ (800147c <parseCommand.0+0x39c>)
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f005 fc1f 	bl	8006bd6 <strncmp>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	f040 8084 	bne.w	80014a8 <parseCommand.0+0x3c8>
        uint8_t motorNum = line[6] - '0';
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3306      	adds	r3, #6
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	3b30      	subs	r3, #48	@ 0x30
 80013a8:	f887 30f3 	strb.w	r3, [r7, #243]	@ 0xf3
        if (motorNum == 1)
 80013ac:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d11a      	bne.n	80013ea <parseCommand.0+0x30a>
            motor1_resetting = true;
 80013b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001464 <parseCommand.0+0x384>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
            motor1_speedFactor = 1.0f;
 80013ba:	4b20      	ldr	r3, [pc, #128]	@ (800143c <parseCommand.0+0x35c>)
 80013bc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80013c0:	601a      	str	r2, [r3, #0]
            sprintf(resp, "Resetting motor 1 to zero position\n");
 80013c2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013c6:	492e      	ldr	r1, [pc, #184]	@ (8001480 <parseCommand.0+0x3a0>)
 80013c8:	4618      	mov	r0, r3
 80013ca:	f004 fba5 	bl	8005b18 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)resp, strlen(resp), 100);
 80013ce:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7fe ff4c 	bl	8000270 <strlen>
 80013d8:	4603      	mov	r3, r0
 80013da:	b29a      	uxth	r2, r3
 80013dc:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80013e0:	2364      	movs	r3, #100	@ 0x64
 80013e2:	4812      	ldr	r0, [pc, #72]	@ (800142c <parseCommand.0+0x34c>)
 80013e4:	f002 fec6 	bl	8004174 <HAL_UART_Transmit>
 80013e8:	e072      	b.n	80014d0 <parseCommand.0+0x3f0>
        else if (motorNum == 2)
 80013ea:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d14a      	bne.n	8001488 <parseCommand.0+0x3a8>
            motor2_resetting = true;
 80013f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <parseCommand.0+0x388>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
            motor2_speedFactor = 1.0f;
 80013f8:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <parseCommand.0+0x374>)
 80013fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80013fe:	601a      	str	r2, [r3, #0]
            sprintf(resp, "Resetting motor 2 to zero position\n");
 8001400:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001404:	491f      	ldr	r1, [pc, #124]	@ (8001484 <parseCommand.0+0x3a4>)
 8001406:	4618      	mov	r0, r3
 8001408:	f004 fb86 	bl	8005b18 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)resp, strlen(resp), 100);
 800140c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001410:	4618      	mov	r0, r3
 8001412:	f7fe ff2d 	bl	8000270 <strlen>
 8001416:	4603      	mov	r3, r0
 8001418:	b29a      	uxth	r2, r3
 800141a:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800141e:	2364      	movs	r3, #100	@ 0x64
 8001420:	4802      	ldr	r0, [pc, #8]	@ (800142c <parseCommand.0+0x34c>)
 8001422:	f002 fea7 	bl	8004174 <HAL_UART_Transmit>
 8001426:	e053      	b.n	80014d0 <parseCommand.0+0x3f0>
 8001428:	08009efc 	.word	0x08009efc
 800142c:	2000027c 	.word	0x2000027c
 8001430:	08009f14 	.word	0x08009f14
 8001434:	200002fc 	.word	0x200002fc
 8001438:	20000008 	.word	0x20000008
 800143c:	20000000 	.word	0x20000000
 8001440:	08009f34 	.word	0x08009f34
 8001444:	08009f38 	.word	0x08009f38
 8001448:	08009f3c 	.word	0x08009f3c
 800144c:	20000300 	.word	0x20000300
 8001450:	20000009 	.word	0x20000009
 8001454:	20000004 	.word	0x20000004
 8001458:	08009f6c 	.word	0x08009f6c
 800145c:	08009f9c 	.word	0x08009f9c
 8001460:	20000354 	.word	0x20000354
 8001464:	2000030c 	.word	0x2000030c
 8001468:	2000030d 	.word	0x2000030d
 800146c:	08009fb4 	.word	0x08009fb4
 8001470:	08009fe0 	.word	0x08009fe0
 8001474:	08009fe8 	.word	0x08009fe8
 8001478:	08009ff4 	.word	0x08009ff4
 800147c:	0800a004 	.word	0x0800a004
 8001480:	0800a00c 	.word	0x0800a00c
 8001484:	0800a030 	.word	0x0800a030
            const char *err = "ERR: Invalid motor number for RESET\n";
 8001488:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <parseCommand.0+0x3f8>)
 800148a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            HAL_UART_Transmit(&huart2, (uint8_t*)err, strlen(err), 100);
 800148e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8001492:	f7fe feed 	bl	8000270 <strlen>
 8001496:	4603      	mov	r3, r0
 8001498:	b29a      	uxth	r2, r3
 800149a:	2364      	movs	r3, #100	@ 0x64
 800149c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 80014a0:	480e      	ldr	r0, [pc, #56]	@ (80014dc <parseCommand.0+0x3fc>)
 80014a2:	f002 fe67 	bl	8004174 <HAL_UART_Transmit>
 80014a6:	e013      	b.n	80014d0 <parseCommand.0+0x3f0>
        sprintf(dbgMsg, "ERR: Unknown command: '%s'\n", line);
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	490c      	ldr	r1, [pc, #48]	@ (80014e0 <parseCommand.0+0x400>)
 80014b0:	4618      	mov	r0, r3
 80014b2:	f004 fb31 	bl	8005b18 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)dbgMsg, strlen(dbgMsg), 100);
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7fe fed8 	bl	8000270 <strlen>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	f107 010c 	add.w	r1, r7, #12
 80014c8:	2364      	movs	r3, #100	@ 0x64
 80014ca:	4804      	ldr	r0, [pc, #16]	@ (80014dc <parseCommand.0+0x3fc>)
 80014cc:	f002 fe52 	bl	8004174 <HAL_UART_Transmit>
}
 80014d0:	37fc      	adds	r7, #252	@ 0xfc
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd90      	pop	{r4, r7, pc}
 80014d6:	bf00      	nop
 80014d8:	0800a054 	.word	0x0800a054
 80014dc:	2000027c 	.word	0x2000027c
 80014e0:	0800a07c 	.word	0x0800a07c

080014e4 <doMotorStepping.2>:
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b08d      	sub	sp, #52	@ 0x34
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4664      	mov	r4, ip
 80014ec:	f8c7 c004 	str.w	ip, [r7, #4]
    uint32_t now_us = get_micros();
 80014f0:	f7ff fc46 	bl	8000d80 <get_micros>
 80014f4:	61f8      	str	r0, [r7, #28]
    if (motor1_resetting)
 80014f6:	4b87      	ldr	r3, [pc, #540]	@ (8001714 <doMotorStepping.2+0x230>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d045      	beq.n	800158a <doMotorStepping.2+0xa6>
        int32_t pos = getEncoderPos(1);
 80014fe:	46a4      	mov	ip, r4
 8001500:	2001      	movs	r0, #1
 8001502:	f7ff fd61 	bl	8000fc8 <getEncoderPos.1>
 8001506:	61b8      	str	r0, [r7, #24]
        if (pos == 0)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d103      	bne.n	8001516 <doMotorStepping.2+0x32>
            motor1_resetting = false;
 800150e:	4b81      	ldr	r3, [pc, #516]	@ (8001714 <doMotorStepping.2+0x230>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
 8001514:	e075      	b.n	8001602 <doMotorStepping.2+0x11e>
        else if (now_us >= motor1_nextStepTime_us)
 8001516:	4b80      	ldr	r3, [pc, #512]	@ (8001718 <doMotorStepping.2+0x234>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	429a      	cmp	r2, r3
 800151e:	d370      	bcc.n	8001602 <doMotorStepping.2+0x11e>
            GPIO_PinState dir = (pos > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	2b00      	cmp	r3, #0
 8001524:	bfd4      	ite	le
 8001526:	2301      	movle	r3, #1
 8001528:	2300      	movgt	r3, #0
 800152a:	b2db      	uxtb	r3, r3
 800152c:	75fb      	strb	r3, [r7, #23]
            HAL_GPIO_WritePin(Motor1_DIR_GPIO_Port, Motor1_DIR_Pin, dir);
 800152e:	7dfb      	ldrb	r3, [r7, #23]
 8001530:	461a      	mov	r2, r3
 8001532:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001536:	4879      	ldr	r0, [pc, #484]	@ (800171c <doMotorStepping.2+0x238>)
 8001538:	f001 f82c 	bl	8002594 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(Motor1_PUL_GPIO_Port, Motor1_PUL_Pin, GPIO_PIN_SET);
 800153c:	2201      	movs	r2, #1
 800153e:	2180      	movs	r1, #128	@ 0x80
 8001540:	4876      	ldr	r0, [pc, #472]	@ (800171c <doMotorStepping.2+0x238>)
 8001542:	f001 f827 	bl	8002594 <HAL_GPIO_WritePin>
            delay_us(10);  // 10 us pulse width
 8001546:	200a      	movs	r0, #10
 8001548:	f7ff fbf4 	bl	8000d34 <delay_us>
            HAL_GPIO_WritePin(Motor1_PUL_GPIO_Port, Motor1_PUL_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	2180      	movs	r1, #128	@ 0x80
 8001550:	4872      	ldr	r0, [pc, #456]	@ (800171c <doMotorStepping.2+0x238>)
 8001552:	f001 f81f 	bl	8002594 <HAL_GPIO_WritePin>
            uint32_t interval_us = MAX_STEP_INTERVAL_US - (uint32_t)(motor1_speedFactor * (MAX_STEP_INTERVAL_US - MIN_STEP_INTERVAL_US));
 8001556:	4b72      	ldr	r3, [pc, #456]	@ (8001720 <doMotorStepping.2+0x23c>)
 8001558:	edd3 7a00 	vldr	s15, [r3]
 800155c:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8001724 <doMotorStepping.2+0x240>
 8001560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001568:	ee17 3a90 	vmov	r3, s15
 800156c:	f5c3 33c3 	rsb	r3, r3, #99840	@ 0x18600
 8001570:	33a0      	adds	r3, #160	@ 0xa0
 8001572:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (interval_us < MIN_STEP_INTERVAL_US) interval_us = MIN_STEP_INTERVAL_US;
 8001574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001576:	2b09      	cmp	r3, #9
 8001578:	d801      	bhi.n	800157e <doMotorStepping.2+0x9a>
 800157a:	230a      	movs	r3, #10
 800157c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            motor1_nextStepTime_us = now_us + interval_us;
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001582:	4413      	add	r3, r2
 8001584:	4a64      	ldr	r2, [pc, #400]	@ (8001718 <doMotorStepping.2+0x234>)
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	e03b      	b.n	8001602 <doMotorStepping.2+0x11e>
    else if (motor1_stepsRemaining > 0 && now_us >= motor1_nextStepTime_us)
 800158a:	4b67      	ldr	r3, [pc, #412]	@ (8001728 <doMotorStepping.2+0x244>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	dd37      	ble.n	8001602 <doMotorStepping.2+0x11e>
 8001592:	4b61      	ldr	r3, [pc, #388]	@ (8001718 <doMotorStepping.2+0x234>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	69fa      	ldr	r2, [r7, #28]
 8001598:	429a      	cmp	r2, r3
 800159a:	d332      	bcc.n	8001602 <doMotorStepping.2+0x11e>
        HAL_GPIO_WritePin(Motor1_DIR_GPIO_Port, Motor1_DIR_Pin, motor1_direction);
 800159c:	4b63      	ldr	r3, [pc, #396]	@ (800172c <doMotorStepping.2+0x248>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015a6:	485d      	ldr	r0, [pc, #372]	@ (800171c <doMotorStepping.2+0x238>)
 80015a8:	f000 fff4 	bl	8002594 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Motor1_PUL_GPIO_Port, Motor1_PUL_Pin, GPIO_PIN_SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2180      	movs	r1, #128	@ 0x80
 80015b0:	485a      	ldr	r0, [pc, #360]	@ (800171c <doMotorStepping.2+0x238>)
 80015b2:	f000 ffef 	bl	8002594 <HAL_GPIO_WritePin>
        delay_us(10);
 80015b6:	200a      	movs	r0, #10
 80015b8:	f7ff fbbc 	bl	8000d34 <delay_us>
        HAL_GPIO_WritePin(Motor1_PUL_GPIO_Port, Motor1_PUL_Pin, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	2180      	movs	r1, #128	@ 0x80
 80015c0:	4856      	ldr	r0, [pc, #344]	@ (800171c <doMotorStepping.2+0x238>)
 80015c2:	f000 ffe7 	bl	8002594 <HAL_GPIO_WritePin>
        motor1_stepsRemaining--;
 80015c6:	4b58      	ldr	r3, [pc, #352]	@ (8001728 <doMotorStepping.2+0x244>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	4a56      	ldr	r2, [pc, #344]	@ (8001728 <doMotorStepping.2+0x244>)
 80015ce:	6013      	str	r3, [r2, #0]
        uint32_t interval_us = MAX_STEP_INTERVAL_US - (uint32_t)(motor1_speedFactor * (MAX_STEP_INTERVAL_US - MIN_STEP_INTERVAL_US));
 80015d0:	4b53      	ldr	r3, [pc, #332]	@ (8001720 <doMotorStepping.2+0x23c>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001724 <doMotorStepping.2+0x240>
 80015da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e2:	ee17 3a90 	vmov	r3, s15
 80015e6:	f5c3 33c3 	rsb	r3, r3, #99840	@ 0x18600
 80015ea:	33a0      	adds	r3, #160	@ 0xa0
 80015ec:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (interval_us < MIN_STEP_INTERVAL_US) interval_us = MIN_STEP_INTERVAL_US;
 80015ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f0:	2b09      	cmp	r3, #9
 80015f2:	d801      	bhi.n	80015f8 <doMotorStepping.2+0x114>
 80015f4:	230a      	movs	r3, #10
 80015f6:	62bb      	str	r3, [r7, #40]	@ 0x28
        motor1_nextStepTime_us = now_us + interval_us;
 80015f8:	69fa      	ldr	r2, [r7, #28]
 80015fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015fc:	4413      	add	r3, r2
 80015fe:	4a46      	ldr	r2, [pc, #280]	@ (8001718 <doMotorStepping.2+0x234>)
 8001600:	6013      	str	r3, [r2, #0]
    if (motor2_resetting)
 8001602:	4b4b      	ldr	r3, [pc, #300]	@ (8001730 <doMotorStepping.2+0x24c>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d044      	beq.n	8001694 <doMotorStepping.2+0x1b0>
        int32_t pos = getEncoderPos(2);
 800160a:	46a4      	mov	ip, r4
 800160c:	2002      	movs	r0, #2
 800160e:	f7ff fcdb 	bl	8000fc8 <getEncoderPos.1>
 8001612:	6138      	str	r0, [r7, #16]
        if (pos == 0)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d103      	bne.n	8001622 <doMotorStepping.2+0x13e>
            motor2_resetting = false;
 800161a:	4b45      	ldr	r3, [pc, #276]	@ (8001730 <doMotorStepping.2+0x24c>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
}
 8001620:	e073      	b.n	800170a <doMotorStepping.2+0x226>
        else if (now_us >= motor2_nextStepTime_us)
 8001622:	4b44      	ldr	r3, [pc, #272]	@ (8001734 <doMotorStepping.2+0x250>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	429a      	cmp	r2, r3
 800162a:	d36e      	bcc.n	800170a <doMotorStepping.2+0x226>
            GPIO_PinState dir = (pos > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	2b00      	cmp	r3, #0
 8001630:	bfd4      	ite	le
 8001632:	2301      	movle	r3, #1
 8001634:	2300      	movgt	r3, #0
 8001636:	b2db      	uxtb	r3, r3
 8001638:	73fb      	strb	r3, [r7, #15]
            HAL_GPIO_WritePin(Motor2_DIR_GPIO_Port, Motor2_DIR_Pin, dir);
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	461a      	mov	r2, r3
 800163e:	2180      	movs	r1, #128	@ 0x80
 8001640:	483d      	ldr	r0, [pc, #244]	@ (8001738 <doMotorStepping.2+0x254>)
 8001642:	f000 ffa7 	bl	8002594 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(Motor2_PUL_GPIO_Port, Motor2_PUL_Pin, GPIO_PIN_SET);
 8001646:	2201      	movs	r2, #1
 8001648:	2140      	movs	r1, #64	@ 0x40
 800164a:	483b      	ldr	r0, [pc, #236]	@ (8001738 <doMotorStepping.2+0x254>)
 800164c:	f000 ffa2 	bl	8002594 <HAL_GPIO_WritePin>
            delay_us(10);
 8001650:	200a      	movs	r0, #10
 8001652:	f7ff fb6f 	bl	8000d34 <delay_us>
            HAL_GPIO_WritePin(Motor2_PUL_GPIO_Port, Motor2_PUL_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	2140      	movs	r1, #64	@ 0x40
 800165a:	4837      	ldr	r0, [pc, #220]	@ (8001738 <doMotorStepping.2+0x254>)
 800165c:	f000 ff9a 	bl	8002594 <HAL_GPIO_WritePin>
            uint32_t interval_us = MAX_STEP_INTERVAL_US - (uint32_t)(motor2_speedFactor * (MAX_STEP_INTERVAL_US - MIN_STEP_INTERVAL_US));
 8001660:	4b36      	ldr	r3, [pc, #216]	@ (800173c <doMotorStepping.2+0x258>)
 8001662:	edd3 7a00 	vldr	s15, [r3]
 8001666:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001724 <doMotorStepping.2+0x240>
 800166a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800166e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001672:	ee17 3a90 	vmov	r3, s15
 8001676:	f5c3 33c3 	rsb	r3, r3, #99840	@ 0x18600
 800167a:	33a0      	adds	r3, #160	@ 0xa0
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
            if (interval_us < MIN_STEP_INTERVAL_US) interval_us = MIN_STEP_INTERVAL_US;
 800167e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001680:	2b09      	cmp	r3, #9
 8001682:	d801      	bhi.n	8001688 <doMotorStepping.2+0x1a4>
 8001684:	230a      	movs	r3, #10
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
            motor2_nextStepTime_us = now_us + interval_us;
 8001688:	69fa      	ldr	r2, [r7, #28]
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	4413      	add	r3, r2
 800168e:	4a29      	ldr	r2, [pc, #164]	@ (8001734 <doMotorStepping.2+0x250>)
 8001690:	6013      	str	r3, [r2, #0]
}
 8001692:	e03a      	b.n	800170a <doMotorStepping.2+0x226>
    else if (motor2_stepsRemaining > 0 && now_us >= motor2_nextStepTime_us)
 8001694:	4b2a      	ldr	r3, [pc, #168]	@ (8001740 <doMotorStepping.2+0x25c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	dd36      	ble.n	800170a <doMotorStepping.2+0x226>
 800169c:	4b25      	ldr	r3, [pc, #148]	@ (8001734 <doMotorStepping.2+0x250>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d331      	bcc.n	800170a <doMotorStepping.2+0x226>
        HAL_GPIO_WritePin(Motor2_DIR_GPIO_Port, Motor2_DIR_Pin, motor2_direction);
 80016a6:	4b27      	ldr	r3, [pc, #156]	@ (8001744 <doMotorStepping.2+0x260>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	2180      	movs	r1, #128	@ 0x80
 80016ae:	4822      	ldr	r0, [pc, #136]	@ (8001738 <doMotorStepping.2+0x254>)
 80016b0:	f000 ff70 	bl	8002594 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Motor2_PUL_GPIO_Port, Motor2_PUL_Pin, GPIO_PIN_SET);
 80016b4:	2201      	movs	r2, #1
 80016b6:	2140      	movs	r1, #64	@ 0x40
 80016b8:	481f      	ldr	r0, [pc, #124]	@ (8001738 <doMotorStepping.2+0x254>)
 80016ba:	f000 ff6b 	bl	8002594 <HAL_GPIO_WritePin>
        delay_us(10);
 80016be:	200a      	movs	r0, #10
 80016c0:	f7ff fb38 	bl	8000d34 <delay_us>
        HAL_GPIO_WritePin(Motor2_PUL_GPIO_Port, Motor2_PUL_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2140      	movs	r1, #64	@ 0x40
 80016c8:	481b      	ldr	r0, [pc, #108]	@ (8001738 <doMotorStepping.2+0x254>)
 80016ca:	f000 ff63 	bl	8002594 <HAL_GPIO_WritePin>
        motor2_stepsRemaining--;
 80016ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <doMotorStepping.2+0x25c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001740 <doMotorStepping.2+0x25c>)
 80016d6:	6013      	str	r3, [r2, #0]
        uint32_t interval_us = MAX_STEP_INTERVAL_US - (uint32_t)(motor2_speedFactor * (MAX_STEP_INTERVAL_US - MIN_STEP_INTERVAL_US));
 80016d8:	4b18      	ldr	r3, [pc, #96]	@ (800173c <doMotorStepping.2+0x258>)
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001724 <doMotorStepping.2+0x240>
 80016e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ea:	ee17 3a90 	vmov	r3, s15
 80016ee:	f5c3 33c3 	rsb	r3, r3, #99840	@ 0x18600
 80016f2:	33a0      	adds	r3, #160	@ 0xa0
 80016f4:	623b      	str	r3, [r7, #32]
        if (interval_us < MIN_STEP_INTERVAL_US) interval_us = MIN_STEP_INTERVAL_US;
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	2b09      	cmp	r3, #9
 80016fa:	d801      	bhi.n	8001700 <doMotorStepping.2+0x21c>
 80016fc:	230a      	movs	r3, #10
 80016fe:	623b      	str	r3, [r7, #32]
        motor2_nextStepTime_us = now_us + interval_us;
 8001700:	69fa      	ldr	r2, [r7, #28]
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	4413      	add	r3, r2
 8001706:	4a0b      	ldr	r2, [pc, #44]	@ (8001734 <doMotorStepping.2+0x250>)
 8001708:	6013      	str	r3, [r2, #0]
}
 800170a:	bf00      	nop
 800170c:	3734      	adds	r7, #52	@ 0x34
 800170e:	46bd      	mov	sp, r7
 8001710:	bd90      	pop	{r4, r7, pc}
 8001712:	bf00      	nop
 8001714:	2000030c 	.word	0x2000030c
 8001718:	20000304 	.word	0x20000304
 800171c:	48000800 	.word	0x48000800
 8001720:	20000000 	.word	0x20000000
 8001724:	47c34b00 	.word	0x47c34b00
 8001728:	200002fc 	.word	0x200002fc
 800172c:	20000008 	.word	0x20000008
 8001730:	2000030d 	.word	0x2000030d
 8001734:	20000308 	.word	0x20000308
 8001738:	48000400 	.word	0x48000400
 800173c:	20000004 	.word	0x20000004
 8001740:	20000300 	.word	0x20000300
 8001744:	20000009 	.word	0x20000009

08001748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b09c      	sub	sp, #112	@ 0x70
 800174c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001752:	2228      	movs	r2, #40	@ 0x28
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f005 fa28 	bl	8006bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800175c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800176c:	463b      	mov	r3, r7
 800176e:	2234      	movs	r2, #52	@ 0x34
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f005 fa1a 	bl	8006bac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001778:	2302      	movs	r3, #2
 800177a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800177c:	2301      	movs	r3, #1
 800177e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001780:	2310      	movs	r3, #16
 8001782:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001784:	2302      	movs	r3, #2
 8001786:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001788:	2300      	movs	r3, #0
 800178a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800178c:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001790:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001792:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001796:	4618      	mov	r0, r3
 8001798:	f000 ff14 	bl	80025c4 <HAL_RCC_OscConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80017a2:	f000 f985 	bl	8001ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a6:	230f      	movs	r3, #15
 80017a8:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017aa:	2302      	movs	r3, #2
 80017ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017c0:	2102      	movs	r1, #2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f001 ff0c 	bl	80035e0 <HAL_RCC_ClockConfig>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80017ce:	f000 f96f 	bl	8001ab0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80017d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017d6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80017d8:	2300      	movs	r3, #0
 80017da:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017dc:	463b      	mov	r3, r7
 80017de:	4618      	mov	r0, r3
 80017e0:	f002 f926 	bl	8003a30 <HAL_RCCEx_PeriphCLKConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80017ea:	f000 f961 	bl	8001ab0 <Error_Handler>
  }
}
 80017ee:	bf00      	nop
 80017f0:	3770      	adds	r7, #112	@ 0x70
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	@ 0x30
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	2224      	movs	r2, #36	@ 0x24
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f005 f9d0 	bl	8006bac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180c:	463b      	mov	r3, r7
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001816:	4b23      	ldr	r3, [pc, #140]	@ (80018a4 <MX_TIM1_Init+0xac>)
 8001818:	4a23      	ldr	r2, [pc, #140]	@ (80018a8 <MX_TIM1_Init+0xb0>)
 800181a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800181c:	4b21      	ldr	r3, [pc, #132]	@ (80018a4 <MX_TIM1_Init+0xac>)
 800181e:	2200      	movs	r2, #0
 8001820:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001822:	4b20      	ldr	r3, [pc, #128]	@ (80018a4 <MX_TIM1_Init+0xac>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001828:	4b1e      	ldr	r3, [pc, #120]	@ (80018a4 <MX_TIM1_Init+0xac>)
 800182a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800182e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001830:	4b1c      	ldr	r3, [pc, #112]	@ (80018a4 <MX_TIM1_Init+0xac>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001836:	4b1b      	ldr	r3, [pc, #108]	@ (80018a4 <MX_TIM1_Init+0xac>)
 8001838:	2200      	movs	r2, #0
 800183a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183c:	4b19      	ldr	r3, [pc, #100]	@ (80018a4 <MX_TIM1_Init+0xac>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001842:	2301      	movs	r3, #1
 8001844:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800184a:	2301      	movs	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001856:	2300      	movs	r3, #0
 8001858:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800185a:	2301      	movs	r3, #1
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800185e:	2300      	movs	r3, #0
 8001860:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	4619      	mov	r1, r3
 800186c:	480d      	ldr	r0, [pc, #52]	@ (80018a4 <MX_TIM1_Init+0xac>)
 800186e:	f002 fa6f 	bl	8003d50 <HAL_TIM_Encoder_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001878:	f000 f91a 	bl	8001ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187c:	2300      	movs	r3, #0
 800187e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001888:	463b      	mov	r3, r7
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	@ (80018a4 <MX_TIM1_Init+0xac>)
 800188e:	f002 fbbd 	bl	800400c <HAL_TIMEx_MasterConfigSynchronization>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001898:	f000 f90a 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	3730      	adds	r7, #48	@ 0x30
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200001fc 	.word	0x200001fc
 80018a8:	40012c00 	.word	0x40012c00

080018ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08c      	sub	sp, #48	@ 0x30
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	2224      	movs	r2, #36	@ 0x24
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f005 f976 	bl	8006bac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c0:	463b      	mov	r3, r7
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018ca:	4b21      	ldr	r3, [pc, #132]	@ (8001950 <MX_TIM2_Init+0xa4>)
 80018cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001950 <MX_TIM2_Init+0xa4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001950 <MX_TIM2_Init+0xa4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80018de:	4b1c      	ldr	r3, [pc, #112]	@ (8001950 <MX_TIM2_Init+0xa4>)
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001950 <MX_TIM2_Init+0xa4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ec:	4b18      	ldr	r3, [pc, #96]	@ (8001950 <MX_TIM2_Init+0xa4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018fa:	2301      	movs	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800190a:	2301      	movs	r3, #1
 800190c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800190e:	2300      	movs	r3, #0
 8001910:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	4619      	mov	r1, r3
 800191c:	480c      	ldr	r0, [pc, #48]	@ (8001950 <MX_TIM2_Init+0xa4>)
 800191e:	f002 fa17 	bl	8003d50 <HAL_TIM_Encoder_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001928:	f000 f8c2 	bl	8001ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192c:	2300      	movs	r3, #0
 800192e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001934:	463b      	mov	r3, r7
 8001936:	4619      	mov	r1, r3
 8001938:	4805      	ldr	r0, [pc, #20]	@ (8001950 <MX_TIM2_Init+0xa4>)
 800193a:	f002 fb67 	bl	800400c <HAL_TIMEx_MasterConfigSynchronization>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001944:	f000 f8b4 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	3730      	adds	r7, #48	@ 0x30
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	2000023c 	.word	0x2000023c

08001954 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001958:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <MX_USART2_UART_Init+0x58>)
 800195a:	4a15      	ldr	r2, [pc, #84]	@ (80019b0 <MX_USART2_UART_Init+0x5c>)
 800195c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800195e:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <MX_USART2_UART_Init+0x58>)
 8001960:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001966:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <MX_USART2_UART_Init+0x58>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800196c:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <MX_USART2_UART_Init+0x58>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001972:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <MX_USART2_UART_Init+0x58>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001978:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <MX_USART2_UART_Init+0x58>)
 800197a:	220c      	movs	r2, #12
 800197c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197e:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <MX_USART2_UART_Init+0x58>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001984:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <MX_USART2_UART_Init+0x58>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800198a:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <MX_USART2_UART_Init+0x58>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001990:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <MX_USART2_UART_Init+0x58>)
 8001992:	2200      	movs	r2, #0
 8001994:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001996:	4805      	ldr	r0, [pc, #20]	@ (80019ac <MX_USART2_UART_Init+0x58>)
 8001998:	f002 fb9e 	bl	80040d8 <HAL_UART_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019a2:	f000 f885 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	2000027c 	.word	0x2000027c
 80019b0:	40004400 	.word	0x40004400

080019b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	@ 0x28
 80019b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ca:	4b35      	ldr	r3, [pc, #212]	@ (8001aa0 <MX_GPIO_Init+0xec>)
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	4a34      	ldr	r2, [pc, #208]	@ (8001aa0 <MX_GPIO_Init+0xec>)
 80019d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80019d4:	6153      	str	r3, [r2, #20]
 80019d6:	4b32      	ldr	r3, [pc, #200]	@ (8001aa0 <MX_GPIO_Init+0xec>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019e2:	4b2f      	ldr	r3, [pc, #188]	@ (8001aa0 <MX_GPIO_Init+0xec>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	4a2e      	ldr	r2, [pc, #184]	@ (8001aa0 <MX_GPIO_Init+0xec>)
 80019e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019ec:	6153      	str	r3, [r2, #20]
 80019ee:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa0 <MX_GPIO_Init+0xec>)
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	4b29      	ldr	r3, [pc, #164]	@ (8001aa0 <MX_GPIO_Init+0xec>)
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	4a28      	ldr	r2, [pc, #160]	@ (8001aa0 <MX_GPIO_Init+0xec>)
 8001a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a04:	6153      	str	r3, [r2, #20]
 8001a06:	4b26      	ldr	r3, [pc, #152]	@ (8001aa0 <MX_GPIO_Init+0xec>)
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	4b23      	ldr	r3, [pc, #140]	@ (8001aa0 <MX_GPIO_Init+0xec>)
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	4a22      	ldr	r2, [pc, #136]	@ (8001aa0 <MX_GPIO_Init+0xec>)
 8001a18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a1c:	6153      	str	r3, [r2, #20]
 8001a1e:	4b20      	ldr	r3, [pc, #128]	@ (8001aa0 <MX_GPIO_Init+0xec>)
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|Motor2_PUL_Pin|Motor2_DIR_Pin, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f44f 5103 	mov.w	r1, #8384	@ 0x20c0
 8001a30:	481c      	ldr	r0, [pc, #112]	@ (8001aa4 <MX_GPIO_Init+0xf0>)
 8001a32:	f000 fdaf 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Motor1_PUL_Pin|Motor1_DIR_Pin, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8001a3c:	481a      	ldr	r0, [pc, #104]	@ (8001aa8 <MX_GPIO_Init+0xf4>)
 8001a3e:	f000 fda9 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a48:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <MX_GPIO_Init+0xf8>)
 8001a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	4814      	ldr	r0, [pc, #80]	@ (8001aa8 <MX_GPIO_Init+0xf4>)
 8001a58:	f000 fc2a 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Motor2_PUL_Pin Motor2_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Motor2_PUL_Pin|Motor2_DIR_Pin;
 8001a5c:	f44f 5303 	mov.w	r3, #8384	@ 0x20c0
 8001a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	480b      	ldr	r0, [pc, #44]	@ (8001aa4 <MX_GPIO_Init+0xf0>)
 8001a76:	f000 fc1b 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor1_PUL_Pin Motor1_DIR_Pin */
  GPIO_InitStruct.Pin = Motor1_PUL_Pin|Motor1_DIR_Pin;
 8001a7a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a80:	2301      	movs	r3, #1
 8001a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4805      	ldr	r0, [pc, #20]	@ (8001aa8 <MX_GPIO_Init+0xf4>)
 8001a94:	f000 fc0c 	bl	80022b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a98:	bf00      	nop
 8001a9a:	3728      	adds	r7, #40	@ 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	48000400 	.word	0x48000400
 8001aa8:	48000800 	.word	0x48000800
 8001aac:	10210000 	.word	0x10210000

08001ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab4:	b672      	cpsid	i
}
 8001ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <Error_Handler+0x8>

08001abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b00 <HAL_MspInit+0x44>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b00 <HAL_MspInit+0x44>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6193      	str	r3, [r2, #24]
 8001ace:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <HAL_MspInit+0x44>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	4b09      	ldr	r3, [pc, #36]	@ (8001b00 <HAL_MspInit+0x44>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	4a08      	ldr	r2, [pc, #32]	@ (8001b00 <HAL_MspInit+0x44>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ae4:	61d3      	str	r3, [r2, #28]
 8001ae6:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <HAL_MspInit+0x44>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001af2:	2007      	movs	r0, #7
 8001af4:	f000 fb5c 	bl	80021b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40021000 	.word	0x40021000

08001b04 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	@ 0x30
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 031c 	add.w	r3, r7, #28
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a2f      	ldr	r2, [pc, #188]	@ (8001be0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d12a      	bne.n	8001b7c <HAL_TIM_Encoder_MspInit+0x78>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b26:	4b2f      	ldr	r3, [pc, #188]	@ (8001be4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	4a2e      	ldr	r2, [pc, #184]	@ (8001be4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b2c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b30:	6193      	str	r3, [r2, #24]
 8001b32:	4b2c      	ldr	r3, [pc, #176]	@ (8001be4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b3a:	61bb      	str	r3, [r7, #24]
 8001b3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	4b29      	ldr	r3, [pc, #164]	@ (8001be4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	4a28      	ldr	r2, [pc, #160]	@ (8001be4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b48:	6153      	str	r3, [r2, #20]
 8001b4a:	4b26      	ldr	r3, [pc, #152]	@ (8001be4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder2_A__Pin|Encoder2_B__Pin;
 8001b56:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b68:	2306      	movs	r3, #6
 8001b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	f107 031c 	add.w	r3, r7, #28
 8001b70:	4619      	mov	r1, r3
 8001b72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b76:	f000 fb9b 	bl	80022b0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b7a:	e02d      	b.n	8001bd8 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b84:	d128      	bne.n	8001bd8 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b86:	4b17      	ldr	r3, [pc, #92]	@ (8001be4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	4a16      	ldr	r2, [pc, #88]	@ (8001be4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	61d3      	str	r3, [r2, #28]
 8001b92:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	4a10      	ldr	r2, [pc, #64]	@ (8001be4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba8:	6153      	str	r3, [r2, #20]
 8001baa:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder1_A__Pin|Encoder1_B__Pin;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bd4:	f000 fb6c 	bl	80022b0 <HAL_GPIO_Init>
}
 8001bd8:	bf00      	nop
 8001bda:	3730      	adds	r7, #48	@ 0x30
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40012c00 	.word	0x40012c00
 8001be4:	40021000 	.word	0x40021000

08001be8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	@ 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1b      	ldr	r2, [pc, #108]	@ (8001c74 <HAL_UART_MspInit+0x8c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d130      	bne.n	8001c6c <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <HAL_UART_MspInit+0x90>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8001c78 <HAL_UART_MspInit+0x90>)
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c14:	61d3      	str	r3, [r2, #28]
 8001c16:	4b18      	ldr	r3, [pc, #96]	@ (8001c78 <HAL_UART_MspInit+0x90>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <HAL_UART_MspInit+0x90>)
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	4a14      	ldr	r2, [pc, #80]	@ (8001c78 <HAL_UART_MspInit+0x90>)
 8001c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c2c:	6153      	str	r3, [r2, #20]
 8001c2e:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <HAL_UART_MspInit+0x90>)
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c3a:	230c      	movs	r3, #12
 8001c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c4a:	2307      	movs	r3, #7
 8001c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c58:	f000 fb2a 	bl	80022b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2100      	movs	r1, #0
 8001c60:	2026      	movs	r0, #38	@ 0x26
 8001c62:	f000 fab0 	bl	80021c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c66:	2026      	movs	r0, #38	@ 0x26
 8001c68:	f000 fac9 	bl	80021fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c6c:	bf00      	nop
 8001c6e:	3728      	adds	r7, #40	@ 0x28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40004400 	.word	0x40004400
 8001c78:	40021000 	.word	0x40021000

08001c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <NMI_Handler+0x4>

08001c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <HardFault_Handler+0x4>

08001c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <MemManage_Handler+0x4>

08001c94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <BusFault_Handler+0x4>

08001c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <UsageFault_Handler+0x4>

08001ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd2:	f000 f959 	bl	8001f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ce0:	4802      	ldr	r0, [pc, #8]	@ (8001cec <USART2_IRQHandler+0x10>)
 8001ce2:	f002 fb7b 	bl	80043dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	2000027c 	.word	0x2000027c

08001cf0 <_getpid>:
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <_kill>:
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	f004 ffbf 	bl	8006c8c <__errno>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2216      	movs	r2, #22
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <_exit>:
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ffe7 	bl	8001d00 <_kill>
 8001d32:	bf00      	nop
 8001d34:	e7fd      	b.n	8001d32 <_exit+0x12>

08001d36 <_read>:
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	e00a      	b.n	8001d5e <_read+0x28>
 8001d48:	f3af 8000 	nop.w
 8001d4c:	4601      	mov	r1, r0
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	60ba      	str	r2, [r7, #8]
 8001d54:	b2ca      	uxtb	r2, r1
 8001d56:	701a      	strb	r2, [r3, #0]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	dbf0      	blt.n	8001d48 <_read+0x12>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <_write>:
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	e009      	b.n	8001d96 <_write+0x26>
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	60ba      	str	r2, [r7, #8]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f3af 8000 	nop.w
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	3301      	adds	r3, #1
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	dbf1      	blt.n	8001d82 <_write+0x12>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <_close>:
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <_fstat>:
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <_isatty>:
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	2301      	movs	r3, #1
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <_lseek>:
 8001df6:	b480      	push	{r7}
 8001df8:	b085      	sub	sp, #20
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	2300      	movs	r3, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <_sbrk>:
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	4a14      	ldr	r2, [pc, #80]	@ (8001e6c <_sbrk+0x5c>)
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <_sbrk+0x60>)
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	4b13      	ldr	r3, [pc, #76]	@ (8001e74 <_sbrk+0x64>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d102      	bne.n	8001e32 <_sbrk+0x22>
 8001e2c:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <_sbrk+0x64>)
 8001e2e:	4a12      	ldr	r2, [pc, #72]	@ (8001e78 <_sbrk+0x68>)
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	4b10      	ldr	r3, [pc, #64]	@ (8001e74 <_sbrk+0x64>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d207      	bcs.n	8001e50 <_sbrk+0x40>
 8001e40:	f004 ff24 	bl	8006c8c <__errno>
 8001e44:	4603      	mov	r3, r0
 8001e46:	220c      	movs	r2, #12
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e4e:	e009      	b.n	8001e64 <_sbrk+0x54>
 8001e50:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <_sbrk+0x64>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b07      	ldr	r3, [pc, #28]	@ (8001e74 <_sbrk+0x64>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	4a05      	ldr	r2, [pc, #20]	@ (8001e74 <_sbrk+0x64>)
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20004000 	.word	0x20004000
 8001e70:	00000400 	.word	0x00000400
 8001e74:	2000095c 	.word	0x2000095c
 8001e78:	20000ab0 	.word	0x20000ab0

08001e7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e80:	4b08      	ldr	r3, [pc, #32]	@ (8001ea4 <SystemInit+0x28>)
 8001e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e86:	4a07      	ldr	r2, [pc, #28]	@ (8001ea4 <SystemInit+0x28>)
 8001e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e90:	4b04      	ldr	r3, [pc, #16]	@ (8001ea4 <SystemInit+0x28>)
 8001e92:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e96:	609a      	str	r2, [r3, #8]
#endif
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ea8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ee0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001eac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001eae:	e003      	b.n	8001eb8 <LoopCopyDataInit>

08001eb0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001eb2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001eb4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001eb6:	3104      	adds	r1, #4

08001eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001eb8:	480b      	ldr	r0, [pc, #44]	@ (8001ee8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001eba:	4b0c      	ldr	r3, [pc, #48]	@ (8001eec <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ebc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ebe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ec0:	d3f6      	bcc.n	8001eb0 <CopyDataInit>
	ldr	r2, =_sbss
 8001ec2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ec4:	e002      	b.n	8001ecc <LoopFillZerobss>

08001ec6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ec6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ec8:	f842 3b04 	str.w	r3, [r2], #4

08001ecc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ecc:	4b09      	ldr	r3, [pc, #36]	@ (8001ef4 <LoopForever+0x16>)
	cmp	r2, r3
 8001ece:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ed0:	d3f9      	bcc.n	8001ec6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ed2:	f7ff ffd3 	bl	8001e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ed6:	f004 fedf 	bl	8006c98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eda:	f7ff f895 	bl	8001008 <main>

08001ede <LoopForever>:

LoopForever:
    b LoopForever
 8001ede:	e7fe      	b.n	8001ede <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ee0:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8001ee4:	0800a530 	.word	0x0800a530
	ldr	r0, =_sdata
 8001ee8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001eec:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8001ef0:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8001ef4:	20000ab0 	.word	0x20000ab0

08001ef8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ef8:	e7fe      	b.n	8001ef8 <ADC1_IRQHandler>
	...

08001efc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f00:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <HAL_Init+0x28>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a07      	ldr	r2, [pc, #28]	@ (8001f24 <HAL_Init+0x28>)
 8001f06:	f043 0310 	orr.w	r3, r3, #16
 8001f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	f000 f94f 	bl	80021b0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f12:	2000      	movs	r0, #0
 8001f14:	f000 f808 	bl	8001f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f18:	f7ff fdd0 	bl	8001abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40022000 	.word	0x40022000

08001f28 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f30:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <HAL_InitTick+0x54>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <HAL_InitTick+0x58>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f967 	bl	800221a <HAL_SYSTICK_Config>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e00e      	b.n	8001f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b0f      	cmp	r3, #15
 8001f5a:	d80a      	bhi.n	8001f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f64:	f000 f92f 	bl	80021c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f68:	4a06      	ldr	r2, [pc, #24]	@ (8001f84 <HAL_InitTick+0x5c>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e000      	b.n	8001f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	2000000c 	.word	0x2000000c
 8001f80:	20000014 	.word	0x20000014
 8001f84:	20000010 	.word	0x20000010

08001f88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <HAL_IncTick+0x20>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_IncTick+0x24>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	4a04      	ldr	r2, [pc, #16]	@ (8001fac <HAL_IncTick+0x24>)
 8001f9a:	6013      	str	r3, [r2, #0]
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20000014 	.word	0x20000014
 8001fac:	20000960 	.word	0x20000960

08001fb0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001fb4:	4b03      	ldr	r3, [pc, #12]	@ (8001fc4 <HAL_GetTick+0x14>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000960 	.word	0x20000960

08001fc8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd0:	f7ff ffee 	bl	8001fb0 <HAL_GetTick>
 8001fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fe0:	d005      	beq.n	8001fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800200c <HAL_Delay+0x44>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4413      	add	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001fee:	bf00      	nop
 8001ff0:	f7ff ffde 	bl	8001fb0 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d8f7      	bhi.n	8001ff0 <HAL_Delay+0x28>
  {
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000014 	.word	0x20000014

08002010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002020:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800202c:	4013      	ands	r3, r2
 800202e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002038:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800203c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002042:	4a04      	ldr	r2, [pc, #16]	@ (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	60d3      	str	r3, [r2, #12]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800205c:	4b04      	ldr	r3, [pc, #16]	@ (8002070 <__NVIC_GetPriorityGrouping+0x18>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	f003 0307 	and.w	r3, r3, #7
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	2b00      	cmp	r3, #0
 8002084:	db0b      	blt.n	800209e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	f003 021f 	and.w	r2, r3, #31
 800208c:	4907      	ldr	r1, [pc, #28]	@ (80020ac <__NVIC_EnableIRQ+0x38>)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	2001      	movs	r0, #1
 8002096:	fa00 f202 	lsl.w	r2, r0, r2
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000e100 	.word	0xe000e100

080020b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	6039      	str	r1, [r7, #0]
 80020ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	db0a      	blt.n	80020da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	490c      	ldr	r1, [pc, #48]	@ (80020fc <__NVIC_SetPriority+0x4c>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	0112      	lsls	r2, r2, #4
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	440b      	add	r3, r1
 80020d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d8:	e00a      	b.n	80020f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4908      	ldr	r1, [pc, #32]	@ (8002100 <__NVIC_SetPriority+0x50>)
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	3b04      	subs	r3, #4
 80020e8:	0112      	lsls	r2, r2, #4
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	440b      	add	r3, r1
 80020ee:	761a      	strb	r2, [r3, #24]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000e100 	.word	0xe000e100
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	@ 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f1c3 0307 	rsb	r3, r3, #7
 800211e:	2b04      	cmp	r3, #4
 8002120:	bf28      	it	cs
 8002122:	2304      	movcs	r3, #4
 8002124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3304      	adds	r3, #4
 800212a:	2b06      	cmp	r3, #6
 800212c:	d902      	bls.n	8002134 <NVIC_EncodePriority+0x30>
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3b03      	subs	r3, #3
 8002132:	e000      	b.n	8002136 <NVIC_EncodePriority+0x32>
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	401a      	ands	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800214c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	43d9      	mvns	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	4313      	orrs	r3, r2
         );
}
 800215e:	4618      	mov	r0, r3
 8002160:	3724      	adds	r7, #36	@ 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3b01      	subs	r3, #1
 8002178:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800217c:	d301      	bcc.n	8002182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217e:	2301      	movs	r3, #1
 8002180:	e00f      	b.n	80021a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002182:	4a0a      	ldr	r2, [pc, #40]	@ (80021ac <SysTick_Config+0x40>)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800218a:	210f      	movs	r1, #15
 800218c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002190:	f7ff ff8e 	bl	80020b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002194:	4b05      	ldr	r3, [pc, #20]	@ (80021ac <SysTick_Config+0x40>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219a:	4b04      	ldr	r3, [pc, #16]	@ (80021ac <SysTick_Config+0x40>)
 800219c:	2207      	movs	r2, #7
 800219e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	e000e010 	.word	0xe000e010

080021b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff ff29 	bl	8002010 <__NVIC_SetPriorityGrouping>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b086      	sub	sp, #24
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	4603      	mov	r3, r0
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d8:	f7ff ff3e 	bl	8002058 <__NVIC_GetPriorityGrouping>
 80021dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	6978      	ldr	r0, [r7, #20]
 80021e4:	f7ff ff8e 	bl	8002104 <NVIC_EncodePriority>
 80021e8:	4602      	mov	r2, r0
 80021ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ee:	4611      	mov	r1, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff5d 	bl	80020b0 <__NVIC_SetPriority>
}
 80021f6:	bf00      	nop
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	4603      	mov	r3, r0
 8002206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff31 	bl	8002074 <__NVIC_EnableIRQ>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff ffa2 	bl	800216c <SysTick_Config>
 8002228:	4603      	mov	r3, r0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002244:	2b02      	cmp	r3, #2
 8002246:	d005      	beq.n	8002254 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2204      	movs	r2, #4
 800224c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
 8002252:	e027      	b.n	80022a4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 020e 	bic.w	r2, r2, #14
 8002262:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0201 	bic.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f202 	lsl.w	r2, r1, r2
 8002282:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
    } 
  }
  return status;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022be:	e14e      	b.n	800255e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	2101      	movs	r1, #1
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	fa01 f303 	lsl.w	r3, r1, r3
 80022cc:	4013      	ands	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 8140 	beq.w	8002558 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x38>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b12      	cmp	r3, #18
 80022e6:	d123      	bne.n	8002330 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	08da      	lsrs	r2, r3, #3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3208      	adds	r2, #8
 80022f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	220f      	movs	r2, #15
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	08da      	lsrs	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3208      	adds	r2, #8
 800232a:	6939      	ldr	r1, [r7, #16]
 800232c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	2203      	movs	r2, #3
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4013      	ands	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0203 	and.w	r2, r3, #3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d00b      	beq.n	8002384 <HAL_GPIO_Init+0xd4>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d007      	beq.n	8002384 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002378:	2b11      	cmp	r3, #17
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b12      	cmp	r3, #18
 8002382:	d130      	bne.n	80023e6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ba:	2201      	movs	r2, #1
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4013      	ands	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	f003 0201 	and.w	r2, r3, #1
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 809a 	beq.w	8002558 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002424:	4b55      	ldr	r3, [pc, #340]	@ (800257c <HAL_GPIO_Init+0x2cc>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	4a54      	ldr	r2, [pc, #336]	@ (800257c <HAL_GPIO_Init+0x2cc>)
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	6193      	str	r3, [r2, #24]
 8002430:	4b52      	ldr	r3, [pc, #328]	@ (800257c <HAL_GPIO_Init+0x2cc>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800243c:	4a50      	ldr	r2, [pc, #320]	@ (8002580 <HAL_GPIO_Init+0x2d0>)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	3302      	adds	r3, #2
 8002444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002448:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	220f      	movs	r2, #15
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002466:	d013      	beq.n	8002490 <HAL_GPIO_Init+0x1e0>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a46      	ldr	r2, [pc, #280]	@ (8002584 <HAL_GPIO_Init+0x2d4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d00d      	beq.n	800248c <HAL_GPIO_Init+0x1dc>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a45      	ldr	r2, [pc, #276]	@ (8002588 <HAL_GPIO_Init+0x2d8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d007      	beq.n	8002488 <HAL_GPIO_Init+0x1d8>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a44      	ldr	r2, [pc, #272]	@ (800258c <HAL_GPIO_Init+0x2dc>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d101      	bne.n	8002484 <HAL_GPIO_Init+0x1d4>
 8002480:	2303      	movs	r3, #3
 8002482:	e006      	b.n	8002492 <HAL_GPIO_Init+0x1e2>
 8002484:	2305      	movs	r3, #5
 8002486:	e004      	b.n	8002492 <HAL_GPIO_Init+0x1e2>
 8002488:	2302      	movs	r3, #2
 800248a:	e002      	b.n	8002492 <HAL_GPIO_Init+0x1e2>
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <HAL_GPIO_Init+0x1e2>
 8002490:	2300      	movs	r3, #0
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	f002 0203 	and.w	r2, r2, #3
 8002498:	0092      	lsls	r2, r2, #2
 800249a:	4093      	lsls	r3, r2
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024a2:	4937      	ldr	r1, [pc, #220]	@ (8002580 <HAL_GPIO_Init+0x2d0>)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	3302      	adds	r3, #2
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b0:	4b37      	ldr	r3, [pc, #220]	@ (8002590 <HAL_GPIO_Init+0x2e0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002590 <HAL_GPIO_Init+0x2e0>)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024da:	4b2d      	ldr	r3, [pc, #180]	@ (8002590 <HAL_GPIO_Init+0x2e0>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024fe:	4a24      	ldr	r2, [pc, #144]	@ (8002590 <HAL_GPIO_Init+0x2e0>)
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002504:	4b22      	ldr	r3, [pc, #136]	@ (8002590 <HAL_GPIO_Init+0x2e0>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	43db      	mvns	r3, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002528:	4a19      	ldr	r2, [pc, #100]	@ (8002590 <HAL_GPIO_Init+0x2e0>)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800252e:	4b18      	ldr	r3, [pc, #96]	@ (8002590 <HAL_GPIO_Init+0x2e0>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	43db      	mvns	r3, r3
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002552:	4a0f      	ldr	r2, [pc, #60]	@ (8002590 <HAL_GPIO_Init+0x2e0>)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	3301      	adds	r3, #1
 800255c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	f47f aea9 	bne.w	80022c0 <HAL_GPIO_Init+0x10>
  }
}
 800256e:	bf00      	nop
 8002570:	bf00      	nop
 8002572:	371c      	adds	r7, #28
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	40021000 	.word	0x40021000
 8002580:	40010000 	.word	0x40010000
 8002584:	48000400 	.word	0x48000400
 8002588:	48000800 	.word	0x48000800
 800258c:	48000c00 	.word	0x48000c00
 8002590:	40010400 	.word	0x40010400

08002594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
 80025a0:	4613      	mov	r3, r2
 80025a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a4:	787b      	ldrb	r3, [r7, #1]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025aa:	887a      	ldrh	r2, [r7, #2]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025b0:	e002      	b.n	80025b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025b2:	887a      	ldrh	r2, [r7, #2]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025d4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d102      	bne.n	80025ea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	f000 bff4 	b.w	80035d2 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 816d 	beq.w	80028da <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002600:	4bb4      	ldr	r3, [pc, #720]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	2b04      	cmp	r3, #4
 800260a:	d00c      	beq.n	8002626 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800260c:	4bb1      	ldr	r3, [pc, #708]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	2b08      	cmp	r3, #8
 8002616:	d157      	bne.n	80026c8 <HAL_RCC_OscConfig+0x104>
 8002618:	4bae      	ldr	r3, [pc, #696]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002624:	d150      	bne.n	80026c8 <HAL_RCC_OscConfig+0x104>
 8002626:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800262a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800263a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b3f      	cmp	r3, #63	@ 0x3f
 8002646:	d802      	bhi.n	800264e <HAL_RCC_OscConfig+0x8a>
 8002648:	4ba2      	ldr	r3, [pc, #648]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	e015      	b.n	800267a <HAL_RCC_OscConfig+0xb6>
 800264e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002652:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002662:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002666:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800266a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002676:	4b97      	ldr	r3, [pc, #604]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 8002678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800267e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002682:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002686:	fa92 f2a2 	rbit	r2, r2
 800268a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800268e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002692:	fab2 f282 	clz	r2, r2
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	f042 0220 	orr.w	r2, r2, #32
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	f002 021f 	and.w	r2, r2, #31
 80026a2:	2101      	movs	r1, #1
 80026a4:	fa01 f202 	lsl.w	r2, r1, r2
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8114 	beq.w	80028d8 <HAL_RCC_OscConfig+0x314>
 80026b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f040 810b 	bne.w	80028d8 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	f000 bf85 	b.w	80035d2 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026d8:	d106      	bne.n	80026e8 <HAL_RCC_OscConfig+0x124>
 80026da:	4b7e      	ldr	r3, [pc, #504]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a7d      	ldr	r2, [pc, #500]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 80026e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e036      	b.n	8002756 <HAL_RCC_OscConfig+0x192>
 80026e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10c      	bne.n	8002712 <HAL_RCC_OscConfig+0x14e>
 80026f8:	4b76      	ldr	r3, [pc, #472]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a75      	ldr	r2, [pc, #468]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 80026fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	4b73      	ldr	r3, [pc, #460]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a72      	ldr	r2, [pc, #456]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 800270a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	e021      	b.n	8002756 <HAL_RCC_OscConfig+0x192>
 8002712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002716:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002722:	d10c      	bne.n	800273e <HAL_RCC_OscConfig+0x17a>
 8002724:	4b6b      	ldr	r3, [pc, #428]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a6a      	ldr	r2, [pc, #424]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 800272a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b68      	ldr	r3, [pc, #416]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a67      	ldr	r2, [pc, #412]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 8002736:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	e00b      	b.n	8002756 <HAL_RCC_OscConfig+0x192>
 800273e:	4b65      	ldr	r3, [pc, #404]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a64      	ldr	r2, [pc, #400]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 8002744:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	4b62      	ldr	r3, [pc, #392]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a61      	ldr	r2, [pc, #388]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 8002750:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002754:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002756:	4b5f      	ldr	r3, [pc, #380]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 8002758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275a:	f023 020f 	bic.w	r2, r3, #15
 800275e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002762:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	495a      	ldr	r1, [pc, #360]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 800276c:	4313      	orrs	r3, r2
 800276e:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002774:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d054      	beq.n	800282a <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7ff fc16 	bl	8001fb0 <HAL_GetTick>
 8002784:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002788:	e00a      	b.n	80027a0 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800278a:	f7ff fc11 	bl	8001fb0 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b64      	cmp	r3, #100	@ 0x64
 8002798:	d902      	bls.n	80027a0 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	f000 bf19 	b.w	80035d2 <HAL_RCC_OscConfig+0x100e>
 80027a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027a4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80027b4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b8:	fab3 f383 	clz	r3, r3
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b3f      	cmp	r3, #63	@ 0x3f
 80027c0:	d802      	bhi.n	80027c8 <HAL_RCC_OscConfig+0x204>
 80027c2:	4b44      	ldr	r3, [pc, #272]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	e015      	b.n	80027f4 <HAL_RCC_OscConfig+0x230>
 80027c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027cc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80027dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027e0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80027e4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80027f0:	4b38      	ldr	r3, [pc, #224]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 80027f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027f8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80027fc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002800:	fa92 f2a2 	rbit	r2, r2
 8002804:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002808:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800280c:	fab2 f282 	clz	r2, r2
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	f042 0220 	orr.w	r2, r2, #32
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	f002 021f 	and.w	r2, r2, #31
 800281c:	2101      	movs	r1, #1
 800281e:	fa01 f202 	lsl.w	r2, r1, r2
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0b0      	beq.n	800278a <HAL_RCC_OscConfig+0x1c6>
 8002828:	e057      	b.n	80028da <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282a:	f7ff fbc1 	bl	8001fb0 <HAL_GetTick>
 800282e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002832:	e00a      	b.n	800284a <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002834:	f7ff fbbc 	bl	8001fb0 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b64      	cmp	r3, #100	@ 0x64
 8002842:	d902      	bls.n	800284a <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	f000 bec4 	b.w	80035d2 <HAL_RCC_OscConfig+0x100e>
 800284a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800284e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800285e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b3f      	cmp	r3, #63	@ 0x3f
 800286a:	d802      	bhi.n	8002872 <HAL_RCC_OscConfig+0x2ae>
 800286c:	4b19      	ldr	r3, [pc, #100]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	e015      	b.n	800289e <HAL_RCC_OscConfig+0x2da>
 8002872:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002876:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002886:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800288a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800288e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800289a:	4b0e      	ldr	r3, [pc, #56]	@ (80028d4 <HAL_RCC_OscConfig+0x310>)
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028a2:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80028a6:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80028aa:	fa92 f2a2 	rbit	r2, r2
 80028ae:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80028b2:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80028b6:	fab2 f282 	clz	r2, r2
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	f042 0220 	orr.w	r2, r2, #32
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	f002 021f 	and.w	r2, r2, #31
 80028c6:	2101      	movs	r1, #1
 80028c8:	fa01 f202 	lsl.w	r2, r1, r2
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1b0      	bne.n	8002834 <HAL_RCC_OscConfig+0x270>
 80028d2:	e002      	b.n	80028da <HAL_RCC_OscConfig+0x316>
 80028d4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 816c 	beq.w	8002bc8 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028f0:	4bcc      	ldr	r3, [pc, #816]	@ (8002c24 <HAL_RCC_OscConfig+0x660>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00b      	beq.n	8002914 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028fc:	4bc9      	ldr	r3, [pc, #804]	@ (8002c24 <HAL_RCC_OscConfig+0x660>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 030c 	and.w	r3, r3, #12
 8002904:	2b08      	cmp	r3, #8
 8002906:	d16d      	bne.n	80029e4 <HAL_RCC_OscConfig+0x420>
 8002908:	4bc6      	ldr	r3, [pc, #792]	@ (8002c24 <HAL_RCC_OscConfig+0x660>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d167      	bne.n	80029e4 <HAL_RCC_OscConfig+0x420>
 8002914:	2302      	movs	r3, #2
 8002916:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002926:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b3f      	cmp	r3, #63	@ 0x3f
 8002932:	d802      	bhi.n	800293a <HAL_RCC_OscConfig+0x376>
 8002934:	4bbb      	ldr	r3, [pc, #748]	@ (8002c24 <HAL_RCC_OscConfig+0x660>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	e013      	b.n	8002962 <HAL_RCC_OscConfig+0x39e>
 800293a:	2302      	movs	r3, #2
 800293c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800294c:	2302      	movs	r3, #2
 800294e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002952:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800295e:	4bb1      	ldr	r3, [pc, #708]	@ (8002c24 <HAL_RCC_OscConfig+0x660>)
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	2202      	movs	r2, #2
 8002964:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002968:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800296c:	fa92 f2a2 	rbit	r2, r2
 8002970:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002974:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002978:	fab2 f282 	clz	r2, r2
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	f042 0220 	orr.w	r2, r2, #32
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	f002 021f 	and.w	r2, r2, #31
 8002988:	2101      	movs	r1, #1
 800298a:	fa01 f202 	lsl.w	r2, r1, r2
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <HAL_RCC_OscConfig+0x3e6>
 8002994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002998:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d002      	beq.n	80029aa <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	f000 be14 	b.w	80035d2 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029aa:	4b9e      	ldr	r3, [pc, #632]	@ (8002c24 <HAL_RCC_OscConfig+0x660>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	21f8      	movs	r1, #248	@ 0xf8
 80029c0:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80029c8:	fa91 f1a1 	rbit	r1, r1
 80029cc:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80029d0:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80029d4:	fab1 f181 	clz	r1, r1
 80029d8:	b2c9      	uxtb	r1, r1
 80029da:	408b      	lsls	r3, r1
 80029dc:	4991      	ldr	r1, [pc, #580]	@ (8002c24 <HAL_RCC_OscConfig+0x660>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e2:	e0f1      	b.n	8002bc8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8083 	beq.w	8002afc <HAL_RCC_OscConfig+0x538>
 80029f6:	2301      	movs	r3, #1
 80029f8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002a08:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a0c:	fab3 f383 	clz	r3, r3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a16:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	2301      	movs	r3, #1
 8002a20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a22:	f7ff fac5 	bl	8001fb0 <HAL_GetTick>
 8002a26:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a2c:	f7ff fac0 	bl	8001fb0 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d902      	bls.n	8002a42 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	f000 bdc8 	b.w	80035d2 <HAL_RCC_OscConfig+0x100e>
 8002a42:	2302      	movs	r3, #2
 8002a44:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002a54:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a58:	fab3 f383 	clz	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a60:	d802      	bhi.n	8002a68 <HAL_RCC_OscConfig+0x4a4>
 8002a62:	4b70      	ldr	r3, [pc, #448]	@ (8002c24 <HAL_RCC_OscConfig+0x660>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	e013      	b.n	8002a90 <HAL_RCC_OscConfig+0x4cc>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002a80:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002a8c:	4b65      	ldr	r3, [pc, #404]	@ (8002c24 <HAL_RCC_OscConfig+0x660>)
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a90:	2202      	movs	r2, #2
 8002a92:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002a96:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002a9a:	fa92 f2a2 	rbit	r2, r2
 8002a9e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002aa2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002aa6:	fab2 f282 	clz	r2, r2
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	f042 0220 	orr.w	r2, r2, #32
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	f002 021f 	and.w	r2, r2, #31
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0b4      	beq.n	8002a2c <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac2:	4b58      	ldr	r3, [pc, #352]	@ (8002c24 <HAL_RCC_OscConfig+0x660>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ace:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	21f8      	movs	r1, #248	@ 0xf8
 8002ad8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002adc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002ae0:	fa91 f1a1 	rbit	r1, r1
 8002ae4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002ae8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002aec:	fab1 f181 	clz	r1, r1
 8002af0:	b2c9      	uxtb	r1, r1
 8002af2:	408b      	lsls	r3, r1
 8002af4:	494b      	ldr	r1, [pc, #300]	@ (8002c24 <HAL_RCC_OscConfig+0x660>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	600b      	str	r3, [r1, #0]
 8002afa:	e065      	b.n	8002bc8 <HAL_RCC_OscConfig+0x604>
 8002afc:	2301      	movs	r3, #1
 8002afe:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002b0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b1c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	461a      	mov	r2, r3
 8002b24:	2300      	movs	r3, #0
 8002b26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7ff fa42 	bl	8001fb0 <HAL_GetTick>
 8002b2c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b30:	e00a      	b.n	8002b48 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b32:	f7ff fa3d 	bl	8001fb0 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d902      	bls.n	8002b48 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	f000 bd45 	b.w	80035d2 <HAL_RCC_OscConfig+0x100e>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002b5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b66:	d802      	bhi.n	8002b6e <HAL_RCC_OscConfig+0x5aa>
 8002b68:	4b2e      	ldr	r3, [pc, #184]	@ (8002c24 <HAL_RCC_OscConfig+0x660>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	e013      	b.n	8002b96 <HAL_RCC_OscConfig+0x5d2>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002b80:	2302      	movs	r3, #2
 8002b82:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002b86:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002b92:	4b24      	ldr	r3, [pc, #144]	@ (8002c24 <HAL_RCC_OscConfig+0x660>)
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	2202      	movs	r2, #2
 8002b98:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002b9c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002ba0:	fa92 f2a2 	rbit	r2, r2
 8002ba4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002ba8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002bac:	fab2 f282 	clz	r2, r2
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	f042 0220 	orr.w	r2, r2, #32
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	f002 021f 	and.w	r2, r2, #31
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1b4      	bne.n	8002b32 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bcc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 8115 	beq.w	8002e08 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d07e      	beq.n	8002cec <HAL_RCC_OscConfig+0x728>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4b06      	ldr	r3, [pc, #24]	@ (8002c28 <HAL_RCC_OscConfig+0x664>)
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	461a      	mov	r2, r3
 8002c14:	2301      	movs	r3, #1
 8002c16:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c18:	f7ff f9ca 	bl	8001fb0 <HAL_GetTick>
 8002c1c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c20:	e00f      	b.n	8002c42 <HAL_RCC_OscConfig+0x67e>
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
 8002c28:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c2c:	f7ff f9c0 	bl	8001fb0 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d902      	bls.n	8002c42 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	f000 bcc8 	b.w	80035d2 <HAL_RCC_OscConfig+0x100e>
 8002c42:	2302      	movs	r3, #2
 8002c44:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c48:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c4c:	fa93 f3a3 	rbit	r3, r3
 8002c50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c58:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c64:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	fa93 f2a3 	rbit	r2, r3
 8002c6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c80:	2202      	movs	r2, #2
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	fa93 f2a3 	rbit	r2, r3
 8002c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c96:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c9a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9c:	4bb0      	ldr	r3, [pc, #704]	@ (8002f60 <HAL_RCC_OscConfig+0x99c>)
 8002c9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002ca8:	2102      	movs	r1, #2
 8002caa:	6019      	str	r1, [r3, #0]
 8002cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	fa93 f1a3 	rbit	r1, r3
 8002cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cbe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002cc2:	6019      	str	r1, [r3, #0]
  return result;
 8002cc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	2101      	movs	r1, #1
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0a0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x668>
 8002cea:	e08d      	b.n	8002e08 <HAL_RCC_OscConfig+0x844>
 8002cec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	fa93 f2a3 	rbit	r2, r3
 8002d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d0e:	601a      	str	r2, [r3, #0]
  return result;
 8002d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d14:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d18:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	4b90      	ldr	r3, [pc, #576]	@ (8002f64 <HAL_RCC_OscConfig+0x9a0>)
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2e:	f7ff f93f 	bl	8001fb0 <HAL_GetTick>
 8002d32:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d36:	e00a      	b.n	8002d4e <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d38:	f7ff f93a 	bl	8001fb0 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d902      	bls.n	8002d4e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	f000 bc42 	b.w	80035d2 <HAL_RCC_OscConfig+0x100e>
 8002d4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d52:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d56:	2202      	movs	r2, #2
 8002d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	fa93 f2a3 	rbit	r2, r3
 8002d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d76:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d82:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	fa93 f2a3 	rbit	r2, r3
 8002d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d90:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002d9e:	2202      	movs	r2, #2
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	fa93 f2a3 	rbit	r2, r3
 8002db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002db8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dba:	4b69      	ldr	r3, [pc, #420]	@ (8002f60 <HAL_RCC_OscConfig+0x99c>)
 8002dbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002dc6:	2102      	movs	r1, #2
 8002dc8:	6019      	str	r1, [r3, #0]
 8002dca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dce:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	fa93 f1a3 	rbit	r1, r3
 8002dd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ddc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002de0:	6019      	str	r1, [r3, #0]
  return result;
 8002de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	fab3 f383 	clz	r3, r3
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d197      	bne.n	8002d38 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 819e 	beq.w	800315a <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e24:	4b4e      	ldr	r3, [pc, #312]	@ (8002f60 <HAL_RCC_OscConfig+0x99c>)
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d116      	bne.n	8002e5e <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e30:	4b4b      	ldr	r3, [pc, #300]	@ (8002f60 <HAL_RCC_OscConfig+0x99c>)
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	4a4a      	ldr	r2, [pc, #296]	@ (8002f60 <HAL_RCC_OscConfig+0x99c>)
 8002e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e3a:	61d3      	str	r3, [r2, #28]
 8002e3c:	4b48      	ldr	r3, [pc, #288]	@ (8002f60 <HAL_RCC_OscConfig+0x99c>)
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002e44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e48:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e52:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002e56:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5e:	4b42      	ldr	r3, [pc, #264]	@ (8002f68 <HAL_RCC_OscConfig+0x9a4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d11a      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f68 <HAL_RCC_OscConfig+0x9a4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a3e      	ldr	r2, [pc, #248]	@ (8002f68 <HAL_RCC_OscConfig+0x9a4>)
 8002e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e76:	f7ff f89b 	bl	8001fb0 <HAL_GetTick>
 8002e7a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7e:	e009      	b.n	8002e94 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e80:	f7ff f896 	bl	8001fb0 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b64      	cmp	r3, #100	@ 0x64
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e39e      	b.n	80035d2 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	4b34      	ldr	r3, [pc, #208]	@ (8002f68 <HAL_RCC_OscConfig+0x9a4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0ef      	beq.n	8002e80 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x8fa>
 8002eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8002f60 <HAL_RCC_OscConfig+0x99c>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4a2a      	ldr	r2, [pc, #168]	@ (8002f60 <HAL_RCC_OscConfig+0x99c>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6213      	str	r3, [r2, #32]
 8002ebc:	e035      	b.n	8002f2a <HAL_RCC_OscConfig+0x966>
 8002ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x924>
 8002ece:	4b24      	ldr	r3, [pc, #144]	@ (8002f60 <HAL_RCC_OscConfig+0x99c>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	4a23      	ldr	r2, [pc, #140]	@ (8002f60 <HAL_RCC_OscConfig+0x99c>)
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	6213      	str	r3, [r2, #32]
 8002eda:	4b21      	ldr	r3, [pc, #132]	@ (8002f60 <HAL_RCC_OscConfig+0x99c>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	4a20      	ldr	r2, [pc, #128]	@ (8002f60 <HAL_RCC_OscConfig+0x99c>)
 8002ee0:	f023 0304 	bic.w	r3, r3, #4
 8002ee4:	6213      	str	r3, [r2, #32]
 8002ee6:	e020      	b.n	8002f2a <HAL_RCC_OscConfig+0x966>
 8002ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	2b05      	cmp	r3, #5
 8002ef6:	d10c      	bne.n	8002f12 <HAL_RCC_OscConfig+0x94e>
 8002ef8:	4b19      	ldr	r3, [pc, #100]	@ (8002f60 <HAL_RCC_OscConfig+0x99c>)
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	4a18      	ldr	r2, [pc, #96]	@ (8002f60 <HAL_RCC_OscConfig+0x99c>)
 8002efe:	f043 0304 	orr.w	r3, r3, #4
 8002f02:	6213      	str	r3, [r2, #32]
 8002f04:	4b16      	ldr	r3, [pc, #88]	@ (8002f60 <HAL_RCC_OscConfig+0x99c>)
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	4a15      	ldr	r2, [pc, #84]	@ (8002f60 <HAL_RCC_OscConfig+0x99c>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	6213      	str	r3, [r2, #32]
 8002f10:	e00b      	b.n	8002f2a <HAL_RCC_OscConfig+0x966>
 8002f12:	4b13      	ldr	r3, [pc, #76]	@ (8002f60 <HAL_RCC_OscConfig+0x99c>)
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	4a12      	ldr	r2, [pc, #72]	@ (8002f60 <HAL_RCC_OscConfig+0x99c>)
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	6213      	str	r3, [r2, #32]
 8002f1e:	4b10      	ldr	r3, [pc, #64]	@ (8002f60 <HAL_RCC_OscConfig+0x99c>)
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	4a0f      	ldr	r2, [pc, #60]	@ (8002f60 <HAL_RCC_OscConfig+0x99c>)
 8002f24:	f023 0304 	bic.w	r3, r3, #4
 8002f28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 8087 	beq.w	800304a <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3c:	f7ff f838 	bl	8001fb0 <HAL_GetTick>
 8002f40:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f44:	e012      	b.n	8002f6c <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f46:	f7ff f833 	bl	8001fb0 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d908      	bls.n	8002f6c <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e339      	b.n	80035d2 <HAL_RCC_OscConfig+0x100e>
 8002f5e:	bf00      	nop
 8002f60:	40021000 	.word	0x40021000
 8002f64:	10908120 	.word	0x10908120
 8002f68:	40007000 	.word	0x40007000
 8002f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f70:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f74:	2202      	movs	r2, #2
 8002f76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	fa93 f2a3 	rbit	r2, r3
 8002f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f94:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002f98:	2202      	movs	r2, #2
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	fa93 f2a3 	rbit	r2, r3
 8002faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fae:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002fb2:	601a      	str	r2, [r3, #0]
  return result;
 8002fb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002fbc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d102      	bne.n	8002fd4 <HAL_RCC_OscConfig+0xa10>
 8002fce:	4b98      	ldr	r3, [pc, #608]	@ (8003230 <HAL_RCC_OscConfig+0xc6c>)
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	e013      	b.n	8002ffc <HAL_RCC_OscConfig+0xa38>
 8002fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002fdc:	2202      	movs	r2, #2
 8002fde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	fa93 f2a3 	rbit	r2, r3
 8002fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	4b8d      	ldr	r3, [pc, #564]	@ (8003230 <HAL_RCC_OscConfig+0xc6c>)
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003000:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003004:	2102      	movs	r1, #2
 8003006:	6011      	str	r1, [r2, #0]
 8003008:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800300c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	fa92 f1a2 	rbit	r1, r2
 8003016:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800301a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800301e:	6011      	str	r1, [r2, #0]
  return result;
 8003020:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003024:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	fab2 f282 	clz	r2, r2
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	f002 021f 	and.w	r2, r2, #31
 800303a:	2101      	movs	r1, #1
 800303c:	fa01 f202 	lsl.w	r2, r1, r2
 8003040:	4013      	ands	r3, r2
 8003042:	2b00      	cmp	r3, #0
 8003044:	f43f af7f 	beq.w	8002f46 <HAL_RCC_OscConfig+0x982>
 8003048:	e07d      	b.n	8003146 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304a:	f7fe ffb1 	bl	8001fb0 <HAL_GetTick>
 800304e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003052:	e00b      	b.n	800306c <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003054:	f7fe ffac 	bl	8001fb0 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003064:	4293      	cmp	r3, r2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e2b2      	b.n	80035d2 <HAL_RCC_OscConfig+0x100e>
 800306c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003070:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003074:	2202      	movs	r2, #2
 8003076:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	fa93 f2a3 	rbit	r2, r3
 8003086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003094:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003098:	2202      	movs	r2, #2
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	fa93 f2a3 	rbit	r2, r3
 80030aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ae:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80030b2:	601a      	str	r2, [r3, #0]
  return result;
 80030b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80030bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <HAL_RCC_OscConfig+0xb10>
 80030ce:	4b58      	ldr	r3, [pc, #352]	@ (8003230 <HAL_RCC_OscConfig+0xc6c>)
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	e013      	b.n	80030fc <HAL_RCC_OscConfig+0xb38>
 80030d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80030dc:	2202      	movs	r2, #2
 80030de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	fa93 f2a3 	rbit	r2, r3
 80030ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003230 <HAL_RCC_OscConfig+0xc6c>)
 80030fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003100:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003104:	2102      	movs	r1, #2
 8003106:	6011      	str	r1, [r2, #0]
 8003108:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800310c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	fa92 f1a2 	rbit	r1, r2
 8003116:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800311a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800311e:	6011      	str	r1, [r2, #0]
  return result;
 8003120:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003124:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	fab2 f282 	clz	r2, r2
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	f002 021f 	and.w	r2, r2, #31
 800313a:	2101      	movs	r1, #1
 800313c:	fa01 f202 	lsl.w	r2, r1, r2
 8003140:	4013      	ands	r3, r2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d186      	bne.n	8003054 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003146:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800314a:	2b01      	cmp	r3, #1
 800314c:	d105      	bne.n	800315a <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800314e:	4b38      	ldr	r3, [pc, #224]	@ (8003230 <HAL_RCC_OscConfig+0xc6c>)
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	4a37      	ldr	r2, [pc, #220]	@ (8003230 <HAL_RCC_OscConfig+0xc6c>)
 8003154:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003158:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800315a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 8232 	beq.w	80035d0 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800316c:	4b30      	ldr	r3, [pc, #192]	@ (8003230 <HAL_RCC_OscConfig+0xc6c>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 030c 	and.w	r3, r3, #12
 8003174:	2b08      	cmp	r3, #8
 8003176:	f000 8201 	beq.w	800357c <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800317a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800317e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	2b02      	cmp	r3, #2
 8003188:	f040 8157 	bne.w	800343a <HAL_RCC_OscConfig+0xe76>
 800318c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003190:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003194:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003198:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800319e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	fa93 f2a3 	rbit	r2, r3
 80031a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ac:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80031b0:	601a      	str	r2, [r3, #0]
  return result;
 80031b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80031ba:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031bc:	fab3 f383 	clz	r3, r3
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031c6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	461a      	mov	r2, r3
 80031ce:	2300      	movs	r3, #0
 80031d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7fe feed 	bl	8001fb0 <HAL_GetTick>
 80031d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031da:	e009      	b.n	80031f0 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fe fee8 	bl	8001fb0 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e1f0      	b.n	80035d2 <HAL_RCC_OscConfig+0x100e>
 80031f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80031f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003202:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	fa93 f2a3 	rbit	r2, r3
 800320c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003210:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003214:	601a      	str	r2, [r3, #0]
  return result;
 8003216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800321e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003220:	fab3 f383 	clz	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b3f      	cmp	r3, #63	@ 0x3f
 8003228:	d804      	bhi.n	8003234 <HAL_RCC_OscConfig+0xc70>
 800322a:	4b01      	ldr	r3, [pc, #4]	@ (8003230 <HAL_RCC_OscConfig+0xc6c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	e029      	b.n	8003284 <HAL_RCC_OscConfig+0xcc0>
 8003230:	40021000 	.word	0x40021000
 8003234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003238:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800323c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003246:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	fa93 f2a3 	rbit	r2, r3
 8003250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003254:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003262:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	fa93 f2a3 	rbit	r2, r3
 8003276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	4bc3      	ldr	r3, [pc, #780]	@ (8003590 <HAL_RCC_OscConfig+0xfcc>)
 8003282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003284:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003288:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800328c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003290:	6011      	str	r1, [r2, #0]
 8003292:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003296:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	fa92 f1a2 	rbit	r1, r2
 80032a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032a4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80032a8:	6011      	str	r1, [r2, #0]
  return result;
 80032aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032ae:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	fab2 f282 	clz	r2, r2
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	f042 0220 	orr.w	r2, r2, #32
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	f002 021f 	and.w	r2, r2, #31
 80032c4:	2101      	movs	r1, #1
 80032c6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d185      	bne.n	80031dc <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d0:	4baf      	ldr	r3, [pc, #700]	@ (8003590 <HAL_RCC_OscConfig+0xfcc>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80032d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80032e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	430b      	orrs	r3, r1
 80032f2:	49a7      	ldr	r1, [pc, #668]	@ (8003590 <HAL_RCC_OscConfig+0xfcc>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]
 80032f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003300:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	fa93 f2a3 	rbit	r2, r3
 8003314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003318:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800331c:	601a      	str	r2, [r3, #0]
  return result;
 800331e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003322:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003326:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003332:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	461a      	mov	r2, r3
 800333a:	2301      	movs	r3, #1
 800333c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333e:	f7fe fe37 	bl	8001fb0 <HAL_GetTick>
 8003342:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003346:	e009      	b.n	800335c <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003348:	f7fe fe32 	bl	8001fb0 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e13a      	b.n	80035d2 <HAL_RCC_OscConfig+0x100e>
 800335c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003360:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003364:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	fa93 f2a3 	rbit	r2, r3
 8003378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800337c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003380:	601a      	str	r2, [r3, #0]
  return result;
 8003382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003386:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800338a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800338c:	fab3 f383 	clz	r3, r3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b3f      	cmp	r3, #63	@ 0x3f
 8003394:	d802      	bhi.n	800339c <HAL_RCC_OscConfig+0xdd8>
 8003396:	4b7e      	ldr	r3, [pc, #504]	@ (8003590 <HAL_RCC_OscConfig+0xfcc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	e027      	b.n	80033ec <HAL_RCC_OscConfig+0xe28>
 800339c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80033a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ae:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	fa93 f2a3 	rbit	r2, r3
 80033b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033bc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80033ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	fa93 f2a3 	rbit	r2, r3
 80033de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	4b69      	ldr	r3, [pc, #420]	@ (8003590 <HAL_RCC_OscConfig+0xfcc>)
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033f0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80033f4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80033f8:	6011      	str	r1, [r2, #0]
 80033fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033fe:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	fa92 f1a2 	rbit	r1, r2
 8003408:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800340c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003410:	6011      	str	r1, [r2, #0]
  return result;
 8003412:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003416:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	fab2 f282 	clz	r2, r2
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	f042 0220 	orr.w	r2, r2, #32
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	f002 021f 	and.w	r2, r2, #31
 800342c:	2101      	movs	r1, #1
 800342e:	fa01 f202 	lsl.w	r2, r1, r2
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d087      	beq.n	8003348 <HAL_RCC_OscConfig+0xd84>
 8003438:	e0ca      	b.n	80035d0 <HAL_RCC_OscConfig+0x100c>
 800343a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800343e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003442:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	fa93 f2a3 	rbit	r2, r3
 8003456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800345e:	601a      	str	r2, [r3, #0]
  return result;
 8003460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003464:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003468:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003474:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	461a      	mov	r2, r3
 800347c:	2300      	movs	r3, #0
 800347e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003480:	f7fe fd96 	bl	8001fb0 <HAL_GetTick>
 8003484:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003488:	e009      	b.n	800349e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800348a:	f7fe fd91 	bl	8001fb0 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e099      	b.n	80035d2 <HAL_RCC_OscConfig+0x100e>
 800349e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80034a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	fa93 f2a3 	rbit	r2, r3
 80034ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034be:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80034c2:	601a      	str	r2, [r3, #0]
  return result;
 80034c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80034cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ce:	fab3 f383 	clz	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80034d6:	d802      	bhi.n	80034de <HAL_RCC_OscConfig+0xf1a>
 80034d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003590 <HAL_RCC_OscConfig+0xfcc>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	e027      	b.n	800352e <HAL_RCC_OscConfig+0xf6a>
 80034de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80034e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	fa93 f2a3 	rbit	r2, r3
 80034fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fe:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003508:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800350c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003516:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	fa93 f2a3 	rbit	r2, r3
 8003520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003524:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	4b19      	ldr	r3, [pc, #100]	@ (8003590 <HAL_RCC_OscConfig+0xfcc>)
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003532:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003536:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800353a:	6011      	str	r1, [r2, #0]
 800353c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003540:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003544:	6812      	ldr	r2, [r2, #0]
 8003546:	fa92 f1a2 	rbit	r1, r2
 800354a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800354e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003552:	6011      	str	r1, [r2, #0]
  return result;
 8003554:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003558:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800355c:	6812      	ldr	r2, [r2, #0]
 800355e:	fab2 f282 	clz	r2, r2
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	f042 0220 	orr.w	r2, r2, #32
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	f002 021f 	and.w	r2, r2, #31
 800356e:	2101      	movs	r1, #1
 8003570:	fa01 f202 	lsl.w	r2, r1, r2
 8003574:	4013      	ands	r3, r2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d187      	bne.n	800348a <HAL_RCC_OscConfig+0xec6>
 800357a:	e029      	b.n	80035d0 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800357c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003580:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d103      	bne.n	8003594 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e020      	b.n	80035d2 <HAL_RCC_OscConfig+0x100e>
 8003590:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003594:	4b11      	ldr	r3, [pc, #68]	@ (80035dc <HAL_RCC_OscConfig+0x1018>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800359c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80035a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80035a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d10b      	bne.n	80035cc <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80035b4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80035b8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80035bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e000      	b.n	80035d2 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021000 	.word	0x40021000

080035e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b09e      	sub	sp, #120	@ 0x78
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e154      	b.n	80038a2 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035f8:	4b89      	ldr	r3, [pc, #548]	@ (8003820 <HAL_RCC_ClockConfig+0x240>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d910      	bls.n	8003628 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003606:	4b86      	ldr	r3, [pc, #536]	@ (8003820 <HAL_RCC_ClockConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 0207 	bic.w	r2, r3, #7
 800360e:	4984      	ldr	r1, [pc, #528]	@ (8003820 <HAL_RCC_ClockConfig+0x240>)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	4313      	orrs	r3, r2
 8003614:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003616:	4b82      	ldr	r3, [pc, #520]	@ (8003820 <HAL_RCC_ClockConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e13c      	b.n	80038a2 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003634:	4b7b      	ldr	r3, [pc, #492]	@ (8003824 <HAL_RCC_ClockConfig+0x244>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4978      	ldr	r1, [pc, #480]	@ (8003824 <HAL_RCC_ClockConfig+0x244>)
 8003642:	4313      	orrs	r3, r2
 8003644:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 80cd 	beq.w	80037ee <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d137      	bne.n	80036cc <HAL_RCC_ClockConfig+0xec>
 800365c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003660:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003662:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003664:	fa93 f3a3 	rbit	r3, r3
 8003668:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800366a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366c:	fab3 f383 	clz	r3, r3
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b3f      	cmp	r3, #63	@ 0x3f
 8003674:	d802      	bhi.n	800367c <HAL_RCC_ClockConfig+0x9c>
 8003676:	4b6b      	ldr	r3, [pc, #428]	@ (8003824 <HAL_RCC_ClockConfig+0x244>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	e00f      	b.n	800369c <HAL_RCC_ClockConfig+0xbc>
 800367c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003680:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003684:	fa93 f3a3 	rbit	r3, r3
 8003688:	667b      	str	r3, [r7, #100]	@ 0x64
 800368a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800368e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003690:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003692:	fa93 f3a3 	rbit	r3, r3
 8003696:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003698:	4b62      	ldr	r3, [pc, #392]	@ (8003824 <HAL_RCC_ClockConfig+0x244>)
 800369a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80036a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036a4:	fa92 f2a2 	rbit	r2, r2
 80036a8:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80036aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80036ac:	fab2 f282 	clz	r2, r2
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	f042 0220 	orr.w	r2, r2, #32
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	f002 021f 	and.w	r2, r2, #31
 80036bc:	2101      	movs	r1, #1
 80036be:	fa01 f202 	lsl.w	r2, r1, r2
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d171      	bne.n	80037ac <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0ea      	b.n	80038a2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d137      	bne.n	8003744 <HAL_RCC_ClockConfig+0x164>
 80036d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036d8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036dc:	fa93 f3a3 	rbit	r3, r3
 80036e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80036e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e4:	fab3 f383 	clz	r3, r3
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80036ec:	d802      	bhi.n	80036f4 <HAL_RCC_ClockConfig+0x114>
 80036ee:	4b4d      	ldr	r3, [pc, #308]	@ (8003824 <HAL_RCC_ClockConfig+0x244>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	e00f      	b.n	8003714 <HAL_RCC_ClockConfig+0x134>
 80036f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	647b      	str	r3, [r7, #68]	@ 0x44
 8003702:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003706:	643b      	str	r3, [r7, #64]	@ 0x40
 8003708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800370a:	fa93 f3a3 	rbit	r3, r3
 800370e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003710:	4b44      	ldr	r3, [pc, #272]	@ (8003824 <HAL_RCC_ClockConfig+0x244>)
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003718:	63ba      	str	r2, [r7, #56]	@ 0x38
 800371a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800371c:	fa92 f2a2 	rbit	r2, r2
 8003720:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003722:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003724:	fab2 f282 	clz	r2, r2
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	f042 0220 	orr.w	r2, r2, #32
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	f002 021f 	and.w	r2, r2, #31
 8003734:	2101      	movs	r1, #1
 8003736:	fa01 f202 	lsl.w	r2, r1, r2
 800373a:	4013      	ands	r3, r2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d135      	bne.n	80037ac <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0ae      	b.n	80038a2 <HAL_RCC_ClockConfig+0x2c2>
 8003744:	2302      	movs	r3, #2
 8003746:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374a:	fa93 f3a3 	rbit	r3, r3
 800374e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b3f      	cmp	r3, #63	@ 0x3f
 800375a:	d802      	bhi.n	8003762 <HAL_RCC_ClockConfig+0x182>
 800375c:	4b31      	ldr	r3, [pc, #196]	@ (8003824 <HAL_RCC_ClockConfig+0x244>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	e00d      	b.n	800377e <HAL_RCC_ClockConfig+0x19e>
 8003762:	2302      	movs	r3, #2
 8003764:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003768:	fa93 f3a3 	rbit	r3, r3
 800376c:	627b      	str	r3, [r7, #36]	@ 0x24
 800376e:	2302      	movs	r3, #2
 8003770:	623b      	str	r3, [r7, #32]
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	fa93 f3a3 	rbit	r3, r3
 8003778:	61fb      	str	r3, [r7, #28]
 800377a:	4b2a      	ldr	r3, [pc, #168]	@ (8003824 <HAL_RCC_ClockConfig+0x244>)
 800377c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377e:	2202      	movs	r2, #2
 8003780:	61ba      	str	r2, [r7, #24]
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	fa92 f2a2 	rbit	r2, r2
 8003788:	617a      	str	r2, [r7, #20]
  return result;
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	fab2 f282 	clz	r2, r2
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	f042 0220 	orr.w	r2, r2, #32
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	f002 021f 	and.w	r2, r2, #31
 800379c:	2101      	movs	r1, #1
 800379e:	fa01 f202 	lsl.w	r2, r1, r2
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e07a      	b.n	80038a2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003824 <HAL_RCC_ClockConfig+0x244>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f023 0203 	bic.w	r2, r3, #3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	491a      	ldr	r1, [pc, #104]	@ (8003824 <HAL_RCC_ClockConfig+0x244>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037be:	f7fe fbf7 	bl	8001fb0 <HAL_GetTick>
 80037c2:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c4:	e00a      	b.n	80037dc <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c6:	f7fe fbf3 	bl	8001fb0 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e062      	b.n	80038a2 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037dc:	4b11      	ldr	r3, [pc, #68]	@ (8003824 <HAL_RCC_ClockConfig+0x244>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 020c 	and.w	r2, r3, #12
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d1eb      	bne.n	80037c6 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003820 <HAL_RCC_ClockConfig+0x240>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d215      	bcs.n	8003828 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fc:	4b08      	ldr	r3, [pc, #32]	@ (8003820 <HAL_RCC_ClockConfig+0x240>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f023 0207 	bic.w	r2, r3, #7
 8003804:	4906      	ldr	r1, [pc, #24]	@ (8003820 <HAL_RCC_ClockConfig+0x240>)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	4313      	orrs	r3, r2
 800380a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800380c:	4b04      	ldr	r3, [pc, #16]	@ (8003820 <HAL_RCC_ClockConfig+0x240>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d006      	beq.n	8003828 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e041      	b.n	80038a2 <HAL_RCC_ClockConfig+0x2c2>
 800381e:	bf00      	nop
 8003820:	40022000 	.word	0x40022000
 8003824:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003834:	4b1d      	ldr	r3, [pc, #116]	@ (80038ac <HAL_RCC_ClockConfig+0x2cc>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	491a      	ldr	r1, [pc, #104]	@ (80038ac <HAL_RCC_ClockConfig+0x2cc>)
 8003842:	4313      	orrs	r3, r2
 8003844:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003852:	4b16      	ldr	r3, [pc, #88]	@ (80038ac <HAL_RCC_ClockConfig+0x2cc>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4912      	ldr	r1, [pc, #72]	@ (80038ac <HAL_RCC_ClockConfig+0x2cc>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003866:	f000 f829 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 800386a:	4601      	mov	r1, r0
 800386c:	4b0f      	ldr	r3, [pc, #60]	@ (80038ac <HAL_RCC_ClockConfig+0x2cc>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003874:	22f0      	movs	r2, #240	@ 0xf0
 8003876:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	fa92 f2a2 	rbit	r2, r2
 800387e:	60fa      	str	r2, [r7, #12]
  return result;
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	fab2 f282 	clz	r2, r2
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	40d3      	lsrs	r3, r2
 800388a:	4a09      	ldr	r2, [pc, #36]	@ (80038b0 <HAL_RCC_ClockConfig+0x2d0>)
 800388c:	5cd3      	ldrb	r3, [r2, r3]
 800388e:	fa21 f303 	lsr.w	r3, r1, r3
 8003892:	4a08      	ldr	r2, [pc, #32]	@ (80038b4 <HAL_RCC_ClockConfig+0x2d4>)
 8003894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003896:	4b08      	ldr	r3, [pc, #32]	@ (80038b8 <HAL_RCC_ClockConfig+0x2d8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7fe fb44 	bl	8001f28 <HAL_InitTick>
  
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3778      	adds	r7, #120	@ 0x78
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40021000 	.word	0x40021000
 80038b0:	0800a0a4 	.word	0x0800a0a4
 80038b4:	2000000c 	.word	0x2000000c
 80038b8:	20000010 	.word	0x20000010

080038bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	b08b      	sub	sp, #44	@ 0x2c
 80038c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	2300      	movs	r3, #0
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	2300      	movs	r3, #0
 80038cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80038d6:	4b29      	ldr	r3, [pc, #164]	@ (800397c <HAL_RCC_GetSysClockFreq+0xc0>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d002      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0x30>
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d003      	beq.n	80038f2 <HAL_RCC_GetSysClockFreq+0x36>
 80038ea:	e03c      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038ec:	4b24      	ldr	r3, [pc, #144]	@ (8003980 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038ee:	623b      	str	r3, [r7, #32]
      break;
 80038f0:	e03c      	b.n	800396c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80038f8:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80038fc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	fa92 f2a2 	rbit	r2, r2
 8003904:	607a      	str	r2, [r7, #4]
  return result;
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	fab2 f282 	clz	r2, r2
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	40d3      	lsrs	r3, r2
 8003910:	4a1c      	ldr	r2, [pc, #112]	@ (8003984 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003912:	5cd3      	ldrb	r3, [r2, r3]
 8003914:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003916:	4b19      	ldr	r3, [pc, #100]	@ (800397c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	220f      	movs	r2, #15
 8003920:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	fa92 f2a2 	rbit	r2, r2
 8003928:	60fa      	str	r2, [r7, #12]
  return result;
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	fab2 f282 	clz	r2, r2
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	40d3      	lsrs	r3, r2
 8003934:	4a14      	ldr	r2, [pc, #80]	@ (8003988 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003936:	5cd3      	ldrb	r3, [r2, r3]
 8003938:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003944:	4a0e      	ldr	r2, [pc, #56]	@ (8003980 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	fbb2 f2f3 	udiv	r2, r2, r3
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	fb02 f303 	mul.w	r3, r2, r3
 8003952:	627b      	str	r3, [r7, #36]	@ 0x24
 8003954:	e004      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	4a0c      	ldr	r2, [pc, #48]	@ (800398c <HAL_RCC_GetSysClockFreq+0xd0>)
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003962:	623b      	str	r3, [r7, #32]
      break;
 8003964:	e002      	b.n	800396c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003966:	4b06      	ldr	r3, [pc, #24]	@ (8003980 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003968:	623b      	str	r3, [r7, #32]
      break;
 800396a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396c:	6a3b      	ldr	r3, [r7, #32]
}
 800396e:	4618      	mov	r0, r3
 8003970:	372c      	adds	r7, #44	@ 0x2c
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000
 8003980:	007a1200 	.word	0x007a1200
 8003984:	0800a0bc 	.word	0x0800a0bc
 8003988:	0800a0cc 	.word	0x0800a0cc
 800398c:	003d0900 	.word	0x003d0900

08003990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003994:	4b03      	ldr	r3, [pc, #12]	@ (80039a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003996:	681b      	ldr	r3, [r3, #0]
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	2000000c 	.word	0x2000000c

080039a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80039ae:	f7ff ffef 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039b2:	4601      	mov	r1, r0
 80039b4:	4b0b      	ldr	r3, [pc, #44]	@ (80039e4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80039bc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80039c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	fa92 f2a2 	rbit	r2, r2
 80039c8:	603a      	str	r2, [r7, #0]
  return result;
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	fab2 f282 	clz	r2, r2
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	40d3      	lsrs	r3, r2
 80039d4:	4a04      	ldr	r2, [pc, #16]	@ (80039e8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80039d6:	5cd3      	ldrb	r3, [r2, r3]
 80039d8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40021000 	.word	0x40021000
 80039e8:	0800a0b4 	.word	0x0800a0b4

080039ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80039f2:	f7ff ffcd 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039f6:	4601      	mov	r1, r0
 80039f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a28 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003a00:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003a04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	fa92 f2a2 	rbit	r2, r2
 8003a0c:	603a      	str	r2, [r7, #0]
  return result;
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	fab2 f282 	clz	r2, r2
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	40d3      	lsrs	r3, r2
 8003a18:	4a04      	ldr	r2, [pc, #16]	@ (8003a2c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a1a:	5cd3      	ldrb	r3, [r2, r3]
 8003a1c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a20:	4618      	mov	r0, r3
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	0800a0b4 	.word	0x0800a0b4

08003a30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b092      	sub	sp, #72	@ 0x48
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80d5 	beq.w	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a54:	4b4d      	ldr	r3, [pc, #308]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10e      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a60:	4b4a      	ldr	r3, [pc, #296]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	4a49      	ldr	r2, [pc, #292]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a6a:	61d3      	str	r3, [r2, #28]
 8003a6c:	4b47      	ldr	r3, [pc, #284]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7e:	4b44      	ldr	r3, [pc, #272]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d118      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a8a:	4b41      	ldr	r3, [pc, #260]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a40      	ldr	r2, [pc, #256]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a96:	f7fe fa8b 	bl	8001fb0 <HAL_GetTick>
 8003a9a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a9e:	f7fe fa87 	bl	8001fb0 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b64      	cmp	r3, #100	@ 0x64
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e149      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x314>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab0:	4b37      	ldr	r3, [pc, #220]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0f0      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003abc:	4b33      	ldr	r3, [pc, #204]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8082 	beq.w	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d07a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003adc:	4b2b      	ldr	r3, [pc, #172]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ae6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003aea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aee:	fa93 f3a3 	rbit	r3, r3
 8003af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003af6:	fab3 f383 	clz	r3, r3
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	4b25      	ldr	r3, [pc, #148]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	461a      	mov	r2, r3
 8003b06:	2301      	movs	r3, #1
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b12:	fa93 f3a3 	rbit	r3, r3
 8003b16:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b1a:	fab3 f383 	clz	r3, r3
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	4b1c      	ldr	r3, [pc, #112]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	461a      	mov	r2, r3
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b2e:	4a17      	ldr	r2, [pc, #92]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003b30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b32:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d049      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3e:	f7fe fa37 	bl	8001fb0 <HAL_GetTick>
 8003b42:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b44:	e00a      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b46:	f7fe fa33 	bl	8001fb0 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e0f3      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b62:	fa93 f3a3 	rbit	r3, r3
 8003b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b68:	2302      	movs	r3, #2
 8003b6a:	623b      	str	r3, [r7, #32]
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	fa93 f3a3 	rbit	r3, r3
 8003b72:	61fb      	str	r3, [r7, #28]
  return result;
 8003b74:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b76:	fab3 f383 	clz	r3, r3
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d108      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003b86:	4b01      	ldr	r3, [pc, #4]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	e00d      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	40007000 	.word	0x40007000
 8003b94:	10908100 	.word	0x10908100
 8003b98:	2302      	movs	r3, #2
 8003b9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	fa93 f3a3 	rbit	r3, r3
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	4b69      	ldr	r3, [pc, #420]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba8:	2202      	movs	r2, #2
 8003baa:	613a      	str	r2, [r7, #16]
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	fa92 f2a2 	rbit	r2, r2
 8003bb2:	60fa      	str	r2, [r7, #12]
  return result;
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	fab2 f282 	clz	r2, r2
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	f002 021f 	and.w	r2, r2, #31
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0b9      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003bd2:	4b5e      	ldr	r3, [pc, #376]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	495b      	ldr	r1, [pc, #364]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003be4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d105      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bec:	4b57      	ldr	r3, [pc, #348]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	4a56      	ldr	r2, [pc, #344]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003bf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bf6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d008      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c04:	4b51      	ldr	r3, [pc, #324]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c08:	f023 0203 	bic.w	r2, r3, #3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	494e      	ldr	r1, [pc, #312]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d008      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c22:	4b4a      	ldr	r3, [pc, #296]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c26:	f023 0210 	bic.w	r2, r3, #16
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	4947      	ldr	r1, [pc, #284]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d008      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c40:	4b42      	ldr	r3, [pc, #264]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4c:	493f      	ldr	r1, [pc, #252]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d008      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c62:	f023 0220 	bic.w	r2, r3, #32
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	4938      	ldr	r1, [pc, #224]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c7c:	4b33      	ldr	r3, [pc, #204]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c80:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	4930      	ldr	r1, [pc, #192]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	4929      	ldr	r1, [pc, #164]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003cb8:	4b24      	ldr	r3, [pc, #144]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbc:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	4921      	ldr	r1, [pc, #132]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d008      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cda:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	491a      	ldr	r1, [pc, #104]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003cf4:	4b15      	ldr	r3, [pc, #84]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d00:	4912      	ldr	r1, [pc, #72]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003d12:	4b0e      	ldr	r3, [pc, #56]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d16:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1e:	490b      	ldr	r1, [pc, #44]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003d30:	4b06      	ldr	r3, [pc, #24]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d34:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3c:	4903      	ldr	r1, [pc, #12]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3748      	adds	r7, #72	@ 0x48
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40021000 	.word	0x40021000

08003d50 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e083      	b.n	8003e6c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d106      	bne.n	8003d7e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7fd fec3 	bl	8001b04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2202      	movs	r2, #2
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003d94:	f023 0307 	bic.w	r3, r3, #7
 8003d98:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	3304      	adds	r3, #4
 8003da2:	4619      	mov	r1, r3
 8003da4:	4610      	mov	r0, r2
 8003da6:	f000 f89d 	bl	8003ee4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dd2:	f023 0303 	bic.w	r3, r3, #3
 8003dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	021b      	lsls	r3, r3, #8
 8003de2:	4313      	orrs	r3, r2
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003df0:	f023 030c 	bic.w	r3, r3, #12
 8003df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003dfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	011a      	lsls	r2, r3, #4
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	031b      	lsls	r3, r3, #12
 8003e20:	4313      	orrs	r3, r2
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003e2e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003e36:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	4313      	orrs	r3, r2
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_TIM_Encoder_Start+0x18>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d008      	beq.n	8003e9c <HAL_TIM_Encoder_Start+0x28>
 8003e8a:	e00f      	b.n	8003eac <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2201      	movs	r2, #1
 8003e92:	2100      	movs	r1, #0
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 f893 	bl	8003fc0 <TIM_CCxChannelCmd>
      break;
 8003e9a:	e016      	b.n	8003eca <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	2104      	movs	r1, #4
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 f88b 	bl	8003fc0 <TIM_CCxChannelCmd>
      break;
 8003eaa:	e00e      	b.n	8003eca <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 f883 	bl	8003fc0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	2104      	movs	r1, #4
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 f87c 	bl	8003fc0 <TIM_CCxChannelCmd>
      break;
 8003ec8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0201 	orr.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a2e      	ldr	r2, [pc, #184]	@ (8003fb0 <TIM_Base_SetConfig+0xcc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d003      	beq.n	8003f04 <TIM_Base_SetConfig+0x20>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f02:	d108      	bne.n	8003f16 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a25      	ldr	r2, [pc, #148]	@ (8003fb0 <TIM_Base_SetConfig+0xcc>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00f      	beq.n	8003f3e <TIM_Base_SetConfig+0x5a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f24:	d00b      	beq.n	8003f3e <TIM_Base_SetConfig+0x5a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a22      	ldr	r2, [pc, #136]	@ (8003fb4 <TIM_Base_SetConfig+0xd0>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d007      	beq.n	8003f3e <TIM_Base_SetConfig+0x5a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a21      	ldr	r2, [pc, #132]	@ (8003fb8 <TIM_Base_SetConfig+0xd4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d003      	beq.n	8003f3e <TIM_Base_SetConfig+0x5a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a20      	ldr	r2, [pc, #128]	@ (8003fbc <TIM_Base_SetConfig+0xd8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d108      	bne.n	8003f50 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a0e      	ldr	r2, [pc, #56]	@ (8003fb0 <TIM_Base_SetConfig+0xcc>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00b      	beq.n	8003f94 <TIM_Base_SetConfig+0xb0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a0d      	ldr	r2, [pc, #52]	@ (8003fb4 <TIM_Base_SetConfig+0xd0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d007      	beq.n	8003f94 <TIM_Base_SetConfig+0xb0>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a0c      	ldr	r2, [pc, #48]	@ (8003fb8 <TIM_Base_SetConfig+0xd4>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d003      	beq.n	8003f94 <TIM_Base_SetConfig+0xb0>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a0b      	ldr	r2, [pc, #44]	@ (8003fbc <TIM_Base_SetConfig+0xd8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d103      	bne.n	8003f9c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	615a      	str	r2, [r3, #20]
}
 8003fa2:	bf00      	nop
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40012c00 	.word	0x40012c00
 8003fb4:	40014000 	.word	0x40014000
 8003fb8:	40014400 	.word	0x40014400
 8003fbc:	40014800 	.word	0x40014800

08003fc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f003 031f 	and.w	r3, r3, #31
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a1a      	ldr	r2, [r3, #32]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	401a      	ands	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a1a      	ldr	r2, [r3, #32]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	621a      	str	r2, [r3, #32]
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
	...

0800400c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004020:	2302      	movs	r3, #2
 8004022:	e04f      	b.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a21      	ldr	r2, [pc, #132]	@ (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d108      	bne.n	8004060 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004054:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004066:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a14      	ldr	r2, [pc, #80]	@ (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d009      	beq.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800408c:	d004      	beq.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a10      	ldr	r2, [pc, #64]	@ (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d10c      	bne.n	80040b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800409e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	40012c00 	.word	0x40012c00
 80040d4:	40014000 	.word	0x40014000

080040d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e040      	b.n	800416c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fd fd74 	bl	8001be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2224      	movs	r2, #36	@ 0x24
 8004104:	675a      	str	r2, [r3, #116]	@ 0x74

  __HAL_UART_DISABLE(huart);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0201 	bic.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fab8 	bl	800468c <UART_SetConfig>
 800411c:	4603      	mov	r3, r0
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e022      	b.n	800416c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fc2e 	bl	8004990 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004142:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004152:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fcb5 	bl	8004ad4 <UART_CheckIdleState>
 800416a:	4603      	mov	r3, r0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08a      	sub	sp, #40	@ 0x28
 8004178:	af02      	add	r7, sp, #8
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	4613      	mov	r3, r2
 8004182:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004188:	2b20      	cmp	r3, #32
 800418a:	d17f      	bne.n	800428c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <HAL_UART_Transmit+0x24>
 8004192:	88fb      	ldrh	r3, [r7, #6]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e078      	b.n	800428e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <HAL_UART_Transmit+0x36>
 80041a6:	2302      	movs	r3, #2
 80041a8:	e071      	b.n	800428e <HAL_UART_Transmit+0x11a>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2221      	movs	r2, #33	@ 0x21
 80041bc:	675a      	str	r2, [r3, #116]	@ 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80041be:	f7fd fef7 	bl	8001fb0 <HAL_GetTick>
 80041c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	88fa      	ldrh	r2, [r7, #6]
 80041c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	88fa      	ldrh	r2, [r7, #6]
 80041d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041dc:	d108      	bne.n	80041f0 <HAL_UART_Transmit+0x7c>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d104      	bne.n	80041f0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	61bb      	str	r3, [r7, #24]
 80041ee:	e003      	b.n	80041f8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041f8:	e02c      	b.n	8004254 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2200      	movs	r2, #0
 8004202:	2180      	movs	r1, #128	@ 0x80
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 fcaa 	bl	8004b5e <UART_WaitOnFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e03c      	b.n	800428e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	881a      	ldrh	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004226:	b292      	uxth	r2, r2
 8004228:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	3302      	adds	r3, #2
 800422e:	61bb      	str	r3, [r7, #24]
 8004230:	e007      	b.n	8004242 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	781a      	ldrb	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	3301      	adds	r3, #1
 8004240:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004248:	b29b      	uxth	r3, r3
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1cc      	bne.n	80041fa <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2200      	movs	r2, #0
 8004268:	2140      	movs	r1, #64	@ 0x40
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 fc77 	bl	8004b5e <UART_WaitOnFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e009      	b.n	800428e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2220      	movs	r2, #32
 800427e:	675a      	str	r2, [r3, #116]	@ 0x74

    __HAL_UNLOCK(huart);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    return HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	e000      	b.n	800428e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800428c:	2302      	movs	r3, #2
  }
}
 800428e:	4618      	mov	r0, r3
 8004290:	3720      	adds	r7, #32
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	4613      	mov	r3, r2
 80042a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	f040 808a 	bne.w	80043c4 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <HAL_UART_Receive_IT+0x24>
 80042b6:	88fb      	ldrh	r3, [r7, #6]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e082      	b.n	80043c6 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <HAL_UART_Receive_IT+0x36>
 80042ca:	2302      	movs	r3, #2
 80042cc:	e07b      	b.n	80043c6 <HAL_UART_Receive_IT+0x12e>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    huart->pRxBuffPtr  = pData;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferSize  = Size;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	88fa      	ldrh	r2, [r7, #6]
 80042e0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	88fa      	ldrh	r2, [r7, #6]
 80042e8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    huart->RxISR       = NULL;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042fa:	d10e      	bne.n	800431a <HAL_UART_Receive_IT+0x82>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d105      	bne.n	8004310 <HAL_UART_Receive_IT+0x78>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800430a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800430e:	e02d      	b.n	800436c <HAL_UART_Receive_IT+0xd4>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	22ff      	movs	r2, #255	@ 0xff
 8004314:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004318:	e028      	b.n	800436c <HAL_UART_Receive_IT+0xd4>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10d      	bne.n	800433e <HAL_UART_Receive_IT+0xa6>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d104      	bne.n	8004334 <HAL_UART_Receive_IT+0x9c>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	22ff      	movs	r2, #255	@ 0xff
 800432e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004332:	e01b      	b.n	800436c <HAL_UART_Receive_IT+0xd4>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	227f      	movs	r2, #127	@ 0x7f
 8004338:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800433c:	e016      	b.n	800436c <HAL_UART_Receive_IT+0xd4>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004346:	d10d      	bne.n	8004364 <HAL_UART_Receive_IT+0xcc>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d104      	bne.n	800435a <HAL_UART_Receive_IT+0xc2>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	227f      	movs	r2, #127	@ 0x7f
 8004354:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004358:	e008      	b.n	800436c <HAL_UART_Receive_IT+0xd4>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	223f      	movs	r2, #63	@ 0x3f
 800435e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004362:	e003      	b.n	800436c <HAL_UART_Receive_IT+0xd4>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2222      	movs	r2, #34	@ 0x22
 8004376:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004390:	d107      	bne.n	80043a2 <HAL_UART_Receive_IT+0x10a>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d103      	bne.n	80043a2 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4a0d      	ldr	r2, [pc, #52]	@ (80043d4 <HAL_UART_Receive_IT+0x13c>)
 800439e:	661a      	str	r2, [r3, #96]	@ 0x60
 80043a0:	e002      	b.n	80043a8 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4a0c      	ldr	r2, [pc, #48]	@ (80043d8 <HAL_UART_Receive_IT+0x140>)
 80043a6:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    __HAL_UNLOCK(huart);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 7290 	orr.w	r2, r2, #288	@ 0x120
 80043be:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	e000      	b.n	80043c6 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80043c4:	2302      	movs	r3, #2
  }
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	08004d99 	.word	0x08004d99
 80043d8:	08004cf3 	.word	0x08004cf3

080043dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80043fc:	69fa      	ldr	r2, [r7, #28]
 80043fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004402:	4013      	ands	r3, r2
 8004404:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d113      	bne.n	8004434 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00e      	beq.n	8004434 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b00      	cmp	r3, #0
 800441e:	d009      	beq.n	8004434 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8113 	beq.w	8004650 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	4798      	blx	r3
      }
      return;
 8004432:	e10d      	b.n	8004650 <HAL_UART_IRQHandler+0x274>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 80d6 	beq.w	80045e8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d105      	bne.n	8004452 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 80cb 	beq.w	80045e8 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00e      	beq.n	800447a <HAL_UART_IRQHandler+0x9e>
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2201      	movs	r2, #1
 800446c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004472:	f043 0201 	orr.w	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00e      	beq.n	80044a2 <HAL_UART_IRQHandler+0xc6>
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d009      	beq.n	80044a2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2202      	movs	r2, #2
 8004494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800449a:	f043 0204 	orr.w	r2, r3, #4
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00e      	beq.n	80044ca <HAL_UART_IRQHandler+0xee>
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2204      	movs	r2, #4
 80044bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044c2:	f043 0202 	orr.w	r2, r3, #2
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d013      	beq.n	80044fc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d104      	bne.n	80044e8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d009      	beq.n	80044fc <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2208      	movs	r2, #8
 80044ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044f4:	f043 0208 	orr.w	r2, r3, #8
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00f      	beq.n	8004526 <HAL_UART_IRQHandler+0x14a>
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004518:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800451e:	f043 0220 	orr.w	r2, r3, #32
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 8092 	beq.w	8004654 <HAL_UART_IRQHandler+0x278>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00c      	beq.n	8004554 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004558:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004564:	2b40      	cmp	r3, #64	@ 0x40
 8004566:	d004      	beq.n	8004572 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800456e:	2b00      	cmp	r3, #0
 8004570:	d031      	beq.n	80045d6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fb6e 	bl	8004c54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004582:	2b40      	cmp	r3, #64	@ 0x40
 8004584:	d123      	bne.n	80045ce <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004594:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d013      	beq.n	80045c6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045a2:	4a2f      	ldr	r2, [pc, #188]	@ (8004660 <HAL_UART_IRQHandler+0x284>)
 80045a4:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fd fe41 	bl	8002232 <HAL_DMA_Abort_IT>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d016      	beq.n	80045e4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80045c0:	4610      	mov	r0, r2
 80045c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c4:	e00e      	b.n	80045e4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f856 	bl	8004678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045cc:	e00a      	b.n	80045e4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f852 	bl	8004678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d4:	e006      	b.n	80045e4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f84e 	bl	8004678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	67da      	str	r2, [r3, #124]	@ 0x7c
      }
    }
    return;
 80045e2:	e037      	b.n	8004654 <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e4:	bf00      	nop
    return;
 80045e6:	e035      	b.n	8004654 <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00d      	beq.n	800460e <HAL_UART_IRQHandler+0x232>
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004604:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fc19 	bl	8004e3e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800460c:	e025      	b.n	800465a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00d      	beq.n	8004634 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800461e:	2b00      	cmp	r3, #0
 8004620:	d008      	beq.n	8004634 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004626:	2b00      	cmp	r3, #0
 8004628:	d016      	beq.n	8004658 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	4798      	blx	r3
    }
    return;
 8004632:	e011      	b.n	8004658 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00d      	beq.n	800465a <HAL_UART_IRQHandler+0x27e>
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	d008      	beq.n	800465a <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 fb39 	bl	8004cc0 <UART_EndTransmit_IT>
    return;
 800464e:	e004      	b.n	800465a <HAL_UART_IRQHandler+0x27e>
      return;
 8004650:	bf00      	nop
 8004652:	e002      	b.n	800465a <HAL_UART_IRQHandler+0x27e>
    return;
 8004654:	bf00      	nop
 8004656:	e000      	b.n	800465a <HAL_UART_IRQHandler+0x27e>
    return;
 8004658:	bf00      	nop
  }

}
 800465a:	3720      	adds	r7, #32
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	08004c95 	.word	0x08004c95

08004664 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004694:	2300      	movs	r3, #0
 8004696:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	4ba2      	ldr	r3, [pc, #648]	@ (8004944 <UART_SetConfig+0x2b8>)
 80046bc:	4013      	ands	r3, r2
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6812      	ldr	r2, [r2, #0]
 80046c2:	6939      	ldr	r1, [r7, #16]
 80046c4:	430b      	orrs	r3, r1
 80046c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	430a      	orrs	r2, r1
 8004700:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a90      	ldr	r2, [pc, #576]	@ (8004948 <UART_SetConfig+0x2bc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d120      	bne.n	800474e <UART_SetConfig+0xc2>
 800470c:	4b8f      	ldr	r3, [pc, #572]	@ (800494c <UART_SetConfig+0x2c0>)
 800470e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004710:	f003 0303 	and.w	r3, r3, #3
 8004714:	2b03      	cmp	r3, #3
 8004716:	d817      	bhi.n	8004748 <UART_SetConfig+0xbc>
 8004718:	a201      	add	r2, pc, #4	@ (adr r2, 8004720 <UART_SetConfig+0x94>)
 800471a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471e:	bf00      	nop
 8004720:	08004731 	.word	0x08004731
 8004724:	0800473d 	.word	0x0800473d
 8004728:	08004743 	.word	0x08004743
 800472c:	08004737 	.word	0x08004737
 8004730:	2300      	movs	r3, #0
 8004732:	77fb      	strb	r3, [r7, #31]
 8004734:	e01d      	b.n	8004772 <UART_SetConfig+0xe6>
 8004736:	2302      	movs	r3, #2
 8004738:	77fb      	strb	r3, [r7, #31]
 800473a:	e01a      	b.n	8004772 <UART_SetConfig+0xe6>
 800473c:	2304      	movs	r3, #4
 800473e:	77fb      	strb	r3, [r7, #31]
 8004740:	e017      	b.n	8004772 <UART_SetConfig+0xe6>
 8004742:	2308      	movs	r3, #8
 8004744:	77fb      	strb	r3, [r7, #31]
 8004746:	e014      	b.n	8004772 <UART_SetConfig+0xe6>
 8004748:	2310      	movs	r3, #16
 800474a:	77fb      	strb	r3, [r7, #31]
 800474c:	e011      	b.n	8004772 <UART_SetConfig+0xe6>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a7f      	ldr	r2, [pc, #508]	@ (8004950 <UART_SetConfig+0x2c4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d102      	bne.n	800475e <UART_SetConfig+0xd2>
 8004758:	2300      	movs	r3, #0
 800475a:	77fb      	strb	r3, [r7, #31]
 800475c:	e009      	b.n	8004772 <UART_SetConfig+0xe6>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a7c      	ldr	r2, [pc, #496]	@ (8004954 <UART_SetConfig+0x2c8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d102      	bne.n	800476e <UART_SetConfig+0xe2>
 8004768:	2300      	movs	r3, #0
 800476a:	77fb      	strb	r3, [r7, #31]
 800476c:	e001      	b.n	8004772 <UART_SetConfig+0xe6>
 800476e:	2310      	movs	r3, #16
 8004770:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800477a:	f040 8083 	bne.w	8004884 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800477e:	7ffb      	ldrb	r3, [r7, #31]
 8004780:	2b08      	cmp	r3, #8
 8004782:	d85f      	bhi.n	8004844 <UART_SetConfig+0x1b8>
 8004784:	a201      	add	r2, pc, #4	@ (adr r2, 800478c <UART_SetConfig+0x100>)
 8004786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478a:	bf00      	nop
 800478c:	080047b1 	.word	0x080047b1
 8004790:	080047d1 	.word	0x080047d1
 8004794:	080047f1 	.word	0x080047f1
 8004798:	08004845 	.word	0x08004845
 800479c:	0800480d 	.word	0x0800480d
 80047a0:	08004845 	.word	0x08004845
 80047a4:	08004845 	.word	0x08004845
 80047a8:	08004845 	.word	0x08004845
 80047ac:	0800482d 	.word	0x0800482d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047b0:	f7ff f8fa 	bl	80039a8 <HAL_RCC_GetPCLK1Freq>
 80047b4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	005a      	lsls	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	085b      	lsrs	r3, r3, #1
 80047c0:	441a      	add	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	61bb      	str	r3, [r7, #24]
        break;
 80047ce:	e03c      	b.n	800484a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047d0:	f7ff f90c 	bl	80039ec <HAL_RCC_GetPCLK2Freq>
 80047d4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	005a      	lsls	r2, r3, #1
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	085b      	lsrs	r3, r3, #1
 80047e0:	441a      	add	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	61bb      	str	r3, [r7, #24]
        break;
 80047ee:	e02c      	b.n	800484a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	085b      	lsrs	r3, r3, #1
 80047f6:	f503 0374 	add.w	r3, r3, #15990784	@ 0xf40000
 80047fa:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6852      	ldr	r2, [r2, #4]
 8004802:	fbb3 f3f2 	udiv	r3, r3, r2
 8004806:	b29b      	uxth	r3, r3
 8004808:	61bb      	str	r3, [r7, #24]
        break;
 800480a:	e01e      	b.n	800484a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800480c:	f7ff f856 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 8004810:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	005a      	lsls	r2, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	085b      	lsrs	r3, r3, #1
 800481c:	441a      	add	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	fbb2 f3f3 	udiv	r3, r2, r3
 8004826:	b29b      	uxth	r3, r3
 8004828:	61bb      	str	r3, [r7, #24]
        break;
 800482a:	e00e      	b.n	800484a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	085b      	lsrs	r3, r3, #1
 8004832:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	fbb2 f3f3 	udiv	r3, r2, r3
 800483e:	b29b      	uxth	r3, r3
 8004840:	61bb      	str	r3, [r7, #24]
        break;
 8004842:	e002      	b.n	800484a <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	75fb      	strb	r3, [r7, #23]
        break;
 8004848:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	2b0f      	cmp	r3, #15
 800484e:	d916      	bls.n	800487e <UART_SetConfig+0x1f2>
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004856:	d212      	bcs.n	800487e <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	b29b      	uxth	r3, r3
 800485c:	f023 030f 	bic.w	r3, r3, #15
 8004860:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	085b      	lsrs	r3, r3, #1
 8004866:	b29b      	uxth	r3, r3
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	b29a      	uxth	r2, r3
 800486e:	897b      	ldrh	r3, [r7, #10]
 8004870:	4313      	orrs	r3, r2
 8004872:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	897a      	ldrh	r2, [r7, #10]
 800487a:	60da      	str	r2, [r3, #12]
 800487c:	e07d      	b.n	800497a <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	75fb      	strb	r3, [r7, #23]
 8004882:	e07a      	b.n	800497a <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8004884:	7ffb      	ldrb	r3, [r7, #31]
 8004886:	2b08      	cmp	r3, #8
 8004888:	d866      	bhi.n	8004958 <UART_SetConfig+0x2cc>
 800488a:	a201      	add	r2, pc, #4	@ (adr r2, 8004890 <UART_SetConfig+0x204>)
 800488c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004890:	080048b5 	.word	0x080048b5
 8004894:	080048d3 	.word	0x080048d3
 8004898:	080048f1 	.word	0x080048f1
 800489c:	08004959 	.word	0x08004959
 80048a0:	0800490d 	.word	0x0800490d
 80048a4:	08004959 	.word	0x08004959
 80048a8:	08004959 	.word	0x08004959
 80048ac:	08004959 	.word	0x08004959
 80048b0:	0800492b 	.word	0x0800492b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b4:	f7ff f878 	bl	80039a8 <HAL_RCC_GetPCLK1Freq>
 80048b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	085a      	lsrs	r2, r3, #1
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	441a      	add	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	61bb      	str	r3, [r7, #24]
        break;
 80048d0:	e045      	b.n	800495e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048d2:	f7ff f88b 	bl	80039ec <HAL_RCC_GetPCLK2Freq>
 80048d6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	085a      	lsrs	r2, r3, #1
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	441a      	add	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	61bb      	str	r3, [r7, #24]
        break;
 80048ee:	e036      	b.n	800495e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	085b      	lsrs	r3, r3, #1
 80048f6:	f503 03f4 	add.w	r3, r3, #7995392	@ 0x7a0000
 80048fa:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6852      	ldr	r2, [r2, #4]
 8004902:	fbb3 f3f2 	udiv	r3, r3, r2
 8004906:	b29b      	uxth	r3, r3
 8004908:	61bb      	str	r3, [r7, #24]
        break;
 800490a:	e028      	b.n	800495e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800490c:	f7fe ffd6 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 8004910:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	085a      	lsrs	r2, r3, #1
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	441a      	add	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	b29b      	uxth	r3, r3
 8004926:	61bb      	str	r3, [r7, #24]
        break;
 8004928:	e019      	b.n	800495e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	085b      	lsrs	r3, r3, #1
 8004930:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	fbb2 f3f3 	udiv	r3, r2, r3
 800493c:	b29b      	uxth	r3, r3
 800493e:	61bb      	str	r3, [r7, #24]
        break;
 8004940:	e00d      	b.n	800495e <UART_SetConfig+0x2d2>
 8004942:	bf00      	nop
 8004944:	efff69f3 	.word	0xefff69f3
 8004948:	40013800 	.word	0x40013800
 800494c:	40021000 	.word	0x40021000
 8004950:	40004400 	.word	0x40004400
 8004954:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	75fb      	strb	r3, [r7, #23]
        break;
 800495c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b0f      	cmp	r3, #15
 8004962:	d908      	bls.n	8004976 <UART_SetConfig+0x2ea>
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800496a:	d204      	bcs.n	8004976 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	60da      	str	r2, [r3, #12]
 8004974:	e001      	b.n	800497a <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->TxISR = NULL;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	665a      	str	r2, [r3, #100]	@ 0x64

  return ret;
 8004986:	7dfb      	ldrb	r3, [r7, #23]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3720      	adds	r7, #32
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a24:	f003 0310 	and.w	r3, r3, #16
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01a      	beq.n	8004aa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a8e:	d10a      	bne.n	8004aa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	605a      	str	r2, [r3, #4]
  }
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004ae2:	f7fd fa65 	bl	8001fb0 <HAL_GetTick>
 8004ae6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d10e      	bne.n	8004b14 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004af6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f82a 	bl	8004b5e <UART_WaitOnFlagUntilTimeout>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e020      	b.n	8004b56 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d10e      	bne.n	8004b40 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f814 	bl	8004b5e <UART_WaitOnFlagUntilTimeout>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e00a      	b.n	8004b56 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UNLOCK(huart);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	60f8      	str	r0, [r7, #12]
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	603b      	str	r3, [r7, #0]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b6e:	e05d      	b.n	8004c2c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b76:	d059      	beq.n	8004c2c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b78:	f7fd fa1a 	bl	8001fb0 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d302      	bcc.n	8004b8e <UART_WaitOnFlagUntilTimeout+0x30>
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d11b      	bne.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8004b9c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0201 	bic.w	r2, r2, #1
 8004bac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	675a      	str	r2, [r3, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	679a      	str	r2, [r3, #120]	@ 0x78

        __HAL_UNLOCK(huart);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e042      	b.n	8004c4c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d02b      	beq.n	8004c2c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004be2:	d123      	bne.n	8004c2c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bec:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8004bfc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0201 	bic.w	r2, r2, #1
 8004c0c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	675a      	str	r2, [r3, #116]	@ 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	67da      	str	r2, [r3, #124]	@ 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          
          return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e00f      	b.n	8004c4c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	69da      	ldr	r2, [r3, #28]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	4013      	ands	r3, r2
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	bf0c      	ite	eq
 8004c3c:	2301      	moveq	r3, #1
 8004c3e:	2300      	movne	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	461a      	mov	r2, r3
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d092      	beq.n	8004b70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8004c6a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0201 	bic.w	r2, r2, #1
 8004c7a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f7ff fce0 	bl	8004678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cb8:	bf00      	nop
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cd6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff fcbd 	bl	8004664 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cea:	bf00      	nop
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b084      	sub	sp, #16
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004d00:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d06:	2b22      	cmp	r3, #34	@ 0x22
 8004d08:	d13a      	bne.n	8004d80 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004d10:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d12:	89bb      	ldrh	r3, [r7, #12]
 8004d14:	b2d9      	uxtb	r1, r3
 8004d16:	89fb      	ldrh	r3, [r7, #14]
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d1e:	400a      	ands	r2, r1
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d121      	bne.n	8004d90 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8004d5a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0201 	bic.w	r2, r2, #1
 8004d6a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	661a      	str	r2, [r3, #96]	@ 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7fc f8dd 	bl	8000f38 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d7e:	e007      	b.n	8004d90 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0208 	orr.w	r2, r2, #8
 8004d8e:	619a      	str	r2, [r3, #24]
}
 8004d90:	bf00      	nop
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004da6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dac:	2b22      	cmp	r3, #34	@ 0x22
 8004dae:	d13a      	bne.n	8004e26 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004db6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dbc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004dbe:	89ba      	ldrh	r2, [r7, #12]
 8004dc0:	89fb      	ldrh	r3, [r7, #14]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dce:	1c9a      	adds	r2, r3, #2
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d121      	bne.n	8004e36 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8004e00:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0201 	bic.w	r2, r2, #1
 8004e10:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	661a      	str	r2, [r3, #96]	@ 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fc f88a 	bl	8000f38 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e24:	e007      	b.n	8004e36 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	699a      	ldr	r2, [r3, #24]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0208 	orr.w	r2, r2, #8
 8004e34:	619a      	str	r2, [r3, #24]
}
 8004e36:	bf00      	nop
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <__cvt>:
 8004e52:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e56:	ec57 6b10 	vmov	r6, r7, d0
 8004e5a:	2f00      	cmp	r7, #0
 8004e5c:	460c      	mov	r4, r1
 8004e5e:	4619      	mov	r1, r3
 8004e60:	463b      	mov	r3, r7
 8004e62:	bfbb      	ittet	lt
 8004e64:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004e68:	461f      	movlt	r7, r3
 8004e6a:	2300      	movge	r3, #0
 8004e6c:	232d      	movlt	r3, #45	@ 0x2d
 8004e6e:	700b      	strb	r3, [r1, #0]
 8004e70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e72:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004e76:	4691      	mov	r9, r2
 8004e78:	f023 0820 	bic.w	r8, r3, #32
 8004e7c:	bfbc      	itt	lt
 8004e7e:	4632      	movlt	r2, r6
 8004e80:	4616      	movlt	r6, r2
 8004e82:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e86:	d005      	beq.n	8004e94 <__cvt+0x42>
 8004e88:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004e8c:	d100      	bne.n	8004e90 <__cvt+0x3e>
 8004e8e:	3401      	adds	r4, #1
 8004e90:	2102      	movs	r1, #2
 8004e92:	e000      	b.n	8004e96 <__cvt+0x44>
 8004e94:	2103      	movs	r1, #3
 8004e96:	ab03      	add	r3, sp, #12
 8004e98:	9301      	str	r3, [sp, #4]
 8004e9a:	ab02      	add	r3, sp, #8
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	ec47 6b10 	vmov	d0, r6, r7
 8004ea2:	4653      	mov	r3, sl
 8004ea4:	4622      	mov	r2, r4
 8004ea6:	f001 ffdb 	bl	8006e60 <_dtoa_r>
 8004eaa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004eae:	4605      	mov	r5, r0
 8004eb0:	d119      	bne.n	8004ee6 <__cvt+0x94>
 8004eb2:	f019 0f01 	tst.w	r9, #1
 8004eb6:	d00e      	beq.n	8004ed6 <__cvt+0x84>
 8004eb8:	eb00 0904 	add.w	r9, r0, r4
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	4639      	mov	r1, r7
 8004ec4:	f7fb fe00 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ec8:	b108      	cbz	r0, 8004ece <__cvt+0x7c>
 8004eca:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ece:	2230      	movs	r2, #48	@ 0x30
 8004ed0:	9b03      	ldr	r3, [sp, #12]
 8004ed2:	454b      	cmp	r3, r9
 8004ed4:	d31e      	bcc.n	8004f14 <__cvt+0xc2>
 8004ed6:	9b03      	ldr	r3, [sp, #12]
 8004ed8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004eda:	1b5b      	subs	r3, r3, r5
 8004edc:	4628      	mov	r0, r5
 8004ede:	6013      	str	r3, [r2, #0]
 8004ee0:	b004      	add	sp, #16
 8004ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ee6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004eea:	eb00 0904 	add.w	r9, r0, r4
 8004eee:	d1e5      	bne.n	8004ebc <__cvt+0x6a>
 8004ef0:	7803      	ldrb	r3, [r0, #0]
 8004ef2:	2b30      	cmp	r3, #48	@ 0x30
 8004ef4:	d10a      	bne.n	8004f0c <__cvt+0xba>
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2300      	movs	r3, #0
 8004efa:	4630      	mov	r0, r6
 8004efc:	4639      	mov	r1, r7
 8004efe:	f7fb fde3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f02:	b918      	cbnz	r0, 8004f0c <__cvt+0xba>
 8004f04:	f1c4 0401 	rsb	r4, r4, #1
 8004f08:	f8ca 4000 	str.w	r4, [sl]
 8004f0c:	f8da 3000 	ldr.w	r3, [sl]
 8004f10:	4499      	add	r9, r3
 8004f12:	e7d3      	b.n	8004ebc <__cvt+0x6a>
 8004f14:	1c59      	adds	r1, r3, #1
 8004f16:	9103      	str	r1, [sp, #12]
 8004f18:	701a      	strb	r2, [r3, #0]
 8004f1a:	e7d9      	b.n	8004ed0 <__cvt+0x7e>

08004f1c <__exponent>:
 8004f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f1e:	2900      	cmp	r1, #0
 8004f20:	bfba      	itte	lt
 8004f22:	4249      	neglt	r1, r1
 8004f24:	232d      	movlt	r3, #45	@ 0x2d
 8004f26:	232b      	movge	r3, #43	@ 0x2b
 8004f28:	2909      	cmp	r1, #9
 8004f2a:	7002      	strb	r2, [r0, #0]
 8004f2c:	7043      	strb	r3, [r0, #1]
 8004f2e:	dd29      	ble.n	8004f84 <__exponent+0x68>
 8004f30:	f10d 0307 	add.w	r3, sp, #7
 8004f34:	461d      	mov	r5, r3
 8004f36:	270a      	movs	r7, #10
 8004f38:	461a      	mov	r2, r3
 8004f3a:	fbb1 f6f7 	udiv	r6, r1, r7
 8004f3e:	fb07 1416 	mls	r4, r7, r6, r1
 8004f42:	3430      	adds	r4, #48	@ 0x30
 8004f44:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004f48:	460c      	mov	r4, r1
 8004f4a:	2c63      	cmp	r4, #99	@ 0x63
 8004f4c:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004f50:	4631      	mov	r1, r6
 8004f52:	dcf1      	bgt.n	8004f38 <__exponent+0x1c>
 8004f54:	3130      	adds	r1, #48	@ 0x30
 8004f56:	1e94      	subs	r4, r2, #2
 8004f58:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004f5c:	1c41      	adds	r1, r0, #1
 8004f5e:	4623      	mov	r3, r4
 8004f60:	42ab      	cmp	r3, r5
 8004f62:	d30a      	bcc.n	8004f7a <__exponent+0x5e>
 8004f64:	f10d 0309 	add.w	r3, sp, #9
 8004f68:	1a9b      	subs	r3, r3, r2
 8004f6a:	42ac      	cmp	r4, r5
 8004f6c:	bf88      	it	hi
 8004f6e:	2300      	movhi	r3, #0
 8004f70:	3302      	adds	r3, #2
 8004f72:	4403      	add	r3, r0
 8004f74:	1a18      	subs	r0, r3, r0
 8004f76:	b003      	add	sp, #12
 8004f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f7a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004f7e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004f82:	e7ed      	b.n	8004f60 <__exponent+0x44>
 8004f84:	2330      	movs	r3, #48	@ 0x30
 8004f86:	3130      	adds	r1, #48	@ 0x30
 8004f88:	7083      	strb	r3, [r0, #2]
 8004f8a:	70c1      	strb	r1, [r0, #3]
 8004f8c:	1d03      	adds	r3, r0, #4
 8004f8e:	e7f1      	b.n	8004f74 <__exponent+0x58>

08004f90 <_printf_float>:
 8004f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f94:	b08d      	sub	sp, #52	@ 0x34
 8004f96:	460c      	mov	r4, r1
 8004f98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004f9c:	4616      	mov	r6, r2
 8004f9e:	461f      	mov	r7, r3
 8004fa0:	4605      	mov	r5, r0
 8004fa2:	f001 fea1 	bl	8006ce8 <_localeconv_r>
 8004fa6:	6803      	ldr	r3, [r0, #0]
 8004fa8:	9304      	str	r3, [sp, #16]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fb f960 	bl	8000270 <strlen>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8004fb8:	9005      	str	r0, [sp, #20]
 8004fba:	3307      	adds	r3, #7
 8004fbc:	f023 0307 	bic.w	r3, r3, #7
 8004fc0:	f103 0208 	add.w	r2, r3, #8
 8004fc4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004fc8:	f8d4 b000 	ldr.w	fp, [r4]
 8004fcc:	f8c8 2000 	str.w	r2, [r8]
 8004fd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fd4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004fd8:	9307      	str	r3, [sp, #28]
 8004fda:	f8cd 8018 	str.w	r8, [sp, #24]
 8004fde:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004fe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fe6:	4b9c      	ldr	r3, [pc, #624]	@ (8005258 <_printf_float+0x2c8>)
 8004fe8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004fec:	f7fb fd9e 	bl	8000b2c <__aeabi_dcmpun>
 8004ff0:	bb70      	cbnz	r0, 8005050 <_printf_float+0xc0>
 8004ff2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ff6:	4b98      	ldr	r3, [pc, #608]	@ (8005258 <_printf_float+0x2c8>)
 8004ff8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ffc:	f7fb fd78 	bl	8000af0 <__aeabi_dcmple>
 8005000:	bb30      	cbnz	r0, 8005050 <_printf_float+0xc0>
 8005002:	2200      	movs	r2, #0
 8005004:	2300      	movs	r3, #0
 8005006:	4640      	mov	r0, r8
 8005008:	4649      	mov	r1, r9
 800500a:	f7fb fd67 	bl	8000adc <__aeabi_dcmplt>
 800500e:	b110      	cbz	r0, 8005016 <_printf_float+0x86>
 8005010:	232d      	movs	r3, #45	@ 0x2d
 8005012:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005016:	4a91      	ldr	r2, [pc, #580]	@ (800525c <_printf_float+0x2cc>)
 8005018:	4b91      	ldr	r3, [pc, #580]	@ (8005260 <_printf_float+0x2d0>)
 800501a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800501e:	bf8c      	ite	hi
 8005020:	4690      	movhi	r8, r2
 8005022:	4698      	movls	r8, r3
 8005024:	2303      	movs	r3, #3
 8005026:	6123      	str	r3, [r4, #16]
 8005028:	f02b 0304 	bic.w	r3, fp, #4
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	f04f 0900 	mov.w	r9, #0
 8005032:	9700      	str	r7, [sp, #0]
 8005034:	4633      	mov	r3, r6
 8005036:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005038:	4621      	mov	r1, r4
 800503a:	4628      	mov	r0, r5
 800503c:	f000 f9d2 	bl	80053e4 <_printf_common>
 8005040:	3001      	adds	r0, #1
 8005042:	f040 808d 	bne.w	8005160 <_printf_float+0x1d0>
 8005046:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800504a:	b00d      	add	sp, #52	@ 0x34
 800504c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005050:	4642      	mov	r2, r8
 8005052:	464b      	mov	r3, r9
 8005054:	4640      	mov	r0, r8
 8005056:	4649      	mov	r1, r9
 8005058:	f7fb fd68 	bl	8000b2c <__aeabi_dcmpun>
 800505c:	b140      	cbz	r0, 8005070 <_printf_float+0xe0>
 800505e:	464b      	mov	r3, r9
 8005060:	2b00      	cmp	r3, #0
 8005062:	bfbc      	itt	lt
 8005064:	232d      	movlt	r3, #45	@ 0x2d
 8005066:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800506a:	4a7e      	ldr	r2, [pc, #504]	@ (8005264 <_printf_float+0x2d4>)
 800506c:	4b7e      	ldr	r3, [pc, #504]	@ (8005268 <_printf_float+0x2d8>)
 800506e:	e7d4      	b.n	800501a <_printf_float+0x8a>
 8005070:	6863      	ldr	r3, [r4, #4]
 8005072:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005076:	9206      	str	r2, [sp, #24]
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	d13b      	bne.n	80050f4 <_printf_float+0x164>
 800507c:	2306      	movs	r3, #6
 800507e:	6063      	str	r3, [r4, #4]
 8005080:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005084:	2300      	movs	r3, #0
 8005086:	6022      	str	r2, [r4, #0]
 8005088:	9303      	str	r3, [sp, #12]
 800508a:	ab0a      	add	r3, sp, #40	@ 0x28
 800508c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005090:	ab09      	add	r3, sp, #36	@ 0x24
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	6861      	ldr	r1, [r4, #4]
 8005096:	ec49 8b10 	vmov	d0, r8, r9
 800509a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800509e:	4628      	mov	r0, r5
 80050a0:	f7ff fed7 	bl	8004e52 <__cvt>
 80050a4:	9b06      	ldr	r3, [sp, #24]
 80050a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80050a8:	2b47      	cmp	r3, #71	@ 0x47
 80050aa:	4680      	mov	r8, r0
 80050ac:	d129      	bne.n	8005102 <_printf_float+0x172>
 80050ae:	1cc8      	adds	r0, r1, #3
 80050b0:	db02      	blt.n	80050b8 <_printf_float+0x128>
 80050b2:	6863      	ldr	r3, [r4, #4]
 80050b4:	4299      	cmp	r1, r3
 80050b6:	dd41      	ble.n	800513c <_printf_float+0x1ac>
 80050b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80050bc:	fa5f fa8a 	uxtb.w	sl, sl
 80050c0:	3901      	subs	r1, #1
 80050c2:	4652      	mov	r2, sl
 80050c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80050c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80050ca:	f7ff ff27 	bl	8004f1c <__exponent>
 80050ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80050d0:	1813      	adds	r3, r2, r0
 80050d2:	2a01      	cmp	r2, #1
 80050d4:	4681      	mov	r9, r0
 80050d6:	6123      	str	r3, [r4, #16]
 80050d8:	dc02      	bgt.n	80050e0 <_printf_float+0x150>
 80050da:	6822      	ldr	r2, [r4, #0]
 80050dc:	07d2      	lsls	r2, r2, #31
 80050de:	d501      	bpl.n	80050e4 <_printf_float+0x154>
 80050e0:	3301      	adds	r3, #1
 80050e2:	6123      	str	r3, [r4, #16]
 80050e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0a2      	beq.n	8005032 <_printf_float+0xa2>
 80050ec:	232d      	movs	r3, #45	@ 0x2d
 80050ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050f2:	e79e      	b.n	8005032 <_printf_float+0xa2>
 80050f4:	9a06      	ldr	r2, [sp, #24]
 80050f6:	2a47      	cmp	r2, #71	@ 0x47
 80050f8:	d1c2      	bne.n	8005080 <_printf_float+0xf0>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1c0      	bne.n	8005080 <_printf_float+0xf0>
 80050fe:	2301      	movs	r3, #1
 8005100:	e7bd      	b.n	800507e <_printf_float+0xee>
 8005102:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005106:	d9db      	bls.n	80050c0 <_printf_float+0x130>
 8005108:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800510c:	d118      	bne.n	8005140 <_printf_float+0x1b0>
 800510e:	2900      	cmp	r1, #0
 8005110:	6863      	ldr	r3, [r4, #4]
 8005112:	dd0b      	ble.n	800512c <_printf_float+0x19c>
 8005114:	6121      	str	r1, [r4, #16]
 8005116:	b913      	cbnz	r3, 800511e <_printf_float+0x18e>
 8005118:	6822      	ldr	r2, [r4, #0]
 800511a:	07d0      	lsls	r0, r2, #31
 800511c:	d502      	bpl.n	8005124 <_printf_float+0x194>
 800511e:	3301      	adds	r3, #1
 8005120:	440b      	add	r3, r1
 8005122:	6123      	str	r3, [r4, #16]
 8005124:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005126:	f04f 0900 	mov.w	r9, #0
 800512a:	e7db      	b.n	80050e4 <_printf_float+0x154>
 800512c:	b913      	cbnz	r3, 8005134 <_printf_float+0x1a4>
 800512e:	6822      	ldr	r2, [r4, #0]
 8005130:	07d2      	lsls	r2, r2, #31
 8005132:	d501      	bpl.n	8005138 <_printf_float+0x1a8>
 8005134:	3302      	adds	r3, #2
 8005136:	e7f4      	b.n	8005122 <_printf_float+0x192>
 8005138:	2301      	movs	r3, #1
 800513a:	e7f2      	b.n	8005122 <_printf_float+0x192>
 800513c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005142:	4299      	cmp	r1, r3
 8005144:	db05      	blt.n	8005152 <_printf_float+0x1c2>
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	6121      	str	r1, [r4, #16]
 800514a:	07d8      	lsls	r0, r3, #31
 800514c:	d5ea      	bpl.n	8005124 <_printf_float+0x194>
 800514e:	1c4b      	adds	r3, r1, #1
 8005150:	e7e7      	b.n	8005122 <_printf_float+0x192>
 8005152:	2900      	cmp	r1, #0
 8005154:	bfd4      	ite	le
 8005156:	f1c1 0202 	rsble	r2, r1, #2
 800515a:	2201      	movgt	r2, #1
 800515c:	4413      	add	r3, r2
 800515e:	e7e0      	b.n	8005122 <_printf_float+0x192>
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	055a      	lsls	r2, r3, #21
 8005164:	d407      	bmi.n	8005176 <_printf_float+0x1e6>
 8005166:	6923      	ldr	r3, [r4, #16]
 8005168:	4642      	mov	r2, r8
 800516a:	4631      	mov	r1, r6
 800516c:	4628      	mov	r0, r5
 800516e:	47b8      	blx	r7
 8005170:	3001      	adds	r0, #1
 8005172:	d12b      	bne.n	80051cc <_printf_float+0x23c>
 8005174:	e767      	b.n	8005046 <_printf_float+0xb6>
 8005176:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800517a:	f240 80dd 	bls.w	8005338 <_printf_float+0x3a8>
 800517e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005182:	2200      	movs	r2, #0
 8005184:	2300      	movs	r3, #0
 8005186:	f7fb fc9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800518a:	2800      	cmp	r0, #0
 800518c:	d033      	beq.n	80051f6 <_printf_float+0x266>
 800518e:	4a37      	ldr	r2, [pc, #220]	@ (800526c <_printf_float+0x2dc>)
 8005190:	2301      	movs	r3, #1
 8005192:	4631      	mov	r1, r6
 8005194:	4628      	mov	r0, r5
 8005196:	47b8      	blx	r7
 8005198:	3001      	adds	r0, #1
 800519a:	f43f af54 	beq.w	8005046 <_printf_float+0xb6>
 800519e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80051a2:	4543      	cmp	r3, r8
 80051a4:	db02      	blt.n	80051ac <_printf_float+0x21c>
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	07d8      	lsls	r0, r3, #31
 80051aa:	d50f      	bpl.n	80051cc <_printf_float+0x23c>
 80051ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051b0:	4631      	mov	r1, r6
 80051b2:	4628      	mov	r0, r5
 80051b4:	47b8      	blx	r7
 80051b6:	3001      	adds	r0, #1
 80051b8:	f43f af45 	beq.w	8005046 <_printf_float+0xb6>
 80051bc:	f04f 0900 	mov.w	r9, #0
 80051c0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80051c4:	f104 0a1a 	add.w	sl, r4, #26
 80051c8:	45c8      	cmp	r8, r9
 80051ca:	dc09      	bgt.n	80051e0 <_printf_float+0x250>
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	079b      	lsls	r3, r3, #30
 80051d0:	f100 8103 	bmi.w	80053da <_printf_float+0x44a>
 80051d4:	68e0      	ldr	r0, [r4, #12]
 80051d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051d8:	4298      	cmp	r0, r3
 80051da:	bfb8      	it	lt
 80051dc:	4618      	movlt	r0, r3
 80051de:	e734      	b.n	800504a <_printf_float+0xba>
 80051e0:	2301      	movs	r3, #1
 80051e2:	4652      	mov	r2, sl
 80051e4:	4631      	mov	r1, r6
 80051e6:	4628      	mov	r0, r5
 80051e8:	47b8      	blx	r7
 80051ea:	3001      	adds	r0, #1
 80051ec:	f43f af2b 	beq.w	8005046 <_printf_float+0xb6>
 80051f0:	f109 0901 	add.w	r9, r9, #1
 80051f4:	e7e8      	b.n	80051c8 <_printf_float+0x238>
 80051f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	dc39      	bgt.n	8005270 <_printf_float+0x2e0>
 80051fc:	4a1b      	ldr	r2, [pc, #108]	@ (800526c <_printf_float+0x2dc>)
 80051fe:	2301      	movs	r3, #1
 8005200:	4631      	mov	r1, r6
 8005202:	4628      	mov	r0, r5
 8005204:	47b8      	blx	r7
 8005206:	3001      	adds	r0, #1
 8005208:	f43f af1d 	beq.w	8005046 <_printf_float+0xb6>
 800520c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005210:	ea59 0303 	orrs.w	r3, r9, r3
 8005214:	d102      	bne.n	800521c <_printf_float+0x28c>
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	07d9      	lsls	r1, r3, #31
 800521a:	d5d7      	bpl.n	80051cc <_printf_float+0x23c>
 800521c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005220:	4631      	mov	r1, r6
 8005222:	4628      	mov	r0, r5
 8005224:	47b8      	blx	r7
 8005226:	3001      	adds	r0, #1
 8005228:	f43f af0d 	beq.w	8005046 <_printf_float+0xb6>
 800522c:	f04f 0a00 	mov.w	sl, #0
 8005230:	f104 0b1a 	add.w	fp, r4, #26
 8005234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005236:	425b      	negs	r3, r3
 8005238:	4553      	cmp	r3, sl
 800523a:	dc01      	bgt.n	8005240 <_printf_float+0x2b0>
 800523c:	464b      	mov	r3, r9
 800523e:	e793      	b.n	8005168 <_printf_float+0x1d8>
 8005240:	2301      	movs	r3, #1
 8005242:	465a      	mov	r2, fp
 8005244:	4631      	mov	r1, r6
 8005246:	4628      	mov	r0, r5
 8005248:	47b8      	blx	r7
 800524a:	3001      	adds	r0, #1
 800524c:	f43f aefb 	beq.w	8005046 <_printf_float+0xb6>
 8005250:	f10a 0a01 	add.w	sl, sl, #1
 8005254:	e7ee      	b.n	8005234 <_printf_float+0x2a4>
 8005256:	bf00      	nop
 8005258:	7fefffff 	.word	0x7fefffff
 800525c:	0800a0e0 	.word	0x0800a0e0
 8005260:	0800a0dc 	.word	0x0800a0dc
 8005264:	0800a0e8 	.word	0x0800a0e8
 8005268:	0800a0e4 	.word	0x0800a0e4
 800526c:	0800a231 	.word	0x0800a231
 8005270:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005272:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005276:	4553      	cmp	r3, sl
 8005278:	bfa8      	it	ge
 800527a:	4653      	movge	r3, sl
 800527c:	2b00      	cmp	r3, #0
 800527e:	4699      	mov	r9, r3
 8005280:	dc36      	bgt.n	80052f0 <_printf_float+0x360>
 8005282:	f04f 0b00 	mov.w	fp, #0
 8005286:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800528a:	f104 021a 	add.w	r2, r4, #26
 800528e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005290:	9306      	str	r3, [sp, #24]
 8005292:	eba3 0309 	sub.w	r3, r3, r9
 8005296:	455b      	cmp	r3, fp
 8005298:	dc31      	bgt.n	80052fe <_printf_float+0x36e>
 800529a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800529c:	459a      	cmp	sl, r3
 800529e:	dc3a      	bgt.n	8005316 <_printf_float+0x386>
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	07da      	lsls	r2, r3, #31
 80052a4:	d437      	bmi.n	8005316 <_printf_float+0x386>
 80052a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052a8:	ebaa 0903 	sub.w	r9, sl, r3
 80052ac:	9b06      	ldr	r3, [sp, #24]
 80052ae:	ebaa 0303 	sub.w	r3, sl, r3
 80052b2:	4599      	cmp	r9, r3
 80052b4:	bfa8      	it	ge
 80052b6:	4699      	movge	r9, r3
 80052b8:	f1b9 0f00 	cmp.w	r9, #0
 80052bc:	dc33      	bgt.n	8005326 <_printf_float+0x396>
 80052be:	f04f 0800 	mov.w	r8, #0
 80052c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052c6:	f104 0b1a 	add.w	fp, r4, #26
 80052ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052cc:	ebaa 0303 	sub.w	r3, sl, r3
 80052d0:	eba3 0309 	sub.w	r3, r3, r9
 80052d4:	4543      	cmp	r3, r8
 80052d6:	f77f af79 	ble.w	80051cc <_printf_float+0x23c>
 80052da:	2301      	movs	r3, #1
 80052dc:	465a      	mov	r2, fp
 80052de:	4631      	mov	r1, r6
 80052e0:	4628      	mov	r0, r5
 80052e2:	47b8      	blx	r7
 80052e4:	3001      	adds	r0, #1
 80052e6:	f43f aeae 	beq.w	8005046 <_printf_float+0xb6>
 80052ea:	f108 0801 	add.w	r8, r8, #1
 80052ee:	e7ec      	b.n	80052ca <_printf_float+0x33a>
 80052f0:	4642      	mov	r2, r8
 80052f2:	4631      	mov	r1, r6
 80052f4:	4628      	mov	r0, r5
 80052f6:	47b8      	blx	r7
 80052f8:	3001      	adds	r0, #1
 80052fa:	d1c2      	bne.n	8005282 <_printf_float+0x2f2>
 80052fc:	e6a3      	b.n	8005046 <_printf_float+0xb6>
 80052fe:	2301      	movs	r3, #1
 8005300:	4631      	mov	r1, r6
 8005302:	4628      	mov	r0, r5
 8005304:	9206      	str	r2, [sp, #24]
 8005306:	47b8      	blx	r7
 8005308:	3001      	adds	r0, #1
 800530a:	f43f ae9c 	beq.w	8005046 <_printf_float+0xb6>
 800530e:	9a06      	ldr	r2, [sp, #24]
 8005310:	f10b 0b01 	add.w	fp, fp, #1
 8005314:	e7bb      	b.n	800528e <_printf_float+0x2fe>
 8005316:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800531a:	4631      	mov	r1, r6
 800531c:	4628      	mov	r0, r5
 800531e:	47b8      	blx	r7
 8005320:	3001      	adds	r0, #1
 8005322:	d1c0      	bne.n	80052a6 <_printf_float+0x316>
 8005324:	e68f      	b.n	8005046 <_printf_float+0xb6>
 8005326:	9a06      	ldr	r2, [sp, #24]
 8005328:	464b      	mov	r3, r9
 800532a:	4442      	add	r2, r8
 800532c:	4631      	mov	r1, r6
 800532e:	4628      	mov	r0, r5
 8005330:	47b8      	blx	r7
 8005332:	3001      	adds	r0, #1
 8005334:	d1c3      	bne.n	80052be <_printf_float+0x32e>
 8005336:	e686      	b.n	8005046 <_printf_float+0xb6>
 8005338:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800533c:	f1ba 0f01 	cmp.w	sl, #1
 8005340:	dc01      	bgt.n	8005346 <_printf_float+0x3b6>
 8005342:	07db      	lsls	r3, r3, #31
 8005344:	d536      	bpl.n	80053b4 <_printf_float+0x424>
 8005346:	2301      	movs	r3, #1
 8005348:	4642      	mov	r2, r8
 800534a:	4631      	mov	r1, r6
 800534c:	4628      	mov	r0, r5
 800534e:	47b8      	blx	r7
 8005350:	3001      	adds	r0, #1
 8005352:	f43f ae78 	beq.w	8005046 <_printf_float+0xb6>
 8005356:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800535a:	4631      	mov	r1, r6
 800535c:	4628      	mov	r0, r5
 800535e:	47b8      	blx	r7
 8005360:	3001      	adds	r0, #1
 8005362:	f43f ae70 	beq.w	8005046 <_printf_float+0xb6>
 8005366:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800536a:	2200      	movs	r2, #0
 800536c:	2300      	movs	r3, #0
 800536e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005372:	f7fb fba9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005376:	b9c0      	cbnz	r0, 80053aa <_printf_float+0x41a>
 8005378:	4653      	mov	r3, sl
 800537a:	f108 0201 	add.w	r2, r8, #1
 800537e:	4631      	mov	r1, r6
 8005380:	4628      	mov	r0, r5
 8005382:	47b8      	blx	r7
 8005384:	3001      	adds	r0, #1
 8005386:	d10c      	bne.n	80053a2 <_printf_float+0x412>
 8005388:	e65d      	b.n	8005046 <_printf_float+0xb6>
 800538a:	2301      	movs	r3, #1
 800538c:	465a      	mov	r2, fp
 800538e:	4631      	mov	r1, r6
 8005390:	4628      	mov	r0, r5
 8005392:	47b8      	blx	r7
 8005394:	3001      	adds	r0, #1
 8005396:	f43f ae56 	beq.w	8005046 <_printf_float+0xb6>
 800539a:	f108 0801 	add.w	r8, r8, #1
 800539e:	45d0      	cmp	r8, sl
 80053a0:	dbf3      	blt.n	800538a <_printf_float+0x3fa>
 80053a2:	464b      	mov	r3, r9
 80053a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80053a8:	e6df      	b.n	800516a <_printf_float+0x1da>
 80053aa:	f04f 0800 	mov.w	r8, #0
 80053ae:	f104 0b1a 	add.w	fp, r4, #26
 80053b2:	e7f4      	b.n	800539e <_printf_float+0x40e>
 80053b4:	2301      	movs	r3, #1
 80053b6:	4642      	mov	r2, r8
 80053b8:	e7e1      	b.n	800537e <_printf_float+0x3ee>
 80053ba:	2301      	movs	r3, #1
 80053bc:	464a      	mov	r2, r9
 80053be:	4631      	mov	r1, r6
 80053c0:	4628      	mov	r0, r5
 80053c2:	47b8      	blx	r7
 80053c4:	3001      	adds	r0, #1
 80053c6:	f43f ae3e 	beq.w	8005046 <_printf_float+0xb6>
 80053ca:	f108 0801 	add.w	r8, r8, #1
 80053ce:	68e3      	ldr	r3, [r4, #12]
 80053d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80053d2:	1a5b      	subs	r3, r3, r1
 80053d4:	4543      	cmp	r3, r8
 80053d6:	dcf0      	bgt.n	80053ba <_printf_float+0x42a>
 80053d8:	e6fc      	b.n	80051d4 <_printf_float+0x244>
 80053da:	f04f 0800 	mov.w	r8, #0
 80053de:	f104 0919 	add.w	r9, r4, #25
 80053e2:	e7f4      	b.n	80053ce <_printf_float+0x43e>

080053e4 <_printf_common>:
 80053e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e8:	4616      	mov	r6, r2
 80053ea:	4698      	mov	r8, r3
 80053ec:	688a      	ldr	r2, [r1, #8]
 80053ee:	690b      	ldr	r3, [r1, #16]
 80053f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053f4:	4293      	cmp	r3, r2
 80053f6:	bfb8      	it	lt
 80053f8:	4613      	movlt	r3, r2
 80053fa:	6033      	str	r3, [r6, #0]
 80053fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005400:	4607      	mov	r7, r0
 8005402:	460c      	mov	r4, r1
 8005404:	b10a      	cbz	r2, 800540a <_printf_common+0x26>
 8005406:	3301      	adds	r3, #1
 8005408:	6033      	str	r3, [r6, #0]
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	0699      	lsls	r1, r3, #26
 800540e:	bf42      	ittt	mi
 8005410:	6833      	ldrmi	r3, [r6, #0]
 8005412:	3302      	addmi	r3, #2
 8005414:	6033      	strmi	r3, [r6, #0]
 8005416:	6825      	ldr	r5, [r4, #0]
 8005418:	f015 0506 	ands.w	r5, r5, #6
 800541c:	d106      	bne.n	800542c <_printf_common+0x48>
 800541e:	f104 0a19 	add.w	sl, r4, #25
 8005422:	68e3      	ldr	r3, [r4, #12]
 8005424:	6832      	ldr	r2, [r6, #0]
 8005426:	1a9b      	subs	r3, r3, r2
 8005428:	42ab      	cmp	r3, r5
 800542a:	dc26      	bgt.n	800547a <_printf_common+0x96>
 800542c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005430:	6822      	ldr	r2, [r4, #0]
 8005432:	3b00      	subs	r3, #0
 8005434:	bf18      	it	ne
 8005436:	2301      	movne	r3, #1
 8005438:	0692      	lsls	r2, r2, #26
 800543a:	d42b      	bmi.n	8005494 <_printf_common+0xb0>
 800543c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005440:	4641      	mov	r1, r8
 8005442:	4638      	mov	r0, r7
 8005444:	47c8      	blx	r9
 8005446:	3001      	adds	r0, #1
 8005448:	d01e      	beq.n	8005488 <_printf_common+0xa4>
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	6922      	ldr	r2, [r4, #16]
 800544e:	f003 0306 	and.w	r3, r3, #6
 8005452:	2b04      	cmp	r3, #4
 8005454:	bf02      	ittt	eq
 8005456:	68e5      	ldreq	r5, [r4, #12]
 8005458:	6833      	ldreq	r3, [r6, #0]
 800545a:	1aed      	subeq	r5, r5, r3
 800545c:	68a3      	ldr	r3, [r4, #8]
 800545e:	bf0c      	ite	eq
 8005460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005464:	2500      	movne	r5, #0
 8005466:	4293      	cmp	r3, r2
 8005468:	bfc4      	itt	gt
 800546a:	1a9b      	subgt	r3, r3, r2
 800546c:	18ed      	addgt	r5, r5, r3
 800546e:	2600      	movs	r6, #0
 8005470:	341a      	adds	r4, #26
 8005472:	42b5      	cmp	r5, r6
 8005474:	d11a      	bne.n	80054ac <_printf_common+0xc8>
 8005476:	2000      	movs	r0, #0
 8005478:	e008      	b.n	800548c <_printf_common+0xa8>
 800547a:	2301      	movs	r3, #1
 800547c:	4652      	mov	r2, sl
 800547e:	4641      	mov	r1, r8
 8005480:	4638      	mov	r0, r7
 8005482:	47c8      	blx	r9
 8005484:	3001      	adds	r0, #1
 8005486:	d103      	bne.n	8005490 <_printf_common+0xac>
 8005488:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800548c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005490:	3501      	adds	r5, #1
 8005492:	e7c6      	b.n	8005422 <_printf_common+0x3e>
 8005494:	18e1      	adds	r1, r4, r3
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	2030      	movs	r0, #48	@ 0x30
 800549a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800549e:	4422      	add	r2, r4
 80054a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054a8:	3302      	adds	r3, #2
 80054aa:	e7c7      	b.n	800543c <_printf_common+0x58>
 80054ac:	2301      	movs	r3, #1
 80054ae:	4622      	mov	r2, r4
 80054b0:	4641      	mov	r1, r8
 80054b2:	4638      	mov	r0, r7
 80054b4:	47c8      	blx	r9
 80054b6:	3001      	adds	r0, #1
 80054b8:	d0e6      	beq.n	8005488 <_printf_common+0xa4>
 80054ba:	3601      	adds	r6, #1
 80054bc:	e7d9      	b.n	8005472 <_printf_common+0x8e>
	...

080054c0 <_printf_i>:
 80054c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054c4:	7e0f      	ldrb	r7, [r1, #24]
 80054c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054c8:	2f78      	cmp	r7, #120	@ 0x78
 80054ca:	4691      	mov	r9, r2
 80054cc:	4680      	mov	r8, r0
 80054ce:	460c      	mov	r4, r1
 80054d0:	469a      	mov	sl, r3
 80054d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054d6:	d807      	bhi.n	80054e8 <_printf_i+0x28>
 80054d8:	2f62      	cmp	r7, #98	@ 0x62
 80054da:	d80a      	bhi.n	80054f2 <_printf_i+0x32>
 80054dc:	2f00      	cmp	r7, #0
 80054de:	f000 80d1 	beq.w	8005684 <_printf_i+0x1c4>
 80054e2:	2f58      	cmp	r7, #88	@ 0x58
 80054e4:	f000 80b8 	beq.w	8005658 <_printf_i+0x198>
 80054e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80054f0:	e03a      	b.n	8005568 <_printf_i+0xa8>
 80054f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80054f6:	2b15      	cmp	r3, #21
 80054f8:	d8f6      	bhi.n	80054e8 <_printf_i+0x28>
 80054fa:	a101      	add	r1, pc, #4	@ (adr r1, 8005500 <_printf_i+0x40>)
 80054fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005500:	08005559 	.word	0x08005559
 8005504:	0800556d 	.word	0x0800556d
 8005508:	080054e9 	.word	0x080054e9
 800550c:	080054e9 	.word	0x080054e9
 8005510:	080054e9 	.word	0x080054e9
 8005514:	080054e9 	.word	0x080054e9
 8005518:	0800556d 	.word	0x0800556d
 800551c:	080054e9 	.word	0x080054e9
 8005520:	080054e9 	.word	0x080054e9
 8005524:	080054e9 	.word	0x080054e9
 8005528:	080054e9 	.word	0x080054e9
 800552c:	0800566b 	.word	0x0800566b
 8005530:	08005597 	.word	0x08005597
 8005534:	08005625 	.word	0x08005625
 8005538:	080054e9 	.word	0x080054e9
 800553c:	080054e9 	.word	0x080054e9
 8005540:	0800568d 	.word	0x0800568d
 8005544:	080054e9 	.word	0x080054e9
 8005548:	08005597 	.word	0x08005597
 800554c:	080054e9 	.word	0x080054e9
 8005550:	080054e9 	.word	0x080054e9
 8005554:	0800562d 	.word	0x0800562d
 8005558:	6833      	ldr	r3, [r6, #0]
 800555a:	1d1a      	adds	r2, r3, #4
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6032      	str	r2, [r6, #0]
 8005560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005564:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005568:	2301      	movs	r3, #1
 800556a:	e09c      	b.n	80056a6 <_printf_i+0x1e6>
 800556c:	6833      	ldr	r3, [r6, #0]
 800556e:	6820      	ldr	r0, [r4, #0]
 8005570:	1d19      	adds	r1, r3, #4
 8005572:	6031      	str	r1, [r6, #0]
 8005574:	0606      	lsls	r6, r0, #24
 8005576:	d501      	bpl.n	800557c <_printf_i+0xbc>
 8005578:	681d      	ldr	r5, [r3, #0]
 800557a:	e003      	b.n	8005584 <_printf_i+0xc4>
 800557c:	0645      	lsls	r5, r0, #25
 800557e:	d5fb      	bpl.n	8005578 <_printf_i+0xb8>
 8005580:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005584:	2d00      	cmp	r5, #0
 8005586:	da03      	bge.n	8005590 <_printf_i+0xd0>
 8005588:	232d      	movs	r3, #45	@ 0x2d
 800558a:	426d      	negs	r5, r5
 800558c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005590:	4858      	ldr	r0, [pc, #352]	@ (80056f4 <_printf_i+0x234>)
 8005592:	230a      	movs	r3, #10
 8005594:	e011      	b.n	80055ba <_printf_i+0xfa>
 8005596:	6821      	ldr	r1, [r4, #0]
 8005598:	6833      	ldr	r3, [r6, #0]
 800559a:	0608      	lsls	r0, r1, #24
 800559c:	f853 5b04 	ldr.w	r5, [r3], #4
 80055a0:	d402      	bmi.n	80055a8 <_printf_i+0xe8>
 80055a2:	0649      	lsls	r1, r1, #25
 80055a4:	bf48      	it	mi
 80055a6:	b2ad      	uxthmi	r5, r5
 80055a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80055aa:	4852      	ldr	r0, [pc, #328]	@ (80056f4 <_printf_i+0x234>)
 80055ac:	6033      	str	r3, [r6, #0]
 80055ae:	bf14      	ite	ne
 80055b0:	230a      	movne	r3, #10
 80055b2:	2308      	moveq	r3, #8
 80055b4:	2100      	movs	r1, #0
 80055b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055ba:	6866      	ldr	r6, [r4, #4]
 80055bc:	60a6      	str	r6, [r4, #8]
 80055be:	2e00      	cmp	r6, #0
 80055c0:	db05      	blt.n	80055ce <_printf_i+0x10e>
 80055c2:	6821      	ldr	r1, [r4, #0]
 80055c4:	432e      	orrs	r6, r5
 80055c6:	f021 0104 	bic.w	r1, r1, #4
 80055ca:	6021      	str	r1, [r4, #0]
 80055cc:	d04b      	beq.n	8005666 <_printf_i+0x1a6>
 80055ce:	4616      	mov	r6, r2
 80055d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80055d4:	fb03 5711 	mls	r7, r3, r1, r5
 80055d8:	5dc7      	ldrb	r7, [r0, r7]
 80055da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055de:	462f      	mov	r7, r5
 80055e0:	42bb      	cmp	r3, r7
 80055e2:	460d      	mov	r5, r1
 80055e4:	d9f4      	bls.n	80055d0 <_printf_i+0x110>
 80055e6:	2b08      	cmp	r3, #8
 80055e8:	d10b      	bne.n	8005602 <_printf_i+0x142>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	07df      	lsls	r7, r3, #31
 80055ee:	d508      	bpl.n	8005602 <_printf_i+0x142>
 80055f0:	6923      	ldr	r3, [r4, #16]
 80055f2:	6861      	ldr	r1, [r4, #4]
 80055f4:	4299      	cmp	r1, r3
 80055f6:	bfde      	ittt	le
 80055f8:	2330      	movle	r3, #48	@ 0x30
 80055fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055fe:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005602:	1b92      	subs	r2, r2, r6
 8005604:	6122      	str	r2, [r4, #16]
 8005606:	f8cd a000 	str.w	sl, [sp]
 800560a:	464b      	mov	r3, r9
 800560c:	aa03      	add	r2, sp, #12
 800560e:	4621      	mov	r1, r4
 8005610:	4640      	mov	r0, r8
 8005612:	f7ff fee7 	bl	80053e4 <_printf_common>
 8005616:	3001      	adds	r0, #1
 8005618:	d14a      	bne.n	80056b0 <_printf_i+0x1f0>
 800561a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800561e:	b004      	add	sp, #16
 8005620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	f043 0320 	orr.w	r3, r3, #32
 800562a:	6023      	str	r3, [r4, #0]
 800562c:	4832      	ldr	r0, [pc, #200]	@ (80056f8 <_printf_i+0x238>)
 800562e:	2778      	movs	r7, #120	@ 0x78
 8005630:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	6831      	ldr	r1, [r6, #0]
 8005638:	061f      	lsls	r7, r3, #24
 800563a:	f851 5b04 	ldr.w	r5, [r1], #4
 800563e:	d402      	bmi.n	8005646 <_printf_i+0x186>
 8005640:	065f      	lsls	r7, r3, #25
 8005642:	bf48      	it	mi
 8005644:	b2ad      	uxthmi	r5, r5
 8005646:	6031      	str	r1, [r6, #0]
 8005648:	07d9      	lsls	r1, r3, #31
 800564a:	bf44      	itt	mi
 800564c:	f043 0320 	orrmi.w	r3, r3, #32
 8005650:	6023      	strmi	r3, [r4, #0]
 8005652:	b11d      	cbz	r5, 800565c <_printf_i+0x19c>
 8005654:	2310      	movs	r3, #16
 8005656:	e7ad      	b.n	80055b4 <_printf_i+0xf4>
 8005658:	4826      	ldr	r0, [pc, #152]	@ (80056f4 <_printf_i+0x234>)
 800565a:	e7e9      	b.n	8005630 <_printf_i+0x170>
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	f023 0320 	bic.w	r3, r3, #32
 8005662:	6023      	str	r3, [r4, #0]
 8005664:	e7f6      	b.n	8005654 <_printf_i+0x194>
 8005666:	4616      	mov	r6, r2
 8005668:	e7bd      	b.n	80055e6 <_printf_i+0x126>
 800566a:	6833      	ldr	r3, [r6, #0]
 800566c:	6825      	ldr	r5, [r4, #0]
 800566e:	6961      	ldr	r1, [r4, #20]
 8005670:	1d18      	adds	r0, r3, #4
 8005672:	6030      	str	r0, [r6, #0]
 8005674:	062e      	lsls	r6, r5, #24
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	d501      	bpl.n	800567e <_printf_i+0x1be>
 800567a:	6019      	str	r1, [r3, #0]
 800567c:	e002      	b.n	8005684 <_printf_i+0x1c4>
 800567e:	0668      	lsls	r0, r5, #25
 8005680:	d5fb      	bpl.n	800567a <_printf_i+0x1ba>
 8005682:	8019      	strh	r1, [r3, #0]
 8005684:	2300      	movs	r3, #0
 8005686:	6123      	str	r3, [r4, #16]
 8005688:	4616      	mov	r6, r2
 800568a:	e7bc      	b.n	8005606 <_printf_i+0x146>
 800568c:	6833      	ldr	r3, [r6, #0]
 800568e:	1d1a      	adds	r2, r3, #4
 8005690:	6032      	str	r2, [r6, #0]
 8005692:	681e      	ldr	r6, [r3, #0]
 8005694:	6862      	ldr	r2, [r4, #4]
 8005696:	2100      	movs	r1, #0
 8005698:	4630      	mov	r0, r6
 800569a:	f7fa fd99 	bl	80001d0 <memchr>
 800569e:	b108      	cbz	r0, 80056a4 <_printf_i+0x1e4>
 80056a0:	1b80      	subs	r0, r0, r6
 80056a2:	6060      	str	r0, [r4, #4]
 80056a4:	6863      	ldr	r3, [r4, #4]
 80056a6:	6123      	str	r3, [r4, #16]
 80056a8:	2300      	movs	r3, #0
 80056aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056ae:	e7aa      	b.n	8005606 <_printf_i+0x146>
 80056b0:	6923      	ldr	r3, [r4, #16]
 80056b2:	4632      	mov	r2, r6
 80056b4:	4649      	mov	r1, r9
 80056b6:	4640      	mov	r0, r8
 80056b8:	47d0      	blx	sl
 80056ba:	3001      	adds	r0, #1
 80056bc:	d0ad      	beq.n	800561a <_printf_i+0x15a>
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	079b      	lsls	r3, r3, #30
 80056c2:	d413      	bmi.n	80056ec <_printf_i+0x22c>
 80056c4:	68e0      	ldr	r0, [r4, #12]
 80056c6:	9b03      	ldr	r3, [sp, #12]
 80056c8:	4298      	cmp	r0, r3
 80056ca:	bfb8      	it	lt
 80056cc:	4618      	movlt	r0, r3
 80056ce:	e7a6      	b.n	800561e <_printf_i+0x15e>
 80056d0:	2301      	movs	r3, #1
 80056d2:	4632      	mov	r2, r6
 80056d4:	4649      	mov	r1, r9
 80056d6:	4640      	mov	r0, r8
 80056d8:	47d0      	blx	sl
 80056da:	3001      	adds	r0, #1
 80056dc:	d09d      	beq.n	800561a <_printf_i+0x15a>
 80056de:	3501      	adds	r5, #1
 80056e0:	68e3      	ldr	r3, [r4, #12]
 80056e2:	9903      	ldr	r1, [sp, #12]
 80056e4:	1a5b      	subs	r3, r3, r1
 80056e6:	42ab      	cmp	r3, r5
 80056e8:	dcf2      	bgt.n	80056d0 <_printf_i+0x210>
 80056ea:	e7eb      	b.n	80056c4 <_printf_i+0x204>
 80056ec:	2500      	movs	r5, #0
 80056ee:	f104 0619 	add.w	r6, r4, #25
 80056f2:	e7f5      	b.n	80056e0 <_printf_i+0x220>
 80056f4:	0800a0ec 	.word	0x0800a0ec
 80056f8:	0800a0fd 	.word	0x0800a0fd

080056fc <_scanf_float>:
 80056fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005700:	b087      	sub	sp, #28
 8005702:	4691      	mov	r9, r2
 8005704:	9303      	str	r3, [sp, #12]
 8005706:	688b      	ldr	r3, [r1, #8]
 8005708:	1e5a      	subs	r2, r3, #1
 800570a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800570e:	bf81      	itttt	hi
 8005710:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005714:	eb03 0b05 	addhi.w	fp, r3, r5
 8005718:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800571c:	608b      	strhi	r3, [r1, #8]
 800571e:	680b      	ldr	r3, [r1, #0]
 8005720:	460a      	mov	r2, r1
 8005722:	f04f 0500 	mov.w	r5, #0
 8005726:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800572a:	f842 3b1c 	str.w	r3, [r2], #28
 800572e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005732:	4680      	mov	r8, r0
 8005734:	460c      	mov	r4, r1
 8005736:	bf98      	it	ls
 8005738:	f04f 0b00 	movls.w	fp, #0
 800573c:	9201      	str	r2, [sp, #4]
 800573e:	4616      	mov	r6, r2
 8005740:	46aa      	mov	sl, r5
 8005742:	462f      	mov	r7, r5
 8005744:	9502      	str	r5, [sp, #8]
 8005746:	68a2      	ldr	r2, [r4, #8]
 8005748:	b15a      	cbz	r2, 8005762 <_scanf_float+0x66>
 800574a:	f8d9 3000 	ldr.w	r3, [r9]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b4e      	cmp	r3, #78	@ 0x4e
 8005752:	d863      	bhi.n	800581c <_scanf_float+0x120>
 8005754:	2b40      	cmp	r3, #64	@ 0x40
 8005756:	d83b      	bhi.n	80057d0 <_scanf_float+0xd4>
 8005758:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800575c:	b2c8      	uxtb	r0, r1
 800575e:	280e      	cmp	r0, #14
 8005760:	d939      	bls.n	80057d6 <_scanf_float+0xda>
 8005762:	b11f      	cbz	r7, 800576c <_scanf_float+0x70>
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800576a:	6023      	str	r3, [r4, #0]
 800576c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005770:	f1ba 0f01 	cmp.w	sl, #1
 8005774:	f200 8114 	bhi.w	80059a0 <_scanf_float+0x2a4>
 8005778:	9b01      	ldr	r3, [sp, #4]
 800577a:	429e      	cmp	r6, r3
 800577c:	f200 8105 	bhi.w	800598a <_scanf_float+0x28e>
 8005780:	2001      	movs	r0, #1
 8005782:	b007      	add	sp, #28
 8005784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005788:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800578c:	2a0d      	cmp	r2, #13
 800578e:	d8e8      	bhi.n	8005762 <_scanf_float+0x66>
 8005790:	a101      	add	r1, pc, #4	@ (adr r1, 8005798 <_scanf_float+0x9c>)
 8005792:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005796:	bf00      	nop
 8005798:	080058e1 	.word	0x080058e1
 800579c:	08005763 	.word	0x08005763
 80057a0:	08005763 	.word	0x08005763
 80057a4:	08005763 	.word	0x08005763
 80057a8:	0800593d 	.word	0x0800593d
 80057ac:	08005917 	.word	0x08005917
 80057b0:	08005763 	.word	0x08005763
 80057b4:	08005763 	.word	0x08005763
 80057b8:	080058ef 	.word	0x080058ef
 80057bc:	08005763 	.word	0x08005763
 80057c0:	08005763 	.word	0x08005763
 80057c4:	08005763 	.word	0x08005763
 80057c8:	08005763 	.word	0x08005763
 80057cc:	080058ab 	.word	0x080058ab
 80057d0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80057d4:	e7da      	b.n	800578c <_scanf_float+0x90>
 80057d6:	290e      	cmp	r1, #14
 80057d8:	d8c3      	bhi.n	8005762 <_scanf_float+0x66>
 80057da:	a001      	add	r0, pc, #4	@ (adr r0, 80057e0 <_scanf_float+0xe4>)
 80057dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80057e0:	0800589b 	.word	0x0800589b
 80057e4:	08005763 	.word	0x08005763
 80057e8:	0800589b 	.word	0x0800589b
 80057ec:	0800592b 	.word	0x0800592b
 80057f0:	08005763 	.word	0x08005763
 80057f4:	0800583d 	.word	0x0800583d
 80057f8:	08005881 	.word	0x08005881
 80057fc:	08005881 	.word	0x08005881
 8005800:	08005881 	.word	0x08005881
 8005804:	08005881 	.word	0x08005881
 8005808:	08005881 	.word	0x08005881
 800580c:	08005881 	.word	0x08005881
 8005810:	08005881 	.word	0x08005881
 8005814:	08005881 	.word	0x08005881
 8005818:	08005881 	.word	0x08005881
 800581c:	2b6e      	cmp	r3, #110	@ 0x6e
 800581e:	d809      	bhi.n	8005834 <_scanf_float+0x138>
 8005820:	2b60      	cmp	r3, #96	@ 0x60
 8005822:	d8b1      	bhi.n	8005788 <_scanf_float+0x8c>
 8005824:	2b54      	cmp	r3, #84	@ 0x54
 8005826:	d07b      	beq.n	8005920 <_scanf_float+0x224>
 8005828:	2b59      	cmp	r3, #89	@ 0x59
 800582a:	d19a      	bne.n	8005762 <_scanf_float+0x66>
 800582c:	2d07      	cmp	r5, #7
 800582e:	d198      	bne.n	8005762 <_scanf_float+0x66>
 8005830:	2508      	movs	r5, #8
 8005832:	e02f      	b.n	8005894 <_scanf_float+0x198>
 8005834:	2b74      	cmp	r3, #116	@ 0x74
 8005836:	d073      	beq.n	8005920 <_scanf_float+0x224>
 8005838:	2b79      	cmp	r3, #121	@ 0x79
 800583a:	e7f6      	b.n	800582a <_scanf_float+0x12e>
 800583c:	6821      	ldr	r1, [r4, #0]
 800583e:	05c8      	lsls	r0, r1, #23
 8005840:	d51e      	bpl.n	8005880 <_scanf_float+0x184>
 8005842:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005846:	6021      	str	r1, [r4, #0]
 8005848:	3701      	adds	r7, #1
 800584a:	f1bb 0f00 	cmp.w	fp, #0
 800584e:	d003      	beq.n	8005858 <_scanf_float+0x15c>
 8005850:	3201      	adds	r2, #1
 8005852:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8005856:	60a2      	str	r2, [r4, #8]
 8005858:	68a3      	ldr	r3, [r4, #8]
 800585a:	3b01      	subs	r3, #1
 800585c:	60a3      	str	r3, [r4, #8]
 800585e:	6923      	ldr	r3, [r4, #16]
 8005860:	3301      	adds	r3, #1
 8005862:	6123      	str	r3, [r4, #16]
 8005864:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005868:	3b01      	subs	r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	f8c9 3004 	str.w	r3, [r9, #4]
 8005870:	f340 8082 	ble.w	8005978 <_scanf_float+0x27c>
 8005874:	f8d9 3000 	ldr.w	r3, [r9]
 8005878:	3301      	adds	r3, #1
 800587a:	f8c9 3000 	str.w	r3, [r9]
 800587e:	e762      	b.n	8005746 <_scanf_float+0x4a>
 8005880:	eb1a 0105 	adds.w	r1, sl, r5
 8005884:	f47f af6d 	bne.w	8005762 <_scanf_float+0x66>
 8005888:	6822      	ldr	r2, [r4, #0]
 800588a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800588e:	6022      	str	r2, [r4, #0]
 8005890:	460d      	mov	r5, r1
 8005892:	468a      	mov	sl, r1
 8005894:	f806 3b01 	strb.w	r3, [r6], #1
 8005898:	e7de      	b.n	8005858 <_scanf_float+0x15c>
 800589a:	6822      	ldr	r2, [r4, #0]
 800589c:	0610      	lsls	r0, r2, #24
 800589e:	f57f af60 	bpl.w	8005762 <_scanf_float+0x66>
 80058a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058a6:	6022      	str	r2, [r4, #0]
 80058a8:	e7f4      	b.n	8005894 <_scanf_float+0x198>
 80058aa:	f1ba 0f00 	cmp.w	sl, #0
 80058ae:	d10c      	bne.n	80058ca <_scanf_float+0x1ce>
 80058b0:	b977      	cbnz	r7, 80058d0 <_scanf_float+0x1d4>
 80058b2:	6822      	ldr	r2, [r4, #0]
 80058b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80058b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80058bc:	d108      	bne.n	80058d0 <_scanf_float+0x1d4>
 80058be:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80058c2:	6022      	str	r2, [r4, #0]
 80058c4:	f04f 0a01 	mov.w	sl, #1
 80058c8:	e7e4      	b.n	8005894 <_scanf_float+0x198>
 80058ca:	f1ba 0f02 	cmp.w	sl, #2
 80058ce:	d050      	beq.n	8005972 <_scanf_float+0x276>
 80058d0:	2d01      	cmp	r5, #1
 80058d2:	d002      	beq.n	80058da <_scanf_float+0x1de>
 80058d4:	2d04      	cmp	r5, #4
 80058d6:	f47f af44 	bne.w	8005762 <_scanf_float+0x66>
 80058da:	3501      	adds	r5, #1
 80058dc:	b2ed      	uxtb	r5, r5
 80058de:	e7d9      	b.n	8005894 <_scanf_float+0x198>
 80058e0:	f1ba 0f01 	cmp.w	sl, #1
 80058e4:	f47f af3d 	bne.w	8005762 <_scanf_float+0x66>
 80058e8:	f04f 0a02 	mov.w	sl, #2
 80058ec:	e7d2      	b.n	8005894 <_scanf_float+0x198>
 80058ee:	b975      	cbnz	r5, 800590e <_scanf_float+0x212>
 80058f0:	2f00      	cmp	r7, #0
 80058f2:	f47f af37 	bne.w	8005764 <_scanf_float+0x68>
 80058f6:	6822      	ldr	r2, [r4, #0]
 80058f8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80058fc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005900:	f040 8103 	bne.w	8005b0a <_scanf_float+0x40e>
 8005904:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005908:	6022      	str	r2, [r4, #0]
 800590a:	2501      	movs	r5, #1
 800590c:	e7c2      	b.n	8005894 <_scanf_float+0x198>
 800590e:	2d03      	cmp	r5, #3
 8005910:	d0e3      	beq.n	80058da <_scanf_float+0x1de>
 8005912:	2d05      	cmp	r5, #5
 8005914:	e7df      	b.n	80058d6 <_scanf_float+0x1da>
 8005916:	2d02      	cmp	r5, #2
 8005918:	f47f af23 	bne.w	8005762 <_scanf_float+0x66>
 800591c:	2503      	movs	r5, #3
 800591e:	e7b9      	b.n	8005894 <_scanf_float+0x198>
 8005920:	2d06      	cmp	r5, #6
 8005922:	f47f af1e 	bne.w	8005762 <_scanf_float+0x66>
 8005926:	2507      	movs	r5, #7
 8005928:	e7b4      	b.n	8005894 <_scanf_float+0x198>
 800592a:	6822      	ldr	r2, [r4, #0]
 800592c:	0591      	lsls	r1, r2, #22
 800592e:	f57f af18 	bpl.w	8005762 <_scanf_float+0x66>
 8005932:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005936:	6022      	str	r2, [r4, #0]
 8005938:	9702      	str	r7, [sp, #8]
 800593a:	e7ab      	b.n	8005894 <_scanf_float+0x198>
 800593c:	6822      	ldr	r2, [r4, #0]
 800593e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005942:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005946:	d005      	beq.n	8005954 <_scanf_float+0x258>
 8005948:	0550      	lsls	r0, r2, #21
 800594a:	f57f af0a 	bpl.w	8005762 <_scanf_float+0x66>
 800594e:	2f00      	cmp	r7, #0
 8005950:	f000 80db 	beq.w	8005b0a <_scanf_float+0x40e>
 8005954:	0591      	lsls	r1, r2, #22
 8005956:	bf58      	it	pl
 8005958:	9902      	ldrpl	r1, [sp, #8]
 800595a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800595e:	bf58      	it	pl
 8005960:	1a79      	subpl	r1, r7, r1
 8005962:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005966:	bf58      	it	pl
 8005968:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800596c:	6022      	str	r2, [r4, #0]
 800596e:	2700      	movs	r7, #0
 8005970:	e790      	b.n	8005894 <_scanf_float+0x198>
 8005972:	f04f 0a03 	mov.w	sl, #3
 8005976:	e78d      	b.n	8005894 <_scanf_float+0x198>
 8005978:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800597c:	4649      	mov	r1, r9
 800597e:	4640      	mov	r0, r8
 8005980:	4798      	blx	r3
 8005982:	2800      	cmp	r0, #0
 8005984:	f43f aedf 	beq.w	8005746 <_scanf_float+0x4a>
 8005988:	e6eb      	b.n	8005762 <_scanf_float+0x66>
 800598a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800598e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005992:	464a      	mov	r2, r9
 8005994:	4640      	mov	r0, r8
 8005996:	4798      	blx	r3
 8005998:	6923      	ldr	r3, [r4, #16]
 800599a:	3b01      	subs	r3, #1
 800599c:	6123      	str	r3, [r4, #16]
 800599e:	e6eb      	b.n	8005778 <_scanf_float+0x7c>
 80059a0:	1e6b      	subs	r3, r5, #1
 80059a2:	2b06      	cmp	r3, #6
 80059a4:	d824      	bhi.n	80059f0 <_scanf_float+0x2f4>
 80059a6:	2d02      	cmp	r5, #2
 80059a8:	d836      	bhi.n	8005a18 <_scanf_float+0x31c>
 80059aa:	9b01      	ldr	r3, [sp, #4]
 80059ac:	429e      	cmp	r6, r3
 80059ae:	f67f aee7 	bls.w	8005780 <_scanf_float+0x84>
 80059b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80059b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80059ba:	464a      	mov	r2, r9
 80059bc:	4640      	mov	r0, r8
 80059be:	4798      	blx	r3
 80059c0:	6923      	ldr	r3, [r4, #16]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	6123      	str	r3, [r4, #16]
 80059c6:	e7f0      	b.n	80059aa <_scanf_float+0x2ae>
 80059c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80059cc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80059d0:	464a      	mov	r2, r9
 80059d2:	4640      	mov	r0, r8
 80059d4:	4798      	blx	r3
 80059d6:	6923      	ldr	r3, [r4, #16]
 80059d8:	3b01      	subs	r3, #1
 80059da:	6123      	str	r3, [r4, #16]
 80059dc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80059e0:	fa5f fa8a 	uxtb.w	sl, sl
 80059e4:	f1ba 0f02 	cmp.w	sl, #2
 80059e8:	d1ee      	bne.n	80059c8 <_scanf_float+0x2cc>
 80059ea:	3d03      	subs	r5, #3
 80059ec:	b2ed      	uxtb	r5, r5
 80059ee:	1b76      	subs	r6, r6, r5
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	05da      	lsls	r2, r3, #23
 80059f4:	d530      	bpl.n	8005a58 <_scanf_float+0x35c>
 80059f6:	055b      	lsls	r3, r3, #21
 80059f8:	d511      	bpl.n	8005a1e <_scanf_float+0x322>
 80059fa:	9b01      	ldr	r3, [sp, #4]
 80059fc:	429e      	cmp	r6, r3
 80059fe:	f67f aebf 	bls.w	8005780 <_scanf_float+0x84>
 8005a02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a0a:	464a      	mov	r2, r9
 8005a0c:	4640      	mov	r0, r8
 8005a0e:	4798      	blx	r3
 8005a10:	6923      	ldr	r3, [r4, #16]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	6123      	str	r3, [r4, #16]
 8005a16:	e7f0      	b.n	80059fa <_scanf_float+0x2fe>
 8005a18:	46aa      	mov	sl, r5
 8005a1a:	46b3      	mov	fp, r6
 8005a1c:	e7de      	b.n	80059dc <_scanf_float+0x2e0>
 8005a1e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005a22:	6923      	ldr	r3, [r4, #16]
 8005a24:	2965      	cmp	r1, #101	@ 0x65
 8005a26:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005a2a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8005a2e:	6123      	str	r3, [r4, #16]
 8005a30:	d00c      	beq.n	8005a4c <_scanf_float+0x350>
 8005a32:	2945      	cmp	r1, #69	@ 0x45
 8005a34:	d00a      	beq.n	8005a4c <_scanf_float+0x350>
 8005a36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a3a:	464a      	mov	r2, r9
 8005a3c:	4640      	mov	r0, r8
 8005a3e:	4798      	blx	r3
 8005a40:	6923      	ldr	r3, [r4, #16]
 8005a42:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	1eb5      	subs	r5, r6, #2
 8005a4a:	6123      	str	r3, [r4, #16]
 8005a4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a50:	464a      	mov	r2, r9
 8005a52:	4640      	mov	r0, r8
 8005a54:	4798      	blx	r3
 8005a56:	462e      	mov	r6, r5
 8005a58:	6822      	ldr	r2, [r4, #0]
 8005a5a:	f012 0210 	ands.w	r2, r2, #16
 8005a5e:	d001      	beq.n	8005a64 <_scanf_float+0x368>
 8005a60:	2000      	movs	r0, #0
 8005a62:	e68e      	b.n	8005782 <_scanf_float+0x86>
 8005a64:	7032      	strb	r2, [r6, #0]
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005a6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a70:	d125      	bne.n	8005abe <_scanf_float+0x3c2>
 8005a72:	9b02      	ldr	r3, [sp, #8]
 8005a74:	429f      	cmp	r7, r3
 8005a76:	d00a      	beq.n	8005a8e <_scanf_float+0x392>
 8005a78:	1bda      	subs	r2, r3, r7
 8005a7a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005a7e:	429e      	cmp	r6, r3
 8005a80:	bf28      	it	cs
 8005a82:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005a86:	4922      	ldr	r1, [pc, #136]	@ (8005b10 <_scanf_float+0x414>)
 8005a88:	4630      	mov	r0, r6
 8005a8a:	f000 f845 	bl	8005b18 <siprintf>
 8005a8e:	9901      	ldr	r1, [sp, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	4640      	mov	r0, r8
 8005a94:	f000 ff7c 	bl	8006990 <_strtod_r>
 8005a98:	9b03      	ldr	r3, [sp, #12]
 8005a9a:	6821      	ldr	r1, [r4, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f011 0f02 	tst.w	r1, #2
 8005aa2:	ec57 6b10 	vmov	r6, r7, d0
 8005aa6:	f103 0204 	add.w	r2, r3, #4
 8005aaa:	d015      	beq.n	8005ad8 <_scanf_float+0x3dc>
 8005aac:	9903      	ldr	r1, [sp, #12]
 8005aae:	600a      	str	r2, [r1, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	e9c3 6700 	strd	r6, r7, [r3]
 8005ab6:	68e3      	ldr	r3, [r4, #12]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	60e3      	str	r3, [r4, #12]
 8005abc:	e7d0      	b.n	8005a60 <_scanf_float+0x364>
 8005abe:	9b04      	ldr	r3, [sp, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0e4      	beq.n	8005a8e <_scanf_float+0x392>
 8005ac4:	9905      	ldr	r1, [sp, #20]
 8005ac6:	230a      	movs	r3, #10
 8005ac8:	3101      	adds	r1, #1
 8005aca:	4640      	mov	r0, r8
 8005acc:	f001 f844 	bl	8006b58 <_strtol_r>
 8005ad0:	9b04      	ldr	r3, [sp, #16]
 8005ad2:	9e05      	ldr	r6, [sp, #20]
 8005ad4:	1ac2      	subs	r2, r0, r3
 8005ad6:	e7d0      	b.n	8005a7a <_scanf_float+0x37e>
 8005ad8:	f011 0f04 	tst.w	r1, #4
 8005adc:	9903      	ldr	r1, [sp, #12]
 8005ade:	600a      	str	r2, [r1, #0]
 8005ae0:	d1e6      	bne.n	8005ab0 <_scanf_float+0x3b4>
 8005ae2:	681d      	ldr	r5, [r3, #0]
 8005ae4:	4632      	mov	r2, r6
 8005ae6:	463b      	mov	r3, r7
 8005ae8:	4630      	mov	r0, r6
 8005aea:	4639      	mov	r1, r7
 8005aec:	f7fb f81e 	bl	8000b2c <__aeabi_dcmpun>
 8005af0:	b128      	cbz	r0, 8005afe <_scanf_float+0x402>
 8005af2:	4808      	ldr	r0, [pc, #32]	@ (8005b14 <_scanf_float+0x418>)
 8005af4:	f001 f924 	bl	8006d40 <nanf>
 8005af8:	ed85 0a00 	vstr	s0, [r5]
 8005afc:	e7db      	b.n	8005ab6 <_scanf_float+0x3ba>
 8005afe:	4630      	mov	r0, r6
 8005b00:	4639      	mov	r1, r7
 8005b02:	f7fb f871 	bl	8000be8 <__aeabi_d2f>
 8005b06:	6028      	str	r0, [r5, #0]
 8005b08:	e7d5      	b.n	8005ab6 <_scanf_float+0x3ba>
 8005b0a:	2700      	movs	r7, #0
 8005b0c:	e62e      	b.n	800576c <_scanf_float+0x70>
 8005b0e:	bf00      	nop
 8005b10:	0800a10e 	.word	0x0800a10e
 8005b14:	0800a2ca 	.word	0x0800a2ca

08005b18 <siprintf>:
 8005b18:	b40e      	push	{r1, r2, r3}
 8005b1a:	b510      	push	{r4, lr}
 8005b1c:	b09d      	sub	sp, #116	@ 0x74
 8005b1e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005b20:	9002      	str	r0, [sp, #8]
 8005b22:	9006      	str	r0, [sp, #24]
 8005b24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b28:	480a      	ldr	r0, [pc, #40]	@ (8005b54 <siprintf+0x3c>)
 8005b2a:	9107      	str	r1, [sp, #28]
 8005b2c:	9104      	str	r1, [sp, #16]
 8005b2e:	490a      	ldr	r1, [pc, #40]	@ (8005b58 <siprintf+0x40>)
 8005b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b34:	9105      	str	r1, [sp, #20]
 8005b36:	2400      	movs	r4, #0
 8005b38:	a902      	add	r1, sp, #8
 8005b3a:	6800      	ldr	r0, [r0, #0]
 8005b3c:	9301      	str	r3, [sp, #4]
 8005b3e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005b40:	f002 fb3c 	bl	80081bc <_svfiprintf_r>
 8005b44:	9b02      	ldr	r3, [sp, #8]
 8005b46:	701c      	strb	r4, [r3, #0]
 8005b48:	b01d      	add	sp, #116	@ 0x74
 8005b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b4e:	b003      	add	sp, #12
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	20000190 	.word	0x20000190
 8005b58:	ffff0208 	.word	0xffff0208

08005b5c <siscanf>:
 8005b5c:	b40e      	push	{r1, r2, r3}
 8005b5e:	b570      	push	{r4, r5, r6, lr}
 8005b60:	b09d      	sub	sp, #116	@ 0x74
 8005b62:	ac21      	add	r4, sp, #132	@ 0x84
 8005b64:	2500      	movs	r5, #0
 8005b66:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005b6a:	f854 6b04 	ldr.w	r6, [r4], #4
 8005b6e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005b72:	951b      	str	r5, [sp, #108]	@ 0x6c
 8005b74:	9002      	str	r0, [sp, #8]
 8005b76:	9006      	str	r0, [sp, #24]
 8005b78:	f7fa fb7a 	bl	8000270 <strlen>
 8005b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005bac <siscanf+0x50>)
 8005b7e:	9003      	str	r0, [sp, #12]
 8005b80:	9007      	str	r0, [sp, #28]
 8005b82:	480b      	ldr	r0, [pc, #44]	@ (8005bb0 <siscanf+0x54>)
 8005b84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005b8a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b8e:	4632      	mov	r2, r6
 8005b90:	4623      	mov	r3, r4
 8005b92:	a902      	add	r1, sp, #8
 8005b94:	6800      	ldr	r0, [r0, #0]
 8005b96:	950f      	str	r5, [sp, #60]	@ 0x3c
 8005b98:	9514      	str	r5, [sp, #80]	@ 0x50
 8005b9a:	9401      	str	r4, [sp, #4]
 8005b9c:	f002 fc64 	bl	8008468 <__ssvfiscanf_r>
 8005ba0:	b01d      	add	sp, #116	@ 0x74
 8005ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ba6:	b003      	add	sp, #12
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	08005bd7 	.word	0x08005bd7
 8005bb0:	20000190 	.word	0x20000190

08005bb4 <__sread>:
 8005bb4:	b510      	push	{r4, lr}
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bbc:	f001 f842 	bl	8006c44 <_read_r>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	bfab      	itete	ge
 8005bc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005bc6:	89a3      	ldrhlt	r3, [r4, #12]
 8005bc8:	181b      	addge	r3, r3, r0
 8005bca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005bce:	bfac      	ite	ge
 8005bd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005bd2:	81a3      	strhlt	r3, [r4, #12]
 8005bd4:	bd10      	pop	{r4, pc}

08005bd6 <__seofread>:
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	4770      	bx	lr

08005bda <__swrite>:
 8005bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bde:	461f      	mov	r7, r3
 8005be0:	898b      	ldrh	r3, [r1, #12]
 8005be2:	05db      	lsls	r3, r3, #23
 8005be4:	4605      	mov	r5, r0
 8005be6:	460c      	mov	r4, r1
 8005be8:	4616      	mov	r6, r2
 8005bea:	d505      	bpl.n	8005bf8 <__swrite+0x1e>
 8005bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f001 f814 	bl	8006c20 <_lseek_r>
 8005bf8:	89a3      	ldrh	r3, [r4, #12]
 8005bfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c02:	81a3      	strh	r3, [r4, #12]
 8005c04:	4632      	mov	r2, r6
 8005c06:	463b      	mov	r3, r7
 8005c08:	4628      	mov	r0, r5
 8005c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c0e:	f001 b82b 	b.w	8006c68 <_write_r>

08005c12 <__sseek>:
 8005c12:	b510      	push	{r4, lr}
 8005c14:	460c      	mov	r4, r1
 8005c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c1a:	f001 f801 	bl	8006c20 <_lseek_r>
 8005c1e:	1c43      	adds	r3, r0, #1
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	bf15      	itete	ne
 8005c24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c2e:	81a3      	strheq	r3, [r4, #12]
 8005c30:	bf18      	it	ne
 8005c32:	81a3      	strhne	r3, [r4, #12]
 8005c34:	bd10      	pop	{r4, pc}

08005c36 <__sclose>:
 8005c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c3a:	f001 b859 	b.w	8006cf0 <_close_r>
	...

08005c40 <std>:
 8005c40:	2300      	movs	r3, #0
 8005c42:	b510      	push	{r4, lr}
 8005c44:	4604      	mov	r4, r0
 8005c46:	e9c0 3300 	strd	r3, r3, [r0]
 8005c4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c4e:	6083      	str	r3, [r0, #8]
 8005c50:	8181      	strh	r1, [r0, #12]
 8005c52:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c54:	81c2      	strh	r2, [r0, #14]
 8005c56:	6183      	str	r3, [r0, #24]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	2208      	movs	r2, #8
 8005c5c:	305c      	adds	r0, #92	@ 0x5c
 8005c5e:	f000 ffa5 	bl	8006bac <memset>
 8005c62:	4b0d      	ldr	r3, [pc, #52]	@ (8005c98 <std+0x58>)
 8005c64:	6263      	str	r3, [r4, #36]	@ 0x24
 8005c66:	4b0d      	ldr	r3, [pc, #52]	@ (8005c9c <std+0x5c>)
 8005c68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca0 <std+0x60>)
 8005c6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca4 <std+0x64>)
 8005c70:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c72:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca8 <std+0x68>)
 8005c74:	6224      	str	r4, [r4, #32]
 8005c76:	429c      	cmp	r4, r3
 8005c78:	d006      	beq.n	8005c88 <std+0x48>
 8005c7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c7e:	4294      	cmp	r4, r2
 8005c80:	d002      	beq.n	8005c88 <std+0x48>
 8005c82:	33d0      	adds	r3, #208	@ 0xd0
 8005c84:	429c      	cmp	r4, r3
 8005c86:	d105      	bne.n	8005c94 <std+0x54>
 8005c88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c90:	f001 b826 	b.w	8006ce0 <__retarget_lock_init_recursive>
 8005c94:	bd10      	pop	{r4, pc}
 8005c96:	bf00      	nop
 8005c98:	08005bb5 	.word	0x08005bb5
 8005c9c:	08005bdb 	.word	0x08005bdb
 8005ca0:	08005c13 	.word	0x08005c13
 8005ca4:	08005c37 	.word	0x08005c37
 8005ca8:	20000964 	.word	0x20000964

08005cac <stdio_exit_handler>:
 8005cac:	4a02      	ldr	r2, [pc, #8]	@ (8005cb8 <stdio_exit_handler+0xc>)
 8005cae:	4903      	ldr	r1, [pc, #12]	@ (8005cbc <stdio_exit_handler+0x10>)
 8005cb0:	4803      	ldr	r0, [pc, #12]	@ (8005cc0 <stdio_exit_handler+0x14>)
 8005cb2:	f000 bf5d 	b.w	8006b70 <_fwalk_sglue>
 8005cb6:	bf00      	nop
 8005cb8:	20000018 	.word	0x20000018
 8005cbc:	08008ce5 	.word	0x08008ce5
 8005cc0:	20000194 	.word	0x20000194

08005cc4 <cleanup_stdio>:
 8005cc4:	6841      	ldr	r1, [r0, #4]
 8005cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf8 <cleanup_stdio+0x34>)
 8005cc8:	4299      	cmp	r1, r3
 8005cca:	b510      	push	{r4, lr}
 8005ccc:	4604      	mov	r4, r0
 8005cce:	d001      	beq.n	8005cd4 <cleanup_stdio+0x10>
 8005cd0:	f003 f808 	bl	8008ce4 <_fflush_r>
 8005cd4:	68a1      	ldr	r1, [r4, #8]
 8005cd6:	4b09      	ldr	r3, [pc, #36]	@ (8005cfc <cleanup_stdio+0x38>)
 8005cd8:	4299      	cmp	r1, r3
 8005cda:	d002      	beq.n	8005ce2 <cleanup_stdio+0x1e>
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f003 f801 	bl	8008ce4 <_fflush_r>
 8005ce2:	68e1      	ldr	r1, [r4, #12]
 8005ce4:	4b06      	ldr	r3, [pc, #24]	@ (8005d00 <cleanup_stdio+0x3c>)
 8005ce6:	4299      	cmp	r1, r3
 8005ce8:	d004      	beq.n	8005cf4 <cleanup_stdio+0x30>
 8005cea:	4620      	mov	r0, r4
 8005cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf0:	f002 bff8 	b.w	8008ce4 <_fflush_r>
 8005cf4:	bd10      	pop	{r4, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000964 	.word	0x20000964
 8005cfc:	200009cc 	.word	0x200009cc
 8005d00:	20000a34 	.word	0x20000a34

08005d04 <global_stdio_init.part.0>:
 8005d04:	b510      	push	{r4, lr}
 8005d06:	4b0b      	ldr	r3, [pc, #44]	@ (8005d34 <global_stdio_init.part.0+0x30>)
 8005d08:	4c0b      	ldr	r4, [pc, #44]	@ (8005d38 <global_stdio_init.part.0+0x34>)
 8005d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8005d3c <global_stdio_init.part.0+0x38>)
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	4620      	mov	r0, r4
 8005d10:	2200      	movs	r2, #0
 8005d12:	2104      	movs	r1, #4
 8005d14:	f7ff ff94 	bl	8005c40 <std>
 8005d18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	2109      	movs	r1, #9
 8005d20:	f7ff ff8e 	bl	8005c40 <std>
 8005d24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d28:	2202      	movs	r2, #2
 8005d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d2e:	2112      	movs	r1, #18
 8005d30:	f7ff bf86 	b.w	8005c40 <std>
 8005d34:	20000a9c 	.word	0x20000a9c
 8005d38:	20000964 	.word	0x20000964
 8005d3c:	08005cad 	.word	0x08005cad

08005d40 <__sfp_lock_acquire>:
 8005d40:	4801      	ldr	r0, [pc, #4]	@ (8005d48 <__sfp_lock_acquire+0x8>)
 8005d42:	f000 bfce 	b.w	8006ce2 <__retarget_lock_acquire_recursive>
 8005d46:	bf00      	nop
 8005d48:	20000aa1 	.word	0x20000aa1

08005d4c <__sfp_lock_release>:
 8005d4c:	4801      	ldr	r0, [pc, #4]	@ (8005d54 <__sfp_lock_release+0x8>)
 8005d4e:	f000 bfc9 	b.w	8006ce4 <__retarget_lock_release_recursive>
 8005d52:	bf00      	nop
 8005d54:	20000aa1 	.word	0x20000aa1

08005d58 <__sinit>:
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	f7ff fff0 	bl	8005d40 <__sfp_lock_acquire>
 8005d60:	6a23      	ldr	r3, [r4, #32]
 8005d62:	b11b      	cbz	r3, 8005d6c <__sinit+0x14>
 8005d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d68:	f7ff bff0 	b.w	8005d4c <__sfp_lock_release>
 8005d6c:	4b04      	ldr	r3, [pc, #16]	@ (8005d80 <__sinit+0x28>)
 8005d6e:	6223      	str	r3, [r4, #32]
 8005d70:	4b04      	ldr	r3, [pc, #16]	@ (8005d84 <__sinit+0x2c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1f5      	bne.n	8005d64 <__sinit+0xc>
 8005d78:	f7ff ffc4 	bl	8005d04 <global_stdio_init.part.0>
 8005d7c:	e7f2      	b.n	8005d64 <__sinit+0xc>
 8005d7e:	bf00      	nop
 8005d80:	08005cc5 	.word	0x08005cc5
 8005d84:	20000a9c 	.word	0x20000a9c

08005d88 <sulp>:
 8005d88:	b570      	push	{r4, r5, r6, lr}
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	460d      	mov	r5, r1
 8005d8e:	ec45 4b10 	vmov	d0, r4, r5
 8005d92:	4616      	mov	r6, r2
 8005d94:	f003 fb46 	bl	8009424 <__ulp>
 8005d98:	ec51 0b10 	vmov	r0, r1, d0
 8005d9c:	b17e      	cbz	r6, 8005dbe <sulp+0x36>
 8005d9e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005da2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	dd09      	ble.n	8005dbe <sulp+0x36>
 8005daa:	051b      	lsls	r3, r3, #20
 8005dac:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005db0:	2400      	movs	r4, #0
 8005db2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005db6:	4622      	mov	r2, r4
 8005db8:	462b      	mov	r3, r5
 8005dba:	f7fa fc1d 	bl	80005f8 <__aeabi_dmul>
 8005dbe:	ec41 0b10 	vmov	d0, r0, r1
 8005dc2:	bd70      	pop	{r4, r5, r6, pc}
 8005dc4:	0000      	movs	r0, r0
	...

08005dc8 <_strtod_l>:
 8005dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dcc:	b09f      	sub	sp, #124	@ 0x7c
 8005dce:	460c      	mov	r4, r1
 8005dd0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	921a      	str	r2, [sp, #104]	@ 0x68
 8005dd6:	9005      	str	r0, [sp, #20]
 8005dd8:	f04f 0a00 	mov.w	sl, #0
 8005ddc:	f04f 0b00 	mov.w	fp, #0
 8005de0:	460a      	mov	r2, r1
 8005de2:	9219      	str	r2, [sp, #100]	@ 0x64
 8005de4:	7811      	ldrb	r1, [r2, #0]
 8005de6:	292b      	cmp	r1, #43	@ 0x2b
 8005de8:	d04a      	beq.n	8005e80 <_strtod_l+0xb8>
 8005dea:	d838      	bhi.n	8005e5e <_strtod_l+0x96>
 8005dec:	290d      	cmp	r1, #13
 8005dee:	d832      	bhi.n	8005e56 <_strtod_l+0x8e>
 8005df0:	2908      	cmp	r1, #8
 8005df2:	d832      	bhi.n	8005e5a <_strtod_l+0x92>
 8005df4:	2900      	cmp	r1, #0
 8005df6:	d03b      	beq.n	8005e70 <_strtod_l+0xa8>
 8005df8:	2200      	movs	r2, #0
 8005dfa:	920e      	str	r2, [sp, #56]	@ 0x38
 8005dfc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005dfe:	782a      	ldrb	r2, [r5, #0]
 8005e00:	2a30      	cmp	r2, #48	@ 0x30
 8005e02:	f040 80b2 	bne.w	8005f6a <_strtod_l+0x1a2>
 8005e06:	786a      	ldrb	r2, [r5, #1]
 8005e08:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005e0c:	2a58      	cmp	r2, #88	@ 0x58
 8005e0e:	d16e      	bne.n	8005eee <_strtod_l+0x126>
 8005e10:	9302      	str	r3, [sp, #8]
 8005e12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e14:	9301      	str	r3, [sp, #4]
 8005e16:	ab1a      	add	r3, sp, #104	@ 0x68
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	4a8f      	ldr	r2, [pc, #572]	@ (8006058 <_strtod_l+0x290>)
 8005e1c:	9805      	ldr	r0, [sp, #20]
 8005e1e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005e20:	a919      	add	r1, sp, #100	@ 0x64
 8005e22:	f001 fe9f 	bl	8007b64 <__gethex>
 8005e26:	f010 060f 	ands.w	r6, r0, #15
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	d005      	beq.n	8005e3a <_strtod_l+0x72>
 8005e2e:	2e06      	cmp	r6, #6
 8005e30:	d128      	bne.n	8005e84 <_strtod_l+0xbc>
 8005e32:	3501      	adds	r5, #1
 8005e34:	2300      	movs	r3, #0
 8005e36:	9519      	str	r5, [sp, #100]	@ 0x64
 8005e38:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f040 858e 	bne.w	800695e <_strtod_l+0xb96>
 8005e42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e44:	b1cb      	cbz	r3, 8005e7a <_strtod_l+0xb2>
 8005e46:	4652      	mov	r2, sl
 8005e48:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8005e4c:	ec43 2b10 	vmov	d0, r2, r3
 8005e50:	b01f      	add	sp, #124	@ 0x7c
 8005e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e56:	2920      	cmp	r1, #32
 8005e58:	d1ce      	bne.n	8005df8 <_strtod_l+0x30>
 8005e5a:	3201      	adds	r2, #1
 8005e5c:	e7c1      	b.n	8005de2 <_strtod_l+0x1a>
 8005e5e:	292d      	cmp	r1, #45	@ 0x2d
 8005e60:	d1ca      	bne.n	8005df8 <_strtod_l+0x30>
 8005e62:	2101      	movs	r1, #1
 8005e64:	910e      	str	r1, [sp, #56]	@ 0x38
 8005e66:	1c51      	adds	r1, r2, #1
 8005e68:	9119      	str	r1, [sp, #100]	@ 0x64
 8005e6a:	7852      	ldrb	r2, [r2, #1]
 8005e6c:	2a00      	cmp	r2, #0
 8005e6e:	d1c5      	bne.n	8005dfc <_strtod_l+0x34>
 8005e70:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005e72:	9419      	str	r4, [sp, #100]	@ 0x64
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f040 8570 	bne.w	800695a <_strtod_l+0xb92>
 8005e7a:	4652      	mov	r2, sl
 8005e7c:	465b      	mov	r3, fp
 8005e7e:	e7e5      	b.n	8005e4c <_strtod_l+0x84>
 8005e80:	2100      	movs	r1, #0
 8005e82:	e7ef      	b.n	8005e64 <_strtod_l+0x9c>
 8005e84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005e86:	b13a      	cbz	r2, 8005e98 <_strtod_l+0xd0>
 8005e88:	2135      	movs	r1, #53	@ 0x35
 8005e8a:	a81c      	add	r0, sp, #112	@ 0x70
 8005e8c:	f003 fbc4 	bl	8009618 <__copybits>
 8005e90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005e92:	9805      	ldr	r0, [sp, #20]
 8005e94:	f002 ff9a 	bl	8008dcc <_Bfree>
 8005e98:	3e01      	subs	r6, #1
 8005e9a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005e9c:	2e04      	cmp	r6, #4
 8005e9e:	d806      	bhi.n	8005eae <_strtod_l+0xe6>
 8005ea0:	e8df f006 	tbb	[pc, r6]
 8005ea4:	201d0314 	.word	0x201d0314
 8005ea8:	14          	.byte	0x14
 8005ea9:	00          	.byte	0x00
 8005eaa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005eae:	05e1      	lsls	r1, r4, #23
 8005eb0:	bf48      	it	mi
 8005eb2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005eb6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005eba:	0d1b      	lsrs	r3, r3, #20
 8005ebc:	051b      	lsls	r3, r3, #20
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1bb      	bne.n	8005e3a <_strtod_l+0x72>
 8005ec2:	f000 fee3 	bl	8006c8c <__errno>
 8005ec6:	2322      	movs	r3, #34	@ 0x22
 8005ec8:	6003      	str	r3, [r0, #0]
 8005eca:	e7b6      	b.n	8005e3a <_strtod_l+0x72>
 8005ecc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005ed0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005ed4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005ed8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005edc:	e7e7      	b.n	8005eae <_strtod_l+0xe6>
 8005ede:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8006060 <_strtod_l+0x298>
 8005ee2:	e7e4      	b.n	8005eae <_strtod_l+0xe6>
 8005ee4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005ee8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005eec:	e7df      	b.n	8005eae <_strtod_l+0xe6>
 8005eee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	9219      	str	r2, [sp, #100]	@ 0x64
 8005ef4:	785b      	ldrb	r3, [r3, #1]
 8005ef6:	2b30      	cmp	r3, #48	@ 0x30
 8005ef8:	d0f9      	beq.n	8005eee <_strtod_l+0x126>
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d09d      	beq.n	8005e3a <_strtod_l+0x72>
 8005efe:	2301      	movs	r3, #1
 8005f00:	2700      	movs	r7, #0
 8005f02:	9308      	str	r3, [sp, #32]
 8005f04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f06:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f08:	970b      	str	r7, [sp, #44]	@ 0x2c
 8005f0a:	46b9      	mov	r9, r7
 8005f0c:	220a      	movs	r2, #10
 8005f0e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005f10:	7805      	ldrb	r5, [r0, #0]
 8005f12:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005f16:	b2d9      	uxtb	r1, r3
 8005f18:	2909      	cmp	r1, #9
 8005f1a:	d928      	bls.n	8005f6e <_strtod_l+0x1a6>
 8005f1c:	494f      	ldr	r1, [pc, #316]	@ (800605c <_strtod_l+0x294>)
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f000 fe59 	bl	8006bd6 <strncmp>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d032      	beq.n	8005f8e <_strtod_l+0x1c6>
 8005f28:	2000      	movs	r0, #0
 8005f2a:	462a      	mov	r2, r5
 8005f2c:	900a      	str	r0, [sp, #40]	@ 0x28
 8005f2e:	464d      	mov	r5, r9
 8005f30:	4603      	mov	r3, r0
 8005f32:	2a65      	cmp	r2, #101	@ 0x65
 8005f34:	d001      	beq.n	8005f3a <_strtod_l+0x172>
 8005f36:	2a45      	cmp	r2, #69	@ 0x45
 8005f38:	d114      	bne.n	8005f64 <_strtod_l+0x19c>
 8005f3a:	b91d      	cbnz	r5, 8005f44 <_strtod_l+0x17c>
 8005f3c:	9a08      	ldr	r2, [sp, #32]
 8005f3e:	4302      	orrs	r2, r0
 8005f40:	d096      	beq.n	8005e70 <_strtod_l+0xa8>
 8005f42:	2500      	movs	r5, #0
 8005f44:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005f46:	1c62      	adds	r2, r4, #1
 8005f48:	9219      	str	r2, [sp, #100]	@ 0x64
 8005f4a:	7862      	ldrb	r2, [r4, #1]
 8005f4c:	2a2b      	cmp	r2, #43	@ 0x2b
 8005f4e:	d07a      	beq.n	8006046 <_strtod_l+0x27e>
 8005f50:	2a2d      	cmp	r2, #45	@ 0x2d
 8005f52:	d07e      	beq.n	8006052 <_strtod_l+0x28a>
 8005f54:	f04f 0c00 	mov.w	ip, #0
 8005f58:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005f5c:	2909      	cmp	r1, #9
 8005f5e:	f240 8085 	bls.w	800606c <_strtod_l+0x2a4>
 8005f62:	9419      	str	r4, [sp, #100]	@ 0x64
 8005f64:	f04f 0800 	mov.w	r8, #0
 8005f68:	e0a5      	b.n	80060b6 <_strtod_l+0x2ee>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e7c8      	b.n	8005f00 <_strtod_l+0x138>
 8005f6e:	f1b9 0f08 	cmp.w	r9, #8
 8005f72:	bfd8      	it	le
 8005f74:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8005f76:	f100 0001 	add.w	r0, r0, #1
 8005f7a:	bfda      	itte	le
 8005f7c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005f80:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8005f82:	fb02 3707 	mlagt	r7, r2, r7, r3
 8005f86:	f109 0901 	add.w	r9, r9, #1
 8005f8a:	9019      	str	r0, [sp, #100]	@ 0x64
 8005f8c:	e7bf      	b.n	8005f0e <_strtod_l+0x146>
 8005f8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	9219      	str	r2, [sp, #100]	@ 0x64
 8005f94:	785a      	ldrb	r2, [r3, #1]
 8005f96:	f1b9 0f00 	cmp.w	r9, #0
 8005f9a:	d03b      	beq.n	8006014 <_strtod_l+0x24c>
 8005f9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8005f9e:	464d      	mov	r5, r9
 8005fa0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005fa4:	2b09      	cmp	r3, #9
 8005fa6:	d912      	bls.n	8005fce <_strtod_l+0x206>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e7c2      	b.n	8005f32 <_strtod_l+0x16a>
 8005fac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	9219      	str	r2, [sp, #100]	@ 0x64
 8005fb2:	785a      	ldrb	r2, [r3, #1]
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	2a30      	cmp	r2, #48	@ 0x30
 8005fb8:	d0f8      	beq.n	8005fac <_strtod_l+0x1e4>
 8005fba:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	f200 84d2 	bhi.w	8006968 <_strtod_l+0xba0>
 8005fc4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005fc6:	900a      	str	r0, [sp, #40]	@ 0x28
 8005fc8:	2000      	movs	r0, #0
 8005fca:	930c      	str	r3, [sp, #48]	@ 0x30
 8005fcc:	4605      	mov	r5, r0
 8005fce:	3a30      	subs	r2, #48	@ 0x30
 8005fd0:	f100 0301 	add.w	r3, r0, #1
 8005fd4:	d018      	beq.n	8006008 <_strtod_l+0x240>
 8005fd6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005fd8:	4419      	add	r1, r3
 8005fda:	910a      	str	r1, [sp, #40]	@ 0x28
 8005fdc:	462e      	mov	r6, r5
 8005fde:	f04f 0e0a 	mov.w	lr, #10
 8005fe2:	1c71      	adds	r1, r6, #1
 8005fe4:	eba1 0c05 	sub.w	ip, r1, r5
 8005fe8:	4563      	cmp	r3, ip
 8005fea:	dc15      	bgt.n	8006018 <_strtod_l+0x250>
 8005fec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8005ff0:	182b      	adds	r3, r5, r0
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	f105 0501 	add.w	r5, r5, #1
 8005ff8:	4405      	add	r5, r0
 8005ffa:	dc1a      	bgt.n	8006032 <_strtod_l+0x26a>
 8005ffc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005ffe:	230a      	movs	r3, #10
 8006000:	fb03 2301 	mla	r3, r3, r1, r2
 8006004:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006006:	2300      	movs	r3, #0
 8006008:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800600a:	1c51      	adds	r1, r2, #1
 800600c:	9119      	str	r1, [sp, #100]	@ 0x64
 800600e:	7852      	ldrb	r2, [r2, #1]
 8006010:	4618      	mov	r0, r3
 8006012:	e7c5      	b.n	8005fa0 <_strtod_l+0x1d8>
 8006014:	4648      	mov	r0, r9
 8006016:	e7ce      	b.n	8005fb6 <_strtod_l+0x1ee>
 8006018:	2e08      	cmp	r6, #8
 800601a:	dc05      	bgt.n	8006028 <_strtod_l+0x260>
 800601c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800601e:	fb0e f606 	mul.w	r6, lr, r6
 8006022:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006024:	460e      	mov	r6, r1
 8006026:	e7dc      	b.n	8005fe2 <_strtod_l+0x21a>
 8006028:	2910      	cmp	r1, #16
 800602a:	bfd8      	it	le
 800602c:	fb0e f707 	mulle.w	r7, lr, r7
 8006030:	e7f8      	b.n	8006024 <_strtod_l+0x25c>
 8006032:	2b0f      	cmp	r3, #15
 8006034:	bfdc      	itt	le
 8006036:	230a      	movle	r3, #10
 8006038:	fb03 2707 	mlale	r7, r3, r7, r2
 800603c:	e7e3      	b.n	8006006 <_strtod_l+0x23e>
 800603e:	2300      	movs	r3, #0
 8006040:	930a      	str	r3, [sp, #40]	@ 0x28
 8006042:	2301      	movs	r3, #1
 8006044:	e77a      	b.n	8005f3c <_strtod_l+0x174>
 8006046:	f04f 0c00 	mov.w	ip, #0
 800604a:	1ca2      	adds	r2, r4, #2
 800604c:	9219      	str	r2, [sp, #100]	@ 0x64
 800604e:	78a2      	ldrb	r2, [r4, #2]
 8006050:	e782      	b.n	8005f58 <_strtod_l+0x190>
 8006052:	f04f 0c01 	mov.w	ip, #1
 8006056:	e7f8      	b.n	800604a <_strtod_l+0x282>
 8006058:	0800a2e0 	.word	0x0800a2e0
 800605c:	0800a113 	.word	0x0800a113
 8006060:	7ff00000 	.word	0x7ff00000
 8006064:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006066:	1c51      	adds	r1, r2, #1
 8006068:	9119      	str	r1, [sp, #100]	@ 0x64
 800606a:	7852      	ldrb	r2, [r2, #1]
 800606c:	2a30      	cmp	r2, #48	@ 0x30
 800606e:	d0f9      	beq.n	8006064 <_strtod_l+0x29c>
 8006070:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006074:	2908      	cmp	r1, #8
 8006076:	f63f af75 	bhi.w	8005f64 <_strtod_l+0x19c>
 800607a:	3a30      	subs	r2, #48	@ 0x30
 800607c:	9209      	str	r2, [sp, #36]	@ 0x24
 800607e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006080:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006082:	f04f 080a 	mov.w	r8, #10
 8006086:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006088:	1c56      	adds	r6, r2, #1
 800608a:	9619      	str	r6, [sp, #100]	@ 0x64
 800608c:	7852      	ldrb	r2, [r2, #1]
 800608e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006092:	f1be 0f09 	cmp.w	lr, #9
 8006096:	d939      	bls.n	800610c <_strtod_l+0x344>
 8006098:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800609a:	1a76      	subs	r6, r6, r1
 800609c:	2e08      	cmp	r6, #8
 800609e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80060a2:	dc03      	bgt.n	80060ac <_strtod_l+0x2e4>
 80060a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80060a6:	4588      	cmp	r8, r1
 80060a8:	bfa8      	it	ge
 80060aa:	4688      	movge	r8, r1
 80060ac:	f1bc 0f00 	cmp.w	ip, #0
 80060b0:	d001      	beq.n	80060b6 <_strtod_l+0x2ee>
 80060b2:	f1c8 0800 	rsb	r8, r8, #0
 80060b6:	2d00      	cmp	r5, #0
 80060b8:	d14e      	bne.n	8006158 <_strtod_l+0x390>
 80060ba:	9908      	ldr	r1, [sp, #32]
 80060bc:	4308      	orrs	r0, r1
 80060be:	f47f aebc 	bne.w	8005e3a <_strtod_l+0x72>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f47f aed4 	bne.w	8005e70 <_strtod_l+0xa8>
 80060c8:	2a69      	cmp	r2, #105	@ 0x69
 80060ca:	d028      	beq.n	800611e <_strtod_l+0x356>
 80060cc:	dc25      	bgt.n	800611a <_strtod_l+0x352>
 80060ce:	2a49      	cmp	r2, #73	@ 0x49
 80060d0:	d025      	beq.n	800611e <_strtod_l+0x356>
 80060d2:	2a4e      	cmp	r2, #78	@ 0x4e
 80060d4:	f47f aecc 	bne.w	8005e70 <_strtod_l+0xa8>
 80060d8:	499a      	ldr	r1, [pc, #616]	@ (8006344 <_strtod_l+0x57c>)
 80060da:	a819      	add	r0, sp, #100	@ 0x64
 80060dc:	f001 ff64 	bl	8007fa8 <__match>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	f43f aec5 	beq.w	8005e70 <_strtod_l+0xa8>
 80060e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b28      	cmp	r3, #40	@ 0x28
 80060ec:	d12e      	bne.n	800614c <_strtod_l+0x384>
 80060ee:	4996      	ldr	r1, [pc, #600]	@ (8006348 <_strtod_l+0x580>)
 80060f0:	aa1c      	add	r2, sp, #112	@ 0x70
 80060f2:	a819      	add	r0, sp, #100	@ 0x64
 80060f4:	f001 ff6c 	bl	8007fd0 <__hexnan>
 80060f8:	2805      	cmp	r0, #5
 80060fa:	d127      	bne.n	800614c <_strtod_l+0x384>
 80060fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80060fe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006102:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006106:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800610a:	e696      	b.n	8005e3a <_strtod_l+0x72>
 800610c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800610e:	fb08 2101 	mla	r1, r8, r1, r2
 8006112:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006116:	9209      	str	r2, [sp, #36]	@ 0x24
 8006118:	e7b5      	b.n	8006086 <_strtod_l+0x2be>
 800611a:	2a6e      	cmp	r2, #110	@ 0x6e
 800611c:	e7da      	b.n	80060d4 <_strtod_l+0x30c>
 800611e:	498b      	ldr	r1, [pc, #556]	@ (800634c <_strtod_l+0x584>)
 8006120:	a819      	add	r0, sp, #100	@ 0x64
 8006122:	f001 ff41 	bl	8007fa8 <__match>
 8006126:	2800      	cmp	r0, #0
 8006128:	f43f aea2 	beq.w	8005e70 <_strtod_l+0xa8>
 800612c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800612e:	4988      	ldr	r1, [pc, #544]	@ (8006350 <_strtod_l+0x588>)
 8006130:	3b01      	subs	r3, #1
 8006132:	a819      	add	r0, sp, #100	@ 0x64
 8006134:	9319      	str	r3, [sp, #100]	@ 0x64
 8006136:	f001 ff37 	bl	8007fa8 <__match>
 800613a:	b910      	cbnz	r0, 8006142 <_strtod_l+0x37a>
 800613c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800613e:	3301      	adds	r3, #1
 8006140:	9319      	str	r3, [sp, #100]	@ 0x64
 8006142:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8006360 <_strtod_l+0x598>
 8006146:	f04f 0a00 	mov.w	sl, #0
 800614a:	e676      	b.n	8005e3a <_strtod_l+0x72>
 800614c:	4881      	ldr	r0, [pc, #516]	@ (8006354 <_strtod_l+0x58c>)
 800614e:	f000 fdef 	bl	8006d30 <nan>
 8006152:	ec5b ab10 	vmov	sl, fp, d0
 8006156:	e670      	b.n	8005e3a <_strtod_l+0x72>
 8006158:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800615a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800615c:	eba8 0303 	sub.w	r3, r8, r3
 8006160:	f1b9 0f00 	cmp.w	r9, #0
 8006164:	bf08      	it	eq
 8006166:	46a9      	moveq	r9, r5
 8006168:	2d10      	cmp	r5, #16
 800616a:	9309      	str	r3, [sp, #36]	@ 0x24
 800616c:	462c      	mov	r4, r5
 800616e:	bfa8      	it	ge
 8006170:	2410      	movge	r4, #16
 8006172:	f7fa f9c7 	bl	8000504 <__aeabi_ui2d>
 8006176:	2d09      	cmp	r5, #9
 8006178:	4682      	mov	sl, r0
 800617a:	468b      	mov	fp, r1
 800617c:	dc13      	bgt.n	80061a6 <_strtod_l+0x3de>
 800617e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006180:	2b00      	cmp	r3, #0
 8006182:	f43f ae5a 	beq.w	8005e3a <_strtod_l+0x72>
 8006186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006188:	dd78      	ble.n	800627c <_strtod_l+0x4b4>
 800618a:	2b16      	cmp	r3, #22
 800618c:	dc5f      	bgt.n	800624e <_strtod_l+0x486>
 800618e:	4972      	ldr	r1, [pc, #456]	@ (8006358 <_strtod_l+0x590>)
 8006190:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006194:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006198:	4652      	mov	r2, sl
 800619a:	465b      	mov	r3, fp
 800619c:	f7fa fa2c 	bl	80005f8 <__aeabi_dmul>
 80061a0:	4682      	mov	sl, r0
 80061a2:	468b      	mov	fp, r1
 80061a4:	e649      	b.n	8005e3a <_strtod_l+0x72>
 80061a6:	4b6c      	ldr	r3, [pc, #432]	@ (8006358 <_strtod_l+0x590>)
 80061a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80061ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80061b0:	f7fa fa22 	bl	80005f8 <__aeabi_dmul>
 80061b4:	4682      	mov	sl, r0
 80061b6:	4638      	mov	r0, r7
 80061b8:	468b      	mov	fp, r1
 80061ba:	f7fa f9a3 	bl	8000504 <__aeabi_ui2d>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	4650      	mov	r0, sl
 80061c4:	4659      	mov	r1, fp
 80061c6:	f7fa f861 	bl	800028c <__adddf3>
 80061ca:	2d0f      	cmp	r5, #15
 80061cc:	4682      	mov	sl, r0
 80061ce:	468b      	mov	fp, r1
 80061d0:	ddd5      	ble.n	800617e <_strtod_l+0x3b6>
 80061d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061d4:	1b2c      	subs	r4, r5, r4
 80061d6:	441c      	add	r4, r3
 80061d8:	2c00      	cmp	r4, #0
 80061da:	f340 8093 	ble.w	8006304 <_strtod_l+0x53c>
 80061de:	f014 030f 	ands.w	r3, r4, #15
 80061e2:	d00a      	beq.n	80061fa <_strtod_l+0x432>
 80061e4:	495c      	ldr	r1, [pc, #368]	@ (8006358 <_strtod_l+0x590>)
 80061e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80061ea:	4652      	mov	r2, sl
 80061ec:	465b      	mov	r3, fp
 80061ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061f2:	f7fa fa01 	bl	80005f8 <__aeabi_dmul>
 80061f6:	4682      	mov	sl, r0
 80061f8:	468b      	mov	fp, r1
 80061fa:	f034 040f 	bics.w	r4, r4, #15
 80061fe:	d073      	beq.n	80062e8 <_strtod_l+0x520>
 8006200:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006204:	dd49      	ble.n	800629a <_strtod_l+0x4d2>
 8006206:	2400      	movs	r4, #0
 8006208:	46a0      	mov	r8, r4
 800620a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800620c:	46a1      	mov	r9, r4
 800620e:	9a05      	ldr	r2, [sp, #20]
 8006210:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8006360 <_strtod_l+0x598>
 8006214:	2322      	movs	r3, #34	@ 0x22
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	f04f 0a00 	mov.w	sl, #0
 800621c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800621e:	2b00      	cmp	r3, #0
 8006220:	f43f ae0b 	beq.w	8005e3a <_strtod_l+0x72>
 8006224:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006226:	9805      	ldr	r0, [sp, #20]
 8006228:	f002 fdd0 	bl	8008dcc <_Bfree>
 800622c:	9805      	ldr	r0, [sp, #20]
 800622e:	4649      	mov	r1, r9
 8006230:	f002 fdcc 	bl	8008dcc <_Bfree>
 8006234:	9805      	ldr	r0, [sp, #20]
 8006236:	4641      	mov	r1, r8
 8006238:	f002 fdc8 	bl	8008dcc <_Bfree>
 800623c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800623e:	9805      	ldr	r0, [sp, #20]
 8006240:	f002 fdc4 	bl	8008dcc <_Bfree>
 8006244:	9805      	ldr	r0, [sp, #20]
 8006246:	4621      	mov	r1, r4
 8006248:	f002 fdc0 	bl	8008dcc <_Bfree>
 800624c:	e5f5      	b.n	8005e3a <_strtod_l+0x72>
 800624e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006250:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006254:	4293      	cmp	r3, r2
 8006256:	dbbc      	blt.n	80061d2 <_strtod_l+0x40a>
 8006258:	4c3f      	ldr	r4, [pc, #252]	@ (8006358 <_strtod_l+0x590>)
 800625a:	f1c5 050f 	rsb	r5, r5, #15
 800625e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006262:	4652      	mov	r2, sl
 8006264:	465b      	mov	r3, fp
 8006266:	e9d1 0100 	ldrd	r0, r1, [r1]
 800626a:	f7fa f9c5 	bl	80005f8 <__aeabi_dmul>
 800626e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006270:	1b5d      	subs	r5, r3, r5
 8006272:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006276:	e9d4 2300 	ldrd	r2, r3, [r4]
 800627a:	e78f      	b.n	800619c <_strtod_l+0x3d4>
 800627c:	3316      	adds	r3, #22
 800627e:	dba8      	blt.n	80061d2 <_strtod_l+0x40a>
 8006280:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006282:	eba3 0808 	sub.w	r8, r3, r8
 8006286:	4b34      	ldr	r3, [pc, #208]	@ (8006358 <_strtod_l+0x590>)
 8006288:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800628c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006290:	4650      	mov	r0, sl
 8006292:	4659      	mov	r1, fp
 8006294:	f7fa fada 	bl	800084c <__aeabi_ddiv>
 8006298:	e782      	b.n	80061a0 <_strtod_l+0x3d8>
 800629a:	2300      	movs	r3, #0
 800629c:	4f2f      	ldr	r7, [pc, #188]	@ (800635c <_strtod_l+0x594>)
 800629e:	1124      	asrs	r4, r4, #4
 80062a0:	4650      	mov	r0, sl
 80062a2:	4659      	mov	r1, fp
 80062a4:	461e      	mov	r6, r3
 80062a6:	2c01      	cmp	r4, #1
 80062a8:	dc21      	bgt.n	80062ee <_strtod_l+0x526>
 80062aa:	b10b      	cbz	r3, 80062b0 <_strtod_l+0x4e8>
 80062ac:	4682      	mov	sl, r0
 80062ae:	468b      	mov	fp, r1
 80062b0:	492a      	ldr	r1, [pc, #168]	@ (800635c <_strtod_l+0x594>)
 80062b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80062b6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80062ba:	4652      	mov	r2, sl
 80062bc:	465b      	mov	r3, fp
 80062be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062c2:	f7fa f999 	bl	80005f8 <__aeabi_dmul>
 80062c6:	4b26      	ldr	r3, [pc, #152]	@ (8006360 <_strtod_l+0x598>)
 80062c8:	460a      	mov	r2, r1
 80062ca:	400b      	ands	r3, r1
 80062cc:	4925      	ldr	r1, [pc, #148]	@ (8006364 <_strtod_l+0x59c>)
 80062ce:	428b      	cmp	r3, r1
 80062d0:	4682      	mov	sl, r0
 80062d2:	d898      	bhi.n	8006206 <_strtod_l+0x43e>
 80062d4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80062d8:	428b      	cmp	r3, r1
 80062da:	bf86      	itte	hi
 80062dc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8006368 <_strtod_l+0x5a0>
 80062e0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80062e4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80062e8:	2300      	movs	r3, #0
 80062ea:	9308      	str	r3, [sp, #32]
 80062ec:	e076      	b.n	80063dc <_strtod_l+0x614>
 80062ee:	07e2      	lsls	r2, r4, #31
 80062f0:	d504      	bpl.n	80062fc <_strtod_l+0x534>
 80062f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062f6:	f7fa f97f 	bl	80005f8 <__aeabi_dmul>
 80062fa:	2301      	movs	r3, #1
 80062fc:	3601      	adds	r6, #1
 80062fe:	1064      	asrs	r4, r4, #1
 8006300:	3708      	adds	r7, #8
 8006302:	e7d0      	b.n	80062a6 <_strtod_l+0x4de>
 8006304:	d0f0      	beq.n	80062e8 <_strtod_l+0x520>
 8006306:	4264      	negs	r4, r4
 8006308:	f014 020f 	ands.w	r2, r4, #15
 800630c:	d00a      	beq.n	8006324 <_strtod_l+0x55c>
 800630e:	4b12      	ldr	r3, [pc, #72]	@ (8006358 <_strtod_l+0x590>)
 8006310:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006314:	4650      	mov	r0, sl
 8006316:	4659      	mov	r1, fp
 8006318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631c:	f7fa fa96 	bl	800084c <__aeabi_ddiv>
 8006320:	4682      	mov	sl, r0
 8006322:	468b      	mov	fp, r1
 8006324:	1124      	asrs	r4, r4, #4
 8006326:	d0df      	beq.n	80062e8 <_strtod_l+0x520>
 8006328:	2c1f      	cmp	r4, #31
 800632a:	dd1f      	ble.n	800636c <_strtod_l+0x5a4>
 800632c:	2400      	movs	r4, #0
 800632e:	46a0      	mov	r8, r4
 8006330:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006332:	46a1      	mov	r9, r4
 8006334:	9a05      	ldr	r2, [sp, #20]
 8006336:	2322      	movs	r3, #34	@ 0x22
 8006338:	f04f 0a00 	mov.w	sl, #0
 800633c:	f04f 0b00 	mov.w	fp, #0
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	e76b      	b.n	800621c <_strtod_l+0x454>
 8006344:	0800a0e9 	.word	0x0800a0e9
 8006348:	0800a2cc 	.word	0x0800a2cc
 800634c:	0800a0e1 	.word	0x0800a0e1
 8006350:	0800a120 	.word	0x0800a120
 8006354:	0800a2ca 	.word	0x0800a2ca
 8006358:	0800a458 	.word	0x0800a458
 800635c:	0800a430 	.word	0x0800a430
 8006360:	7ff00000 	.word	0x7ff00000
 8006364:	7ca00000 	.word	0x7ca00000
 8006368:	7fefffff 	.word	0x7fefffff
 800636c:	f014 0310 	ands.w	r3, r4, #16
 8006370:	bf18      	it	ne
 8006372:	236a      	movne	r3, #106	@ 0x6a
 8006374:	4ea9      	ldr	r6, [pc, #676]	@ (800661c <_strtod_l+0x854>)
 8006376:	9308      	str	r3, [sp, #32]
 8006378:	4650      	mov	r0, sl
 800637a:	4659      	mov	r1, fp
 800637c:	2300      	movs	r3, #0
 800637e:	07e7      	lsls	r7, r4, #31
 8006380:	d504      	bpl.n	800638c <_strtod_l+0x5c4>
 8006382:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006386:	f7fa f937 	bl	80005f8 <__aeabi_dmul>
 800638a:	2301      	movs	r3, #1
 800638c:	1064      	asrs	r4, r4, #1
 800638e:	f106 0608 	add.w	r6, r6, #8
 8006392:	d1f4      	bne.n	800637e <_strtod_l+0x5b6>
 8006394:	b10b      	cbz	r3, 800639a <_strtod_l+0x5d2>
 8006396:	4682      	mov	sl, r0
 8006398:	468b      	mov	fp, r1
 800639a:	9b08      	ldr	r3, [sp, #32]
 800639c:	b1b3      	cbz	r3, 80063cc <_strtod_l+0x604>
 800639e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80063a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	4659      	mov	r1, fp
 80063aa:	dd0f      	ble.n	80063cc <_strtod_l+0x604>
 80063ac:	2b1f      	cmp	r3, #31
 80063ae:	dd56      	ble.n	800645e <_strtod_l+0x696>
 80063b0:	2b34      	cmp	r3, #52	@ 0x34
 80063b2:	bfde      	ittt	le
 80063b4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80063b8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80063bc:	4093      	lslle	r3, r2
 80063be:	f04f 0a00 	mov.w	sl, #0
 80063c2:	bfcc      	ite	gt
 80063c4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80063c8:	ea03 0b01 	andle.w	fp, r3, r1
 80063cc:	2200      	movs	r2, #0
 80063ce:	2300      	movs	r3, #0
 80063d0:	4650      	mov	r0, sl
 80063d2:	4659      	mov	r1, fp
 80063d4:	f7fa fb78 	bl	8000ac8 <__aeabi_dcmpeq>
 80063d8:	2800      	cmp	r0, #0
 80063da:	d1a7      	bne.n	800632c <_strtod_l+0x564>
 80063dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80063e2:	9805      	ldr	r0, [sp, #20]
 80063e4:	462b      	mov	r3, r5
 80063e6:	464a      	mov	r2, r9
 80063e8:	f002 fd58 	bl	8008e9c <__s2b>
 80063ec:	900b      	str	r0, [sp, #44]	@ 0x2c
 80063ee:	2800      	cmp	r0, #0
 80063f0:	f43f af09 	beq.w	8006206 <_strtod_l+0x43e>
 80063f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063f8:	2a00      	cmp	r2, #0
 80063fa:	eba3 0308 	sub.w	r3, r3, r8
 80063fe:	bfa8      	it	ge
 8006400:	2300      	movge	r3, #0
 8006402:	9312      	str	r3, [sp, #72]	@ 0x48
 8006404:	2400      	movs	r4, #0
 8006406:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800640a:	9316      	str	r3, [sp, #88]	@ 0x58
 800640c:	46a0      	mov	r8, r4
 800640e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006410:	9805      	ldr	r0, [sp, #20]
 8006412:	6859      	ldr	r1, [r3, #4]
 8006414:	f002 fc9a 	bl	8008d4c <_Balloc>
 8006418:	4681      	mov	r9, r0
 800641a:	2800      	cmp	r0, #0
 800641c:	f43f aef7 	beq.w	800620e <_strtod_l+0x446>
 8006420:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006422:	691a      	ldr	r2, [r3, #16]
 8006424:	3202      	adds	r2, #2
 8006426:	f103 010c 	add.w	r1, r3, #12
 800642a:	0092      	lsls	r2, r2, #2
 800642c:	300c      	adds	r0, #12
 800642e:	f000 fc6f 	bl	8006d10 <memcpy>
 8006432:	ec4b ab10 	vmov	d0, sl, fp
 8006436:	9805      	ldr	r0, [sp, #20]
 8006438:	aa1c      	add	r2, sp, #112	@ 0x70
 800643a:	a91b      	add	r1, sp, #108	@ 0x6c
 800643c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006440:	f003 f860 	bl	8009504 <__d2b>
 8006444:	901a      	str	r0, [sp, #104]	@ 0x68
 8006446:	2800      	cmp	r0, #0
 8006448:	f43f aee1 	beq.w	800620e <_strtod_l+0x446>
 800644c:	9805      	ldr	r0, [sp, #20]
 800644e:	2101      	movs	r1, #1
 8006450:	f002 fdba 	bl	8008fc8 <__i2b>
 8006454:	4680      	mov	r8, r0
 8006456:	b948      	cbnz	r0, 800646c <_strtod_l+0x6a4>
 8006458:	f04f 0800 	mov.w	r8, #0
 800645c:	e6d7      	b.n	800620e <_strtod_l+0x446>
 800645e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006462:	fa02 f303 	lsl.w	r3, r2, r3
 8006466:	ea03 0a0a 	and.w	sl, r3, sl
 800646a:	e7af      	b.n	80063cc <_strtod_l+0x604>
 800646c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800646e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006470:	2d00      	cmp	r5, #0
 8006472:	bfab      	itete	ge
 8006474:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006476:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006478:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800647a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800647c:	bfac      	ite	ge
 800647e:	18ef      	addge	r7, r5, r3
 8006480:	1b5e      	sublt	r6, r3, r5
 8006482:	9b08      	ldr	r3, [sp, #32]
 8006484:	1aed      	subs	r5, r5, r3
 8006486:	4415      	add	r5, r2
 8006488:	4b65      	ldr	r3, [pc, #404]	@ (8006620 <_strtod_l+0x858>)
 800648a:	3d01      	subs	r5, #1
 800648c:	429d      	cmp	r5, r3
 800648e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006492:	da50      	bge.n	8006536 <_strtod_l+0x76e>
 8006494:	1b5b      	subs	r3, r3, r5
 8006496:	2b1f      	cmp	r3, #31
 8006498:	eba2 0203 	sub.w	r2, r2, r3
 800649c:	f04f 0101 	mov.w	r1, #1
 80064a0:	dc3d      	bgt.n	800651e <_strtod_l+0x756>
 80064a2:	fa01 f303 	lsl.w	r3, r1, r3
 80064a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80064a8:	2300      	movs	r3, #0
 80064aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80064ac:	18bd      	adds	r5, r7, r2
 80064ae:	9b08      	ldr	r3, [sp, #32]
 80064b0:	42af      	cmp	r7, r5
 80064b2:	4416      	add	r6, r2
 80064b4:	441e      	add	r6, r3
 80064b6:	463b      	mov	r3, r7
 80064b8:	bfa8      	it	ge
 80064ba:	462b      	movge	r3, r5
 80064bc:	42b3      	cmp	r3, r6
 80064be:	bfa8      	it	ge
 80064c0:	4633      	movge	r3, r6
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	bfc2      	ittt	gt
 80064c6:	1aed      	subgt	r5, r5, r3
 80064c8:	1af6      	subgt	r6, r6, r3
 80064ca:	1aff      	subgt	r7, r7, r3
 80064cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	dd16      	ble.n	8006500 <_strtod_l+0x738>
 80064d2:	4641      	mov	r1, r8
 80064d4:	9805      	ldr	r0, [sp, #20]
 80064d6:	461a      	mov	r2, r3
 80064d8:	f002 fe2e 	bl	8009138 <__pow5mult>
 80064dc:	4680      	mov	r8, r0
 80064de:	2800      	cmp	r0, #0
 80064e0:	d0ba      	beq.n	8006458 <_strtod_l+0x690>
 80064e2:	4601      	mov	r1, r0
 80064e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80064e6:	9805      	ldr	r0, [sp, #20]
 80064e8:	f002 fd84 	bl	8008ff4 <__multiply>
 80064ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80064ee:	2800      	cmp	r0, #0
 80064f0:	f43f ae8d 	beq.w	800620e <_strtod_l+0x446>
 80064f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80064f6:	9805      	ldr	r0, [sp, #20]
 80064f8:	f002 fc68 	bl	8008dcc <_Bfree>
 80064fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8006500:	2d00      	cmp	r5, #0
 8006502:	dc1d      	bgt.n	8006540 <_strtod_l+0x778>
 8006504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006506:	2b00      	cmp	r3, #0
 8006508:	dd23      	ble.n	8006552 <_strtod_l+0x78a>
 800650a:	4649      	mov	r1, r9
 800650c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800650e:	9805      	ldr	r0, [sp, #20]
 8006510:	f002 fe12 	bl	8009138 <__pow5mult>
 8006514:	4681      	mov	r9, r0
 8006516:	b9e0      	cbnz	r0, 8006552 <_strtod_l+0x78a>
 8006518:	f04f 0900 	mov.w	r9, #0
 800651c:	e677      	b.n	800620e <_strtod_l+0x446>
 800651e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006522:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006526:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800652a:	35e2      	adds	r5, #226	@ 0xe2
 800652c:	fa01 f305 	lsl.w	r3, r1, r5
 8006530:	9310      	str	r3, [sp, #64]	@ 0x40
 8006532:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006534:	e7ba      	b.n	80064ac <_strtod_l+0x6e4>
 8006536:	2300      	movs	r3, #0
 8006538:	9310      	str	r3, [sp, #64]	@ 0x40
 800653a:	2301      	movs	r3, #1
 800653c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800653e:	e7b5      	b.n	80064ac <_strtod_l+0x6e4>
 8006540:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006542:	9805      	ldr	r0, [sp, #20]
 8006544:	462a      	mov	r2, r5
 8006546:	f002 fe51 	bl	80091ec <__lshift>
 800654a:	901a      	str	r0, [sp, #104]	@ 0x68
 800654c:	2800      	cmp	r0, #0
 800654e:	d1d9      	bne.n	8006504 <_strtod_l+0x73c>
 8006550:	e65d      	b.n	800620e <_strtod_l+0x446>
 8006552:	2e00      	cmp	r6, #0
 8006554:	dd07      	ble.n	8006566 <_strtod_l+0x79e>
 8006556:	4649      	mov	r1, r9
 8006558:	9805      	ldr	r0, [sp, #20]
 800655a:	4632      	mov	r2, r6
 800655c:	f002 fe46 	bl	80091ec <__lshift>
 8006560:	4681      	mov	r9, r0
 8006562:	2800      	cmp	r0, #0
 8006564:	d0d8      	beq.n	8006518 <_strtod_l+0x750>
 8006566:	2f00      	cmp	r7, #0
 8006568:	dd08      	ble.n	800657c <_strtod_l+0x7b4>
 800656a:	4641      	mov	r1, r8
 800656c:	9805      	ldr	r0, [sp, #20]
 800656e:	463a      	mov	r2, r7
 8006570:	f002 fe3c 	bl	80091ec <__lshift>
 8006574:	4680      	mov	r8, r0
 8006576:	2800      	cmp	r0, #0
 8006578:	f43f ae49 	beq.w	800620e <_strtod_l+0x446>
 800657c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800657e:	9805      	ldr	r0, [sp, #20]
 8006580:	464a      	mov	r2, r9
 8006582:	f002 febb 	bl	80092fc <__mdiff>
 8006586:	4604      	mov	r4, r0
 8006588:	2800      	cmp	r0, #0
 800658a:	f43f ae40 	beq.w	800620e <_strtod_l+0x446>
 800658e:	68c3      	ldr	r3, [r0, #12]
 8006590:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006592:	2300      	movs	r3, #0
 8006594:	60c3      	str	r3, [r0, #12]
 8006596:	4641      	mov	r1, r8
 8006598:	f002 fe94 	bl	80092c4 <__mcmp>
 800659c:	2800      	cmp	r0, #0
 800659e:	da45      	bge.n	800662c <_strtod_l+0x864>
 80065a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065a2:	ea53 030a 	orrs.w	r3, r3, sl
 80065a6:	d16b      	bne.n	8006680 <_strtod_l+0x8b8>
 80065a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d167      	bne.n	8006680 <_strtod_l+0x8b8>
 80065b0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80065b4:	0d1b      	lsrs	r3, r3, #20
 80065b6:	051b      	lsls	r3, r3, #20
 80065b8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80065bc:	d960      	bls.n	8006680 <_strtod_l+0x8b8>
 80065be:	6963      	ldr	r3, [r4, #20]
 80065c0:	b913      	cbnz	r3, 80065c8 <_strtod_l+0x800>
 80065c2:	6923      	ldr	r3, [r4, #16]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	dd5b      	ble.n	8006680 <_strtod_l+0x8b8>
 80065c8:	4621      	mov	r1, r4
 80065ca:	2201      	movs	r2, #1
 80065cc:	9805      	ldr	r0, [sp, #20]
 80065ce:	f002 fe0d 	bl	80091ec <__lshift>
 80065d2:	4641      	mov	r1, r8
 80065d4:	4604      	mov	r4, r0
 80065d6:	f002 fe75 	bl	80092c4 <__mcmp>
 80065da:	2800      	cmp	r0, #0
 80065dc:	dd50      	ble.n	8006680 <_strtod_l+0x8b8>
 80065de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80065e2:	9a08      	ldr	r2, [sp, #32]
 80065e4:	0d1b      	lsrs	r3, r3, #20
 80065e6:	051b      	lsls	r3, r3, #20
 80065e8:	2a00      	cmp	r2, #0
 80065ea:	d06a      	beq.n	80066c2 <_strtod_l+0x8fa>
 80065ec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80065f0:	d867      	bhi.n	80066c2 <_strtod_l+0x8fa>
 80065f2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80065f6:	f67f ae9d 	bls.w	8006334 <_strtod_l+0x56c>
 80065fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006624 <_strtod_l+0x85c>)
 80065fc:	4650      	mov	r0, sl
 80065fe:	4659      	mov	r1, fp
 8006600:	2200      	movs	r2, #0
 8006602:	f7f9 fff9 	bl	80005f8 <__aeabi_dmul>
 8006606:	4b08      	ldr	r3, [pc, #32]	@ (8006628 <_strtod_l+0x860>)
 8006608:	400b      	ands	r3, r1
 800660a:	4682      	mov	sl, r0
 800660c:	468b      	mov	fp, r1
 800660e:	2b00      	cmp	r3, #0
 8006610:	f47f ae08 	bne.w	8006224 <_strtod_l+0x45c>
 8006614:	9a05      	ldr	r2, [sp, #20]
 8006616:	2322      	movs	r3, #34	@ 0x22
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	e603      	b.n	8006224 <_strtod_l+0x45c>
 800661c:	0800a2f8 	.word	0x0800a2f8
 8006620:	fffffc02 	.word	0xfffffc02
 8006624:	39500000 	.word	0x39500000
 8006628:	7ff00000 	.word	0x7ff00000
 800662c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006630:	d165      	bne.n	80066fe <_strtod_l+0x936>
 8006632:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006634:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006638:	b35a      	cbz	r2, 8006692 <_strtod_l+0x8ca>
 800663a:	4a9f      	ldr	r2, [pc, #636]	@ (80068b8 <_strtod_l+0xaf0>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d12b      	bne.n	8006698 <_strtod_l+0x8d0>
 8006640:	9b08      	ldr	r3, [sp, #32]
 8006642:	4651      	mov	r1, sl
 8006644:	b303      	cbz	r3, 8006688 <_strtod_l+0x8c0>
 8006646:	4b9d      	ldr	r3, [pc, #628]	@ (80068bc <_strtod_l+0xaf4>)
 8006648:	465a      	mov	r2, fp
 800664a:	4013      	ands	r3, r2
 800664c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006650:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006654:	d81b      	bhi.n	800668e <_strtod_l+0x8c6>
 8006656:	0d1b      	lsrs	r3, r3, #20
 8006658:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800665c:	fa02 f303 	lsl.w	r3, r2, r3
 8006660:	4299      	cmp	r1, r3
 8006662:	d119      	bne.n	8006698 <_strtod_l+0x8d0>
 8006664:	4b96      	ldr	r3, [pc, #600]	@ (80068c0 <_strtod_l+0xaf8>)
 8006666:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006668:	429a      	cmp	r2, r3
 800666a:	d102      	bne.n	8006672 <_strtod_l+0x8aa>
 800666c:	3101      	adds	r1, #1
 800666e:	f43f adce 	beq.w	800620e <_strtod_l+0x446>
 8006672:	4b92      	ldr	r3, [pc, #584]	@ (80068bc <_strtod_l+0xaf4>)
 8006674:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006676:	401a      	ands	r2, r3
 8006678:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800667c:	f04f 0a00 	mov.w	sl, #0
 8006680:	9b08      	ldr	r3, [sp, #32]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1b9      	bne.n	80065fa <_strtod_l+0x832>
 8006686:	e5cd      	b.n	8006224 <_strtod_l+0x45c>
 8006688:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800668c:	e7e8      	b.n	8006660 <_strtod_l+0x898>
 800668e:	4613      	mov	r3, r2
 8006690:	e7e6      	b.n	8006660 <_strtod_l+0x898>
 8006692:	ea53 030a 	orrs.w	r3, r3, sl
 8006696:	d0a2      	beq.n	80065de <_strtod_l+0x816>
 8006698:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800669a:	b1db      	cbz	r3, 80066d4 <_strtod_l+0x90c>
 800669c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800669e:	4213      	tst	r3, r2
 80066a0:	d0ee      	beq.n	8006680 <_strtod_l+0x8b8>
 80066a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066a4:	9a08      	ldr	r2, [sp, #32]
 80066a6:	4650      	mov	r0, sl
 80066a8:	4659      	mov	r1, fp
 80066aa:	b1bb      	cbz	r3, 80066dc <_strtod_l+0x914>
 80066ac:	f7ff fb6c 	bl	8005d88 <sulp>
 80066b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066b4:	ec53 2b10 	vmov	r2, r3, d0
 80066b8:	f7f9 fde8 	bl	800028c <__adddf3>
 80066bc:	4682      	mov	sl, r0
 80066be:	468b      	mov	fp, r1
 80066c0:	e7de      	b.n	8006680 <_strtod_l+0x8b8>
 80066c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80066c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80066ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80066ce:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80066d2:	e7d5      	b.n	8006680 <_strtod_l+0x8b8>
 80066d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80066d6:	ea13 0f0a 	tst.w	r3, sl
 80066da:	e7e1      	b.n	80066a0 <_strtod_l+0x8d8>
 80066dc:	f7ff fb54 	bl	8005d88 <sulp>
 80066e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066e4:	ec53 2b10 	vmov	r2, r3, d0
 80066e8:	f7f9 fdce 	bl	8000288 <__aeabi_dsub>
 80066ec:	2200      	movs	r2, #0
 80066ee:	2300      	movs	r3, #0
 80066f0:	4682      	mov	sl, r0
 80066f2:	468b      	mov	fp, r1
 80066f4:	f7fa f9e8 	bl	8000ac8 <__aeabi_dcmpeq>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	d0c1      	beq.n	8006680 <_strtod_l+0x8b8>
 80066fc:	e61a      	b.n	8006334 <_strtod_l+0x56c>
 80066fe:	4641      	mov	r1, r8
 8006700:	4620      	mov	r0, r4
 8006702:	f002 ff57 	bl	80095b4 <__ratio>
 8006706:	ec57 6b10 	vmov	r6, r7, d0
 800670a:	2200      	movs	r2, #0
 800670c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006710:	4630      	mov	r0, r6
 8006712:	4639      	mov	r1, r7
 8006714:	f7fa f9ec 	bl	8000af0 <__aeabi_dcmple>
 8006718:	2800      	cmp	r0, #0
 800671a:	d06f      	beq.n	80067fc <_strtod_l+0xa34>
 800671c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800671e:	2b00      	cmp	r3, #0
 8006720:	d17a      	bne.n	8006818 <_strtod_l+0xa50>
 8006722:	f1ba 0f00 	cmp.w	sl, #0
 8006726:	d158      	bne.n	80067da <_strtod_l+0xa12>
 8006728:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800672a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800672e:	2b00      	cmp	r3, #0
 8006730:	d15a      	bne.n	80067e8 <_strtod_l+0xa20>
 8006732:	4b64      	ldr	r3, [pc, #400]	@ (80068c4 <_strtod_l+0xafc>)
 8006734:	2200      	movs	r2, #0
 8006736:	4630      	mov	r0, r6
 8006738:	4639      	mov	r1, r7
 800673a:	f7fa f9cf 	bl	8000adc <__aeabi_dcmplt>
 800673e:	2800      	cmp	r0, #0
 8006740:	d159      	bne.n	80067f6 <_strtod_l+0xa2e>
 8006742:	4630      	mov	r0, r6
 8006744:	4639      	mov	r1, r7
 8006746:	4b60      	ldr	r3, [pc, #384]	@ (80068c8 <_strtod_l+0xb00>)
 8006748:	2200      	movs	r2, #0
 800674a:	f7f9 ff55 	bl	80005f8 <__aeabi_dmul>
 800674e:	4606      	mov	r6, r0
 8006750:	460f      	mov	r7, r1
 8006752:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006756:	9606      	str	r6, [sp, #24]
 8006758:	9307      	str	r3, [sp, #28]
 800675a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800675e:	4d57      	ldr	r5, [pc, #348]	@ (80068bc <_strtod_l+0xaf4>)
 8006760:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006766:	401d      	ands	r5, r3
 8006768:	4b58      	ldr	r3, [pc, #352]	@ (80068cc <_strtod_l+0xb04>)
 800676a:	429d      	cmp	r5, r3
 800676c:	f040 80b2 	bne.w	80068d4 <_strtod_l+0xb0c>
 8006770:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006772:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006776:	ec4b ab10 	vmov	d0, sl, fp
 800677a:	f002 fe53 	bl	8009424 <__ulp>
 800677e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006782:	ec51 0b10 	vmov	r0, r1, d0
 8006786:	f7f9 ff37 	bl	80005f8 <__aeabi_dmul>
 800678a:	4652      	mov	r2, sl
 800678c:	465b      	mov	r3, fp
 800678e:	f7f9 fd7d 	bl	800028c <__adddf3>
 8006792:	460b      	mov	r3, r1
 8006794:	4949      	ldr	r1, [pc, #292]	@ (80068bc <_strtod_l+0xaf4>)
 8006796:	4a4e      	ldr	r2, [pc, #312]	@ (80068d0 <_strtod_l+0xb08>)
 8006798:	4019      	ands	r1, r3
 800679a:	4291      	cmp	r1, r2
 800679c:	4682      	mov	sl, r0
 800679e:	d942      	bls.n	8006826 <_strtod_l+0xa5e>
 80067a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80067a2:	4b47      	ldr	r3, [pc, #284]	@ (80068c0 <_strtod_l+0xaf8>)
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d103      	bne.n	80067b0 <_strtod_l+0x9e8>
 80067a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80067aa:	3301      	adds	r3, #1
 80067ac:	f43f ad2f 	beq.w	800620e <_strtod_l+0x446>
 80067b0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80068c0 <_strtod_l+0xaf8>
 80067b4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80067b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80067ba:	9805      	ldr	r0, [sp, #20]
 80067bc:	f002 fb06 	bl	8008dcc <_Bfree>
 80067c0:	9805      	ldr	r0, [sp, #20]
 80067c2:	4649      	mov	r1, r9
 80067c4:	f002 fb02 	bl	8008dcc <_Bfree>
 80067c8:	9805      	ldr	r0, [sp, #20]
 80067ca:	4641      	mov	r1, r8
 80067cc:	f002 fafe 	bl	8008dcc <_Bfree>
 80067d0:	9805      	ldr	r0, [sp, #20]
 80067d2:	4621      	mov	r1, r4
 80067d4:	f002 fafa 	bl	8008dcc <_Bfree>
 80067d8:	e619      	b.n	800640e <_strtod_l+0x646>
 80067da:	f1ba 0f01 	cmp.w	sl, #1
 80067de:	d103      	bne.n	80067e8 <_strtod_l+0xa20>
 80067e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f43f ada6 	beq.w	8006334 <_strtod_l+0x56c>
 80067e8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006898 <_strtod_l+0xad0>
 80067ec:	4f35      	ldr	r7, [pc, #212]	@ (80068c4 <_strtod_l+0xafc>)
 80067ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80067f2:	2600      	movs	r6, #0
 80067f4:	e7b1      	b.n	800675a <_strtod_l+0x992>
 80067f6:	4f34      	ldr	r7, [pc, #208]	@ (80068c8 <_strtod_l+0xb00>)
 80067f8:	2600      	movs	r6, #0
 80067fa:	e7aa      	b.n	8006752 <_strtod_l+0x98a>
 80067fc:	4b32      	ldr	r3, [pc, #200]	@ (80068c8 <_strtod_l+0xb00>)
 80067fe:	4630      	mov	r0, r6
 8006800:	4639      	mov	r1, r7
 8006802:	2200      	movs	r2, #0
 8006804:	f7f9 fef8 	bl	80005f8 <__aeabi_dmul>
 8006808:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800680a:	4606      	mov	r6, r0
 800680c:	460f      	mov	r7, r1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d09f      	beq.n	8006752 <_strtod_l+0x98a>
 8006812:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006816:	e7a0      	b.n	800675a <_strtod_l+0x992>
 8006818:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80068a0 <_strtod_l+0xad8>
 800681c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006820:	ec57 6b17 	vmov	r6, r7, d7
 8006824:	e799      	b.n	800675a <_strtod_l+0x992>
 8006826:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800682a:	9b08      	ldr	r3, [sp, #32]
 800682c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1c1      	bne.n	80067b8 <_strtod_l+0x9f0>
 8006834:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006838:	0d1b      	lsrs	r3, r3, #20
 800683a:	051b      	lsls	r3, r3, #20
 800683c:	429d      	cmp	r5, r3
 800683e:	d1bb      	bne.n	80067b8 <_strtod_l+0x9f0>
 8006840:	4630      	mov	r0, r6
 8006842:	4639      	mov	r1, r7
 8006844:	f7fa fa20 	bl	8000c88 <__aeabi_d2lz>
 8006848:	f7f9 fea8 	bl	800059c <__aeabi_l2d>
 800684c:	4602      	mov	r2, r0
 800684e:	460b      	mov	r3, r1
 8006850:	4630      	mov	r0, r6
 8006852:	4639      	mov	r1, r7
 8006854:	f7f9 fd18 	bl	8000288 <__aeabi_dsub>
 8006858:	460b      	mov	r3, r1
 800685a:	4602      	mov	r2, r0
 800685c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006860:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006866:	ea46 060a 	orr.w	r6, r6, sl
 800686a:	431e      	orrs	r6, r3
 800686c:	d06f      	beq.n	800694e <_strtod_l+0xb86>
 800686e:	a30e      	add	r3, pc, #56	@ (adr r3, 80068a8 <_strtod_l+0xae0>)
 8006870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006874:	f7fa f932 	bl	8000adc <__aeabi_dcmplt>
 8006878:	2800      	cmp	r0, #0
 800687a:	f47f acd3 	bne.w	8006224 <_strtod_l+0x45c>
 800687e:	a30c      	add	r3, pc, #48	@ (adr r3, 80068b0 <_strtod_l+0xae8>)
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006888:	f7fa f946 	bl	8000b18 <__aeabi_dcmpgt>
 800688c:	2800      	cmp	r0, #0
 800688e:	d093      	beq.n	80067b8 <_strtod_l+0x9f0>
 8006890:	e4c8      	b.n	8006224 <_strtod_l+0x45c>
 8006892:	bf00      	nop
 8006894:	f3af 8000 	nop.w
 8006898:	00000000 	.word	0x00000000
 800689c:	bff00000 	.word	0xbff00000
 80068a0:	00000000 	.word	0x00000000
 80068a4:	3ff00000 	.word	0x3ff00000
 80068a8:	94a03595 	.word	0x94a03595
 80068ac:	3fdfffff 	.word	0x3fdfffff
 80068b0:	35afe535 	.word	0x35afe535
 80068b4:	3fe00000 	.word	0x3fe00000
 80068b8:	000fffff 	.word	0x000fffff
 80068bc:	7ff00000 	.word	0x7ff00000
 80068c0:	7fefffff 	.word	0x7fefffff
 80068c4:	3ff00000 	.word	0x3ff00000
 80068c8:	3fe00000 	.word	0x3fe00000
 80068cc:	7fe00000 	.word	0x7fe00000
 80068d0:	7c9fffff 	.word	0x7c9fffff
 80068d4:	9b08      	ldr	r3, [sp, #32]
 80068d6:	b323      	cbz	r3, 8006922 <_strtod_l+0xb5a>
 80068d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80068dc:	d821      	bhi.n	8006922 <_strtod_l+0xb5a>
 80068de:	a328      	add	r3, pc, #160	@ (adr r3, 8006980 <_strtod_l+0xbb8>)
 80068e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e4:	4630      	mov	r0, r6
 80068e6:	4639      	mov	r1, r7
 80068e8:	f7fa f902 	bl	8000af0 <__aeabi_dcmple>
 80068ec:	b1a0      	cbz	r0, 8006918 <_strtod_l+0xb50>
 80068ee:	4639      	mov	r1, r7
 80068f0:	4630      	mov	r0, r6
 80068f2:	f7fa f959 	bl	8000ba8 <__aeabi_d2uiz>
 80068f6:	2801      	cmp	r0, #1
 80068f8:	bf38      	it	cc
 80068fa:	2001      	movcc	r0, #1
 80068fc:	f7f9 fe02 	bl	8000504 <__aeabi_ui2d>
 8006900:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006902:	4606      	mov	r6, r0
 8006904:	460f      	mov	r7, r1
 8006906:	b9fb      	cbnz	r3, 8006948 <_strtod_l+0xb80>
 8006908:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800690c:	9014      	str	r0, [sp, #80]	@ 0x50
 800690e:	9315      	str	r3, [sp, #84]	@ 0x54
 8006910:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006914:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006918:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800691a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800691e:	1b5b      	subs	r3, r3, r5
 8006920:	9311      	str	r3, [sp, #68]	@ 0x44
 8006922:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006926:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800692a:	f002 fd7b 	bl	8009424 <__ulp>
 800692e:	4650      	mov	r0, sl
 8006930:	ec53 2b10 	vmov	r2, r3, d0
 8006934:	4659      	mov	r1, fp
 8006936:	f7f9 fe5f 	bl	80005f8 <__aeabi_dmul>
 800693a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800693e:	f7f9 fca5 	bl	800028c <__adddf3>
 8006942:	4682      	mov	sl, r0
 8006944:	468b      	mov	fp, r1
 8006946:	e770      	b.n	800682a <_strtod_l+0xa62>
 8006948:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800694c:	e7e0      	b.n	8006910 <_strtod_l+0xb48>
 800694e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006988 <_strtod_l+0xbc0>)
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	f7fa f8c2 	bl	8000adc <__aeabi_dcmplt>
 8006958:	e798      	b.n	800688c <_strtod_l+0xac4>
 800695a:	2300      	movs	r3, #0
 800695c:	930e      	str	r3, [sp, #56]	@ 0x38
 800695e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006960:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	f7ff ba6d 	b.w	8005e42 <_strtod_l+0x7a>
 8006968:	2a65      	cmp	r2, #101	@ 0x65
 800696a:	f43f ab68 	beq.w	800603e <_strtod_l+0x276>
 800696e:	2a45      	cmp	r2, #69	@ 0x45
 8006970:	f43f ab65 	beq.w	800603e <_strtod_l+0x276>
 8006974:	2301      	movs	r3, #1
 8006976:	f7ff bba0 	b.w	80060ba <_strtod_l+0x2f2>
 800697a:	bf00      	nop
 800697c:	f3af 8000 	nop.w
 8006980:	ffc00000 	.word	0xffc00000
 8006984:	41dfffff 	.word	0x41dfffff
 8006988:	94a03595 	.word	0x94a03595
 800698c:	3fcfffff 	.word	0x3fcfffff

08006990 <_strtod_r>:
 8006990:	4b01      	ldr	r3, [pc, #4]	@ (8006998 <_strtod_r+0x8>)
 8006992:	f7ff ba19 	b.w	8005dc8 <_strtod_l>
 8006996:	bf00      	nop
 8006998:	20000024 	.word	0x20000024

0800699c <strtof>:
 800699c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069a0:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8006a60 <strtof+0xc4>
 80069a4:	4b29      	ldr	r3, [pc, #164]	@ (8006a4c <strtof+0xb0>)
 80069a6:	460a      	mov	r2, r1
 80069a8:	ed2d 8b02 	vpush	{d8}
 80069ac:	4601      	mov	r1, r0
 80069ae:	f8d8 0000 	ldr.w	r0, [r8]
 80069b2:	f7ff fa09 	bl	8005dc8 <_strtod_l>
 80069b6:	ec55 4b10 	vmov	r4, r5, d0
 80069ba:	4622      	mov	r2, r4
 80069bc:	462b      	mov	r3, r5
 80069be:	4620      	mov	r0, r4
 80069c0:	4629      	mov	r1, r5
 80069c2:	f7fa f8b3 	bl	8000b2c <__aeabi_dcmpun>
 80069c6:	b190      	cbz	r0, 80069ee <strtof+0x52>
 80069c8:	2d00      	cmp	r5, #0
 80069ca:	4821      	ldr	r0, [pc, #132]	@ (8006a50 <strtof+0xb4>)
 80069cc:	da09      	bge.n	80069e2 <strtof+0x46>
 80069ce:	f000 f9b7 	bl	8006d40 <nanf>
 80069d2:	eeb1 8a40 	vneg.f32	s16, s0
 80069d6:	eeb0 0a48 	vmov.f32	s0, s16
 80069da:	ecbd 8b02 	vpop	{d8}
 80069de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e2:	ecbd 8b02 	vpop	{d8}
 80069e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069ea:	f000 b9a9 	b.w	8006d40 <nanf>
 80069ee:	4620      	mov	r0, r4
 80069f0:	4629      	mov	r1, r5
 80069f2:	f7fa f8f9 	bl	8000be8 <__aeabi_d2f>
 80069f6:	ee08 0a10 	vmov	s16, r0
 80069fa:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8006a54 <strtof+0xb8>
 80069fe:	eeb0 7ac8 	vabs.f32	s14, s16
 8006a02:	eeb4 7a67 	vcmp.f32	s14, s15
 8006a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a0a:	dd11      	ble.n	8006a30 <strtof+0x94>
 8006a0c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8006a10:	4b11      	ldr	r3, [pc, #68]	@ (8006a58 <strtof+0xbc>)
 8006a12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a16:	4620      	mov	r0, r4
 8006a18:	4639      	mov	r1, r7
 8006a1a:	f7fa f887 	bl	8000b2c <__aeabi_dcmpun>
 8006a1e:	b980      	cbnz	r0, 8006a42 <strtof+0xa6>
 8006a20:	4b0d      	ldr	r3, [pc, #52]	@ (8006a58 <strtof+0xbc>)
 8006a22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a26:	4620      	mov	r0, r4
 8006a28:	4639      	mov	r1, r7
 8006a2a:	f7fa f861 	bl	8000af0 <__aeabi_dcmple>
 8006a2e:	b940      	cbnz	r0, 8006a42 <strtof+0xa6>
 8006a30:	ee18 3a10 	vmov	r3, s16
 8006a34:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8006a38:	d1cd      	bne.n	80069d6 <strtof+0x3a>
 8006a3a:	4b08      	ldr	r3, [pc, #32]	@ (8006a5c <strtof+0xc0>)
 8006a3c:	402b      	ands	r3, r5
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0c9      	beq.n	80069d6 <strtof+0x3a>
 8006a42:	f8d8 3000 	ldr.w	r3, [r8]
 8006a46:	2222      	movs	r2, #34	@ 0x22
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	e7c4      	b.n	80069d6 <strtof+0x3a>
 8006a4c:	20000024 	.word	0x20000024
 8006a50:	0800a2ca 	.word	0x0800a2ca
 8006a54:	7f7fffff 	.word	0x7f7fffff
 8006a58:	7fefffff 	.word	0x7fefffff
 8006a5c:	7ff00000 	.word	0x7ff00000
 8006a60:	20000190 	.word	0x20000190

08006a64 <_strtol_l.isra.0>:
 8006a64:	2b24      	cmp	r3, #36	@ 0x24
 8006a66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a6a:	4686      	mov	lr, r0
 8006a6c:	4690      	mov	r8, r2
 8006a6e:	d801      	bhi.n	8006a74 <_strtol_l.isra.0+0x10>
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d106      	bne.n	8006a82 <_strtol_l.isra.0+0x1e>
 8006a74:	f000 f90a 	bl	8006c8c <__errno>
 8006a78:	2316      	movs	r3, #22
 8006a7a:	6003      	str	r3, [r0, #0]
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a82:	4834      	ldr	r0, [pc, #208]	@ (8006b54 <_strtol_l.isra.0+0xf0>)
 8006a84:	460d      	mov	r5, r1
 8006a86:	462a      	mov	r2, r5
 8006a88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a8c:	5d06      	ldrb	r6, [r0, r4]
 8006a8e:	f016 0608 	ands.w	r6, r6, #8
 8006a92:	d1f8      	bne.n	8006a86 <_strtol_l.isra.0+0x22>
 8006a94:	2c2d      	cmp	r4, #45	@ 0x2d
 8006a96:	d110      	bne.n	8006aba <_strtol_l.isra.0+0x56>
 8006a98:	782c      	ldrb	r4, [r5, #0]
 8006a9a:	2601      	movs	r6, #1
 8006a9c:	1c95      	adds	r5, r2, #2
 8006a9e:	f033 0210 	bics.w	r2, r3, #16
 8006aa2:	d115      	bne.n	8006ad0 <_strtol_l.isra.0+0x6c>
 8006aa4:	2c30      	cmp	r4, #48	@ 0x30
 8006aa6:	d10d      	bne.n	8006ac4 <_strtol_l.isra.0+0x60>
 8006aa8:	782a      	ldrb	r2, [r5, #0]
 8006aaa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006aae:	2a58      	cmp	r2, #88	@ 0x58
 8006ab0:	d108      	bne.n	8006ac4 <_strtol_l.isra.0+0x60>
 8006ab2:	786c      	ldrb	r4, [r5, #1]
 8006ab4:	3502      	adds	r5, #2
 8006ab6:	2310      	movs	r3, #16
 8006ab8:	e00a      	b.n	8006ad0 <_strtol_l.isra.0+0x6c>
 8006aba:	2c2b      	cmp	r4, #43	@ 0x2b
 8006abc:	bf04      	itt	eq
 8006abe:	782c      	ldrbeq	r4, [r5, #0]
 8006ac0:	1c95      	addeq	r5, r2, #2
 8006ac2:	e7ec      	b.n	8006a9e <_strtol_l.isra.0+0x3a>
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1f6      	bne.n	8006ab6 <_strtol_l.isra.0+0x52>
 8006ac8:	2c30      	cmp	r4, #48	@ 0x30
 8006aca:	bf14      	ite	ne
 8006acc:	230a      	movne	r3, #10
 8006ace:	2308      	moveq	r3, #8
 8006ad0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006ad4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8006ad8:	2200      	movs	r2, #0
 8006ada:	fbbc f9f3 	udiv	r9, ip, r3
 8006ade:	4610      	mov	r0, r2
 8006ae0:	fb03 ca19 	mls	sl, r3, r9, ip
 8006ae4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006ae8:	2f09      	cmp	r7, #9
 8006aea:	d80f      	bhi.n	8006b0c <_strtol_l.isra.0+0xa8>
 8006aec:	463c      	mov	r4, r7
 8006aee:	42a3      	cmp	r3, r4
 8006af0:	dd1b      	ble.n	8006b2a <_strtol_l.isra.0+0xc6>
 8006af2:	1c57      	adds	r7, r2, #1
 8006af4:	d007      	beq.n	8006b06 <_strtol_l.isra.0+0xa2>
 8006af6:	4581      	cmp	r9, r0
 8006af8:	d314      	bcc.n	8006b24 <_strtol_l.isra.0+0xc0>
 8006afa:	d101      	bne.n	8006b00 <_strtol_l.isra.0+0x9c>
 8006afc:	45a2      	cmp	sl, r4
 8006afe:	db11      	blt.n	8006b24 <_strtol_l.isra.0+0xc0>
 8006b00:	fb00 4003 	mla	r0, r0, r3, r4
 8006b04:	2201      	movs	r2, #1
 8006b06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b0a:	e7eb      	b.n	8006ae4 <_strtol_l.isra.0+0x80>
 8006b0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006b10:	2f19      	cmp	r7, #25
 8006b12:	d801      	bhi.n	8006b18 <_strtol_l.isra.0+0xb4>
 8006b14:	3c37      	subs	r4, #55	@ 0x37
 8006b16:	e7ea      	b.n	8006aee <_strtol_l.isra.0+0x8a>
 8006b18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006b1c:	2f19      	cmp	r7, #25
 8006b1e:	d804      	bhi.n	8006b2a <_strtol_l.isra.0+0xc6>
 8006b20:	3c57      	subs	r4, #87	@ 0x57
 8006b22:	e7e4      	b.n	8006aee <_strtol_l.isra.0+0x8a>
 8006b24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b28:	e7ed      	b.n	8006b06 <_strtol_l.isra.0+0xa2>
 8006b2a:	1c53      	adds	r3, r2, #1
 8006b2c:	d108      	bne.n	8006b40 <_strtol_l.isra.0+0xdc>
 8006b2e:	2322      	movs	r3, #34	@ 0x22
 8006b30:	f8ce 3000 	str.w	r3, [lr]
 8006b34:	4660      	mov	r0, ip
 8006b36:	f1b8 0f00 	cmp.w	r8, #0
 8006b3a:	d0a0      	beq.n	8006a7e <_strtol_l.isra.0+0x1a>
 8006b3c:	1e69      	subs	r1, r5, #1
 8006b3e:	e006      	b.n	8006b4e <_strtol_l.isra.0+0xea>
 8006b40:	b106      	cbz	r6, 8006b44 <_strtol_l.isra.0+0xe0>
 8006b42:	4240      	negs	r0, r0
 8006b44:	f1b8 0f00 	cmp.w	r8, #0
 8006b48:	d099      	beq.n	8006a7e <_strtol_l.isra.0+0x1a>
 8006b4a:	2a00      	cmp	r2, #0
 8006b4c:	d1f6      	bne.n	8006b3c <_strtol_l.isra.0+0xd8>
 8006b4e:	f8c8 1000 	str.w	r1, [r8]
 8006b52:	e794      	b.n	8006a7e <_strtol_l.isra.0+0x1a>
 8006b54:	0800a321 	.word	0x0800a321

08006b58 <_strtol_r>:
 8006b58:	f7ff bf84 	b.w	8006a64 <_strtol_l.isra.0>

08006b5c <strtol>:
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	460a      	mov	r2, r1
 8006b60:	4601      	mov	r1, r0
 8006b62:	4802      	ldr	r0, [pc, #8]	@ (8006b6c <strtol+0x10>)
 8006b64:	6800      	ldr	r0, [r0, #0]
 8006b66:	f7ff bf7d 	b.w	8006a64 <_strtol_l.isra.0>
 8006b6a:	bf00      	nop
 8006b6c:	20000190 	.word	0x20000190

08006b70 <_fwalk_sglue>:
 8006b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b74:	4607      	mov	r7, r0
 8006b76:	4688      	mov	r8, r1
 8006b78:	4614      	mov	r4, r2
 8006b7a:	2600      	movs	r6, #0
 8006b7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b80:	f1b9 0901 	subs.w	r9, r9, #1
 8006b84:	d505      	bpl.n	8006b92 <_fwalk_sglue+0x22>
 8006b86:	6824      	ldr	r4, [r4, #0]
 8006b88:	2c00      	cmp	r4, #0
 8006b8a:	d1f7      	bne.n	8006b7c <_fwalk_sglue+0xc>
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b92:	89ab      	ldrh	r3, [r5, #12]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d907      	bls.n	8006ba8 <_fwalk_sglue+0x38>
 8006b98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	d003      	beq.n	8006ba8 <_fwalk_sglue+0x38>
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	4638      	mov	r0, r7
 8006ba4:	47c0      	blx	r8
 8006ba6:	4306      	orrs	r6, r0
 8006ba8:	3568      	adds	r5, #104	@ 0x68
 8006baa:	e7e9      	b.n	8006b80 <_fwalk_sglue+0x10>

08006bac <memset>:
 8006bac:	4402      	add	r2, r0
 8006bae:	4603      	mov	r3, r0
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d100      	bne.n	8006bb6 <memset+0xa>
 8006bb4:	4770      	bx	lr
 8006bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bba:	e7f9      	b.n	8006bb0 <memset+0x4>

08006bbc <strchr>:
 8006bbc:	b2c9      	uxtb	r1, r1
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bc6:	b112      	cbz	r2, 8006bce <strchr+0x12>
 8006bc8:	428a      	cmp	r2, r1
 8006bca:	d1f9      	bne.n	8006bc0 <strchr+0x4>
 8006bcc:	4770      	bx	lr
 8006bce:	2900      	cmp	r1, #0
 8006bd0:	bf18      	it	ne
 8006bd2:	2000      	movne	r0, #0
 8006bd4:	4770      	bx	lr

08006bd6 <strncmp>:
 8006bd6:	b510      	push	{r4, lr}
 8006bd8:	b16a      	cbz	r2, 8006bf6 <strncmp+0x20>
 8006bda:	3901      	subs	r1, #1
 8006bdc:	1884      	adds	r4, r0, r2
 8006bde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006be2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d103      	bne.n	8006bf2 <strncmp+0x1c>
 8006bea:	42a0      	cmp	r0, r4
 8006bec:	d001      	beq.n	8006bf2 <strncmp+0x1c>
 8006bee:	2a00      	cmp	r2, #0
 8006bf0:	d1f5      	bne.n	8006bde <strncmp+0x8>
 8006bf2:	1ad0      	subs	r0, r2, r3
 8006bf4:	bd10      	pop	{r4, pc}
 8006bf6:	4610      	mov	r0, r2
 8006bf8:	e7fc      	b.n	8006bf4 <strncmp+0x1e>

08006bfa <strncpy>:
 8006bfa:	b510      	push	{r4, lr}
 8006bfc:	3901      	subs	r1, #1
 8006bfe:	4603      	mov	r3, r0
 8006c00:	b132      	cbz	r2, 8006c10 <strncpy+0x16>
 8006c02:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006c06:	f803 4b01 	strb.w	r4, [r3], #1
 8006c0a:	3a01      	subs	r2, #1
 8006c0c:	2c00      	cmp	r4, #0
 8006c0e:	d1f7      	bne.n	8006c00 <strncpy+0x6>
 8006c10:	441a      	add	r2, r3
 8006c12:	2100      	movs	r1, #0
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d100      	bne.n	8006c1a <strncpy+0x20>
 8006c18:	bd10      	pop	{r4, pc}
 8006c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c1e:	e7f9      	b.n	8006c14 <strncpy+0x1a>

08006c20 <_lseek_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	4d07      	ldr	r5, [pc, #28]	@ (8006c40 <_lseek_r+0x20>)
 8006c24:	4604      	mov	r4, r0
 8006c26:	4608      	mov	r0, r1
 8006c28:	4611      	mov	r1, r2
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	602a      	str	r2, [r5, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f7fb f8e1 	bl	8001df6 <_lseek>
 8006c34:	1c43      	adds	r3, r0, #1
 8006c36:	d102      	bne.n	8006c3e <_lseek_r+0x1e>
 8006c38:	682b      	ldr	r3, [r5, #0]
 8006c3a:	b103      	cbz	r3, 8006c3e <_lseek_r+0x1e>
 8006c3c:	6023      	str	r3, [r4, #0]
 8006c3e:	bd38      	pop	{r3, r4, r5, pc}
 8006c40:	20000aa4 	.word	0x20000aa4

08006c44 <_read_r>:
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	4d07      	ldr	r5, [pc, #28]	@ (8006c64 <_read_r+0x20>)
 8006c48:	4604      	mov	r4, r0
 8006c4a:	4608      	mov	r0, r1
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	2200      	movs	r2, #0
 8006c50:	602a      	str	r2, [r5, #0]
 8006c52:	461a      	mov	r2, r3
 8006c54:	f7fb f86f 	bl	8001d36 <_read>
 8006c58:	1c43      	adds	r3, r0, #1
 8006c5a:	d102      	bne.n	8006c62 <_read_r+0x1e>
 8006c5c:	682b      	ldr	r3, [r5, #0]
 8006c5e:	b103      	cbz	r3, 8006c62 <_read_r+0x1e>
 8006c60:	6023      	str	r3, [r4, #0]
 8006c62:	bd38      	pop	{r3, r4, r5, pc}
 8006c64:	20000aa4 	.word	0x20000aa4

08006c68 <_write_r>:
 8006c68:	b538      	push	{r3, r4, r5, lr}
 8006c6a:	4d07      	ldr	r5, [pc, #28]	@ (8006c88 <_write_r+0x20>)
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	4608      	mov	r0, r1
 8006c70:	4611      	mov	r1, r2
 8006c72:	2200      	movs	r2, #0
 8006c74:	602a      	str	r2, [r5, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	f7fb f87a 	bl	8001d70 <_write>
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	d102      	bne.n	8006c86 <_write_r+0x1e>
 8006c80:	682b      	ldr	r3, [r5, #0]
 8006c82:	b103      	cbz	r3, 8006c86 <_write_r+0x1e>
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	bd38      	pop	{r3, r4, r5, pc}
 8006c88:	20000aa4 	.word	0x20000aa4

08006c8c <__errno>:
 8006c8c:	4b01      	ldr	r3, [pc, #4]	@ (8006c94 <__errno+0x8>)
 8006c8e:	6818      	ldr	r0, [r3, #0]
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	20000190 	.word	0x20000190

08006c98 <__libc_init_array>:
 8006c98:	b570      	push	{r4, r5, r6, lr}
 8006c9a:	4d0d      	ldr	r5, [pc, #52]	@ (8006cd0 <__libc_init_array+0x38>)
 8006c9c:	4c0d      	ldr	r4, [pc, #52]	@ (8006cd4 <__libc_init_array+0x3c>)
 8006c9e:	1b64      	subs	r4, r4, r5
 8006ca0:	10a4      	asrs	r4, r4, #2
 8006ca2:	2600      	movs	r6, #0
 8006ca4:	42a6      	cmp	r6, r4
 8006ca6:	d109      	bne.n	8006cbc <__libc_init_array+0x24>
 8006ca8:	4d0b      	ldr	r5, [pc, #44]	@ (8006cd8 <__libc_init_array+0x40>)
 8006caa:	4c0c      	ldr	r4, [pc, #48]	@ (8006cdc <__libc_init_array+0x44>)
 8006cac:	f003 f8f8 	bl	8009ea0 <_init>
 8006cb0:	1b64      	subs	r4, r4, r5
 8006cb2:	10a4      	asrs	r4, r4, #2
 8006cb4:	2600      	movs	r6, #0
 8006cb6:	42a6      	cmp	r6, r4
 8006cb8:	d105      	bne.n	8006cc6 <__libc_init_array+0x2e>
 8006cba:	bd70      	pop	{r4, r5, r6, pc}
 8006cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cc0:	4798      	blx	r3
 8006cc2:	3601      	adds	r6, #1
 8006cc4:	e7ee      	b.n	8006ca4 <__libc_init_array+0xc>
 8006cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cca:	4798      	blx	r3
 8006ccc:	3601      	adds	r6, #1
 8006cce:	e7f2      	b.n	8006cb6 <__libc_init_array+0x1e>
 8006cd0:	0800a528 	.word	0x0800a528
 8006cd4:	0800a528 	.word	0x0800a528
 8006cd8:	0800a528 	.word	0x0800a528
 8006cdc:	0800a52c 	.word	0x0800a52c

08006ce0 <__retarget_lock_init_recursive>:
 8006ce0:	4770      	bx	lr

08006ce2 <__retarget_lock_acquire_recursive>:
 8006ce2:	4770      	bx	lr

08006ce4 <__retarget_lock_release_recursive>:
 8006ce4:	4770      	bx	lr
	...

08006ce8 <_localeconv_r>:
 8006ce8:	4800      	ldr	r0, [pc, #0]	@ (8006cec <_localeconv_r+0x4>)
 8006cea:	4770      	bx	lr
 8006cec:	20000114 	.word	0x20000114

08006cf0 <_close_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	4d06      	ldr	r5, [pc, #24]	@ (8006d0c <_close_r+0x1c>)
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	4608      	mov	r0, r1
 8006cfa:	602b      	str	r3, [r5, #0]
 8006cfc:	f7fb f854 	bl	8001da8 <_close>
 8006d00:	1c43      	adds	r3, r0, #1
 8006d02:	d102      	bne.n	8006d0a <_close_r+0x1a>
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	b103      	cbz	r3, 8006d0a <_close_r+0x1a>
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	bd38      	pop	{r3, r4, r5, pc}
 8006d0c:	20000aa4 	.word	0x20000aa4

08006d10 <memcpy>:
 8006d10:	440a      	add	r2, r1
 8006d12:	4291      	cmp	r1, r2
 8006d14:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006d18:	d100      	bne.n	8006d1c <memcpy+0xc>
 8006d1a:	4770      	bx	lr
 8006d1c:	b510      	push	{r4, lr}
 8006d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d26:	4291      	cmp	r1, r2
 8006d28:	d1f9      	bne.n	8006d1e <memcpy+0xe>
 8006d2a:	bd10      	pop	{r4, pc}
 8006d2c:	0000      	movs	r0, r0
	...

08006d30 <nan>:
 8006d30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006d38 <nan+0x8>
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	00000000 	.word	0x00000000
 8006d3c:	7ff80000 	.word	0x7ff80000

08006d40 <nanf>:
 8006d40:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006d48 <nanf+0x8>
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	7fc00000 	.word	0x7fc00000

08006d4c <quorem>:
 8006d4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d50:	6903      	ldr	r3, [r0, #16]
 8006d52:	690c      	ldr	r4, [r1, #16]
 8006d54:	42a3      	cmp	r3, r4
 8006d56:	4607      	mov	r7, r0
 8006d58:	db7e      	blt.n	8006e58 <quorem+0x10c>
 8006d5a:	3c01      	subs	r4, #1
 8006d5c:	f101 0814 	add.w	r8, r1, #20
 8006d60:	00a3      	lsls	r3, r4, #2
 8006d62:	f100 0514 	add.w	r5, r0, #20
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d6c:	9301      	str	r3, [sp, #4]
 8006d6e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d76:	3301      	adds	r3, #1
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d7e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d82:	d32e      	bcc.n	8006de2 <quorem+0x96>
 8006d84:	f04f 0a00 	mov.w	sl, #0
 8006d88:	46c4      	mov	ip, r8
 8006d8a:	46ae      	mov	lr, r5
 8006d8c:	46d3      	mov	fp, sl
 8006d8e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d92:	b298      	uxth	r0, r3
 8006d94:	fb06 a000 	mla	r0, r6, r0, sl
 8006d98:	0c02      	lsrs	r2, r0, #16
 8006d9a:	0c1b      	lsrs	r3, r3, #16
 8006d9c:	fb06 2303 	mla	r3, r6, r3, r2
 8006da0:	f8de 2000 	ldr.w	r2, [lr]
 8006da4:	b280      	uxth	r0, r0
 8006da6:	b292      	uxth	r2, r2
 8006da8:	1a12      	subs	r2, r2, r0
 8006daa:	445a      	add	r2, fp
 8006dac:	f8de 0000 	ldr.w	r0, [lr]
 8006db0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006dba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006dbe:	b292      	uxth	r2, r2
 8006dc0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006dc4:	45e1      	cmp	r9, ip
 8006dc6:	f84e 2b04 	str.w	r2, [lr], #4
 8006dca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006dce:	d2de      	bcs.n	8006d8e <quorem+0x42>
 8006dd0:	9b00      	ldr	r3, [sp, #0]
 8006dd2:	58eb      	ldr	r3, [r5, r3]
 8006dd4:	b92b      	cbnz	r3, 8006de2 <quorem+0x96>
 8006dd6:	9b01      	ldr	r3, [sp, #4]
 8006dd8:	3b04      	subs	r3, #4
 8006dda:	429d      	cmp	r5, r3
 8006ddc:	461a      	mov	r2, r3
 8006dde:	d32f      	bcc.n	8006e40 <quorem+0xf4>
 8006de0:	613c      	str	r4, [r7, #16]
 8006de2:	4638      	mov	r0, r7
 8006de4:	f002 fa6e 	bl	80092c4 <__mcmp>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	db25      	blt.n	8006e38 <quorem+0xec>
 8006dec:	4629      	mov	r1, r5
 8006dee:	2000      	movs	r0, #0
 8006df0:	f858 2b04 	ldr.w	r2, [r8], #4
 8006df4:	f8d1 c000 	ldr.w	ip, [r1]
 8006df8:	fa1f fe82 	uxth.w	lr, r2
 8006dfc:	fa1f f38c 	uxth.w	r3, ip
 8006e00:	eba3 030e 	sub.w	r3, r3, lr
 8006e04:	4403      	add	r3, r0
 8006e06:	0c12      	lsrs	r2, r2, #16
 8006e08:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006e0c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e16:	45c1      	cmp	r9, r8
 8006e18:	f841 3b04 	str.w	r3, [r1], #4
 8006e1c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e20:	d2e6      	bcs.n	8006df0 <quorem+0xa4>
 8006e22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e2a:	b922      	cbnz	r2, 8006e36 <quorem+0xea>
 8006e2c:	3b04      	subs	r3, #4
 8006e2e:	429d      	cmp	r5, r3
 8006e30:	461a      	mov	r2, r3
 8006e32:	d30b      	bcc.n	8006e4c <quorem+0x100>
 8006e34:	613c      	str	r4, [r7, #16]
 8006e36:	3601      	adds	r6, #1
 8006e38:	4630      	mov	r0, r6
 8006e3a:	b003      	add	sp, #12
 8006e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e40:	6812      	ldr	r2, [r2, #0]
 8006e42:	3b04      	subs	r3, #4
 8006e44:	2a00      	cmp	r2, #0
 8006e46:	d1cb      	bne.n	8006de0 <quorem+0x94>
 8006e48:	3c01      	subs	r4, #1
 8006e4a:	e7c6      	b.n	8006dda <quorem+0x8e>
 8006e4c:	6812      	ldr	r2, [r2, #0]
 8006e4e:	3b04      	subs	r3, #4
 8006e50:	2a00      	cmp	r2, #0
 8006e52:	d1ef      	bne.n	8006e34 <quorem+0xe8>
 8006e54:	3c01      	subs	r4, #1
 8006e56:	e7ea      	b.n	8006e2e <quorem+0xe2>
 8006e58:	2000      	movs	r0, #0
 8006e5a:	e7ee      	b.n	8006e3a <quorem+0xee>
 8006e5c:	0000      	movs	r0, r0
	...

08006e60 <_dtoa_r>:
 8006e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e64:	69c7      	ldr	r7, [r0, #28]
 8006e66:	b097      	sub	sp, #92	@ 0x5c
 8006e68:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006e6c:	ec55 4b10 	vmov	r4, r5, d0
 8006e70:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006e72:	9107      	str	r1, [sp, #28]
 8006e74:	4681      	mov	r9, r0
 8006e76:	920c      	str	r2, [sp, #48]	@ 0x30
 8006e78:	9311      	str	r3, [sp, #68]	@ 0x44
 8006e7a:	b97f      	cbnz	r7, 8006e9c <_dtoa_r+0x3c>
 8006e7c:	2010      	movs	r0, #16
 8006e7e:	f001 fc69 	bl	8008754 <malloc>
 8006e82:	4602      	mov	r2, r0
 8006e84:	f8c9 001c 	str.w	r0, [r9, #28]
 8006e88:	b920      	cbnz	r0, 8006e94 <_dtoa_r+0x34>
 8006e8a:	4ba9      	ldr	r3, [pc, #676]	@ (8007130 <_dtoa_r+0x2d0>)
 8006e8c:	21ef      	movs	r1, #239	@ 0xef
 8006e8e:	48a9      	ldr	r0, [pc, #676]	@ (8007134 <_dtoa_r+0x2d4>)
 8006e90:	f002 fd16 	bl	80098c0 <__assert_func>
 8006e94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006e98:	6007      	str	r7, [r0, #0]
 8006e9a:	60c7      	str	r7, [r0, #12]
 8006e9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006ea0:	6819      	ldr	r1, [r3, #0]
 8006ea2:	b159      	cbz	r1, 8006ebc <_dtoa_r+0x5c>
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	604a      	str	r2, [r1, #4]
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	4093      	lsls	r3, r2
 8006eac:	608b      	str	r3, [r1, #8]
 8006eae:	4648      	mov	r0, r9
 8006eb0:	f001 ff8c 	bl	8008dcc <_Bfree>
 8006eb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	601a      	str	r2, [r3, #0]
 8006ebc:	1e2b      	subs	r3, r5, #0
 8006ebe:	bfb9      	ittee	lt
 8006ec0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006ec4:	9305      	strlt	r3, [sp, #20]
 8006ec6:	2300      	movge	r3, #0
 8006ec8:	6033      	strge	r3, [r6, #0]
 8006eca:	9f05      	ldr	r7, [sp, #20]
 8006ecc:	4b9a      	ldr	r3, [pc, #616]	@ (8007138 <_dtoa_r+0x2d8>)
 8006ece:	bfbc      	itt	lt
 8006ed0:	2201      	movlt	r2, #1
 8006ed2:	6032      	strlt	r2, [r6, #0]
 8006ed4:	43bb      	bics	r3, r7
 8006ed6:	d112      	bne.n	8006efe <_dtoa_r+0x9e>
 8006ed8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006eda:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006ede:	6013      	str	r3, [r2, #0]
 8006ee0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ee4:	4323      	orrs	r3, r4
 8006ee6:	f000 855a 	beq.w	800799e <_dtoa_r+0xb3e>
 8006eea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006eec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800714c <_dtoa_r+0x2ec>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 855c 	beq.w	80079ae <_dtoa_r+0xb4e>
 8006ef6:	f10a 0303 	add.w	r3, sl, #3
 8006efa:	f000 bd56 	b.w	80079aa <_dtoa_r+0xb4a>
 8006efe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006f02:	2200      	movs	r2, #0
 8006f04:	ec51 0b17 	vmov	r0, r1, d7
 8006f08:	2300      	movs	r3, #0
 8006f0a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006f0e:	f7f9 fddb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f12:	4680      	mov	r8, r0
 8006f14:	b158      	cbz	r0, 8006f2e <_dtoa_r+0xce>
 8006f16:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006f18:	2301      	movs	r3, #1
 8006f1a:	6013      	str	r3, [r2, #0]
 8006f1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f1e:	b113      	cbz	r3, 8006f26 <_dtoa_r+0xc6>
 8006f20:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006f22:	4b86      	ldr	r3, [pc, #536]	@ (800713c <_dtoa_r+0x2dc>)
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007150 <_dtoa_r+0x2f0>
 8006f2a:	f000 bd40 	b.w	80079ae <_dtoa_r+0xb4e>
 8006f2e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006f32:	aa14      	add	r2, sp, #80	@ 0x50
 8006f34:	a915      	add	r1, sp, #84	@ 0x54
 8006f36:	4648      	mov	r0, r9
 8006f38:	f002 fae4 	bl	8009504 <__d2b>
 8006f3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006f40:	9002      	str	r0, [sp, #8]
 8006f42:	2e00      	cmp	r6, #0
 8006f44:	d078      	beq.n	8007038 <_dtoa_r+0x1d8>
 8006f46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f48:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006f58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006f5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006f60:	4619      	mov	r1, r3
 8006f62:	2200      	movs	r2, #0
 8006f64:	4b76      	ldr	r3, [pc, #472]	@ (8007140 <_dtoa_r+0x2e0>)
 8006f66:	f7f9 f98f 	bl	8000288 <__aeabi_dsub>
 8006f6a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007118 <_dtoa_r+0x2b8>)
 8006f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f70:	f7f9 fb42 	bl	80005f8 <__aeabi_dmul>
 8006f74:	a36a      	add	r3, pc, #424	@ (adr r3, 8007120 <_dtoa_r+0x2c0>)
 8006f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7a:	f7f9 f987 	bl	800028c <__adddf3>
 8006f7e:	4604      	mov	r4, r0
 8006f80:	4630      	mov	r0, r6
 8006f82:	460d      	mov	r5, r1
 8006f84:	f7f9 face 	bl	8000524 <__aeabi_i2d>
 8006f88:	a367      	add	r3, pc, #412	@ (adr r3, 8007128 <_dtoa_r+0x2c8>)
 8006f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8e:	f7f9 fb33 	bl	80005f8 <__aeabi_dmul>
 8006f92:	4602      	mov	r2, r0
 8006f94:	460b      	mov	r3, r1
 8006f96:	4620      	mov	r0, r4
 8006f98:	4629      	mov	r1, r5
 8006f9a:	f7f9 f977 	bl	800028c <__adddf3>
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	460d      	mov	r5, r1
 8006fa2:	f7f9 fdd9 	bl	8000b58 <__aeabi_d2iz>
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	4607      	mov	r7, r0
 8006faa:	2300      	movs	r3, #0
 8006fac:	4620      	mov	r0, r4
 8006fae:	4629      	mov	r1, r5
 8006fb0:	f7f9 fd94 	bl	8000adc <__aeabi_dcmplt>
 8006fb4:	b140      	cbz	r0, 8006fc8 <_dtoa_r+0x168>
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	f7f9 fab4 	bl	8000524 <__aeabi_i2d>
 8006fbc:	4622      	mov	r2, r4
 8006fbe:	462b      	mov	r3, r5
 8006fc0:	f7f9 fd82 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fc4:	b900      	cbnz	r0, 8006fc8 <_dtoa_r+0x168>
 8006fc6:	3f01      	subs	r7, #1
 8006fc8:	2f16      	cmp	r7, #22
 8006fca:	d852      	bhi.n	8007072 <_dtoa_r+0x212>
 8006fcc:	4b5d      	ldr	r3, [pc, #372]	@ (8007144 <_dtoa_r+0x2e4>)
 8006fce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006fda:	f7f9 fd7f 	bl	8000adc <__aeabi_dcmplt>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	d049      	beq.n	8007076 <_dtoa_r+0x216>
 8006fe2:	3f01      	subs	r7, #1
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	9310      	str	r3, [sp, #64]	@ 0x40
 8006fe8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006fea:	1b9b      	subs	r3, r3, r6
 8006fec:	1e5a      	subs	r2, r3, #1
 8006fee:	bf45      	ittet	mi
 8006ff0:	f1c3 0301 	rsbmi	r3, r3, #1
 8006ff4:	9300      	strmi	r3, [sp, #0]
 8006ff6:	2300      	movpl	r3, #0
 8006ff8:	2300      	movmi	r3, #0
 8006ffa:	9206      	str	r2, [sp, #24]
 8006ffc:	bf54      	ite	pl
 8006ffe:	9300      	strpl	r3, [sp, #0]
 8007000:	9306      	strmi	r3, [sp, #24]
 8007002:	2f00      	cmp	r7, #0
 8007004:	db39      	blt.n	800707a <_dtoa_r+0x21a>
 8007006:	9b06      	ldr	r3, [sp, #24]
 8007008:	970d      	str	r7, [sp, #52]	@ 0x34
 800700a:	443b      	add	r3, r7
 800700c:	9306      	str	r3, [sp, #24]
 800700e:	2300      	movs	r3, #0
 8007010:	9308      	str	r3, [sp, #32]
 8007012:	9b07      	ldr	r3, [sp, #28]
 8007014:	2b09      	cmp	r3, #9
 8007016:	d863      	bhi.n	80070e0 <_dtoa_r+0x280>
 8007018:	2b05      	cmp	r3, #5
 800701a:	bfc4      	itt	gt
 800701c:	3b04      	subgt	r3, #4
 800701e:	9307      	strgt	r3, [sp, #28]
 8007020:	9b07      	ldr	r3, [sp, #28]
 8007022:	f1a3 0302 	sub.w	r3, r3, #2
 8007026:	bfcc      	ite	gt
 8007028:	2400      	movgt	r4, #0
 800702a:	2401      	movle	r4, #1
 800702c:	2b03      	cmp	r3, #3
 800702e:	d863      	bhi.n	80070f8 <_dtoa_r+0x298>
 8007030:	e8df f003 	tbb	[pc, r3]
 8007034:	2b375452 	.word	0x2b375452
 8007038:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800703c:	441e      	add	r6, r3
 800703e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007042:	2b20      	cmp	r3, #32
 8007044:	bfc1      	itttt	gt
 8007046:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800704a:	409f      	lslgt	r7, r3
 800704c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007050:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007054:	bfd6      	itet	le
 8007056:	f1c3 0320 	rsble	r3, r3, #32
 800705a:	ea47 0003 	orrgt.w	r0, r7, r3
 800705e:	fa04 f003 	lslle.w	r0, r4, r3
 8007062:	f7f9 fa4f 	bl	8000504 <__aeabi_ui2d>
 8007066:	2201      	movs	r2, #1
 8007068:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800706c:	3e01      	subs	r6, #1
 800706e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007070:	e776      	b.n	8006f60 <_dtoa_r+0x100>
 8007072:	2301      	movs	r3, #1
 8007074:	e7b7      	b.n	8006fe6 <_dtoa_r+0x186>
 8007076:	9010      	str	r0, [sp, #64]	@ 0x40
 8007078:	e7b6      	b.n	8006fe8 <_dtoa_r+0x188>
 800707a:	9b00      	ldr	r3, [sp, #0]
 800707c:	1bdb      	subs	r3, r3, r7
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	427b      	negs	r3, r7
 8007082:	9308      	str	r3, [sp, #32]
 8007084:	2300      	movs	r3, #0
 8007086:	930d      	str	r3, [sp, #52]	@ 0x34
 8007088:	e7c3      	b.n	8007012 <_dtoa_r+0x1b2>
 800708a:	2301      	movs	r3, #1
 800708c:	9309      	str	r3, [sp, #36]	@ 0x24
 800708e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007090:	eb07 0b03 	add.w	fp, r7, r3
 8007094:	f10b 0301 	add.w	r3, fp, #1
 8007098:	2b01      	cmp	r3, #1
 800709a:	9303      	str	r3, [sp, #12]
 800709c:	bfb8      	it	lt
 800709e:	2301      	movlt	r3, #1
 80070a0:	e006      	b.n	80070b0 <_dtoa_r+0x250>
 80070a2:	2301      	movs	r3, #1
 80070a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80070a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	dd28      	ble.n	80070fe <_dtoa_r+0x29e>
 80070ac:	469b      	mov	fp, r3
 80070ae:	9303      	str	r3, [sp, #12]
 80070b0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80070b4:	2100      	movs	r1, #0
 80070b6:	2204      	movs	r2, #4
 80070b8:	f102 0514 	add.w	r5, r2, #20
 80070bc:	429d      	cmp	r5, r3
 80070be:	d926      	bls.n	800710e <_dtoa_r+0x2ae>
 80070c0:	6041      	str	r1, [r0, #4]
 80070c2:	4648      	mov	r0, r9
 80070c4:	f001 fe42 	bl	8008d4c <_Balloc>
 80070c8:	4682      	mov	sl, r0
 80070ca:	2800      	cmp	r0, #0
 80070cc:	d142      	bne.n	8007154 <_dtoa_r+0x2f4>
 80070ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007148 <_dtoa_r+0x2e8>)
 80070d0:	4602      	mov	r2, r0
 80070d2:	f240 11af 	movw	r1, #431	@ 0x1af
 80070d6:	e6da      	b.n	8006e8e <_dtoa_r+0x2e>
 80070d8:	2300      	movs	r3, #0
 80070da:	e7e3      	b.n	80070a4 <_dtoa_r+0x244>
 80070dc:	2300      	movs	r3, #0
 80070de:	e7d5      	b.n	800708c <_dtoa_r+0x22c>
 80070e0:	2401      	movs	r4, #1
 80070e2:	2300      	movs	r3, #0
 80070e4:	9307      	str	r3, [sp, #28]
 80070e6:	9409      	str	r4, [sp, #36]	@ 0x24
 80070e8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80070ec:	2200      	movs	r2, #0
 80070ee:	f8cd b00c 	str.w	fp, [sp, #12]
 80070f2:	2312      	movs	r3, #18
 80070f4:	920c      	str	r2, [sp, #48]	@ 0x30
 80070f6:	e7db      	b.n	80070b0 <_dtoa_r+0x250>
 80070f8:	2301      	movs	r3, #1
 80070fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80070fc:	e7f4      	b.n	80070e8 <_dtoa_r+0x288>
 80070fe:	f04f 0b01 	mov.w	fp, #1
 8007102:	f8cd b00c 	str.w	fp, [sp, #12]
 8007106:	465b      	mov	r3, fp
 8007108:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800710c:	e7d0      	b.n	80070b0 <_dtoa_r+0x250>
 800710e:	3101      	adds	r1, #1
 8007110:	0052      	lsls	r2, r2, #1
 8007112:	e7d1      	b.n	80070b8 <_dtoa_r+0x258>
 8007114:	f3af 8000 	nop.w
 8007118:	636f4361 	.word	0x636f4361
 800711c:	3fd287a7 	.word	0x3fd287a7
 8007120:	8b60c8b3 	.word	0x8b60c8b3
 8007124:	3fc68a28 	.word	0x3fc68a28
 8007128:	509f79fb 	.word	0x509f79fb
 800712c:	3fd34413 	.word	0x3fd34413
 8007130:	0800a12a 	.word	0x0800a12a
 8007134:	0800a141 	.word	0x0800a141
 8007138:	7ff00000 	.word	0x7ff00000
 800713c:	0800a232 	.word	0x0800a232
 8007140:	3ff80000 	.word	0x3ff80000
 8007144:	0800a458 	.word	0x0800a458
 8007148:	0800a199 	.word	0x0800a199
 800714c:	0800a126 	.word	0x0800a126
 8007150:	0800a231 	.word	0x0800a231
 8007154:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007158:	6018      	str	r0, [r3, #0]
 800715a:	9b03      	ldr	r3, [sp, #12]
 800715c:	2b0e      	cmp	r3, #14
 800715e:	f200 80a1 	bhi.w	80072a4 <_dtoa_r+0x444>
 8007162:	2c00      	cmp	r4, #0
 8007164:	f000 809e 	beq.w	80072a4 <_dtoa_r+0x444>
 8007168:	2f00      	cmp	r7, #0
 800716a:	dd33      	ble.n	80071d4 <_dtoa_r+0x374>
 800716c:	4b9c      	ldr	r3, [pc, #624]	@ (80073e0 <_dtoa_r+0x580>)
 800716e:	f007 020f 	and.w	r2, r7, #15
 8007172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007176:	ed93 7b00 	vldr	d7, [r3]
 800717a:	05f8      	lsls	r0, r7, #23
 800717c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007180:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007184:	d516      	bpl.n	80071b4 <_dtoa_r+0x354>
 8007186:	4b97      	ldr	r3, [pc, #604]	@ (80073e4 <_dtoa_r+0x584>)
 8007188:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800718c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007190:	f7f9 fb5c 	bl	800084c <__aeabi_ddiv>
 8007194:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007198:	f004 040f 	and.w	r4, r4, #15
 800719c:	2603      	movs	r6, #3
 800719e:	4d91      	ldr	r5, [pc, #580]	@ (80073e4 <_dtoa_r+0x584>)
 80071a0:	b954      	cbnz	r4, 80071b8 <_dtoa_r+0x358>
 80071a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80071a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071aa:	f7f9 fb4f 	bl	800084c <__aeabi_ddiv>
 80071ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071b2:	e028      	b.n	8007206 <_dtoa_r+0x3a6>
 80071b4:	2602      	movs	r6, #2
 80071b6:	e7f2      	b.n	800719e <_dtoa_r+0x33e>
 80071b8:	07e1      	lsls	r1, r4, #31
 80071ba:	d508      	bpl.n	80071ce <_dtoa_r+0x36e>
 80071bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80071c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071c4:	f7f9 fa18 	bl	80005f8 <__aeabi_dmul>
 80071c8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80071cc:	3601      	adds	r6, #1
 80071ce:	1064      	asrs	r4, r4, #1
 80071d0:	3508      	adds	r5, #8
 80071d2:	e7e5      	b.n	80071a0 <_dtoa_r+0x340>
 80071d4:	f000 80af 	beq.w	8007336 <_dtoa_r+0x4d6>
 80071d8:	427c      	negs	r4, r7
 80071da:	4b81      	ldr	r3, [pc, #516]	@ (80073e0 <_dtoa_r+0x580>)
 80071dc:	4d81      	ldr	r5, [pc, #516]	@ (80073e4 <_dtoa_r+0x584>)
 80071de:	f004 020f 	and.w	r2, r4, #15
 80071e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80071ee:	f7f9 fa03 	bl	80005f8 <__aeabi_dmul>
 80071f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071f6:	1124      	asrs	r4, r4, #4
 80071f8:	2300      	movs	r3, #0
 80071fa:	2602      	movs	r6, #2
 80071fc:	2c00      	cmp	r4, #0
 80071fe:	f040 808f 	bne.w	8007320 <_dtoa_r+0x4c0>
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1d3      	bne.n	80071ae <_dtoa_r+0x34e>
 8007206:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007208:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 8094 	beq.w	800733a <_dtoa_r+0x4da>
 8007212:	4b75      	ldr	r3, [pc, #468]	@ (80073e8 <_dtoa_r+0x588>)
 8007214:	2200      	movs	r2, #0
 8007216:	4620      	mov	r0, r4
 8007218:	4629      	mov	r1, r5
 800721a:	f7f9 fc5f 	bl	8000adc <__aeabi_dcmplt>
 800721e:	2800      	cmp	r0, #0
 8007220:	f000 808b 	beq.w	800733a <_dtoa_r+0x4da>
 8007224:	9b03      	ldr	r3, [sp, #12]
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 8087 	beq.w	800733a <_dtoa_r+0x4da>
 800722c:	f1bb 0f00 	cmp.w	fp, #0
 8007230:	dd34      	ble.n	800729c <_dtoa_r+0x43c>
 8007232:	4620      	mov	r0, r4
 8007234:	4b6d      	ldr	r3, [pc, #436]	@ (80073ec <_dtoa_r+0x58c>)
 8007236:	2200      	movs	r2, #0
 8007238:	4629      	mov	r1, r5
 800723a:	f7f9 f9dd 	bl	80005f8 <__aeabi_dmul>
 800723e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007242:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8007246:	3601      	adds	r6, #1
 8007248:	465c      	mov	r4, fp
 800724a:	4630      	mov	r0, r6
 800724c:	f7f9 f96a 	bl	8000524 <__aeabi_i2d>
 8007250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007254:	f7f9 f9d0 	bl	80005f8 <__aeabi_dmul>
 8007258:	4b65      	ldr	r3, [pc, #404]	@ (80073f0 <_dtoa_r+0x590>)
 800725a:	2200      	movs	r2, #0
 800725c:	f7f9 f816 	bl	800028c <__adddf3>
 8007260:	4605      	mov	r5, r0
 8007262:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007266:	2c00      	cmp	r4, #0
 8007268:	d16a      	bne.n	8007340 <_dtoa_r+0x4e0>
 800726a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800726e:	4b61      	ldr	r3, [pc, #388]	@ (80073f4 <_dtoa_r+0x594>)
 8007270:	2200      	movs	r2, #0
 8007272:	f7f9 f809 	bl	8000288 <__aeabi_dsub>
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
 800727a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800727e:	462a      	mov	r2, r5
 8007280:	4633      	mov	r3, r6
 8007282:	f7f9 fc49 	bl	8000b18 <__aeabi_dcmpgt>
 8007286:	2800      	cmp	r0, #0
 8007288:	f040 8298 	bne.w	80077bc <_dtoa_r+0x95c>
 800728c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007290:	462a      	mov	r2, r5
 8007292:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007296:	f7f9 fc21 	bl	8000adc <__aeabi_dcmplt>
 800729a:	bb38      	cbnz	r0, 80072ec <_dtoa_r+0x48c>
 800729c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80072a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80072a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f2c0 8157 	blt.w	800755a <_dtoa_r+0x6fa>
 80072ac:	2f0e      	cmp	r7, #14
 80072ae:	f300 8154 	bgt.w	800755a <_dtoa_r+0x6fa>
 80072b2:	4b4b      	ldr	r3, [pc, #300]	@ (80073e0 <_dtoa_r+0x580>)
 80072b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80072b8:	ed93 7b00 	vldr	d7, [r3]
 80072bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072be:	2b00      	cmp	r3, #0
 80072c0:	ed8d 7b00 	vstr	d7, [sp]
 80072c4:	f280 80e5 	bge.w	8007492 <_dtoa_r+0x632>
 80072c8:	9b03      	ldr	r3, [sp, #12]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f300 80e1 	bgt.w	8007492 <_dtoa_r+0x632>
 80072d0:	d10c      	bne.n	80072ec <_dtoa_r+0x48c>
 80072d2:	4b48      	ldr	r3, [pc, #288]	@ (80073f4 <_dtoa_r+0x594>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	ec51 0b17 	vmov	r0, r1, d7
 80072da:	f7f9 f98d 	bl	80005f8 <__aeabi_dmul>
 80072de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072e2:	f7f9 fc0f 	bl	8000b04 <__aeabi_dcmpge>
 80072e6:	2800      	cmp	r0, #0
 80072e8:	f000 8266 	beq.w	80077b8 <_dtoa_r+0x958>
 80072ec:	2400      	movs	r4, #0
 80072ee:	4625      	mov	r5, r4
 80072f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072f2:	4656      	mov	r6, sl
 80072f4:	ea6f 0803 	mvn.w	r8, r3
 80072f8:	2700      	movs	r7, #0
 80072fa:	4621      	mov	r1, r4
 80072fc:	4648      	mov	r0, r9
 80072fe:	f001 fd65 	bl	8008dcc <_Bfree>
 8007302:	2d00      	cmp	r5, #0
 8007304:	f000 80bd 	beq.w	8007482 <_dtoa_r+0x622>
 8007308:	b12f      	cbz	r7, 8007316 <_dtoa_r+0x4b6>
 800730a:	42af      	cmp	r7, r5
 800730c:	d003      	beq.n	8007316 <_dtoa_r+0x4b6>
 800730e:	4639      	mov	r1, r7
 8007310:	4648      	mov	r0, r9
 8007312:	f001 fd5b 	bl	8008dcc <_Bfree>
 8007316:	4629      	mov	r1, r5
 8007318:	4648      	mov	r0, r9
 800731a:	f001 fd57 	bl	8008dcc <_Bfree>
 800731e:	e0b0      	b.n	8007482 <_dtoa_r+0x622>
 8007320:	07e2      	lsls	r2, r4, #31
 8007322:	d505      	bpl.n	8007330 <_dtoa_r+0x4d0>
 8007324:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007328:	f7f9 f966 	bl	80005f8 <__aeabi_dmul>
 800732c:	3601      	adds	r6, #1
 800732e:	2301      	movs	r3, #1
 8007330:	1064      	asrs	r4, r4, #1
 8007332:	3508      	adds	r5, #8
 8007334:	e762      	b.n	80071fc <_dtoa_r+0x39c>
 8007336:	2602      	movs	r6, #2
 8007338:	e765      	b.n	8007206 <_dtoa_r+0x3a6>
 800733a:	9c03      	ldr	r4, [sp, #12]
 800733c:	46b8      	mov	r8, r7
 800733e:	e784      	b.n	800724a <_dtoa_r+0x3ea>
 8007340:	4b27      	ldr	r3, [pc, #156]	@ (80073e0 <_dtoa_r+0x580>)
 8007342:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007344:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007348:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800734c:	4454      	add	r4, sl
 800734e:	2900      	cmp	r1, #0
 8007350:	d054      	beq.n	80073fc <_dtoa_r+0x59c>
 8007352:	4929      	ldr	r1, [pc, #164]	@ (80073f8 <_dtoa_r+0x598>)
 8007354:	2000      	movs	r0, #0
 8007356:	f7f9 fa79 	bl	800084c <__aeabi_ddiv>
 800735a:	4633      	mov	r3, r6
 800735c:	462a      	mov	r2, r5
 800735e:	f7f8 ff93 	bl	8000288 <__aeabi_dsub>
 8007362:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007366:	4656      	mov	r6, sl
 8007368:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800736c:	f7f9 fbf4 	bl	8000b58 <__aeabi_d2iz>
 8007370:	4605      	mov	r5, r0
 8007372:	f7f9 f8d7 	bl	8000524 <__aeabi_i2d>
 8007376:	4602      	mov	r2, r0
 8007378:	460b      	mov	r3, r1
 800737a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800737e:	f7f8 ff83 	bl	8000288 <__aeabi_dsub>
 8007382:	3530      	adds	r5, #48	@ 0x30
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800738c:	f806 5b01 	strb.w	r5, [r6], #1
 8007390:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007394:	f7f9 fba2 	bl	8000adc <__aeabi_dcmplt>
 8007398:	2800      	cmp	r0, #0
 800739a:	d172      	bne.n	8007482 <_dtoa_r+0x622>
 800739c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073a0:	4911      	ldr	r1, [pc, #68]	@ (80073e8 <_dtoa_r+0x588>)
 80073a2:	2000      	movs	r0, #0
 80073a4:	f7f8 ff70 	bl	8000288 <__aeabi_dsub>
 80073a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80073ac:	f7f9 fb96 	bl	8000adc <__aeabi_dcmplt>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	f040 80b4 	bne.w	800751e <_dtoa_r+0x6be>
 80073b6:	42a6      	cmp	r6, r4
 80073b8:	f43f af70 	beq.w	800729c <_dtoa_r+0x43c>
 80073bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80073c0:	4b0a      	ldr	r3, [pc, #40]	@ (80073ec <_dtoa_r+0x58c>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	f7f9 f918 	bl	80005f8 <__aeabi_dmul>
 80073c8:	4b08      	ldr	r3, [pc, #32]	@ (80073ec <_dtoa_r+0x58c>)
 80073ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80073ce:	2200      	movs	r2, #0
 80073d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073d4:	f7f9 f910 	bl	80005f8 <__aeabi_dmul>
 80073d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073dc:	e7c4      	b.n	8007368 <_dtoa_r+0x508>
 80073de:	bf00      	nop
 80073e0:	0800a458 	.word	0x0800a458
 80073e4:	0800a430 	.word	0x0800a430
 80073e8:	3ff00000 	.word	0x3ff00000
 80073ec:	40240000 	.word	0x40240000
 80073f0:	401c0000 	.word	0x401c0000
 80073f4:	40140000 	.word	0x40140000
 80073f8:	3fe00000 	.word	0x3fe00000
 80073fc:	4631      	mov	r1, r6
 80073fe:	4628      	mov	r0, r5
 8007400:	f7f9 f8fa 	bl	80005f8 <__aeabi_dmul>
 8007404:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007408:	9413      	str	r4, [sp, #76]	@ 0x4c
 800740a:	4656      	mov	r6, sl
 800740c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007410:	f7f9 fba2 	bl	8000b58 <__aeabi_d2iz>
 8007414:	4605      	mov	r5, r0
 8007416:	f7f9 f885 	bl	8000524 <__aeabi_i2d>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007422:	f7f8 ff31 	bl	8000288 <__aeabi_dsub>
 8007426:	3530      	adds	r5, #48	@ 0x30
 8007428:	f806 5b01 	strb.w	r5, [r6], #1
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	42a6      	cmp	r6, r4
 8007432:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007436:	f04f 0200 	mov.w	r2, #0
 800743a:	d124      	bne.n	8007486 <_dtoa_r+0x626>
 800743c:	4baf      	ldr	r3, [pc, #700]	@ (80076fc <_dtoa_r+0x89c>)
 800743e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007442:	f7f8 ff23 	bl	800028c <__adddf3>
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800744e:	f7f9 fb63 	bl	8000b18 <__aeabi_dcmpgt>
 8007452:	2800      	cmp	r0, #0
 8007454:	d163      	bne.n	800751e <_dtoa_r+0x6be>
 8007456:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800745a:	49a8      	ldr	r1, [pc, #672]	@ (80076fc <_dtoa_r+0x89c>)
 800745c:	2000      	movs	r0, #0
 800745e:	f7f8 ff13 	bl	8000288 <__aeabi_dsub>
 8007462:	4602      	mov	r2, r0
 8007464:	460b      	mov	r3, r1
 8007466:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800746a:	f7f9 fb37 	bl	8000adc <__aeabi_dcmplt>
 800746e:	2800      	cmp	r0, #0
 8007470:	f43f af14 	beq.w	800729c <_dtoa_r+0x43c>
 8007474:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007476:	1e73      	subs	r3, r6, #1
 8007478:	9313      	str	r3, [sp, #76]	@ 0x4c
 800747a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800747e:	2b30      	cmp	r3, #48	@ 0x30
 8007480:	d0f8      	beq.n	8007474 <_dtoa_r+0x614>
 8007482:	4647      	mov	r7, r8
 8007484:	e03b      	b.n	80074fe <_dtoa_r+0x69e>
 8007486:	4b9e      	ldr	r3, [pc, #632]	@ (8007700 <_dtoa_r+0x8a0>)
 8007488:	f7f9 f8b6 	bl	80005f8 <__aeabi_dmul>
 800748c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007490:	e7bc      	b.n	800740c <_dtoa_r+0x5ac>
 8007492:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007496:	4656      	mov	r6, sl
 8007498:	e9dd 2300 	ldrd	r2, r3, [sp]
 800749c:	4620      	mov	r0, r4
 800749e:	4629      	mov	r1, r5
 80074a0:	f7f9 f9d4 	bl	800084c <__aeabi_ddiv>
 80074a4:	f7f9 fb58 	bl	8000b58 <__aeabi_d2iz>
 80074a8:	4680      	mov	r8, r0
 80074aa:	f7f9 f83b 	bl	8000524 <__aeabi_i2d>
 80074ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074b2:	f7f9 f8a1 	bl	80005f8 <__aeabi_dmul>
 80074b6:	4602      	mov	r2, r0
 80074b8:	460b      	mov	r3, r1
 80074ba:	4620      	mov	r0, r4
 80074bc:	4629      	mov	r1, r5
 80074be:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80074c2:	f7f8 fee1 	bl	8000288 <__aeabi_dsub>
 80074c6:	f806 4b01 	strb.w	r4, [r6], #1
 80074ca:	9d03      	ldr	r5, [sp, #12]
 80074cc:	eba6 040a 	sub.w	r4, r6, sl
 80074d0:	42a5      	cmp	r5, r4
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	d133      	bne.n	8007540 <_dtoa_r+0x6e0>
 80074d8:	f7f8 fed8 	bl	800028c <__adddf3>
 80074dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074e0:	4604      	mov	r4, r0
 80074e2:	460d      	mov	r5, r1
 80074e4:	f7f9 fb18 	bl	8000b18 <__aeabi_dcmpgt>
 80074e8:	b9c0      	cbnz	r0, 800751c <_dtoa_r+0x6bc>
 80074ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074ee:	4620      	mov	r0, r4
 80074f0:	4629      	mov	r1, r5
 80074f2:	f7f9 fae9 	bl	8000ac8 <__aeabi_dcmpeq>
 80074f6:	b110      	cbz	r0, 80074fe <_dtoa_r+0x69e>
 80074f8:	f018 0f01 	tst.w	r8, #1
 80074fc:	d10e      	bne.n	800751c <_dtoa_r+0x6bc>
 80074fe:	9902      	ldr	r1, [sp, #8]
 8007500:	4648      	mov	r0, r9
 8007502:	f001 fc63 	bl	8008dcc <_Bfree>
 8007506:	2300      	movs	r3, #0
 8007508:	7033      	strb	r3, [r6, #0]
 800750a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800750c:	3701      	adds	r7, #1
 800750e:	601f      	str	r7, [r3, #0]
 8007510:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 824b 	beq.w	80079ae <_dtoa_r+0xb4e>
 8007518:	601e      	str	r6, [r3, #0]
 800751a:	e248      	b.n	80079ae <_dtoa_r+0xb4e>
 800751c:	46b8      	mov	r8, r7
 800751e:	4633      	mov	r3, r6
 8007520:	461e      	mov	r6, r3
 8007522:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007526:	2a39      	cmp	r2, #57	@ 0x39
 8007528:	d106      	bne.n	8007538 <_dtoa_r+0x6d8>
 800752a:	459a      	cmp	sl, r3
 800752c:	d1f8      	bne.n	8007520 <_dtoa_r+0x6c0>
 800752e:	2230      	movs	r2, #48	@ 0x30
 8007530:	f108 0801 	add.w	r8, r8, #1
 8007534:	f88a 2000 	strb.w	r2, [sl]
 8007538:	781a      	ldrb	r2, [r3, #0]
 800753a:	3201      	adds	r2, #1
 800753c:	701a      	strb	r2, [r3, #0]
 800753e:	e7a0      	b.n	8007482 <_dtoa_r+0x622>
 8007540:	4b6f      	ldr	r3, [pc, #444]	@ (8007700 <_dtoa_r+0x8a0>)
 8007542:	2200      	movs	r2, #0
 8007544:	f7f9 f858 	bl	80005f8 <__aeabi_dmul>
 8007548:	2200      	movs	r2, #0
 800754a:	2300      	movs	r3, #0
 800754c:	4604      	mov	r4, r0
 800754e:	460d      	mov	r5, r1
 8007550:	f7f9 faba 	bl	8000ac8 <__aeabi_dcmpeq>
 8007554:	2800      	cmp	r0, #0
 8007556:	d09f      	beq.n	8007498 <_dtoa_r+0x638>
 8007558:	e7d1      	b.n	80074fe <_dtoa_r+0x69e>
 800755a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800755c:	2a00      	cmp	r2, #0
 800755e:	f000 80ea 	beq.w	8007736 <_dtoa_r+0x8d6>
 8007562:	9a07      	ldr	r2, [sp, #28]
 8007564:	2a01      	cmp	r2, #1
 8007566:	f300 80cd 	bgt.w	8007704 <_dtoa_r+0x8a4>
 800756a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800756c:	2a00      	cmp	r2, #0
 800756e:	f000 80c1 	beq.w	80076f4 <_dtoa_r+0x894>
 8007572:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007576:	9c08      	ldr	r4, [sp, #32]
 8007578:	9e00      	ldr	r6, [sp, #0]
 800757a:	9a00      	ldr	r2, [sp, #0]
 800757c:	441a      	add	r2, r3
 800757e:	9200      	str	r2, [sp, #0]
 8007580:	9a06      	ldr	r2, [sp, #24]
 8007582:	2101      	movs	r1, #1
 8007584:	441a      	add	r2, r3
 8007586:	4648      	mov	r0, r9
 8007588:	9206      	str	r2, [sp, #24]
 800758a:	f001 fd1d 	bl	8008fc8 <__i2b>
 800758e:	4605      	mov	r5, r0
 8007590:	b166      	cbz	r6, 80075ac <_dtoa_r+0x74c>
 8007592:	9b06      	ldr	r3, [sp, #24]
 8007594:	2b00      	cmp	r3, #0
 8007596:	dd09      	ble.n	80075ac <_dtoa_r+0x74c>
 8007598:	42b3      	cmp	r3, r6
 800759a:	9a00      	ldr	r2, [sp, #0]
 800759c:	bfa8      	it	ge
 800759e:	4633      	movge	r3, r6
 80075a0:	1ad2      	subs	r2, r2, r3
 80075a2:	9200      	str	r2, [sp, #0]
 80075a4:	9a06      	ldr	r2, [sp, #24]
 80075a6:	1af6      	subs	r6, r6, r3
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	9306      	str	r3, [sp, #24]
 80075ac:	9b08      	ldr	r3, [sp, #32]
 80075ae:	b30b      	cbz	r3, 80075f4 <_dtoa_r+0x794>
 80075b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 80c6 	beq.w	8007744 <_dtoa_r+0x8e4>
 80075b8:	2c00      	cmp	r4, #0
 80075ba:	f000 80c0 	beq.w	800773e <_dtoa_r+0x8de>
 80075be:	4629      	mov	r1, r5
 80075c0:	4622      	mov	r2, r4
 80075c2:	4648      	mov	r0, r9
 80075c4:	f001 fdb8 	bl	8009138 <__pow5mult>
 80075c8:	9a02      	ldr	r2, [sp, #8]
 80075ca:	4601      	mov	r1, r0
 80075cc:	4605      	mov	r5, r0
 80075ce:	4648      	mov	r0, r9
 80075d0:	f001 fd10 	bl	8008ff4 <__multiply>
 80075d4:	9902      	ldr	r1, [sp, #8]
 80075d6:	4680      	mov	r8, r0
 80075d8:	4648      	mov	r0, r9
 80075da:	f001 fbf7 	bl	8008dcc <_Bfree>
 80075de:	9b08      	ldr	r3, [sp, #32]
 80075e0:	1b1b      	subs	r3, r3, r4
 80075e2:	9308      	str	r3, [sp, #32]
 80075e4:	f000 80b1 	beq.w	800774a <_dtoa_r+0x8ea>
 80075e8:	9a08      	ldr	r2, [sp, #32]
 80075ea:	4641      	mov	r1, r8
 80075ec:	4648      	mov	r0, r9
 80075ee:	f001 fda3 	bl	8009138 <__pow5mult>
 80075f2:	9002      	str	r0, [sp, #8]
 80075f4:	2101      	movs	r1, #1
 80075f6:	4648      	mov	r0, r9
 80075f8:	f001 fce6 	bl	8008fc8 <__i2b>
 80075fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075fe:	4604      	mov	r4, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 81d8 	beq.w	80079b6 <_dtoa_r+0xb56>
 8007606:	461a      	mov	r2, r3
 8007608:	4601      	mov	r1, r0
 800760a:	4648      	mov	r0, r9
 800760c:	f001 fd94 	bl	8009138 <__pow5mult>
 8007610:	9b07      	ldr	r3, [sp, #28]
 8007612:	2b01      	cmp	r3, #1
 8007614:	4604      	mov	r4, r0
 8007616:	f300 809f 	bgt.w	8007758 <_dtoa_r+0x8f8>
 800761a:	9b04      	ldr	r3, [sp, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	f040 8097 	bne.w	8007750 <_dtoa_r+0x8f0>
 8007622:	9b05      	ldr	r3, [sp, #20]
 8007624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007628:	2b00      	cmp	r3, #0
 800762a:	f040 8093 	bne.w	8007754 <_dtoa_r+0x8f4>
 800762e:	9b05      	ldr	r3, [sp, #20]
 8007630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007634:	0d1b      	lsrs	r3, r3, #20
 8007636:	051b      	lsls	r3, r3, #20
 8007638:	b133      	cbz	r3, 8007648 <_dtoa_r+0x7e8>
 800763a:	9b00      	ldr	r3, [sp, #0]
 800763c:	3301      	adds	r3, #1
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	9b06      	ldr	r3, [sp, #24]
 8007642:	3301      	adds	r3, #1
 8007644:	9306      	str	r3, [sp, #24]
 8007646:	2301      	movs	r3, #1
 8007648:	9308      	str	r3, [sp, #32]
 800764a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 81b8 	beq.w	80079c2 <_dtoa_r+0xb62>
 8007652:	6923      	ldr	r3, [r4, #16]
 8007654:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007658:	6918      	ldr	r0, [r3, #16]
 800765a:	f001 fc69 	bl	8008f30 <__hi0bits>
 800765e:	f1c0 0020 	rsb	r0, r0, #32
 8007662:	9b06      	ldr	r3, [sp, #24]
 8007664:	4418      	add	r0, r3
 8007666:	f010 001f 	ands.w	r0, r0, #31
 800766a:	f000 8082 	beq.w	8007772 <_dtoa_r+0x912>
 800766e:	f1c0 0320 	rsb	r3, r0, #32
 8007672:	2b04      	cmp	r3, #4
 8007674:	dd73      	ble.n	800775e <_dtoa_r+0x8fe>
 8007676:	9b00      	ldr	r3, [sp, #0]
 8007678:	f1c0 001c 	rsb	r0, r0, #28
 800767c:	4403      	add	r3, r0
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	9b06      	ldr	r3, [sp, #24]
 8007682:	4403      	add	r3, r0
 8007684:	4406      	add	r6, r0
 8007686:	9306      	str	r3, [sp, #24]
 8007688:	9b00      	ldr	r3, [sp, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	dd05      	ble.n	800769a <_dtoa_r+0x83a>
 800768e:	9902      	ldr	r1, [sp, #8]
 8007690:	461a      	mov	r2, r3
 8007692:	4648      	mov	r0, r9
 8007694:	f001 fdaa 	bl	80091ec <__lshift>
 8007698:	9002      	str	r0, [sp, #8]
 800769a:	9b06      	ldr	r3, [sp, #24]
 800769c:	2b00      	cmp	r3, #0
 800769e:	dd05      	ble.n	80076ac <_dtoa_r+0x84c>
 80076a0:	4621      	mov	r1, r4
 80076a2:	461a      	mov	r2, r3
 80076a4:	4648      	mov	r0, r9
 80076a6:	f001 fda1 	bl	80091ec <__lshift>
 80076aa:	4604      	mov	r4, r0
 80076ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d061      	beq.n	8007776 <_dtoa_r+0x916>
 80076b2:	9802      	ldr	r0, [sp, #8]
 80076b4:	4621      	mov	r1, r4
 80076b6:	f001 fe05 	bl	80092c4 <__mcmp>
 80076ba:	2800      	cmp	r0, #0
 80076bc:	da5b      	bge.n	8007776 <_dtoa_r+0x916>
 80076be:	2300      	movs	r3, #0
 80076c0:	9902      	ldr	r1, [sp, #8]
 80076c2:	220a      	movs	r2, #10
 80076c4:	4648      	mov	r0, r9
 80076c6:	f001 fba3 	bl	8008e10 <__multadd>
 80076ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076cc:	9002      	str	r0, [sp, #8]
 80076ce:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 8177 	beq.w	80079c6 <_dtoa_r+0xb66>
 80076d8:	4629      	mov	r1, r5
 80076da:	2300      	movs	r3, #0
 80076dc:	220a      	movs	r2, #10
 80076de:	4648      	mov	r0, r9
 80076e0:	f001 fb96 	bl	8008e10 <__multadd>
 80076e4:	f1bb 0f00 	cmp.w	fp, #0
 80076e8:	4605      	mov	r5, r0
 80076ea:	dc6f      	bgt.n	80077cc <_dtoa_r+0x96c>
 80076ec:	9b07      	ldr	r3, [sp, #28]
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	dc49      	bgt.n	8007786 <_dtoa_r+0x926>
 80076f2:	e06b      	b.n	80077cc <_dtoa_r+0x96c>
 80076f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80076f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80076fa:	e73c      	b.n	8007576 <_dtoa_r+0x716>
 80076fc:	3fe00000 	.word	0x3fe00000
 8007700:	40240000 	.word	0x40240000
 8007704:	9b03      	ldr	r3, [sp, #12]
 8007706:	1e5c      	subs	r4, r3, #1
 8007708:	9b08      	ldr	r3, [sp, #32]
 800770a:	42a3      	cmp	r3, r4
 800770c:	db09      	blt.n	8007722 <_dtoa_r+0x8c2>
 800770e:	1b1c      	subs	r4, r3, r4
 8007710:	9b03      	ldr	r3, [sp, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	f6bf af30 	bge.w	8007578 <_dtoa_r+0x718>
 8007718:	9b00      	ldr	r3, [sp, #0]
 800771a:	9a03      	ldr	r2, [sp, #12]
 800771c:	1a9e      	subs	r6, r3, r2
 800771e:	2300      	movs	r3, #0
 8007720:	e72b      	b.n	800757a <_dtoa_r+0x71a>
 8007722:	9b08      	ldr	r3, [sp, #32]
 8007724:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007726:	9408      	str	r4, [sp, #32]
 8007728:	1ae3      	subs	r3, r4, r3
 800772a:	441a      	add	r2, r3
 800772c:	9e00      	ldr	r6, [sp, #0]
 800772e:	9b03      	ldr	r3, [sp, #12]
 8007730:	920d      	str	r2, [sp, #52]	@ 0x34
 8007732:	2400      	movs	r4, #0
 8007734:	e721      	b.n	800757a <_dtoa_r+0x71a>
 8007736:	9c08      	ldr	r4, [sp, #32]
 8007738:	9e00      	ldr	r6, [sp, #0]
 800773a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800773c:	e728      	b.n	8007590 <_dtoa_r+0x730>
 800773e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007742:	e751      	b.n	80075e8 <_dtoa_r+0x788>
 8007744:	9a08      	ldr	r2, [sp, #32]
 8007746:	9902      	ldr	r1, [sp, #8]
 8007748:	e750      	b.n	80075ec <_dtoa_r+0x78c>
 800774a:	f8cd 8008 	str.w	r8, [sp, #8]
 800774e:	e751      	b.n	80075f4 <_dtoa_r+0x794>
 8007750:	2300      	movs	r3, #0
 8007752:	e779      	b.n	8007648 <_dtoa_r+0x7e8>
 8007754:	9b04      	ldr	r3, [sp, #16]
 8007756:	e777      	b.n	8007648 <_dtoa_r+0x7e8>
 8007758:	2300      	movs	r3, #0
 800775a:	9308      	str	r3, [sp, #32]
 800775c:	e779      	b.n	8007652 <_dtoa_r+0x7f2>
 800775e:	d093      	beq.n	8007688 <_dtoa_r+0x828>
 8007760:	9a00      	ldr	r2, [sp, #0]
 8007762:	331c      	adds	r3, #28
 8007764:	441a      	add	r2, r3
 8007766:	9200      	str	r2, [sp, #0]
 8007768:	9a06      	ldr	r2, [sp, #24]
 800776a:	441a      	add	r2, r3
 800776c:	441e      	add	r6, r3
 800776e:	9206      	str	r2, [sp, #24]
 8007770:	e78a      	b.n	8007688 <_dtoa_r+0x828>
 8007772:	4603      	mov	r3, r0
 8007774:	e7f4      	b.n	8007760 <_dtoa_r+0x900>
 8007776:	9b03      	ldr	r3, [sp, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	46b8      	mov	r8, r7
 800777c:	dc20      	bgt.n	80077c0 <_dtoa_r+0x960>
 800777e:	469b      	mov	fp, r3
 8007780:	9b07      	ldr	r3, [sp, #28]
 8007782:	2b02      	cmp	r3, #2
 8007784:	dd1e      	ble.n	80077c4 <_dtoa_r+0x964>
 8007786:	f1bb 0f00 	cmp.w	fp, #0
 800778a:	f47f adb1 	bne.w	80072f0 <_dtoa_r+0x490>
 800778e:	4621      	mov	r1, r4
 8007790:	465b      	mov	r3, fp
 8007792:	2205      	movs	r2, #5
 8007794:	4648      	mov	r0, r9
 8007796:	f001 fb3b 	bl	8008e10 <__multadd>
 800779a:	4601      	mov	r1, r0
 800779c:	4604      	mov	r4, r0
 800779e:	9802      	ldr	r0, [sp, #8]
 80077a0:	f001 fd90 	bl	80092c4 <__mcmp>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	f77f ada3 	ble.w	80072f0 <_dtoa_r+0x490>
 80077aa:	4656      	mov	r6, sl
 80077ac:	2331      	movs	r3, #49	@ 0x31
 80077ae:	f806 3b01 	strb.w	r3, [r6], #1
 80077b2:	f108 0801 	add.w	r8, r8, #1
 80077b6:	e59f      	b.n	80072f8 <_dtoa_r+0x498>
 80077b8:	9c03      	ldr	r4, [sp, #12]
 80077ba:	46b8      	mov	r8, r7
 80077bc:	4625      	mov	r5, r4
 80077be:	e7f4      	b.n	80077aa <_dtoa_r+0x94a>
 80077c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80077c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f000 8101 	beq.w	80079ce <_dtoa_r+0xb6e>
 80077cc:	2e00      	cmp	r6, #0
 80077ce:	dd05      	ble.n	80077dc <_dtoa_r+0x97c>
 80077d0:	4629      	mov	r1, r5
 80077d2:	4632      	mov	r2, r6
 80077d4:	4648      	mov	r0, r9
 80077d6:	f001 fd09 	bl	80091ec <__lshift>
 80077da:	4605      	mov	r5, r0
 80077dc:	9b08      	ldr	r3, [sp, #32]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d05c      	beq.n	800789c <_dtoa_r+0xa3c>
 80077e2:	6869      	ldr	r1, [r5, #4]
 80077e4:	4648      	mov	r0, r9
 80077e6:	f001 fab1 	bl	8008d4c <_Balloc>
 80077ea:	4606      	mov	r6, r0
 80077ec:	b928      	cbnz	r0, 80077fa <_dtoa_r+0x99a>
 80077ee:	4b82      	ldr	r3, [pc, #520]	@ (80079f8 <_dtoa_r+0xb98>)
 80077f0:	4602      	mov	r2, r0
 80077f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80077f6:	f7ff bb4a 	b.w	8006e8e <_dtoa_r+0x2e>
 80077fa:	692a      	ldr	r2, [r5, #16]
 80077fc:	3202      	adds	r2, #2
 80077fe:	0092      	lsls	r2, r2, #2
 8007800:	f105 010c 	add.w	r1, r5, #12
 8007804:	300c      	adds	r0, #12
 8007806:	f7ff fa83 	bl	8006d10 <memcpy>
 800780a:	2201      	movs	r2, #1
 800780c:	4631      	mov	r1, r6
 800780e:	4648      	mov	r0, r9
 8007810:	f001 fcec 	bl	80091ec <__lshift>
 8007814:	f10a 0301 	add.w	r3, sl, #1
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	eb0a 030b 	add.w	r3, sl, fp
 800781e:	9308      	str	r3, [sp, #32]
 8007820:	9b04      	ldr	r3, [sp, #16]
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	462f      	mov	r7, r5
 8007828:	9306      	str	r3, [sp, #24]
 800782a:	4605      	mov	r5, r0
 800782c:	9b00      	ldr	r3, [sp, #0]
 800782e:	9802      	ldr	r0, [sp, #8]
 8007830:	4621      	mov	r1, r4
 8007832:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8007836:	f7ff fa89 	bl	8006d4c <quorem>
 800783a:	4603      	mov	r3, r0
 800783c:	3330      	adds	r3, #48	@ 0x30
 800783e:	9003      	str	r0, [sp, #12]
 8007840:	4639      	mov	r1, r7
 8007842:	9802      	ldr	r0, [sp, #8]
 8007844:	9309      	str	r3, [sp, #36]	@ 0x24
 8007846:	f001 fd3d 	bl	80092c4 <__mcmp>
 800784a:	462a      	mov	r2, r5
 800784c:	9004      	str	r0, [sp, #16]
 800784e:	4621      	mov	r1, r4
 8007850:	4648      	mov	r0, r9
 8007852:	f001 fd53 	bl	80092fc <__mdiff>
 8007856:	68c2      	ldr	r2, [r0, #12]
 8007858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800785a:	4606      	mov	r6, r0
 800785c:	bb02      	cbnz	r2, 80078a0 <_dtoa_r+0xa40>
 800785e:	4601      	mov	r1, r0
 8007860:	9802      	ldr	r0, [sp, #8]
 8007862:	f001 fd2f 	bl	80092c4 <__mcmp>
 8007866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007868:	4602      	mov	r2, r0
 800786a:	4631      	mov	r1, r6
 800786c:	4648      	mov	r0, r9
 800786e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007870:	9309      	str	r3, [sp, #36]	@ 0x24
 8007872:	f001 faab 	bl	8008dcc <_Bfree>
 8007876:	9b07      	ldr	r3, [sp, #28]
 8007878:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800787a:	9e00      	ldr	r6, [sp, #0]
 800787c:	ea42 0103 	orr.w	r1, r2, r3
 8007880:	9b06      	ldr	r3, [sp, #24]
 8007882:	4319      	orrs	r1, r3
 8007884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007886:	d10d      	bne.n	80078a4 <_dtoa_r+0xa44>
 8007888:	2b39      	cmp	r3, #57	@ 0x39
 800788a:	d027      	beq.n	80078dc <_dtoa_r+0xa7c>
 800788c:	9a04      	ldr	r2, [sp, #16]
 800788e:	2a00      	cmp	r2, #0
 8007890:	dd01      	ble.n	8007896 <_dtoa_r+0xa36>
 8007892:	9b03      	ldr	r3, [sp, #12]
 8007894:	3331      	adds	r3, #49	@ 0x31
 8007896:	f88b 3000 	strb.w	r3, [fp]
 800789a:	e52e      	b.n	80072fa <_dtoa_r+0x49a>
 800789c:	4628      	mov	r0, r5
 800789e:	e7b9      	b.n	8007814 <_dtoa_r+0x9b4>
 80078a0:	2201      	movs	r2, #1
 80078a2:	e7e2      	b.n	800786a <_dtoa_r+0xa0a>
 80078a4:	9904      	ldr	r1, [sp, #16]
 80078a6:	2900      	cmp	r1, #0
 80078a8:	db04      	blt.n	80078b4 <_dtoa_r+0xa54>
 80078aa:	9807      	ldr	r0, [sp, #28]
 80078ac:	4301      	orrs	r1, r0
 80078ae:	9806      	ldr	r0, [sp, #24]
 80078b0:	4301      	orrs	r1, r0
 80078b2:	d120      	bne.n	80078f6 <_dtoa_r+0xa96>
 80078b4:	2a00      	cmp	r2, #0
 80078b6:	ddee      	ble.n	8007896 <_dtoa_r+0xa36>
 80078b8:	9902      	ldr	r1, [sp, #8]
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	2201      	movs	r2, #1
 80078be:	4648      	mov	r0, r9
 80078c0:	f001 fc94 	bl	80091ec <__lshift>
 80078c4:	4621      	mov	r1, r4
 80078c6:	9002      	str	r0, [sp, #8]
 80078c8:	f001 fcfc 	bl	80092c4 <__mcmp>
 80078cc:	2800      	cmp	r0, #0
 80078ce:	9b00      	ldr	r3, [sp, #0]
 80078d0:	dc02      	bgt.n	80078d8 <_dtoa_r+0xa78>
 80078d2:	d1e0      	bne.n	8007896 <_dtoa_r+0xa36>
 80078d4:	07da      	lsls	r2, r3, #31
 80078d6:	d5de      	bpl.n	8007896 <_dtoa_r+0xa36>
 80078d8:	2b39      	cmp	r3, #57	@ 0x39
 80078da:	d1da      	bne.n	8007892 <_dtoa_r+0xa32>
 80078dc:	2339      	movs	r3, #57	@ 0x39
 80078de:	f88b 3000 	strb.w	r3, [fp]
 80078e2:	4633      	mov	r3, r6
 80078e4:	461e      	mov	r6, r3
 80078e6:	3b01      	subs	r3, #1
 80078e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80078ec:	2a39      	cmp	r2, #57	@ 0x39
 80078ee:	d04e      	beq.n	800798e <_dtoa_r+0xb2e>
 80078f0:	3201      	adds	r2, #1
 80078f2:	701a      	strb	r2, [r3, #0]
 80078f4:	e501      	b.n	80072fa <_dtoa_r+0x49a>
 80078f6:	2a00      	cmp	r2, #0
 80078f8:	dd03      	ble.n	8007902 <_dtoa_r+0xaa2>
 80078fa:	2b39      	cmp	r3, #57	@ 0x39
 80078fc:	d0ee      	beq.n	80078dc <_dtoa_r+0xa7c>
 80078fe:	3301      	adds	r3, #1
 8007900:	e7c9      	b.n	8007896 <_dtoa_r+0xa36>
 8007902:	9a00      	ldr	r2, [sp, #0]
 8007904:	9908      	ldr	r1, [sp, #32]
 8007906:	f802 3c01 	strb.w	r3, [r2, #-1]
 800790a:	428a      	cmp	r2, r1
 800790c:	d028      	beq.n	8007960 <_dtoa_r+0xb00>
 800790e:	9902      	ldr	r1, [sp, #8]
 8007910:	2300      	movs	r3, #0
 8007912:	220a      	movs	r2, #10
 8007914:	4648      	mov	r0, r9
 8007916:	f001 fa7b 	bl	8008e10 <__multadd>
 800791a:	42af      	cmp	r7, r5
 800791c:	9002      	str	r0, [sp, #8]
 800791e:	f04f 0300 	mov.w	r3, #0
 8007922:	f04f 020a 	mov.w	r2, #10
 8007926:	4639      	mov	r1, r7
 8007928:	4648      	mov	r0, r9
 800792a:	d107      	bne.n	800793c <_dtoa_r+0xadc>
 800792c:	f001 fa70 	bl	8008e10 <__multadd>
 8007930:	4607      	mov	r7, r0
 8007932:	4605      	mov	r5, r0
 8007934:	9b00      	ldr	r3, [sp, #0]
 8007936:	3301      	adds	r3, #1
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	e777      	b.n	800782c <_dtoa_r+0x9cc>
 800793c:	f001 fa68 	bl	8008e10 <__multadd>
 8007940:	4629      	mov	r1, r5
 8007942:	4607      	mov	r7, r0
 8007944:	2300      	movs	r3, #0
 8007946:	220a      	movs	r2, #10
 8007948:	4648      	mov	r0, r9
 800794a:	f001 fa61 	bl	8008e10 <__multadd>
 800794e:	4605      	mov	r5, r0
 8007950:	e7f0      	b.n	8007934 <_dtoa_r+0xad4>
 8007952:	f1bb 0f00 	cmp.w	fp, #0
 8007956:	bfcc      	ite	gt
 8007958:	465e      	movgt	r6, fp
 800795a:	2601      	movle	r6, #1
 800795c:	4456      	add	r6, sl
 800795e:	2700      	movs	r7, #0
 8007960:	9902      	ldr	r1, [sp, #8]
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	2201      	movs	r2, #1
 8007966:	4648      	mov	r0, r9
 8007968:	f001 fc40 	bl	80091ec <__lshift>
 800796c:	4621      	mov	r1, r4
 800796e:	9002      	str	r0, [sp, #8]
 8007970:	f001 fca8 	bl	80092c4 <__mcmp>
 8007974:	2800      	cmp	r0, #0
 8007976:	dcb4      	bgt.n	80078e2 <_dtoa_r+0xa82>
 8007978:	d102      	bne.n	8007980 <_dtoa_r+0xb20>
 800797a:	9b00      	ldr	r3, [sp, #0]
 800797c:	07db      	lsls	r3, r3, #31
 800797e:	d4b0      	bmi.n	80078e2 <_dtoa_r+0xa82>
 8007980:	4633      	mov	r3, r6
 8007982:	461e      	mov	r6, r3
 8007984:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007988:	2a30      	cmp	r2, #48	@ 0x30
 800798a:	d0fa      	beq.n	8007982 <_dtoa_r+0xb22>
 800798c:	e4b5      	b.n	80072fa <_dtoa_r+0x49a>
 800798e:	459a      	cmp	sl, r3
 8007990:	d1a8      	bne.n	80078e4 <_dtoa_r+0xa84>
 8007992:	2331      	movs	r3, #49	@ 0x31
 8007994:	f108 0801 	add.w	r8, r8, #1
 8007998:	f88a 3000 	strb.w	r3, [sl]
 800799c:	e4ad      	b.n	80072fa <_dtoa_r+0x49a>
 800799e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80079fc <_dtoa_r+0xb9c>
 80079a4:	b11b      	cbz	r3, 80079ae <_dtoa_r+0xb4e>
 80079a6:	f10a 0308 	add.w	r3, sl, #8
 80079aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	4650      	mov	r0, sl
 80079b0:	b017      	add	sp, #92	@ 0x5c
 80079b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b6:	9b07      	ldr	r3, [sp, #28]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	f77f ae2e 	ble.w	800761a <_dtoa_r+0x7ba>
 80079be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079c0:	9308      	str	r3, [sp, #32]
 80079c2:	2001      	movs	r0, #1
 80079c4:	e64d      	b.n	8007662 <_dtoa_r+0x802>
 80079c6:	f1bb 0f00 	cmp.w	fp, #0
 80079ca:	f77f aed9 	ble.w	8007780 <_dtoa_r+0x920>
 80079ce:	4656      	mov	r6, sl
 80079d0:	9802      	ldr	r0, [sp, #8]
 80079d2:	4621      	mov	r1, r4
 80079d4:	f7ff f9ba 	bl	8006d4c <quorem>
 80079d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80079dc:	f806 3b01 	strb.w	r3, [r6], #1
 80079e0:	eba6 020a 	sub.w	r2, r6, sl
 80079e4:	4593      	cmp	fp, r2
 80079e6:	ddb4      	ble.n	8007952 <_dtoa_r+0xaf2>
 80079e8:	9902      	ldr	r1, [sp, #8]
 80079ea:	2300      	movs	r3, #0
 80079ec:	220a      	movs	r2, #10
 80079ee:	4648      	mov	r0, r9
 80079f0:	f001 fa0e 	bl	8008e10 <__multadd>
 80079f4:	9002      	str	r0, [sp, #8]
 80079f6:	e7eb      	b.n	80079d0 <_dtoa_r+0xb70>
 80079f8:	0800a199 	.word	0x0800a199
 80079fc:	0800a11d 	.word	0x0800a11d

08007a00 <_free_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	4605      	mov	r5, r0
 8007a04:	2900      	cmp	r1, #0
 8007a06:	d041      	beq.n	8007a8c <_free_r+0x8c>
 8007a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a0c:	1f0c      	subs	r4, r1, #4
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	bfb8      	it	lt
 8007a12:	18e4      	addlt	r4, r4, r3
 8007a14:	f001 f98e 	bl	8008d34 <__malloc_lock>
 8007a18:	4a1d      	ldr	r2, [pc, #116]	@ (8007a90 <_free_r+0x90>)
 8007a1a:	6813      	ldr	r3, [r2, #0]
 8007a1c:	b933      	cbnz	r3, 8007a2c <_free_r+0x2c>
 8007a1e:	6063      	str	r3, [r4, #4]
 8007a20:	6014      	str	r4, [r2, #0]
 8007a22:	4628      	mov	r0, r5
 8007a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a28:	f001 b98a 	b.w	8008d40 <__malloc_unlock>
 8007a2c:	42a3      	cmp	r3, r4
 8007a2e:	d908      	bls.n	8007a42 <_free_r+0x42>
 8007a30:	6820      	ldr	r0, [r4, #0]
 8007a32:	1821      	adds	r1, r4, r0
 8007a34:	428b      	cmp	r3, r1
 8007a36:	bf01      	itttt	eq
 8007a38:	6819      	ldreq	r1, [r3, #0]
 8007a3a:	685b      	ldreq	r3, [r3, #4]
 8007a3c:	1809      	addeq	r1, r1, r0
 8007a3e:	6021      	streq	r1, [r4, #0]
 8007a40:	e7ed      	b.n	8007a1e <_free_r+0x1e>
 8007a42:	461a      	mov	r2, r3
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	b10b      	cbz	r3, 8007a4c <_free_r+0x4c>
 8007a48:	42a3      	cmp	r3, r4
 8007a4a:	d9fa      	bls.n	8007a42 <_free_r+0x42>
 8007a4c:	6811      	ldr	r1, [r2, #0]
 8007a4e:	1850      	adds	r0, r2, r1
 8007a50:	42a0      	cmp	r0, r4
 8007a52:	d10b      	bne.n	8007a6c <_free_r+0x6c>
 8007a54:	6820      	ldr	r0, [r4, #0]
 8007a56:	4401      	add	r1, r0
 8007a58:	1850      	adds	r0, r2, r1
 8007a5a:	4283      	cmp	r3, r0
 8007a5c:	6011      	str	r1, [r2, #0]
 8007a5e:	d1e0      	bne.n	8007a22 <_free_r+0x22>
 8007a60:	6818      	ldr	r0, [r3, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	6053      	str	r3, [r2, #4]
 8007a66:	4408      	add	r0, r1
 8007a68:	6010      	str	r0, [r2, #0]
 8007a6a:	e7da      	b.n	8007a22 <_free_r+0x22>
 8007a6c:	d902      	bls.n	8007a74 <_free_r+0x74>
 8007a6e:	230c      	movs	r3, #12
 8007a70:	602b      	str	r3, [r5, #0]
 8007a72:	e7d6      	b.n	8007a22 <_free_r+0x22>
 8007a74:	6820      	ldr	r0, [r4, #0]
 8007a76:	1821      	adds	r1, r4, r0
 8007a78:	428b      	cmp	r3, r1
 8007a7a:	bf04      	itt	eq
 8007a7c:	6819      	ldreq	r1, [r3, #0]
 8007a7e:	685b      	ldreq	r3, [r3, #4]
 8007a80:	6063      	str	r3, [r4, #4]
 8007a82:	bf04      	itt	eq
 8007a84:	1809      	addeq	r1, r1, r0
 8007a86:	6021      	streq	r1, [r4, #0]
 8007a88:	6054      	str	r4, [r2, #4]
 8007a8a:	e7ca      	b.n	8007a22 <_free_r+0x22>
 8007a8c:	bd38      	pop	{r3, r4, r5, pc}
 8007a8e:	bf00      	nop
 8007a90:	20000aac 	.word	0x20000aac

08007a94 <rshift>:
 8007a94:	6903      	ldr	r3, [r0, #16]
 8007a96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007a9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007aa2:	f100 0414 	add.w	r4, r0, #20
 8007aa6:	dd45      	ble.n	8007b34 <rshift+0xa0>
 8007aa8:	f011 011f 	ands.w	r1, r1, #31
 8007aac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007ab0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ab4:	d10c      	bne.n	8007ad0 <rshift+0x3c>
 8007ab6:	f100 0710 	add.w	r7, r0, #16
 8007aba:	4629      	mov	r1, r5
 8007abc:	42b1      	cmp	r1, r6
 8007abe:	d334      	bcc.n	8007b2a <rshift+0x96>
 8007ac0:	1a9b      	subs	r3, r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	1eea      	subs	r2, r5, #3
 8007ac6:	4296      	cmp	r6, r2
 8007ac8:	bf38      	it	cc
 8007aca:	2300      	movcc	r3, #0
 8007acc:	4423      	add	r3, r4
 8007ace:	e015      	b.n	8007afc <rshift+0x68>
 8007ad0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007ad4:	f1c1 0820 	rsb	r8, r1, #32
 8007ad8:	40cf      	lsrs	r7, r1
 8007ada:	f105 0e04 	add.w	lr, r5, #4
 8007ade:	46a1      	mov	r9, r4
 8007ae0:	4576      	cmp	r6, lr
 8007ae2:	46f4      	mov	ip, lr
 8007ae4:	d815      	bhi.n	8007b12 <rshift+0x7e>
 8007ae6:	1a9a      	subs	r2, r3, r2
 8007ae8:	0092      	lsls	r2, r2, #2
 8007aea:	3a04      	subs	r2, #4
 8007aec:	3501      	adds	r5, #1
 8007aee:	42ae      	cmp	r6, r5
 8007af0:	bf38      	it	cc
 8007af2:	2200      	movcc	r2, #0
 8007af4:	18a3      	adds	r3, r4, r2
 8007af6:	50a7      	str	r7, [r4, r2]
 8007af8:	b107      	cbz	r7, 8007afc <rshift+0x68>
 8007afa:	3304      	adds	r3, #4
 8007afc:	1b1a      	subs	r2, r3, r4
 8007afe:	42a3      	cmp	r3, r4
 8007b00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007b04:	bf08      	it	eq
 8007b06:	2300      	moveq	r3, #0
 8007b08:	6102      	str	r2, [r0, #16]
 8007b0a:	bf08      	it	eq
 8007b0c:	6143      	streq	r3, [r0, #20]
 8007b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b12:	f8dc c000 	ldr.w	ip, [ip]
 8007b16:	fa0c fc08 	lsl.w	ip, ip, r8
 8007b1a:	ea4c 0707 	orr.w	r7, ip, r7
 8007b1e:	f849 7b04 	str.w	r7, [r9], #4
 8007b22:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b26:	40cf      	lsrs	r7, r1
 8007b28:	e7da      	b.n	8007ae0 <rshift+0x4c>
 8007b2a:	f851 cb04 	ldr.w	ip, [r1], #4
 8007b2e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007b32:	e7c3      	b.n	8007abc <rshift+0x28>
 8007b34:	4623      	mov	r3, r4
 8007b36:	e7e1      	b.n	8007afc <rshift+0x68>

08007b38 <__hexdig_fun>:
 8007b38:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007b3c:	2b09      	cmp	r3, #9
 8007b3e:	d802      	bhi.n	8007b46 <__hexdig_fun+0xe>
 8007b40:	3820      	subs	r0, #32
 8007b42:	b2c0      	uxtb	r0, r0
 8007b44:	4770      	bx	lr
 8007b46:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007b4a:	2b05      	cmp	r3, #5
 8007b4c:	d801      	bhi.n	8007b52 <__hexdig_fun+0x1a>
 8007b4e:	3847      	subs	r0, #71	@ 0x47
 8007b50:	e7f7      	b.n	8007b42 <__hexdig_fun+0xa>
 8007b52:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007b56:	2b05      	cmp	r3, #5
 8007b58:	d801      	bhi.n	8007b5e <__hexdig_fun+0x26>
 8007b5a:	3827      	subs	r0, #39	@ 0x27
 8007b5c:	e7f1      	b.n	8007b42 <__hexdig_fun+0xa>
 8007b5e:	2000      	movs	r0, #0
 8007b60:	4770      	bx	lr
	...

08007b64 <__gethex>:
 8007b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b68:	b085      	sub	sp, #20
 8007b6a:	468a      	mov	sl, r1
 8007b6c:	9302      	str	r3, [sp, #8]
 8007b6e:	680b      	ldr	r3, [r1, #0]
 8007b70:	9001      	str	r0, [sp, #4]
 8007b72:	4690      	mov	r8, r2
 8007b74:	1c9c      	adds	r4, r3, #2
 8007b76:	46a1      	mov	r9, r4
 8007b78:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007b7c:	2830      	cmp	r0, #48	@ 0x30
 8007b7e:	d0fa      	beq.n	8007b76 <__gethex+0x12>
 8007b80:	eba9 0303 	sub.w	r3, r9, r3
 8007b84:	f1a3 0b02 	sub.w	fp, r3, #2
 8007b88:	f7ff ffd6 	bl	8007b38 <__hexdig_fun>
 8007b8c:	4605      	mov	r5, r0
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	d168      	bne.n	8007c64 <__gethex+0x100>
 8007b92:	49a0      	ldr	r1, [pc, #640]	@ (8007e14 <__gethex+0x2b0>)
 8007b94:	2201      	movs	r2, #1
 8007b96:	4648      	mov	r0, r9
 8007b98:	f7ff f81d 	bl	8006bd6 <strncmp>
 8007b9c:	4607      	mov	r7, r0
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d167      	bne.n	8007c72 <__gethex+0x10e>
 8007ba2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007ba6:	4626      	mov	r6, r4
 8007ba8:	f7ff ffc6 	bl	8007b38 <__hexdig_fun>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d062      	beq.n	8007c76 <__gethex+0x112>
 8007bb0:	4623      	mov	r3, r4
 8007bb2:	7818      	ldrb	r0, [r3, #0]
 8007bb4:	2830      	cmp	r0, #48	@ 0x30
 8007bb6:	4699      	mov	r9, r3
 8007bb8:	f103 0301 	add.w	r3, r3, #1
 8007bbc:	d0f9      	beq.n	8007bb2 <__gethex+0x4e>
 8007bbe:	f7ff ffbb 	bl	8007b38 <__hexdig_fun>
 8007bc2:	fab0 f580 	clz	r5, r0
 8007bc6:	096d      	lsrs	r5, r5, #5
 8007bc8:	f04f 0b01 	mov.w	fp, #1
 8007bcc:	464a      	mov	r2, r9
 8007bce:	4616      	mov	r6, r2
 8007bd0:	3201      	adds	r2, #1
 8007bd2:	7830      	ldrb	r0, [r6, #0]
 8007bd4:	f7ff ffb0 	bl	8007b38 <__hexdig_fun>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d1f8      	bne.n	8007bce <__gethex+0x6a>
 8007bdc:	498d      	ldr	r1, [pc, #564]	@ (8007e14 <__gethex+0x2b0>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	4630      	mov	r0, r6
 8007be2:	f7fe fff8 	bl	8006bd6 <strncmp>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d13f      	bne.n	8007c6a <__gethex+0x106>
 8007bea:	b944      	cbnz	r4, 8007bfe <__gethex+0x9a>
 8007bec:	1c74      	adds	r4, r6, #1
 8007bee:	4622      	mov	r2, r4
 8007bf0:	4616      	mov	r6, r2
 8007bf2:	3201      	adds	r2, #1
 8007bf4:	7830      	ldrb	r0, [r6, #0]
 8007bf6:	f7ff ff9f 	bl	8007b38 <__hexdig_fun>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	d1f8      	bne.n	8007bf0 <__gethex+0x8c>
 8007bfe:	1ba4      	subs	r4, r4, r6
 8007c00:	00a7      	lsls	r7, r4, #2
 8007c02:	7833      	ldrb	r3, [r6, #0]
 8007c04:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007c08:	2b50      	cmp	r3, #80	@ 0x50
 8007c0a:	d13e      	bne.n	8007c8a <__gethex+0x126>
 8007c0c:	7873      	ldrb	r3, [r6, #1]
 8007c0e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007c10:	d033      	beq.n	8007c7a <__gethex+0x116>
 8007c12:	2b2d      	cmp	r3, #45	@ 0x2d
 8007c14:	d034      	beq.n	8007c80 <__gethex+0x11c>
 8007c16:	1c71      	adds	r1, r6, #1
 8007c18:	2400      	movs	r4, #0
 8007c1a:	7808      	ldrb	r0, [r1, #0]
 8007c1c:	f7ff ff8c 	bl	8007b38 <__hexdig_fun>
 8007c20:	1e43      	subs	r3, r0, #1
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b18      	cmp	r3, #24
 8007c26:	d830      	bhi.n	8007c8a <__gethex+0x126>
 8007c28:	f1a0 0210 	sub.w	r2, r0, #16
 8007c2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007c30:	f7ff ff82 	bl	8007b38 <__hexdig_fun>
 8007c34:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8007c38:	fa5f fc8c 	uxtb.w	ip, ip
 8007c3c:	f1bc 0f18 	cmp.w	ip, #24
 8007c40:	f04f 030a 	mov.w	r3, #10
 8007c44:	d91e      	bls.n	8007c84 <__gethex+0x120>
 8007c46:	b104      	cbz	r4, 8007c4a <__gethex+0xe6>
 8007c48:	4252      	negs	r2, r2
 8007c4a:	4417      	add	r7, r2
 8007c4c:	f8ca 1000 	str.w	r1, [sl]
 8007c50:	b1ed      	cbz	r5, 8007c8e <__gethex+0x12a>
 8007c52:	f1bb 0f00 	cmp.w	fp, #0
 8007c56:	bf0c      	ite	eq
 8007c58:	2506      	moveq	r5, #6
 8007c5a:	2500      	movne	r5, #0
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	b005      	add	sp, #20
 8007c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c64:	2500      	movs	r5, #0
 8007c66:	462c      	mov	r4, r5
 8007c68:	e7b0      	b.n	8007bcc <__gethex+0x68>
 8007c6a:	2c00      	cmp	r4, #0
 8007c6c:	d1c7      	bne.n	8007bfe <__gethex+0x9a>
 8007c6e:	4627      	mov	r7, r4
 8007c70:	e7c7      	b.n	8007c02 <__gethex+0x9e>
 8007c72:	464e      	mov	r6, r9
 8007c74:	462f      	mov	r7, r5
 8007c76:	2501      	movs	r5, #1
 8007c78:	e7c3      	b.n	8007c02 <__gethex+0x9e>
 8007c7a:	2400      	movs	r4, #0
 8007c7c:	1cb1      	adds	r1, r6, #2
 8007c7e:	e7cc      	b.n	8007c1a <__gethex+0xb6>
 8007c80:	2401      	movs	r4, #1
 8007c82:	e7fb      	b.n	8007c7c <__gethex+0x118>
 8007c84:	fb03 0002 	mla	r0, r3, r2, r0
 8007c88:	e7ce      	b.n	8007c28 <__gethex+0xc4>
 8007c8a:	4631      	mov	r1, r6
 8007c8c:	e7de      	b.n	8007c4c <__gethex+0xe8>
 8007c8e:	eba6 0309 	sub.w	r3, r6, r9
 8007c92:	3b01      	subs	r3, #1
 8007c94:	4629      	mov	r1, r5
 8007c96:	2b07      	cmp	r3, #7
 8007c98:	dc0a      	bgt.n	8007cb0 <__gethex+0x14c>
 8007c9a:	9801      	ldr	r0, [sp, #4]
 8007c9c:	f001 f856 	bl	8008d4c <_Balloc>
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	b940      	cbnz	r0, 8007cb6 <__gethex+0x152>
 8007ca4:	4b5c      	ldr	r3, [pc, #368]	@ (8007e18 <__gethex+0x2b4>)
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	21e4      	movs	r1, #228	@ 0xe4
 8007caa:	485c      	ldr	r0, [pc, #368]	@ (8007e1c <__gethex+0x2b8>)
 8007cac:	f001 fe08 	bl	80098c0 <__assert_func>
 8007cb0:	3101      	adds	r1, #1
 8007cb2:	105b      	asrs	r3, r3, #1
 8007cb4:	e7ef      	b.n	8007c96 <__gethex+0x132>
 8007cb6:	f100 0a14 	add.w	sl, r0, #20
 8007cba:	2300      	movs	r3, #0
 8007cbc:	4655      	mov	r5, sl
 8007cbe:	469b      	mov	fp, r3
 8007cc0:	45b1      	cmp	r9, r6
 8007cc2:	d337      	bcc.n	8007d34 <__gethex+0x1d0>
 8007cc4:	f845 bb04 	str.w	fp, [r5], #4
 8007cc8:	eba5 050a 	sub.w	r5, r5, sl
 8007ccc:	10ad      	asrs	r5, r5, #2
 8007cce:	6125      	str	r5, [r4, #16]
 8007cd0:	4658      	mov	r0, fp
 8007cd2:	f001 f92d 	bl	8008f30 <__hi0bits>
 8007cd6:	016d      	lsls	r5, r5, #5
 8007cd8:	f8d8 6000 	ldr.w	r6, [r8]
 8007cdc:	1a2d      	subs	r5, r5, r0
 8007cde:	42b5      	cmp	r5, r6
 8007ce0:	dd54      	ble.n	8007d8c <__gethex+0x228>
 8007ce2:	1bad      	subs	r5, r5, r6
 8007ce4:	4629      	mov	r1, r5
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f001 fcb9 	bl	800965e <__any_on>
 8007cec:	4681      	mov	r9, r0
 8007cee:	b178      	cbz	r0, 8007d10 <__gethex+0x1ac>
 8007cf0:	1e6b      	subs	r3, r5, #1
 8007cf2:	1159      	asrs	r1, r3, #5
 8007cf4:	f003 021f 	and.w	r2, r3, #31
 8007cf8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007cfc:	f04f 0901 	mov.w	r9, #1
 8007d00:	fa09 f202 	lsl.w	r2, r9, r2
 8007d04:	420a      	tst	r2, r1
 8007d06:	d003      	beq.n	8007d10 <__gethex+0x1ac>
 8007d08:	454b      	cmp	r3, r9
 8007d0a:	dc36      	bgt.n	8007d7a <__gethex+0x216>
 8007d0c:	f04f 0902 	mov.w	r9, #2
 8007d10:	4629      	mov	r1, r5
 8007d12:	4620      	mov	r0, r4
 8007d14:	f7ff febe 	bl	8007a94 <rshift>
 8007d18:	442f      	add	r7, r5
 8007d1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d1e:	42bb      	cmp	r3, r7
 8007d20:	da42      	bge.n	8007da8 <__gethex+0x244>
 8007d22:	9801      	ldr	r0, [sp, #4]
 8007d24:	4621      	mov	r1, r4
 8007d26:	f001 f851 	bl	8008dcc <_Bfree>
 8007d2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	6013      	str	r3, [r2, #0]
 8007d30:	25a3      	movs	r5, #163	@ 0xa3
 8007d32:	e793      	b.n	8007c5c <__gethex+0xf8>
 8007d34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007d38:	2a2e      	cmp	r2, #46	@ 0x2e
 8007d3a:	d012      	beq.n	8007d62 <__gethex+0x1fe>
 8007d3c:	2b20      	cmp	r3, #32
 8007d3e:	d104      	bne.n	8007d4a <__gethex+0x1e6>
 8007d40:	f845 bb04 	str.w	fp, [r5], #4
 8007d44:	f04f 0b00 	mov.w	fp, #0
 8007d48:	465b      	mov	r3, fp
 8007d4a:	7830      	ldrb	r0, [r6, #0]
 8007d4c:	9303      	str	r3, [sp, #12]
 8007d4e:	f7ff fef3 	bl	8007b38 <__hexdig_fun>
 8007d52:	9b03      	ldr	r3, [sp, #12]
 8007d54:	f000 000f 	and.w	r0, r0, #15
 8007d58:	4098      	lsls	r0, r3
 8007d5a:	ea4b 0b00 	orr.w	fp, fp, r0
 8007d5e:	3304      	adds	r3, #4
 8007d60:	e7ae      	b.n	8007cc0 <__gethex+0x15c>
 8007d62:	45b1      	cmp	r9, r6
 8007d64:	d8ea      	bhi.n	8007d3c <__gethex+0x1d8>
 8007d66:	492b      	ldr	r1, [pc, #172]	@ (8007e14 <__gethex+0x2b0>)
 8007d68:	9303      	str	r3, [sp, #12]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f7fe ff32 	bl	8006bd6 <strncmp>
 8007d72:	9b03      	ldr	r3, [sp, #12]
 8007d74:	2800      	cmp	r0, #0
 8007d76:	d1e1      	bne.n	8007d3c <__gethex+0x1d8>
 8007d78:	e7a2      	b.n	8007cc0 <__gethex+0x15c>
 8007d7a:	1ea9      	subs	r1, r5, #2
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f001 fc6e 	bl	800965e <__any_on>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d0c2      	beq.n	8007d0c <__gethex+0x1a8>
 8007d86:	f04f 0903 	mov.w	r9, #3
 8007d8a:	e7c1      	b.n	8007d10 <__gethex+0x1ac>
 8007d8c:	da09      	bge.n	8007da2 <__gethex+0x23e>
 8007d8e:	1b75      	subs	r5, r6, r5
 8007d90:	4621      	mov	r1, r4
 8007d92:	9801      	ldr	r0, [sp, #4]
 8007d94:	462a      	mov	r2, r5
 8007d96:	f001 fa29 	bl	80091ec <__lshift>
 8007d9a:	1b7f      	subs	r7, r7, r5
 8007d9c:	4604      	mov	r4, r0
 8007d9e:	f100 0a14 	add.w	sl, r0, #20
 8007da2:	f04f 0900 	mov.w	r9, #0
 8007da6:	e7b8      	b.n	8007d1a <__gethex+0x1b6>
 8007da8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007dac:	42bd      	cmp	r5, r7
 8007dae:	dd6f      	ble.n	8007e90 <__gethex+0x32c>
 8007db0:	1bed      	subs	r5, r5, r7
 8007db2:	42ae      	cmp	r6, r5
 8007db4:	dc34      	bgt.n	8007e20 <__gethex+0x2bc>
 8007db6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d022      	beq.n	8007e04 <__gethex+0x2a0>
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d024      	beq.n	8007e0c <__gethex+0x2a8>
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d115      	bne.n	8007df2 <__gethex+0x28e>
 8007dc6:	42ae      	cmp	r6, r5
 8007dc8:	d113      	bne.n	8007df2 <__gethex+0x28e>
 8007dca:	2e01      	cmp	r6, #1
 8007dcc:	d10b      	bne.n	8007de6 <__gethex+0x282>
 8007dce:	9a02      	ldr	r2, [sp, #8]
 8007dd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007dd4:	6013      	str	r3, [r2, #0]
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	6123      	str	r3, [r4, #16]
 8007dda:	f8ca 3000 	str.w	r3, [sl]
 8007dde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007de0:	2562      	movs	r5, #98	@ 0x62
 8007de2:	601c      	str	r4, [r3, #0]
 8007de4:	e73a      	b.n	8007c5c <__gethex+0xf8>
 8007de6:	1e71      	subs	r1, r6, #1
 8007de8:	4620      	mov	r0, r4
 8007dea:	f001 fc38 	bl	800965e <__any_on>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	d1ed      	bne.n	8007dce <__gethex+0x26a>
 8007df2:	9801      	ldr	r0, [sp, #4]
 8007df4:	4621      	mov	r1, r4
 8007df6:	f000 ffe9 	bl	8008dcc <_Bfree>
 8007dfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	2550      	movs	r5, #80	@ 0x50
 8007e02:	e72b      	b.n	8007c5c <__gethex+0xf8>
 8007e04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1f3      	bne.n	8007df2 <__gethex+0x28e>
 8007e0a:	e7e0      	b.n	8007dce <__gethex+0x26a>
 8007e0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1dd      	bne.n	8007dce <__gethex+0x26a>
 8007e12:	e7ee      	b.n	8007df2 <__gethex+0x28e>
 8007e14:	0800a113 	.word	0x0800a113
 8007e18:	0800a199 	.word	0x0800a199
 8007e1c:	0800a1aa 	.word	0x0800a1aa
 8007e20:	1e6f      	subs	r7, r5, #1
 8007e22:	f1b9 0f00 	cmp.w	r9, #0
 8007e26:	d130      	bne.n	8007e8a <__gethex+0x326>
 8007e28:	b127      	cbz	r7, 8007e34 <__gethex+0x2d0>
 8007e2a:	4639      	mov	r1, r7
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f001 fc16 	bl	800965e <__any_on>
 8007e32:	4681      	mov	r9, r0
 8007e34:	117a      	asrs	r2, r7, #5
 8007e36:	2301      	movs	r3, #1
 8007e38:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007e3c:	f007 071f 	and.w	r7, r7, #31
 8007e40:	40bb      	lsls	r3, r7
 8007e42:	4213      	tst	r3, r2
 8007e44:	4629      	mov	r1, r5
 8007e46:	4620      	mov	r0, r4
 8007e48:	bf18      	it	ne
 8007e4a:	f049 0902 	orrne.w	r9, r9, #2
 8007e4e:	f7ff fe21 	bl	8007a94 <rshift>
 8007e52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007e56:	1b76      	subs	r6, r6, r5
 8007e58:	2502      	movs	r5, #2
 8007e5a:	f1b9 0f00 	cmp.w	r9, #0
 8007e5e:	d047      	beq.n	8007ef0 <__gethex+0x38c>
 8007e60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d015      	beq.n	8007e94 <__gethex+0x330>
 8007e68:	2b03      	cmp	r3, #3
 8007e6a:	d017      	beq.n	8007e9c <__gethex+0x338>
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d109      	bne.n	8007e84 <__gethex+0x320>
 8007e70:	f019 0f02 	tst.w	r9, #2
 8007e74:	d006      	beq.n	8007e84 <__gethex+0x320>
 8007e76:	f8da 3000 	ldr.w	r3, [sl]
 8007e7a:	ea49 0903 	orr.w	r9, r9, r3
 8007e7e:	f019 0f01 	tst.w	r9, #1
 8007e82:	d10e      	bne.n	8007ea2 <__gethex+0x33e>
 8007e84:	f045 0510 	orr.w	r5, r5, #16
 8007e88:	e032      	b.n	8007ef0 <__gethex+0x38c>
 8007e8a:	f04f 0901 	mov.w	r9, #1
 8007e8e:	e7d1      	b.n	8007e34 <__gethex+0x2d0>
 8007e90:	2501      	movs	r5, #1
 8007e92:	e7e2      	b.n	8007e5a <__gethex+0x2f6>
 8007e94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e96:	f1c3 0301 	rsb	r3, r3, #1
 8007e9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0f0      	beq.n	8007e84 <__gethex+0x320>
 8007ea2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007ea6:	f104 0314 	add.w	r3, r4, #20
 8007eaa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007eae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007eb2:	f04f 0c00 	mov.w	ip, #0
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ebc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8007ec0:	d01b      	beq.n	8007efa <__gethex+0x396>
 8007ec2:	3201      	adds	r2, #1
 8007ec4:	6002      	str	r2, [r0, #0]
 8007ec6:	2d02      	cmp	r5, #2
 8007ec8:	f104 0314 	add.w	r3, r4, #20
 8007ecc:	d13c      	bne.n	8007f48 <__gethex+0x3e4>
 8007ece:	f8d8 2000 	ldr.w	r2, [r8]
 8007ed2:	3a01      	subs	r2, #1
 8007ed4:	42b2      	cmp	r2, r6
 8007ed6:	d109      	bne.n	8007eec <__gethex+0x388>
 8007ed8:	1171      	asrs	r1, r6, #5
 8007eda:	2201      	movs	r2, #1
 8007edc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ee0:	f006 061f 	and.w	r6, r6, #31
 8007ee4:	fa02 f606 	lsl.w	r6, r2, r6
 8007ee8:	421e      	tst	r6, r3
 8007eea:	d13a      	bne.n	8007f62 <__gethex+0x3fe>
 8007eec:	f045 0520 	orr.w	r5, r5, #32
 8007ef0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ef2:	601c      	str	r4, [r3, #0]
 8007ef4:	9b02      	ldr	r3, [sp, #8]
 8007ef6:	601f      	str	r7, [r3, #0]
 8007ef8:	e6b0      	b.n	8007c5c <__gethex+0xf8>
 8007efa:	4299      	cmp	r1, r3
 8007efc:	f843 cc04 	str.w	ip, [r3, #-4]
 8007f00:	d8d9      	bhi.n	8007eb6 <__gethex+0x352>
 8007f02:	68a3      	ldr	r3, [r4, #8]
 8007f04:	459b      	cmp	fp, r3
 8007f06:	db17      	blt.n	8007f38 <__gethex+0x3d4>
 8007f08:	6861      	ldr	r1, [r4, #4]
 8007f0a:	9801      	ldr	r0, [sp, #4]
 8007f0c:	3101      	adds	r1, #1
 8007f0e:	f000 ff1d 	bl	8008d4c <_Balloc>
 8007f12:	4681      	mov	r9, r0
 8007f14:	b918      	cbnz	r0, 8007f1e <__gethex+0x3ba>
 8007f16:	4b1a      	ldr	r3, [pc, #104]	@ (8007f80 <__gethex+0x41c>)
 8007f18:	4602      	mov	r2, r0
 8007f1a:	2184      	movs	r1, #132	@ 0x84
 8007f1c:	e6c5      	b.n	8007caa <__gethex+0x146>
 8007f1e:	6922      	ldr	r2, [r4, #16]
 8007f20:	3202      	adds	r2, #2
 8007f22:	f104 010c 	add.w	r1, r4, #12
 8007f26:	0092      	lsls	r2, r2, #2
 8007f28:	300c      	adds	r0, #12
 8007f2a:	f7fe fef1 	bl	8006d10 <memcpy>
 8007f2e:	4621      	mov	r1, r4
 8007f30:	9801      	ldr	r0, [sp, #4]
 8007f32:	f000 ff4b 	bl	8008dcc <_Bfree>
 8007f36:	464c      	mov	r4, r9
 8007f38:	6923      	ldr	r3, [r4, #16]
 8007f3a:	1c5a      	adds	r2, r3, #1
 8007f3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f40:	6122      	str	r2, [r4, #16]
 8007f42:	2201      	movs	r2, #1
 8007f44:	615a      	str	r2, [r3, #20]
 8007f46:	e7be      	b.n	8007ec6 <__gethex+0x362>
 8007f48:	6922      	ldr	r2, [r4, #16]
 8007f4a:	455a      	cmp	r2, fp
 8007f4c:	dd0b      	ble.n	8007f66 <__gethex+0x402>
 8007f4e:	2101      	movs	r1, #1
 8007f50:	4620      	mov	r0, r4
 8007f52:	f7ff fd9f 	bl	8007a94 <rshift>
 8007f56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f5a:	3701      	adds	r7, #1
 8007f5c:	42bb      	cmp	r3, r7
 8007f5e:	f6ff aee0 	blt.w	8007d22 <__gethex+0x1be>
 8007f62:	2501      	movs	r5, #1
 8007f64:	e7c2      	b.n	8007eec <__gethex+0x388>
 8007f66:	f016 061f 	ands.w	r6, r6, #31
 8007f6a:	d0fa      	beq.n	8007f62 <__gethex+0x3fe>
 8007f6c:	4453      	add	r3, sl
 8007f6e:	f1c6 0620 	rsb	r6, r6, #32
 8007f72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007f76:	f000 ffdb 	bl	8008f30 <__hi0bits>
 8007f7a:	42b0      	cmp	r0, r6
 8007f7c:	dbe7      	blt.n	8007f4e <__gethex+0x3ea>
 8007f7e:	e7f0      	b.n	8007f62 <__gethex+0x3fe>
 8007f80:	0800a199 	.word	0x0800a199

08007f84 <L_shift>:
 8007f84:	f1c2 0208 	rsb	r2, r2, #8
 8007f88:	0092      	lsls	r2, r2, #2
 8007f8a:	b570      	push	{r4, r5, r6, lr}
 8007f8c:	f1c2 0620 	rsb	r6, r2, #32
 8007f90:	6843      	ldr	r3, [r0, #4]
 8007f92:	6804      	ldr	r4, [r0, #0]
 8007f94:	fa03 f506 	lsl.w	r5, r3, r6
 8007f98:	432c      	orrs	r4, r5
 8007f9a:	40d3      	lsrs	r3, r2
 8007f9c:	6004      	str	r4, [r0, #0]
 8007f9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007fa2:	4288      	cmp	r0, r1
 8007fa4:	d3f4      	bcc.n	8007f90 <L_shift+0xc>
 8007fa6:	bd70      	pop	{r4, r5, r6, pc}

08007fa8 <__match>:
 8007fa8:	b530      	push	{r4, r5, lr}
 8007faa:	6803      	ldr	r3, [r0, #0]
 8007fac:	3301      	adds	r3, #1
 8007fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fb2:	b914      	cbnz	r4, 8007fba <__match+0x12>
 8007fb4:	6003      	str	r3, [r0, #0]
 8007fb6:	2001      	movs	r0, #1
 8007fb8:	bd30      	pop	{r4, r5, pc}
 8007fba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fbe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007fc2:	2d19      	cmp	r5, #25
 8007fc4:	bf98      	it	ls
 8007fc6:	3220      	addls	r2, #32
 8007fc8:	42a2      	cmp	r2, r4
 8007fca:	d0f0      	beq.n	8007fae <__match+0x6>
 8007fcc:	2000      	movs	r0, #0
 8007fce:	e7f3      	b.n	8007fb8 <__match+0x10>

08007fd0 <__hexnan>:
 8007fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd4:	680b      	ldr	r3, [r1, #0]
 8007fd6:	6801      	ldr	r1, [r0, #0]
 8007fd8:	115e      	asrs	r6, r3, #5
 8007fda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007fde:	f013 031f 	ands.w	r3, r3, #31
 8007fe2:	b087      	sub	sp, #28
 8007fe4:	bf18      	it	ne
 8007fe6:	3604      	addne	r6, #4
 8007fe8:	2500      	movs	r5, #0
 8007fea:	1f37      	subs	r7, r6, #4
 8007fec:	4682      	mov	sl, r0
 8007fee:	4690      	mov	r8, r2
 8007ff0:	9301      	str	r3, [sp, #4]
 8007ff2:	f846 5c04 	str.w	r5, [r6, #-4]
 8007ff6:	46b9      	mov	r9, r7
 8007ff8:	463c      	mov	r4, r7
 8007ffa:	9502      	str	r5, [sp, #8]
 8007ffc:	46ab      	mov	fp, r5
 8007ffe:	784a      	ldrb	r2, [r1, #1]
 8008000:	1c4b      	adds	r3, r1, #1
 8008002:	9303      	str	r3, [sp, #12]
 8008004:	b342      	cbz	r2, 8008058 <__hexnan+0x88>
 8008006:	4610      	mov	r0, r2
 8008008:	9105      	str	r1, [sp, #20]
 800800a:	9204      	str	r2, [sp, #16]
 800800c:	f7ff fd94 	bl	8007b38 <__hexdig_fun>
 8008010:	2800      	cmp	r0, #0
 8008012:	d151      	bne.n	80080b8 <__hexnan+0xe8>
 8008014:	9a04      	ldr	r2, [sp, #16]
 8008016:	9905      	ldr	r1, [sp, #20]
 8008018:	2a20      	cmp	r2, #32
 800801a:	d818      	bhi.n	800804e <__hexnan+0x7e>
 800801c:	9b02      	ldr	r3, [sp, #8]
 800801e:	459b      	cmp	fp, r3
 8008020:	dd13      	ble.n	800804a <__hexnan+0x7a>
 8008022:	454c      	cmp	r4, r9
 8008024:	d206      	bcs.n	8008034 <__hexnan+0x64>
 8008026:	2d07      	cmp	r5, #7
 8008028:	dc04      	bgt.n	8008034 <__hexnan+0x64>
 800802a:	462a      	mov	r2, r5
 800802c:	4649      	mov	r1, r9
 800802e:	4620      	mov	r0, r4
 8008030:	f7ff ffa8 	bl	8007f84 <L_shift>
 8008034:	4544      	cmp	r4, r8
 8008036:	d952      	bls.n	80080de <__hexnan+0x10e>
 8008038:	2300      	movs	r3, #0
 800803a:	f1a4 0904 	sub.w	r9, r4, #4
 800803e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008042:	f8cd b008 	str.w	fp, [sp, #8]
 8008046:	464c      	mov	r4, r9
 8008048:	461d      	mov	r5, r3
 800804a:	9903      	ldr	r1, [sp, #12]
 800804c:	e7d7      	b.n	8007ffe <__hexnan+0x2e>
 800804e:	2a29      	cmp	r2, #41	@ 0x29
 8008050:	d157      	bne.n	8008102 <__hexnan+0x132>
 8008052:	3102      	adds	r1, #2
 8008054:	f8ca 1000 	str.w	r1, [sl]
 8008058:	f1bb 0f00 	cmp.w	fp, #0
 800805c:	d051      	beq.n	8008102 <__hexnan+0x132>
 800805e:	454c      	cmp	r4, r9
 8008060:	d206      	bcs.n	8008070 <__hexnan+0xa0>
 8008062:	2d07      	cmp	r5, #7
 8008064:	dc04      	bgt.n	8008070 <__hexnan+0xa0>
 8008066:	462a      	mov	r2, r5
 8008068:	4649      	mov	r1, r9
 800806a:	4620      	mov	r0, r4
 800806c:	f7ff ff8a 	bl	8007f84 <L_shift>
 8008070:	4544      	cmp	r4, r8
 8008072:	d936      	bls.n	80080e2 <__hexnan+0x112>
 8008074:	f1a8 0204 	sub.w	r2, r8, #4
 8008078:	4623      	mov	r3, r4
 800807a:	f853 1b04 	ldr.w	r1, [r3], #4
 800807e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008082:	429f      	cmp	r7, r3
 8008084:	d2f9      	bcs.n	800807a <__hexnan+0xaa>
 8008086:	1b3b      	subs	r3, r7, r4
 8008088:	f023 0303 	bic.w	r3, r3, #3
 800808c:	3304      	adds	r3, #4
 800808e:	3401      	adds	r4, #1
 8008090:	3e03      	subs	r6, #3
 8008092:	42b4      	cmp	r4, r6
 8008094:	bf88      	it	hi
 8008096:	2304      	movhi	r3, #4
 8008098:	4443      	add	r3, r8
 800809a:	2200      	movs	r2, #0
 800809c:	f843 2b04 	str.w	r2, [r3], #4
 80080a0:	429f      	cmp	r7, r3
 80080a2:	d2fb      	bcs.n	800809c <__hexnan+0xcc>
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	b91b      	cbnz	r3, 80080b0 <__hexnan+0xe0>
 80080a8:	4547      	cmp	r7, r8
 80080aa:	d128      	bne.n	80080fe <__hexnan+0x12e>
 80080ac:	2301      	movs	r3, #1
 80080ae:	603b      	str	r3, [r7, #0]
 80080b0:	2005      	movs	r0, #5
 80080b2:	b007      	add	sp, #28
 80080b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b8:	3501      	adds	r5, #1
 80080ba:	2d08      	cmp	r5, #8
 80080bc:	f10b 0b01 	add.w	fp, fp, #1
 80080c0:	dd06      	ble.n	80080d0 <__hexnan+0x100>
 80080c2:	4544      	cmp	r4, r8
 80080c4:	d9c1      	bls.n	800804a <__hexnan+0x7a>
 80080c6:	2300      	movs	r3, #0
 80080c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80080cc:	2501      	movs	r5, #1
 80080ce:	3c04      	subs	r4, #4
 80080d0:	6822      	ldr	r2, [r4, #0]
 80080d2:	f000 000f 	and.w	r0, r0, #15
 80080d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80080da:	6020      	str	r0, [r4, #0]
 80080dc:	e7b5      	b.n	800804a <__hexnan+0x7a>
 80080de:	2508      	movs	r5, #8
 80080e0:	e7b3      	b.n	800804a <__hexnan+0x7a>
 80080e2:	9b01      	ldr	r3, [sp, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d0dd      	beq.n	80080a4 <__hexnan+0xd4>
 80080e8:	f1c3 0320 	rsb	r3, r3, #32
 80080ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080f0:	40da      	lsrs	r2, r3
 80080f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80080f6:	4013      	ands	r3, r2
 80080f8:	f846 3c04 	str.w	r3, [r6, #-4]
 80080fc:	e7d2      	b.n	80080a4 <__hexnan+0xd4>
 80080fe:	3f04      	subs	r7, #4
 8008100:	e7d0      	b.n	80080a4 <__hexnan+0xd4>
 8008102:	2004      	movs	r0, #4
 8008104:	e7d5      	b.n	80080b2 <__hexnan+0xe2>

08008106 <__ssputs_r>:
 8008106:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800810a:	688e      	ldr	r6, [r1, #8]
 800810c:	461f      	mov	r7, r3
 800810e:	42be      	cmp	r6, r7
 8008110:	680b      	ldr	r3, [r1, #0]
 8008112:	4682      	mov	sl, r0
 8008114:	460c      	mov	r4, r1
 8008116:	4690      	mov	r8, r2
 8008118:	d82d      	bhi.n	8008176 <__ssputs_r+0x70>
 800811a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800811e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008122:	d026      	beq.n	8008172 <__ssputs_r+0x6c>
 8008124:	6965      	ldr	r5, [r4, #20]
 8008126:	6909      	ldr	r1, [r1, #16]
 8008128:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800812c:	eba3 0901 	sub.w	r9, r3, r1
 8008130:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008134:	1c7b      	adds	r3, r7, #1
 8008136:	444b      	add	r3, r9
 8008138:	106d      	asrs	r5, r5, #1
 800813a:	429d      	cmp	r5, r3
 800813c:	bf38      	it	cc
 800813e:	461d      	movcc	r5, r3
 8008140:	0553      	lsls	r3, r2, #21
 8008142:	d527      	bpl.n	8008194 <__ssputs_r+0x8e>
 8008144:	4629      	mov	r1, r5
 8008146:	f000 fb2f 	bl	80087a8 <_malloc_r>
 800814a:	4606      	mov	r6, r0
 800814c:	b360      	cbz	r0, 80081a8 <__ssputs_r+0xa2>
 800814e:	6921      	ldr	r1, [r4, #16]
 8008150:	464a      	mov	r2, r9
 8008152:	f7fe fddd 	bl	8006d10 <memcpy>
 8008156:	89a3      	ldrh	r3, [r4, #12]
 8008158:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800815c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008160:	81a3      	strh	r3, [r4, #12]
 8008162:	6126      	str	r6, [r4, #16]
 8008164:	6165      	str	r5, [r4, #20]
 8008166:	444e      	add	r6, r9
 8008168:	eba5 0509 	sub.w	r5, r5, r9
 800816c:	6026      	str	r6, [r4, #0]
 800816e:	60a5      	str	r5, [r4, #8]
 8008170:	463e      	mov	r6, r7
 8008172:	42be      	cmp	r6, r7
 8008174:	d900      	bls.n	8008178 <__ssputs_r+0x72>
 8008176:	463e      	mov	r6, r7
 8008178:	6820      	ldr	r0, [r4, #0]
 800817a:	4632      	mov	r2, r6
 800817c:	4641      	mov	r1, r8
 800817e:	f001 fb74 	bl	800986a <memmove>
 8008182:	68a3      	ldr	r3, [r4, #8]
 8008184:	1b9b      	subs	r3, r3, r6
 8008186:	60a3      	str	r3, [r4, #8]
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	4433      	add	r3, r6
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	2000      	movs	r0, #0
 8008190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008194:	462a      	mov	r2, r5
 8008196:	f001 fabd 	bl	8009714 <_realloc_r>
 800819a:	4606      	mov	r6, r0
 800819c:	2800      	cmp	r0, #0
 800819e:	d1e0      	bne.n	8008162 <__ssputs_r+0x5c>
 80081a0:	6921      	ldr	r1, [r4, #16]
 80081a2:	4650      	mov	r0, sl
 80081a4:	f7ff fc2c 	bl	8007a00 <_free_r>
 80081a8:	230c      	movs	r3, #12
 80081aa:	f8ca 3000 	str.w	r3, [sl]
 80081ae:	89a3      	ldrh	r3, [r4, #12]
 80081b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081b4:	81a3      	strh	r3, [r4, #12]
 80081b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081ba:	e7e9      	b.n	8008190 <__ssputs_r+0x8a>

080081bc <_svfiprintf_r>:
 80081bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c0:	4698      	mov	r8, r3
 80081c2:	898b      	ldrh	r3, [r1, #12]
 80081c4:	061b      	lsls	r3, r3, #24
 80081c6:	b09d      	sub	sp, #116	@ 0x74
 80081c8:	4607      	mov	r7, r0
 80081ca:	460d      	mov	r5, r1
 80081cc:	4614      	mov	r4, r2
 80081ce:	d510      	bpl.n	80081f2 <_svfiprintf_r+0x36>
 80081d0:	690b      	ldr	r3, [r1, #16]
 80081d2:	b973      	cbnz	r3, 80081f2 <_svfiprintf_r+0x36>
 80081d4:	2140      	movs	r1, #64	@ 0x40
 80081d6:	f000 fae7 	bl	80087a8 <_malloc_r>
 80081da:	6028      	str	r0, [r5, #0]
 80081dc:	6128      	str	r0, [r5, #16]
 80081de:	b930      	cbnz	r0, 80081ee <_svfiprintf_r+0x32>
 80081e0:	230c      	movs	r3, #12
 80081e2:	603b      	str	r3, [r7, #0]
 80081e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081e8:	b01d      	add	sp, #116	@ 0x74
 80081ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ee:	2340      	movs	r3, #64	@ 0x40
 80081f0:	616b      	str	r3, [r5, #20]
 80081f2:	2300      	movs	r3, #0
 80081f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80081f6:	2320      	movs	r3, #32
 80081f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008200:	2330      	movs	r3, #48	@ 0x30
 8008202:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80083a0 <_svfiprintf_r+0x1e4>
 8008206:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800820a:	f04f 0901 	mov.w	r9, #1
 800820e:	4623      	mov	r3, r4
 8008210:	469a      	mov	sl, r3
 8008212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008216:	b10a      	cbz	r2, 800821c <_svfiprintf_r+0x60>
 8008218:	2a25      	cmp	r2, #37	@ 0x25
 800821a:	d1f9      	bne.n	8008210 <_svfiprintf_r+0x54>
 800821c:	ebba 0b04 	subs.w	fp, sl, r4
 8008220:	d00b      	beq.n	800823a <_svfiprintf_r+0x7e>
 8008222:	465b      	mov	r3, fp
 8008224:	4622      	mov	r2, r4
 8008226:	4629      	mov	r1, r5
 8008228:	4638      	mov	r0, r7
 800822a:	f7ff ff6c 	bl	8008106 <__ssputs_r>
 800822e:	3001      	adds	r0, #1
 8008230:	f000 80a7 	beq.w	8008382 <_svfiprintf_r+0x1c6>
 8008234:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008236:	445a      	add	r2, fp
 8008238:	9209      	str	r2, [sp, #36]	@ 0x24
 800823a:	f89a 3000 	ldrb.w	r3, [sl]
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 809f 	beq.w	8008382 <_svfiprintf_r+0x1c6>
 8008244:	2300      	movs	r3, #0
 8008246:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800824a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800824e:	f10a 0a01 	add.w	sl, sl, #1
 8008252:	9304      	str	r3, [sp, #16]
 8008254:	9307      	str	r3, [sp, #28]
 8008256:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800825a:	931a      	str	r3, [sp, #104]	@ 0x68
 800825c:	4654      	mov	r4, sl
 800825e:	2205      	movs	r2, #5
 8008260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008264:	484e      	ldr	r0, [pc, #312]	@ (80083a0 <_svfiprintf_r+0x1e4>)
 8008266:	f7f7 ffb3 	bl	80001d0 <memchr>
 800826a:	9a04      	ldr	r2, [sp, #16]
 800826c:	b9d8      	cbnz	r0, 80082a6 <_svfiprintf_r+0xea>
 800826e:	06d0      	lsls	r0, r2, #27
 8008270:	bf44      	itt	mi
 8008272:	2320      	movmi	r3, #32
 8008274:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008278:	0711      	lsls	r1, r2, #28
 800827a:	bf44      	itt	mi
 800827c:	232b      	movmi	r3, #43	@ 0x2b
 800827e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008282:	f89a 3000 	ldrb.w	r3, [sl]
 8008286:	2b2a      	cmp	r3, #42	@ 0x2a
 8008288:	d015      	beq.n	80082b6 <_svfiprintf_r+0xfa>
 800828a:	9a07      	ldr	r2, [sp, #28]
 800828c:	4654      	mov	r4, sl
 800828e:	2000      	movs	r0, #0
 8008290:	f04f 0c0a 	mov.w	ip, #10
 8008294:	4621      	mov	r1, r4
 8008296:	f811 3b01 	ldrb.w	r3, [r1], #1
 800829a:	3b30      	subs	r3, #48	@ 0x30
 800829c:	2b09      	cmp	r3, #9
 800829e:	d94b      	bls.n	8008338 <_svfiprintf_r+0x17c>
 80082a0:	b1b0      	cbz	r0, 80082d0 <_svfiprintf_r+0x114>
 80082a2:	9207      	str	r2, [sp, #28]
 80082a4:	e014      	b.n	80082d0 <_svfiprintf_r+0x114>
 80082a6:	eba0 0308 	sub.w	r3, r0, r8
 80082aa:	fa09 f303 	lsl.w	r3, r9, r3
 80082ae:	4313      	orrs	r3, r2
 80082b0:	9304      	str	r3, [sp, #16]
 80082b2:	46a2      	mov	sl, r4
 80082b4:	e7d2      	b.n	800825c <_svfiprintf_r+0xa0>
 80082b6:	9b03      	ldr	r3, [sp, #12]
 80082b8:	1d19      	adds	r1, r3, #4
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	9103      	str	r1, [sp, #12]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	bfbb      	ittet	lt
 80082c2:	425b      	neglt	r3, r3
 80082c4:	f042 0202 	orrlt.w	r2, r2, #2
 80082c8:	9307      	strge	r3, [sp, #28]
 80082ca:	9307      	strlt	r3, [sp, #28]
 80082cc:	bfb8      	it	lt
 80082ce:	9204      	strlt	r2, [sp, #16]
 80082d0:	7823      	ldrb	r3, [r4, #0]
 80082d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80082d4:	d10a      	bne.n	80082ec <_svfiprintf_r+0x130>
 80082d6:	7863      	ldrb	r3, [r4, #1]
 80082d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80082da:	d132      	bne.n	8008342 <_svfiprintf_r+0x186>
 80082dc:	9b03      	ldr	r3, [sp, #12]
 80082de:	1d1a      	adds	r2, r3, #4
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	9203      	str	r2, [sp, #12]
 80082e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082e8:	3402      	adds	r4, #2
 80082ea:	9305      	str	r3, [sp, #20]
 80082ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80083b0 <_svfiprintf_r+0x1f4>
 80082f0:	7821      	ldrb	r1, [r4, #0]
 80082f2:	2203      	movs	r2, #3
 80082f4:	4650      	mov	r0, sl
 80082f6:	f7f7 ff6b 	bl	80001d0 <memchr>
 80082fa:	b138      	cbz	r0, 800830c <_svfiprintf_r+0x150>
 80082fc:	9b04      	ldr	r3, [sp, #16]
 80082fe:	eba0 000a 	sub.w	r0, r0, sl
 8008302:	2240      	movs	r2, #64	@ 0x40
 8008304:	4082      	lsls	r2, r0
 8008306:	4313      	orrs	r3, r2
 8008308:	3401      	adds	r4, #1
 800830a:	9304      	str	r3, [sp, #16]
 800830c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008310:	4824      	ldr	r0, [pc, #144]	@ (80083a4 <_svfiprintf_r+0x1e8>)
 8008312:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008316:	2206      	movs	r2, #6
 8008318:	f7f7 ff5a 	bl	80001d0 <memchr>
 800831c:	2800      	cmp	r0, #0
 800831e:	d036      	beq.n	800838e <_svfiprintf_r+0x1d2>
 8008320:	4b21      	ldr	r3, [pc, #132]	@ (80083a8 <_svfiprintf_r+0x1ec>)
 8008322:	bb1b      	cbnz	r3, 800836c <_svfiprintf_r+0x1b0>
 8008324:	9b03      	ldr	r3, [sp, #12]
 8008326:	3307      	adds	r3, #7
 8008328:	f023 0307 	bic.w	r3, r3, #7
 800832c:	3308      	adds	r3, #8
 800832e:	9303      	str	r3, [sp, #12]
 8008330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008332:	4433      	add	r3, r6
 8008334:	9309      	str	r3, [sp, #36]	@ 0x24
 8008336:	e76a      	b.n	800820e <_svfiprintf_r+0x52>
 8008338:	fb0c 3202 	mla	r2, ip, r2, r3
 800833c:	460c      	mov	r4, r1
 800833e:	2001      	movs	r0, #1
 8008340:	e7a8      	b.n	8008294 <_svfiprintf_r+0xd8>
 8008342:	2300      	movs	r3, #0
 8008344:	3401      	adds	r4, #1
 8008346:	9305      	str	r3, [sp, #20]
 8008348:	4619      	mov	r1, r3
 800834a:	f04f 0c0a 	mov.w	ip, #10
 800834e:	4620      	mov	r0, r4
 8008350:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008354:	3a30      	subs	r2, #48	@ 0x30
 8008356:	2a09      	cmp	r2, #9
 8008358:	d903      	bls.n	8008362 <_svfiprintf_r+0x1a6>
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0c6      	beq.n	80082ec <_svfiprintf_r+0x130>
 800835e:	9105      	str	r1, [sp, #20]
 8008360:	e7c4      	b.n	80082ec <_svfiprintf_r+0x130>
 8008362:	fb0c 2101 	mla	r1, ip, r1, r2
 8008366:	4604      	mov	r4, r0
 8008368:	2301      	movs	r3, #1
 800836a:	e7f0      	b.n	800834e <_svfiprintf_r+0x192>
 800836c:	ab03      	add	r3, sp, #12
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	462a      	mov	r2, r5
 8008372:	4b0e      	ldr	r3, [pc, #56]	@ (80083ac <_svfiprintf_r+0x1f0>)
 8008374:	a904      	add	r1, sp, #16
 8008376:	4638      	mov	r0, r7
 8008378:	f7fc fe0a 	bl	8004f90 <_printf_float>
 800837c:	1c42      	adds	r2, r0, #1
 800837e:	4606      	mov	r6, r0
 8008380:	d1d6      	bne.n	8008330 <_svfiprintf_r+0x174>
 8008382:	89ab      	ldrh	r3, [r5, #12]
 8008384:	065b      	lsls	r3, r3, #25
 8008386:	f53f af2d 	bmi.w	80081e4 <_svfiprintf_r+0x28>
 800838a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800838c:	e72c      	b.n	80081e8 <_svfiprintf_r+0x2c>
 800838e:	ab03      	add	r3, sp, #12
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	462a      	mov	r2, r5
 8008394:	4b05      	ldr	r3, [pc, #20]	@ (80083ac <_svfiprintf_r+0x1f0>)
 8008396:	a904      	add	r1, sp, #16
 8008398:	4638      	mov	r0, r7
 800839a:	f7fd f891 	bl	80054c0 <_printf_i>
 800839e:	e7ed      	b.n	800837c <_svfiprintf_r+0x1c0>
 80083a0:	0800a20a 	.word	0x0800a20a
 80083a4:	0800a214 	.word	0x0800a214
 80083a8:	08004f91 	.word	0x08004f91
 80083ac:	08008107 	.word	0x08008107
 80083b0:	0800a210 	.word	0x0800a210

080083b4 <_sungetc_r>:
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	1c4b      	adds	r3, r1, #1
 80083b8:	4614      	mov	r4, r2
 80083ba:	d103      	bne.n	80083c4 <_sungetc_r+0x10>
 80083bc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80083c0:	4628      	mov	r0, r5
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	8993      	ldrh	r3, [r2, #12]
 80083c6:	f023 0320 	bic.w	r3, r3, #32
 80083ca:	8193      	strh	r3, [r2, #12]
 80083cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80083ce:	6852      	ldr	r2, [r2, #4]
 80083d0:	b2cd      	uxtb	r5, r1
 80083d2:	b18b      	cbz	r3, 80083f8 <_sungetc_r+0x44>
 80083d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80083d6:	4293      	cmp	r3, r2
 80083d8:	dd08      	ble.n	80083ec <_sungetc_r+0x38>
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	1e5a      	subs	r2, r3, #1
 80083de:	6022      	str	r2, [r4, #0]
 80083e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80083e4:	6863      	ldr	r3, [r4, #4]
 80083e6:	3301      	adds	r3, #1
 80083e8:	6063      	str	r3, [r4, #4]
 80083ea:	e7e9      	b.n	80083c0 <_sungetc_r+0xc>
 80083ec:	4621      	mov	r1, r4
 80083ee:	f001 f957 	bl	80096a0 <__submore>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	d0f1      	beq.n	80083da <_sungetc_r+0x26>
 80083f6:	e7e1      	b.n	80083bc <_sungetc_r+0x8>
 80083f8:	6921      	ldr	r1, [r4, #16]
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	b151      	cbz	r1, 8008414 <_sungetc_r+0x60>
 80083fe:	4299      	cmp	r1, r3
 8008400:	d208      	bcs.n	8008414 <_sungetc_r+0x60>
 8008402:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008406:	42a9      	cmp	r1, r5
 8008408:	d104      	bne.n	8008414 <_sungetc_r+0x60>
 800840a:	3b01      	subs	r3, #1
 800840c:	3201      	adds	r2, #1
 800840e:	6023      	str	r3, [r4, #0]
 8008410:	6062      	str	r2, [r4, #4]
 8008412:	e7d5      	b.n	80083c0 <_sungetc_r+0xc>
 8008414:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8008418:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800841c:	6363      	str	r3, [r4, #52]	@ 0x34
 800841e:	2303      	movs	r3, #3
 8008420:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008422:	4623      	mov	r3, r4
 8008424:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	2301      	movs	r3, #1
 800842c:	e7dc      	b.n	80083e8 <_sungetc_r+0x34>

0800842e <__ssrefill_r>:
 800842e:	b510      	push	{r4, lr}
 8008430:	460c      	mov	r4, r1
 8008432:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008434:	b169      	cbz	r1, 8008452 <__ssrefill_r+0x24>
 8008436:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800843a:	4299      	cmp	r1, r3
 800843c:	d001      	beq.n	8008442 <__ssrefill_r+0x14>
 800843e:	f7ff fadf 	bl	8007a00 <_free_r>
 8008442:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008444:	6063      	str	r3, [r4, #4]
 8008446:	2000      	movs	r0, #0
 8008448:	6360      	str	r0, [r4, #52]	@ 0x34
 800844a:	b113      	cbz	r3, 8008452 <__ssrefill_r+0x24>
 800844c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800844e:	6023      	str	r3, [r4, #0]
 8008450:	bd10      	pop	{r4, pc}
 8008452:	6923      	ldr	r3, [r4, #16]
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	2300      	movs	r3, #0
 8008458:	6063      	str	r3, [r4, #4]
 800845a:	89a3      	ldrh	r3, [r4, #12]
 800845c:	f043 0320 	orr.w	r3, r3, #32
 8008460:	81a3      	strh	r3, [r4, #12]
 8008462:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008466:	e7f3      	b.n	8008450 <__ssrefill_r+0x22>

08008468 <__ssvfiscanf_r>:
 8008468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846c:	460c      	mov	r4, r1
 800846e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8008472:	2100      	movs	r1, #0
 8008474:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8008478:	49a6      	ldr	r1, [pc, #664]	@ (8008714 <__ssvfiscanf_r+0x2ac>)
 800847a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800847c:	f10d 0804 	add.w	r8, sp, #4
 8008480:	49a5      	ldr	r1, [pc, #660]	@ (8008718 <__ssvfiscanf_r+0x2b0>)
 8008482:	4fa6      	ldr	r7, [pc, #664]	@ (800871c <__ssvfiscanf_r+0x2b4>)
 8008484:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008488:	4606      	mov	r6, r0
 800848a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	f892 9000 	ldrb.w	r9, [r2]
 8008492:	f1b9 0f00 	cmp.w	r9, #0
 8008496:	f000 8158 	beq.w	800874a <__ssvfiscanf_r+0x2e2>
 800849a:	f817 3009 	ldrb.w	r3, [r7, r9]
 800849e:	f013 0308 	ands.w	r3, r3, #8
 80084a2:	f102 0501 	add.w	r5, r2, #1
 80084a6:	d019      	beq.n	80084dc <__ssvfiscanf_r+0x74>
 80084a8:	6863      	ldr	r3, [r4, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	dd0f      	ble.n	80084ce <__ssvfiscanf_r+0x66>
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	781a      	ldrb	r2, [r3, #0]
 80084b2:	5cba      	ldrb	r2, [r7, r2]
 80084b4:	0712      	lsls	r2, r2, #28
 80084b6:	d401      	bmi.n	80084bc <__ssvfiscanf_r+0x54>
 80084b8:	462a      	mov	r2, r5
 80084ba:	e7e8      	b.n	800848e <__ssvfiscanf_r+0x26>
 80084bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80084be:	3201      	adds	r2, #1
 80084c0:	9245      	str	r2, [sp, #276]	@ 0x114
 80084c2:	6862      	ldr	r2, [r4, #4]
 80084c4:	3301      	adds	r3, #1
 80084c6:	3a01      	subs	r2, #1
 80084c8:	6062      	str	r2, [r4, #4]
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	e7ec      	b.n	80084a8 <__ssvfiscanf_r+0x40>
 80084ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80084d0:	4621      	mov	r1, r4
 80084d2:	4630      	mov	r0, r6
 80084d4:	4798      	blx	r3
 80084d6:	2800      	cmp	r0, #0
 80084d8:	d0e9      	beq.n	80084ae <__ssvfiscanf_r+0x46>
 80084da:	e7ed      	b.n	80084b8 <__ssvfiscanf_r+0x50>
 80084dc:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80084e0:	f040 8085 	bne.w	80085ee <__ssvfiscanf_r+0x186>
 80084e4:	9341      	str	r3, [sp, #260]	@ 0x104
 80084e6:	9343      	str	r3, [sp, #268]	@ 0x10c
 80084e8:	7853      	ldrb	r3, [r2, #1]
 80084ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80084ec:	bf02      	ittt	eq
 80084ee:	2310      	moveq	r3, #16
 80084f0:	1c95      	addeq	r5, r2, #2
 80084f2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80084f4:	220a      	movs	r2, #10
 80084f6:	46aa      	mov	sl, r5
 80084f8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80084fc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008500:	2b09      	cmp	r3, #9
 8008502:	d91e      	bls.n	8008542 <__ssvfiscanf_r+0xda>
 8008504:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8008720 <__ssvfiscanf_r+0x2b8>
 8008508:	2203      	movs	r2, #3
 800850a:	4658      	mov	r0, fp
 800850c:	f7f7 fe60 	bl	80001d0 <memchr>
 8008510:	b138      	cbz	r0, 8008522 <__ssvfiscanf_r+0xba>
 8008512:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008514:	eba0 000b 	sub.w	r0, r0, fp
 8008518:	2301      	movs	r3, #1
 800851a:	4083      	lsls	r3, r0
 800851c:	4313      	orrs	r3, r2
 800851e:	9341      	str	r3, [sp, #260]	@ 0x104
 8008520:	4655      	mov	r5, sl
 8008522:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008526:	2b78      	cmp	r3, #120	@ 0x78
 8008528:	d806      	bhi.n	8008538 <__ssvfiscanf_r+0xd0>
 800852a:	2b57      	cmp	r3, #87	@ 0x57
 800852c:	d810      	bhi.n	8008550 <__ssvfiscanf_r+0xe8>
 800852e:	2b25      	cmp	r3, #37	@ 0x25
 8008530:	d05d      	beq.n	80085ee <__ssvfiscanf_r+0x186>
 8008532:	d857      	bhi.n	80085e4 <__ssvfiscanf_r+0x17c>
 8008534:	2b00      	cmp	r3, #0
 8008536:	d075      	beq.n	8008624 <__ssvfiscanf_r+0x1bc>
 8008538:	2303      	movs	r3, #3
 800853a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800853c:	230a      	movs	r3, #10
 800853e:	9342      	str	r3, [sp, #264]	@ 0x108
 8008540:	e088      	b.n	8008654 <__ssvfiscanf_r+0x1ec>
 8008542:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008544:	fb02 1103 	mla	r1, r2, r3, r1
 8008548:	3930      	subs	r1, #48	@ 0x30
 800854a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800854c:	4655      	mov	r5, sl
 800854e:	e7d2      	b.n	80084f6 <__ssvfiscanf_r+0x8e>
 8008550:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008554:	2a20      	cmp	r2, #32
 8008556:	d8ef      	bhi.n	8008538 <__ssvfiscanf_r+0xd0>
 8008558:	a101      	add	r1, pc, #4	@ (adr r1, 8008560 <__ssvfiscanf_r+0xf8>)
 800855a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800855e:	bf00      	nop
 8008560:	08008633 	.word	0x08008633
 8008564:	08008539 	.word	0x08008539
 8008568:	08008539 	.word	0x08008539
 800856c:	0800868d 	.word	0x0800868d
 8008570:	08008539 	.word	0x08008539
 8008574:	08008539 	.word	0x08008539
 8008578:	08008539 	.word	0x08008539
 800857c:	08008539 	.word	0x08008539
 8008580:	08008539 	.word	0x08008539
 8008584:	08008539 	.word	0x08008539
 8008588:	08008539 	.word	0x08008539
 800858c:	080086a3 	.word	0x080086a3
 8008590:	08008689 	.word	0x08008689
 8008594:	080085eb 	.word	0x080085eb
 8008598:	080085eb 	.word	0x080085eb
 800859c:	080085eb 	.word	0x080085eb
 80085a0:	08008539 	.word	0x08008539
 80085a4:	08008645 	.word	0x08008645
 80085a8:	08008539 	.word	0x08008539
 80085ac:	08008539 	.word	0x08008539
 80085b0:	08008539 	.word	0x08008539
 80085b4:	08008539 	.word	0x08008539
 80085b8:	080086b3 	.word	0x080086b3
 80085bc:	0800864d 	.word	0x0800864d
 80085c0:	0800862b 	.word	0x0800862b
 80085c4:	08008539 	.word	0x08008539
 80085c8:	08008539 	.word	0x08008539
 80085cc:	080086af 	.word	0x080086af
 80085d0:	08008539 	.word	0x08008539
 80085d4:	08008689 	.word	0x08008689
 80085d8:	08008539 	.word	0x08008539
 80085dc:	08008539 	.word	0x08008539
 80085e0:	08008633 	.word	0x08008633
 80085e4:	3b45      	subs	r3, #69	@ 0x45
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d8a6      	bhi.n	8008538 <__ssvfiscanf_r+0xd0>
 80085ea:	2305      	movs	r3, #5
 80085ec:	e031      	b.n	8008652 <__ssvfiscanf_r+0x1ea>
 80085ee:	6863      	ldr	r3, [r4, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	dd0d      	ble.n	8008610 <__ssvfiscanf_r+0x1a8>
 80085f4:	6823      	ldr	r3, [r4, #0]
 80085f6:	781a      	ldrb	r2, [r3, #0]
 80085f8:	454a      	cmp	r2, r9
 80085fa:	f040 80a6 	bne.w	800874a <__ssvfiscanf_r+0x2e2>
 80085fe:	3301      	adds	r3, #1
 8008600:	6862      	ldr	r2, [r4, #4]
 8008602:	6023      	str	r3, [r4, #0]
 8008604:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008606:	3a01      	subs	r2, #1
 8008608:	3301      	adds	r3, #1
 800860a:	6062      	str	r2, [r4, #4]
 800860c:	9345      	str	r3, [sp, #276]	@ 0x114
 800860e:	e753      	b.n	80084b8 <__ssvfiscanf_r+0x50>
 8008610:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008612:	4621      	mov	r1, r4
 8008614:	4630      	mov	r0, r6
 8008616:	4798      	blx	r3
 8008618:	2800      	cmp	r0, #0
 800861a:	d0eb      	beq.n	80085f4 <__ssvfiscanf_r+0x18c>
 800861c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800861e:	2800      	cmp	r0, #0
 8008620:	f040 808b 	bne.w	800873a <__ssvfiscanf_r+0x2d2>
 8008624:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008628:	e08b      	b.n	8008742 <__ssvfiscanf_r+0x2da>
 800862a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800862c:	f042 0220 	orr.w	r2, r2, #32
 8008630:	9241      	str	r2, [sp, #260]	@ 0x104
 8008632:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008634:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008638:	9241      	str	r2, [sp, #260]	@ 0x104
 800863a:	2210      	movs	r2, #16
 800863c:	2b6e      	cmp	r3, #110	@ 0x6e
 800863e:	9242      	str	r2, [sp, #264]	@ 0x108
 8008640:	d902      	bls.n	8008648 <__ssvfiscanf_r+0x1e0>
 8008642:	e005      	b.n	8008650 <__ssvfiscanf_r+0x1e8>
 8008644:	2300      	movs	r3, #0
 8008646:	9342      	str	r3, [sp, #264]	@ 0x108
 8008648:	2303      	movs	r3, #3
 800864a:	e002      	b.n	8008652 <__ssvfiscanf_r+0x1ea>
 800864c:	2308      	movs	r3, #8
 800864e:	9342      	str	r3, [sp, #264]	@ 0x108
 8008650:	2304      	movs	r3, #4
 8008652:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008654:	6863      	ldr	r3, [r4, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	dd39      	ble.n	80086ce <__ssvfiscanf_r+0x266>
 800865a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800865c:	0659      	lsls	r1, r3, #25
 800865e:	d404      	bmi.n	800866a <__ssvfiscanf_r+0x202>
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	781a      	ldrb	r2, [r3, #0]
 8008664:	5cba      	ldrb	r2, [r7, r2]
 8008666:	0712      	lsls	r2, r2, #28
 8008668:	d438      	bmi.n	80086dc <__ssvfiscanf_r+0x274>
 800866a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800866c:	2b02      	cmp	r3, #2
 800866e:	dc47      	bgt.n	8008700 <__ssvfiscanf_r+0x298>
 8008670:	466b      	mov	r3, sp
 8008672:	4622      	mov	r2, r4
 8008674:	a941      	add	r1, sp, #260	@ 0x104
 8008676:	4630      	mov	r0, r6
 8008678:	f000 f928 	bl	80088cc <_scanf_chars>
 800867c:	2801      	cmp	r0, #1
 800867e:	d064      	beq.n	800874a <__ssvfiscanf_r+0x2e2>
 8008680:	2802      	cmp	r0, #2
 8008682:	f47f af19 	bne.w	80084b8 <__ssvfiscanf_r+0x50>
 8008686:	e7c9      	b.n	800861c <__ssvfiscanf_r+0x1b4>
 8008688:	220a      	movs	r2, #10
 800868a:	e7d7      	b.n	800863c <__ssvfiscanf_r+0x1d4>
 800868c:	4629      	mov	r1, r5
 800868e:	4640      	mov	r0, r8
 8008690:	f000 fa6a 	bl	8008b68 <__sccl>
 8008694:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800869a:	9341      	str	r3, [sp, #260]	@ 0x104
 800869c:	4605      	mov	r5, r0
 800869e:	2301      	movs	r3, #1
 80086a0:	e7d7      	b.n	8008652 <__ssvfiscanf_r+0x1ea>
 80086a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80086a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086a8:	9341      	str	r3, [sp, #260]	@ 0x104
 80086aa:	2300      	movs	r3, #0
 80086ac:	e7d1      	b.n	8008652 <__ssvfiscanf_r+0x1ea>
 80086ae:	2302      	movs	r3, #2
 80086b0:	e7cf      	b.n	8008652 <__ssvfiscanf_r+0x1ea>
 80086b2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80086b4:	06c3      	lsls	r3, r0, #27
 80086b6:	f53f aeff 	bmi.w	80084b8 <__ssvfiscanf_r+0x50>
 80086ba:	9b00      	ldr	r3, [sp, #0]
 80086bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80086be:	1d19      	adds	r1, r3, #4
 80086c0:	9100      	str	r1, [sp, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	07c0      	lsls	r0, r0, #31
 80086c6:	bf4c      	ite	mi
 80086c8:	801a      	strhmi	r2, [r3, #0]
 80086ca:	601a      	strpl	r2, [r3, #0]
 80086cc:	e6f4      	b.n	80084b8 <__ssvfiscanf_r+0x50>
 80086ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80086d0:	4621      	mov	r1, r4
 80086d2:	4630      	mov	r0, r6
 80086d4:	4798      	blx	r3
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d0bf      	beq.n	800865a <__ssvfiscanf_r+0x1f2>
 80086da:	e79f      	b.n	800861c <__ssvfiscanf_r+0x1b4>
 80086dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80086de:	3201      	adds	r2, #1
 80086e0:	9245      	str	r2, [sp, #276]	@ 0x114
 80086e2:	6862      	ldr	r2, [r4, #4]
 80086e4:	3a01      	subs	r2, #1
 80086e6:	2a00      	cmp	r2, #0
 80086e8:	6062      	str	r2, [r4, #4]
 80086ea:	dd02      	ble.n	80086f2 <__ssvfiscanf_r+0x28a>
 80086ec:	3301      	adds	r3, #1
 80086ee:	6023      	str	r3, [r4, #0]
 80086f0:	e7b6      	b.n	8008660 <__ssvfiscanf_r+0x1f8>
 80086f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80086f4:	4621      	mov	r1, r4
 80086f6:	4630      	mov	r0, r6
 80086f8:	4798      	blx	r3
 80086fa:	2800      	cmp	r0, #0
 80086fc:	d0b0      	beq.n	8008660 <__ssvfiscanf_r+0x1f8>
 80086fe:	e78d      	b.n	800861c <__ssvfiscanf_r+0x1b4>
 8008700:	2b04      	cmp	r3, #4
 8008702:	dc0f      	bgt.n	8008724 <__ssvfiscanf_r+0x2bc>
 8008704:	466b      	mov	r3, sp
 8008706:	4622      	mov	r2, r4
 8008708:	a941      	add	r1, sp, #260	@ 0x104
 800870a:	4630      	mov	r0, r6
 800870c:	f000 f938 	bl	8008980 <_scanf_i>
 8008710:	e7b4      	b.n	800867c <__ssvfiscanf_r+0x214>
 8008712:	bf00      	nop
 8008714:	080083b5 	.word	0x080083b5
 8008718:	0800842f 	.word	0x0800842f
 800871c:	0800a321 	.word	0x0800a321
 8008720:	0800a210 	.word	0x0800a210
 8008724:	4b0a      	ldr	r3, [pc, #40]	@ (8008750 <__ssvfiscanf_r+0x2e8>)
 8008726:	2b00      	cmp	r3, #0
 8008728:	f43f aec6 	beq.w	80084b8 <__ssvfiscanf_r+0x50>
 800872c:	466b      	mov	r3, sp
 800872e:	4622      	mov	r2, r4
 8008730:	a941      	add	r1, sp, #260	@ 0x104
 8008732:	4630      	mov	r0, r6
 8008734:	f7fc ffe2 	bl	80056fc <_scanf_float>
 8008738:	e7a0      	b.n	800867c <__ssvfiscanf_r+0x214>
 800873a:	89a3      	ldrh	r3, [r4, #12]
 800873c:	065b      	lsls	r3, r3, #25
 800873e:	f53f af71 	bmi.w	8008624 <__ssvfiscanf_r+0x1bc>
 8008742:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8008746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800874a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800874c:	e7f9      	b.n	8008742 <__ssvfiscanf_r+0x2da>
 800874e:	bf00      	nop
 8008750:	080056fd 	.word	0x080056fd

08008754 <malloc>:
 8008754:	4b02      	ldr	r3, [pc, #8]	@ (8008760 <malloc+0xc>)
 8008756:	4601      	mov	r1, r0
 8008758:	6818      	ldr	r0, [r3, #0]
 800875a:	f000 b825 	b.w	80087a8 <_malloc_r>
 800875e:	bf00      	nop
 8008760:	20000190 	.word	0x20000190

08008764 <sbrk_aligned>:
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	4e0f      	ldr	r6, [pc, #60]	@ (80087a4 <sbrk_aligned+0x40>)
 8008768:	460c      	mov	r4, r1
 800876a:	6831      	ldr	r1, [r6, #0]
 800876c:	4605      	mov	r5, r0
 800876e:	b911      	cbnz	r1, 8008776 <sbrk_aligned+0x12>
 8008770:	f001 f896 	bl	80098a0 <_sbrk_r>
 8008774:	6030      	str	r0, [r6, #0]
 8008776:	4621      	mov	r1, r4
 8008778:	4628      	mov	r0, r5
 800877a:	f001 f891 	bl	80098a0 <_sbrk_r>
 800877e:	1c43      	adds	r3, r0, #1
 8008780:	d103      	bne.n	800878a <sbrk_aligned+0x26>
 8008782:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008786:	4620      	mov	r0, r4
 8008788:	bd70      	pop	{r4, r5, r6, pc}
 800878a:	1cc4      	adds	r4, r0, #3
 800878c:	f024 0403 	bic.w	r4, r4, #3
 8008790:	42a0      	cmp	r0, r4
 8008792:	d0f8      	beq.n	8008786 <sbrk_aligned+0x22>
 8008794:	1a21      	subs	r1, r4, r0
 8008796:	4628      	mov	r0, r5
 8008798:	f001 f882 	bl	80098a0 <_sbrk_r>
 800879c:	3001      	adds	r0, #1
 800879e:	d1f2      	bne.n	8008786 <sbrk_aligned+0x22>
 80087a0:	e7ef      	b.n	8008782 <sbrk_aligned+0x1e>
 80087a2:	bf00      	nop
 80087a4:	20000aa8 	.word	0x20000aa8

080087a8 <_malloc_r>:
 80087a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087ac:	1ccd      	adds	r5, r1, #3
 80087ae:	f025 0503 	bic.w	r5, r5, #3
 80087b2:	3508      	adds	r5, #8
 80087b4:	2d0c      	cmp	r5, #12
 80087b6:	bf38      	it	cc
 80087b8:	250c      	movcc	r5, #12
 80087ba:	2d00      	cmp	r5, #0
 80087bc:	4606      	mov	r6, r0
 80087be:	db01      	blt.n	80087c4 <_malloc_r+0x1c>
 80087c0:	42a9      	cmp	r1, r5
 80087c2:	d904      	bls.n	80087ce <_malloc_r+0x26>
 80087c4:	230c      	movs	r3, #12
 80087c6:	6033      	str	r3, [r6, #0]
 80087c8:	2000      	movs	r0, #0
 80087ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80088a4 <_malloc_r+0xfc>
 80087d2:	f000 faaf 	bl	8008d34 <__malloc_lock>
 80087d6:	f8d8 3000 	ldr.w	r3, [r8]
 80087da:	461c      	mov	r4, r3
 80087dc:	bb44      	cbnz	r4, 8008830 <_malloc_r+0x88>
 80087de:	4629      	mov	r1, r5
 80087e0:	4630      	mov	r0, r6
 80087e2:	f7ff ffbf 	bl	8008764 <sbrk_aligned>
 80087e6:	1c43      	adds	r3, r0, #1
 80087e8:	4604      	mov	r4, r0
 80087ea:	d158      	bne.n	800889e <_malloc_r+0xf6>
 80087ec:	f8d8 4000 	ldr.w	r4, [r8]
 80087f0:	4627      	mov	r7, r4
 80087f2:	2f00      	cmp	r7, #0
 80087f4:	d143      	bne.n	800887e <_malloc_r+0xd6>
 80087f6:	2c00      	cmp	r4, #0
 80087f8:	d04b      	beq.n	8008892 <_malloc_r+0xea>
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	4639      	mov	r1, r7
 80087fe:	4630      	mov	r0, r6
 8008800:	eb04 0903 	add.w	r9, r4, r3
 8008804:	f001 f84c 	bl	80098a0 <_sbrk_r>
 8008808:	4581      	cmp	r9, r0
 800880a:	d142      	bne.n	8008892 <_malloc_r+0xea>
 800880c:	6821      	ldr	r1, [r4, #0]
 800880e:	1a6d      	subs	r5, r5, r1
 8008810:	4629      	mov	r1, r5
 8008812:	4630      	mov	r0, r6
 8008814:	f7ff ffa6 	bl	8008764 <sbrk_aligned>
 8008818:	3001      	adds	r0, #1
 800881a:	d03a      	beq.n	8008892 <_malloc_r+0xea>
 800881c:	6823      	ldr	r3, [r4, #0]
 800881e:	442b      	add	r3, r5
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	f8d8 3000 	ldr.w	r3, [r8]
 8008826:	685a      	ldr	r2, [r3, #4]
 8008828:	bb62      	cbnz	r2, 8008884 <_malloc_r+0xdc>
 800882a:	f8c8 7000 	str.w	r7, [r8]
 800882e:	e00f      	b.n	8008850 <_malloc_r+0xa8>
 8008830:	6822      	ldr	r2, [r4, #0]
 8008832:	1b52      	subs	r2, r2, r5
 8008834:	d420      	bmi.n	8008878 <_malloc_r+0xd0>
 8008836:	2a0b      	cmp	r2, #11
 8008838:	d917      	bls.n	800886a <_malloc_r+0xc2>
 800883a:	1961      	adds	r1, r4, r5
 800883c:	42a3      	cmp	r3, r4
 800883e:	6025      	str	r5, [r4, #0]
 8008840:	bf18      	it	ne
 8008842:	6059      	strne	r1, [r3, #4]
 8008844:	6863      	ldr	r3, [r4, #4]
 8008846:	bf08      	it	eq
 8008848:	f8c8 1000 	streq.w	r1, [r8]
 800884c:	5162      	str	r2, [r4, r5]
 800884e:	604b      	str	r3, [r1, #4]
 8008850:	4630      	mov	r0, r6
 8008852:	f000 fa75 	bl	8008d40 <__malloc_unlock>
 8008856:	f104 000b 	add.w	r0, r4, #11
 800885a:	1d23      	adds	r3, r4, #4
 800885c:	f020 0007 	bic.w	r0, r0, #7
 8008860:	1ac2      	subs	r2, r0, r3
 8008862:	bf1c      	itt	ne
 8008864:	1a1b      	subne	r3, r3, r0
 8008866:	50a3      	strne	r3, [r4, r2]
 8008868:	e7af      	b.n	80087ca <_malloc_r+0x22>
 800886a:	6862      	ldr	r2, [r4, #4]
 800886c:	42a3      	cmp	r3, r4
 800886e:	bf0c      	ite	eq
 8008870:	f8c8 2000 	streq.w	r2, [r8]
 8008874:	605a      	strne	r2, [r3, #4]
 8008876:	e7eb      	b.n	8008850 <_malloc_r+0xa8>
 8008878:	4623      	mov	r3, r4
 800887a:	6864      	ldr	r4, [r4, #4]
 800887c:	e7ae      	b.n	80087dc <_malloc_r+0x34>
 800887e:	463c      	mov	r4, r7
 8008880:	687f      	ldr	r7, [r7, #4]
 8008882:	e7b6      	b.n	80087f2 <_malloc_r+0x4a>
 8008884:	461a      	mov	r2, r3
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	42a3      	cmp	r3, r4
 800888a:	d1fb      	bne.n	8008884 <_malloc_r+0xdc>
 800888c:	2300      	movs	r3, #0
 800888e:	6053      	str	r3, [r2, #4]
 8008890:	e7de      	b.n	8008850 <_malloc_r+0xa8>
 8008892:	230c      	movs	r3, #12
 8008894:	6033      	str	r3, [r6, #0]
 8008896:	4630      	mov	r0, r6
 8008898:	f000 fa52 	bl	8008d40 <__malloc_unlock>
 800889c:	e794      	b.n	80087c8 <_malloc_r+0x20>
 800889e:	6005      	str	r5, [r0, #0]
 80088a0:	e7d6      	b.n	8008850 <_malloc_r+0xa8>
 80088a2:	bf00      	nop
 80088a4:	20000aac 	.word	0x20000aac

080088a8 <__ascii_mbtowc>:
 80088a8:	b082      	sub	sp, #8
 80088aa:	b901      	cbnz	r1, 80088ae <__ascii_mbtowc+0x6>
 80088ac:	a901      	add	r1, sp, #4
 80088ae:	b142      	cbz	r2, 80088c2 <__ascii_mbtowc+0x1a>
 80088b0:	b14b      	cbz	r3, 80088c6 <__ascii_mbtowc+0x1e>
 80088b2:	7813      	ldrb	r3, [r2, #0]
 80088b4:	600b      	str	r3, [r1, #0]
 80088b6:	7812      	ldrb	r2, [r2, #0]
 80088b8:	1e10      	subs	r0, r2, #0
 80088ba:	bf18      	it	ne
 80088bc:	2001      	movne	r0, #1
 80088be:	b002      	add	sp, #8
 80088c0:	4770      	bx	lr
 80088c2:	4610      	mov	r0, r2
 80088c4:	e7fb      	b.n	80088be <__ascii_mbtowc+0x16>
 80088c6:	f06f 0001 	mvn.w	r0, #1
 80088ca:	e7f8      	b.n	80088be <__ascii_mbtowc+0x16>

080088cc <_scanf_chars>:
 80088cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d0:	4615      	mov	r5, r2
 80088d2:	688a      	ldr	r2, [r1, #8]
 80088d4:	4680      	mov	r8, r0
 80088d6:	460c      	mov	r4, r1
 80088d8:	b932      	cbnz	r2, 80088e8 <_scanf_chars+0x1c>
 80088da:	698a      	ldr	r2, [r1, #24]
 80088dc:	2a00      	cmp	r2, #0
 80088de:	bf14      	ite	ne
 80088e0:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 80088e4:	2201      	moveq	r2, #1
 80088e6:	608a      	str	r2, [r1, #8]
 80088e8:	6822      	ldr	r2, [r4, #0]
 80088ea:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800897c <_scanf_chars+0xb0>
 80088ee:	06d1      	lsls	r1, r2, #27
 80088f0:	bf5f      	itttt	pl
 80088f2:	681a      	ldrpl	r2, [r3, #0]
 80088f4:	1d11      	addpl	r1, r2, #4
 80088f6:	6019      	strpl	r1, [r3, #0]
 80088f8:	6816      	ldrpl	r6, [r2, #0]
 80088fa:	2700      	movs	r7, #0
 80088fc:	69a0      	ldr	r0, [r4, #24]
 80088fe:	b188      	cbz	r0, 8008924 <_scanf_chars+0x58>
 8008900:	2801      	cmp	r0, #1
 8008902:	d107      	bne.n	8008914 <_scanf_chars+0x48>
 8008904:	682b      	ldr	r3, [r5, #0]
 8008906:	781a      	ldrb	r2, [r3, #0]
 8008908:	6963      	ldr	r3, [r4, #20]
 800890a:	5c9b      	ldrb	r3, [r3, r2]
 800890c:	b953      	cbnz	r3, 8008924 <_scanf_chars+0x58>
 800890e:	2f00      	cmp	r7, #0
 8008910:	d031      	beq.n	8008976 <_scanf_chars+0xaa>
 8008912:	e022      	b.n	800895a <_scanf_chars+0x8e>
 8008914:	2802      	cmp	r0, #2
 8008916:	d120      	bne.n	800895a <_scanf_chars+0x8e>
 8008918:	682b      	ldr	r3, [r5, #0]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008920:	071b      	lsls	r3, r3, #28
 8008922:	d41a      	bmi.n	800895a <_scanf_chars+0x8e>
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	06da      	lsls	r2, r3, #27
 8008928:	bf5e      	ittt	pl
 800892a:	682b      	ldrpl	r3, [r5, #0]
 800892c:	781b      	ldrbpl	r3, [r3, #0]
 800892e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008932:	682a      	ldr	r2, [r5, #0]
 8008934:	686b      	ldr	r3, [r5, #4]
 8008936:	3201      	adds	r2, #1
 8008938:	602a      	str	r2, [r5, #0]
 800893a:	68a2      	ldr	r2, [r4, #8]
 800893c:	3b01      	subs	r3, #1
 800893e:	3a01      	subs	r2, #1
 8008940:	606b      	str	r3, [r5, #4]
 8008942:	3701      	adds	r7, #1
 8008944:	60a2      	str	r2, [r4, #8]
 8008946:	b142      	cbz	r2, 800895a <_scanf_chars+0x8e>
 8008948:	2b00      	cmp	r3, #0
 800894a:	dcd7      	bgt.n	80088fc <_scanf_chars+0x30>
 800894c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008950:	4629      	mov	r1, r5
 8008952:	4640      	mov	r0, r8
 8008954:	4798      	blx	r3
 8008956:	2800      	cmp	r0, #0
 8008958:	d0d0      	beq.n	80088fc <_scanf_chars+0x30>
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	f013 0310 	ands.w	r3, r3, #16
 8008960:	d105      	bne.n	800896e <_scanf_chars+0xa2>
 8008962:	68e2      	ldr	r2, [r4, #12]
 8008964:	3201      	adds	r2, #1
 8008966:	60e2      	str	r2, [r4, #12]
 8008968:	69a2      	ldr	r2, [r4, #24]
 800896a:	b102      	cbz	r2, 800896e <_scanf_chars+0xa2>
 800896c:	7033      	strb	r3, [r6, #0]
 800896e:	6923      	ldr	r3, [r4, #16]
 8008970:	443b      	add	r3, r7
 8008972:	6123      	str	r3, [r4, #16]
 8008974:	2000      	movs	r0, #0
 8008976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800897a:	bf00      	nop
 800897c:	0800a321 	.word	0x0800a321

08008980 <_scanf_i>:
 8008980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	4698      	mov	r8, r3
 8008986:	4b74      	ldr	r3, [pc, #464]	@ (8008b58 <_scanf_i+0x1d8>)
 8008988:	460c      	mov	r4, r1
 800898a:	4682      	mov	sl, r0
 800898c:	4616      	mov	r6, r2
 800898e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008992:	b087      	sub	sp, #28
 8008994:	ab03      	add	r3, sp, #12
 8008996:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800899a:	4b70      	ldr	r3, [pc, #448]	@ (8008b5c <_scanf_i+0x1dc>)
 800899c:	69a1      	ldr	r1, [r4, #24]
 800899e:	4a70      	ldr	r2, [pc, #448]	@ (8008b60 <_scanf_i+0x1e0>)
 80089a0:	2903      	cmp	r1, #3
 80089a2:	bf08      	it	eq
 80089a4:	461a      	moveq	r2, r3
 80089a6:	68a3      	ldr	r3, [r4, #8]
 80089a8:	9201      	str	r2, [sp, #4]
 80089aa:	1e5a      	subs	r2, r3, #1
 80089ac:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80089b0:	bf88      	it	hi
 80089b2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80089b6:	4627      	mov	r7, r4
 80089b8:	bf82      	ittt	hi
 80089ba:	eb03 0905 	addhi.w	r9, r3, r5
 80089be:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80089c2:	60a3      	strhi	r3, [r4, #8]
 80089c4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80089c8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80089cc:	bf98      	it	ls
 80089ce:	f04f 0900 	movls.w	r9, #0
 80089d2:	6023      	str	r3, [r4, #0]
 80089d4:	463d      	mov	r5, r7
 80089d6:	f04f 0b00 	mov.w	fp, #0
 80089da:	6831      	ldr	r1, [r6, #0]
 80089dc:	ab03      	add	r3, sp, #12
 80089de:	7809      	ldrb	r1, [r1, #0]
 80089e0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80089e4:	2202      	movs	r2, #2
 80089e6:	f7f7 fbf3 	bl	80001d0 <memchr>
 80089ea:	b328      	cbz	r0, 8008a38 <_scanf_i+0xb8>
 80089ec:	f1bb 0f01 	cmp.w	fp, #1
 80089f0:	d159      	bne.n	8008aa6 <_scanf_i+0x126>
 80089f2:	6862      	ldr	r2, [r4, #4]
 80089f4:	b92a      	cbnz	r2, 8008a02 <_scanf_i+0x82>
 80089f6:	6822      	ldr	r2, [r4, #0]
 80089f8:	2108      	movs	r1, #8
 80089fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089fe:	6061      	str	r1, [r4, #4]
 8008a00:	6022      	str	r2, [r4, #0]
 8008a02:	6822      	ldr	r2, [r4, #0]
 8008a04:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008a08:	6022      	str	r2, [r4, #0]
 8008a0a:	68a2      	ldr	r2, [r4, #8]
 8008a0c:	1e51      	subs	r1, r2, #1
 8008a0e:	60a1      	str	r1, [r4, #8]
 8008a10:	b192      	cbz	r2, 8008a38 <_scanf_i+0xb8>
 8008a12:	6832      	ldr	r2, [r6, #0]
 8008a14:	1c51      	adds	r1, r2, #1
 8008a16:	6031      	str	r1, [r6, #0]
 8008a18:	7812      	ldrb	r2, [r2, #0]
 8008a1a:	f805 2b01 	strb.w	r2, [r5], #1
 8008a1e:	6872      	ldr	r2, [r6, #4]
 8008a20:	3a01      	subs	r2, #1
 8008a22:	2a00      	cmp	r2, #0
 8008a24:	6072      	str	r2, [r6, #4]
 8008a26:	dc07      	bgt.n	8008a38 <_scanf_i+0xb8>
 8008a28:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	4650      	mov	r0, sl
 8008a30:	4790      	blx	r2
 8008a32:	2800      	cmp	r0, #0
 8008a34:	f040 8085 	bne.w	8008b42 <_scanf_i+0x1c2>
 8008a38:	f10b 0b01 	add.w	fp, fp, #1
 8008a3c:	f1bb 0f03 	cmp.w	fp, #3
 8008a40:	d1cb      	bne.n	80089da <_scanf_i+0x5a>
 8008a42:	6863      	ldr	r3, [r4, #4]
 8008a44:	b90b      	cbnz	r3, 8008a4a <_scanf_i+0xca>
 8008a46:	230a      	movs	r3, #10
 8008a48:	6063      	str	r3, [r4, #4]
 8008a4a:	6863      	ldr	r3, [r4, #4]
 8008a4c:	4945      	ldr	r1, [pc, #276]	@ (8008b64 <_scanf_i+0x1e4>)
 8008a4e:	6960      	ldr	r0, [r4, #20]
 8008a50:	1ac9      	subs	r1, r1, r3
 8008a52:	f000 f889 	bl	8008b68 <__sccl>
 8008a56:	f04f 0b00 	mov.w	fp, #0
 8008a5a:	68a3      	ldr	r3, [r4, #8]
 8008a5c:	6822      	ldr	r2, [r4, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d03d      	beq.n	8008ade <_scanf_i+0x15e>
 8008a62:	6831      	ldr	r1, [r6, #0]
 8008a64:	6960      	ldr	r0, [r4, #20]
 8008a66:	f891 c000 	ldrb.w	ip, [r1]
 8008a6a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	d035      	beq.n	8008ade <_scanf_i+0x15e>
 8008a72:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008a76:	d124      	bne.n	8008ac2 <_scanf_i+0x142>
 8008a78:	0510      	lsls	r0, r2, #20
 8008a7a:	d522      	bpl.n	8008ac2 <_scanf_i+0x142>
 8008a7c:	f10b 0b01 	add.w	fp, fp, #1
 8008a80:	f1b9 0f00 	cmp.w	r9, #0
 8008a84:	d003      	beq.n	8008a8e <_scanf_i+0x10e>
 8008a86:	3301      	adds	r3, #1
 8008a88:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8008a8c:	60a3      	str	r3, [r4, #8]
 8008a8e:	6873      	ldr	r3, [r6, #4]
 8008a90:	3b01      	subs	r3, #1
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	6073      	str	r3, [r6, #4]
 8008a96:	dd1b      	ble.n	8008ad0 <_scanf_i+0x150>
 8008a98:	6833      	ldr	r3, [r6, #0]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	6033      	str	r3, [r6, #0]
 8008a9e:	68a3      	ldr	r3, [r4, #8]
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	60a3      	str	r3, [r4, #8]
 8008aa4:	e7d9      	b.n	8008a5a <_scanf_i+0xda>
 8008aa6:	f1bb 0f02 	cmp.w	fp, #2
 8008aaa:	d1ae      	bne.n	8008a0a <_scanf_i+0x8a>
 8008aac:	6822      	ldr	r2, [r4, #0]
 8008aae:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008ab2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008ab6:	d1c4      	bne.n	8008a42 <_scanf_i+0xc2>
 8008ab8:	2110      	movs	r1, #16
 8008aba:	6061      	str	r1, [r4, #4]
 8008abc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ac0:	e7a2      	b.n	8008a08 <_scanf_i+0x88>
 8008ac2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008ac6:	6022      	str	r2, [r4, #0]
 8008ac8:	780b      	ldrb	r3, [r1, #0]
 8008aca:	f805 3b01 	strb.w	r3, [r5], #1
 8008ace:	e7de      	b.n	8008a8e <_scanf_i+0x10e>
 8008ad0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008ad4:	4631      	mov	r1, r6
 8008ad6:	4650      	mov	r0, sl
 8008ad8:	4798      	blx	r3
 8008ada:	2800      	cmp	r0, #0
 8008adc:	d0df      	beq.n	8008a9e <_scanf_i+0x11e>
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	05d9      	lsls	r1, r3, #23
 8008ae2:	d50d      	bpl.n	8008b00 <_scanf_i+0x180>
 8008ae4:	42bd      	cmp	r5, r7
 8008ae6:	d909      	bls.n	8008afc <_scanf_i+0x17c>
 8008ae8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008aec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008af0:	4632      	mov	r2, r6
 8008af2:	4650      	mov	r0, sl
 8008af4:	4798      	blx	r3
 8008af6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8008afa:	464d      	mov	r5, r9
 8008afc:	42bd      	cmp	r5, r7
 8008afe:	d028      	beq.n	8008b52 <_scanf_i+0x1d2>
 8008b00:	6822      	ldr	r2, [r4, #0]
 8008b02:	f012 0210 	ands.w	r2, r2, #16
 8008b06:	d113      	bne.n	8008b30 <_scanf_i+0x1b0>
 8008b08:	702a      	strb	r2, [r5, #0]
 8008b0a:	6863      	ldr	r3, [r4, #4]
 8008b0c:	9e01      	ldr	r6, [sp, #4]
 8008b0e:	4639      	mov	r1, r7
 8008b10:	4650      	mov	r0, sl
 8008b12:	47b0      	blx	r6
 8008b14:	f8d8 3000 	ldr.w	r3, [r8]
 8008b18:	6821      	ldr	r1, [r4, #0]
 8008b1a:	1d1a      	adds	r2, r3, #4
 8008b1c:	f8c8 2000 	str.w	r2, [r8]
 8008b20:	f011 0f20 	tst.w	r1, #32
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	d00f      	beq.n	8008b48 <_scanf_i+0x1c8>
 8008b28:	6018      	str	r0, [r3, #0]
 8008b2a:	68e3      	ldr	r3, [r4, #12]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	60e3      	str	r3, [r4, #12]
 8008b30:	6923      	ldr	r3, [r4, #16]
 8008b32:	1bed      	subs	r5, r5, r7
 8008b34:	445d      	add	r5, fp
 8008b36:	442b      	add	r3, r5
 8008b38:	6123      	str	r3, [r4, #16]
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	b007      	add	sp, #28
 8008b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b42:	f04f 0b00 	mov.w	fp, #0
 8008b46:	e7ca      	b.n	8008ade <_scanf_i+0x15e>
 8008b48:	07ca      	lsls	r2, r1, #31
 8008b4a:	bf4c      	ite	mi
 8008b4c:	8018      	strhmi	r0, [r3, #0]
 8008b4e:	6018      	strpl	r0, [r3, #0]
 8008b50:	e7eb      	b.n	8008b2a <_scanf_i+0x1aa>
 8008b52:	2001      	movs	r0, #1
 8008b54:	e7f2      	b.n	8008b3c <_scanf_i+0x1bc>
 8008b56:	bf00      	nop
 8008b58:	0800a098 	.word	0x0800a098
 8008b5c:	08006b59 	.word	0x08006b59
 8008b60:	0800984d 	.word	0x0800984d
 8008b64:	0800a22b 	.word	0x0800a22b

08008b68 <__sccl>:
 8008b68:	b570      	push	{r4, r5, r6, lr}
 8008b6a:	780b      	ldrb	r3, [r1, #0]
 8008b6c:	4604      	mov	r4, r0
 8008b6e:	2b5e      	cmp	r3, #94	@ 0x5e
 8008b70:	bf0b      	itete	eq
 8008b72:	784b      	ldrbeq	r3, [r1, #1]
 8008b74:	1c4a      	addne	r2, r1, #1
 8008b76:	1c8a      	addeq	r2, r1, #2
 8008b78:	2100      	movne	r1, #0
 8008b7a:	bf08      	it	eq
 8008b7c:	2101      	moveq	r1, #1
 8008b7e:	3801      	subs	r0, #1
 8008b80:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008b84:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008b88:	42a8      	cmp	r0, r5
 8008b8a:	d1fb      	bne.n	8008b84 <__sccl+0x1c>
 8008b8c:	b90b      	cbnz	r3, 8008b92 <__sccl+0x2a>
 8008b8e:	1e50      	subs	r0, r2, #1
 8008b90:	bd70      	pop	{r4, r5, r6, pc}
 8008b92:	f081 0101 	eor.w	r1, r1, #1
 8008b96:	54e1      	strb	r1, [r4, r3]
 8008b98:	4610      	mov	r0, r2
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008ba0:	2d2d      	cmp	r5, #45	@ 0x2d
 8008ba2:	d005      	beq.n	8008bb0 <__sccl+0x48>
 8008ba4:	2d5d      	cmp	r5, #93	@ 0x5d
 8008ba6:	d016      	beq.n	8008bd6 <__sccl+0x6e>
 8008ba8:	2d00      	cmp	r5, #0
 8008baa:	d0f1      	beq.n	8008b90 <__sccl+0x28>
 8008bac:	462b      	mov	r3, r5
 8008bae:	e7f2      	b.n	8008b96 <__sccl+0x2e>
 8008bb0:	7846      	ldrb	r6, [r0, #1]
 8008bb2:	2e5d      	cmp	r6, #93	@ 0x5d
 8008bb4:	d0fa      	beq.n	8008bac <__sccl+0x44>
 8008bb6:	42b3      	cmp	r3, r6
 8008bb8:	dcf8      	bgt.n	8008bac <__sccl+0x44>
 8008bba:	3002      	adds	r0, #2
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	3201      	adds	r2, #1
 8008bc0:	4296      	cmp	r6, r2
 8008bc2:	54a1      	strb	r1, [r4, r2]
 8008bc4:	dcfb      	bgt.n	8008bbe <__sccl+0x56>
 8008bc6:	1af2      	subs	r2, r6, r3
 8008bc8:	3a01      	subs	r2, #1
 8008bca:	1c5d      	adds	r5, r3, #1
 8008bcc:	42b3      	cmp	r3, r6
 8008bce:	bfa8      	it	ge
 8008bd0:	2200      	movge	r2, #0
 8008bd2:	18ab      	adds	r3, r5, r2
 8008bd4:	e7e1      	b.n	8008b9a <__sccl+0x32>
 8008bd6:	4610      	mov	r0, r2
 8008bd8:	e7da      	b.n	8008b90 <__sccl+0x28>
	...

08008bdc <__sflush_r>:
 8008bdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be4:	0716      	lsls	r6, r2, #28
 8008be6:	4605      	mov	r5, r0
 8008be8:	460c      	mov	r4, r1
 8008bea:	d454      	bmi.n	8008c96 <__sflush_r+0xba>
 8008bec:	684b      	ldr	r3, [r1, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	dc02      	bgt.n	8008bf8 <__sflush_r+0x1c>
 8008bf2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	dd48      	ble.n	8008c8a <__sflush_r+0xae>
 8008bf8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bfa:	2e00      	cmp	r6, #0
 8008bfc:	d045      	beq.n	8008c8a <__sflush_r+0xae>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c04:	682f      	ldr	r7, [r5, #0]
 8008c06:	6a21      	ldr	r1, [r4, #32]
 8008c08:	602b      	str	r3, [r5, #0]
 8008c0a:	d030      	beq.n	8008c6e <__sflush_r+0x92>
 8008c0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c0e:	89a3      	ldrh	r3, [r4, #12]
 8008c10:	0759      	lsls	r1, r3, #29
 8008c12:	d505      	bpl.n	8008c20 <__sflush_r+0x44>
 8008c14:	6863      	ldr	r3, [r4, #4]
 8008c16:	1ad2      	subs	r2, r2, r3
 8008c18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c1a:	b10b      	cbz	r3, 8008c20 <__sflush_r+0x44>
 8008c1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c1e:	1ad2      	subs	r2, r2, r3
 8008c20:	2300      	movs	r3, #0
 8008c22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c24:	6a21      	ldr	r1, [r4, #32]
 8008c26:	4628      	mov	r0, r5
 8008c28:	47b0      	blx	r6
 8008c2a:	1c43      	adds	r3, r0, #1
 8008c2c:	89a3      	ldrh	r3, [r4, #12]
 8008c2e:	d106      	bne.n	8008c3e <__sflush_r+0x62>
 8008c30:	6829      	ldr	r1, [r5, #0]
 8008c32:	291d      	cmp	r1, #29
 8008c34:	d82b      	bhi.n	8008c8e <__sflush_r+0xb2>
 8008c36:	4a2a      	ldr	r2, [pc, #168]	@ (8008ce0 <__sflush_r+0x104>)
 8008c38:	40ca      	lsrs	r2, r1
 8008c3a:	07d6      	lsls	r6, r2, #31
 8008c3c:	d527      	bpl.n	8008c8e <__sflush_r+0xb2>
 8008c3e:	2200      	movs	r2, #0
 8008c40:	6062      	str	r2, [r4, #4]
 8008c42:	04d9      	lsls	r1, r3, #19
 8008c44:	6922      	ldr	r2, [r4, #16]
 8008c46:	6022      	str	r2, [r4, #0]
 8008c48:	d504      	bpl.n	8008c54 <__sflush_r+0x78>
 8008c4a:	1c42      	adds	r2, r0, #1
 8008c4c:	d101      	bne.n	8008c52 <__sflush_r+0x76>
 8008c4e:	682b      	ldr	r3, [r5, #0]
 8008c50:	b903      	cbnz	r3, 8008c54 <__sflush_r+0x78>
 8008c52:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c56:	602f      	str	r7, [r5, #0]
 8008c58:	b1b9      	cbz	r1, 8008c8a <__sflush_r+0xae>
 8008c5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c5e:	4299      	cmp	r1, r3
 8008c60:	d002      	beq.n	8008c68 <__sflush_r+0x8c>
 8008c62:	4628      	mov	r0, r5
 8008c64:	f7fe fecc 	bl	8007a00 <_free_r>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c6c:	e00d      	b.n	8008c8a <__sflush_r+0xae>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	4628      	mov	r0, r5
 8008c72:	47b0      	blx	r6
 8008c74:	4602      	mov	r2, r0
 8008c76:	1c50      	adds	r0, r2, #1
 8008c78:	d1c9      	bne.n	8008c0e <__sflush_r+0x32>
 8008c7a:	682b      	ldr	r3, [r5, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d0c6      	beq.n	8008c0e <__sflush_r+0x32>
 8008c80:	2b1d      	cmp	r3, #29
 8008c82:	d001      	beq.n	8008c88 <__sflush_r+0xac>
 8008c84:	2b16      	cmp	r3, #22
 8008c86:	d11e      	bne.n	8008cc6 <__sflush_r+0xea>
 8008c88:	602f      	str	r7, [r5, #0]
 8008c8a:	2000      	movs	r0, #0
 8008c8c:	e022      	b.n	8008cd4 <__sflush_r+0xf8>
 8008c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c92:	b21b      	sxth	r3, r3
 8008c94:	e01b      	b.n	8008cce <__sflush_r+0xf2>
 8008c96:	690f      	ldr	r7, [r1, #16]
 8008c98:	2f00      	cmp	r7, #0
 8008c9a:	d0f6      	beq.n	8008c8a <__sflush_r+0xae>
 8008c9c:	0793      	lsls	r3, r2, #30
 8008c9e:	680e      	ldr	r6, [r1, #0]
 8008ca0:	bf08      	it	eq
 8008ca2:	694b      	ldreq	r3, [r1, #20]
 8008ca4:	600f      	str	r7, [r1, #0]
 8008ca6:	bf18      	it	ne
 8008ca8:	2300      	movne	r3, #0
 8008caa:	eba6 0807 	sub.w	r8, r6, r7
 8008cae:	608b      	str	r3, [r1, #8]
 8008cb0:	f1b8 0f00 	cmp.w	r8, #0
 8008cb4:	dde9      	ble.n	8008c8a <__sflush_r+0xae>
 8008cb6:	6a21      	ldr	r1, [r4, #32]
 8008cb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008cba:	4643      	mov	r3, r8
 8008cbc:	463a      	mov	r2, r7
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	47b0      	blx	r6
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	dc08      	bgt.n	8008cd8 <__sflush_r+0xfc>
 8008cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cce:	81a3      	strh	r3, [r4, #12]
 8008cd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cd8:	4407      	add	r7, r0
 8008cda:	eba8 0800 	sub.w	r8, r8, r0
 8008cde:	e7e7      	b.n	8008cb0 <__sflush_r+0xd4>
 8008ce0:	20400001 	.word	0x20400001

08008ce4 <_fflush_r>:
 8008ce4:	b538      	push	{r3, r4, r5, lr}
 8008ce6:	690b      	ldr	r3, [r1, #16]
 8008ce8:	4605      	mov	r5, r0
 8008cea:	460c      	mov	r4, r1
 8008cec:	b913      	cbnz	r3, 8008cf4 <_fflush_r+0x10>
 8008cee:	2500      	movs	r5, #0
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	bd38      	pop	{r3, r4, r5, pc}
 8008cf4:	b118      	cbz	r0, 8008cfe <_fflush_r+0x1a>
 8008cf6:	6a03      	ldr	r3, [r0, #32]
 8008cf8:	b90b      	cbnz	r3, 8008cfe <_fflush_r+0x1a>
 8008cfa:	f7fd f82d 	bl	8005d58 <__sinit>
 8008cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d0f3      	beq.n	8008cee <_fflush_r+0xa>
 8008d06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d08:	07d0      	lsls	r0, r2, #31
 8008d0a:	d404      	bmi.n	8008d16 <_fflush_r+0x32>
 8008d0c:	0599      	lsls	r1, r3, #22
 8008d0e:	d402      	bmi.n	8008d16 <_fflush_r+0x32>
 8008d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d12:	f7fd ffe6 	bl	8006ce2 <__retarget_lock_acquire_recursive>
 8008d16:	4628      	mov	r0, r5
 8008d18:	4621      	mov	r1, r4
 8008d1a:	f7ff ff5f 	bl	8008bdc <__sflush_r>
 8008d1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d20:	07da      	lsls	r2, r3, #31
 8008d22:	4605      	mov	r5, r0
 8008d24:	d4e4      	bmi.n	8008cf0 <_fflush_r+0xc>
 8008d26:	89a3      	ldrh	r3, [r4, #12]
 8008d28:	059b      	lsls	r3, r3, #22
 8008d2a:	d4e1      	bmi.n	8008cf0 <_fflush_r+0xc>
 8008d2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d2e:	f7fd ffd9 	bl	8006ce4 <__retarget_lock_release_recursive>
 8008d32:	e7dd      	b.n	8008cf0 <_fflush_r+0xc>

08008d34 <__malloc_lock>:
 8008d34:	4801      	ldr	r0, [pc, #4]	@ (8008d3c <__malloc_lock+0x8>)
 8008d36:	f7fd bfd4 	b.w	8006ce2 <__retarget_lock_acquire_recursive>
 8008d3a:	bf00      	nop
 8008d3c:	20000aa0 	.word	0x20000aa0

08008d40 <__malloc_unlock>:
 8008d40:	4801      	ldr	r0, [pc, #4]	@ (8008d48 <__malloc_unlock+0x8>)
 8008d42:	f7fd bfcf 	b.w	8006ce4 <__retarget_lock_release_recursive>
 8008d46:	bf00      	nop
 8008d48:	20000aa0 	.word	0x20000aa0

08008d4c <_Balloc>:
 8008d4c:	b570      	push	{r4, r5, r6, lr}
 8008d4e:	69c6      	ldr	r6, [r0, #28]
 8008d50:	4604      	mov	r4, r0
 8008d52:	460d      	mov	r5, r1
 8008d54:	b976      	cbnz	r6, 8008d74 <_Balloc+0x28>
 8008d56:	2010      	movs	r0, #16
 8008d58:	f7ff fcfc 	bl	8008754 <malloc>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	61e0      	str	r0, [r4, #28]
 8008d60:	b920      	cbnz	r0, 8008d6c <_Balloc+0x20>
 8008d62:	4b18      	ldr	r3, [pc, #96]	@ (8008dc4 <_Balloc+0x78>)
 8008d64:	4818      	ldr	r0, [pc, #96]	@ (8008dc8 <_Balloc+0x7c>)
 8008d66:	216b      	movs	r1, #107	@ 0x6b
 8008d68:	f000 fdaa 	bl	80098c0 <__assert_func>
 8008d6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d70:	6006      	str	r6, [r0, #0]
 8008d72:	60c6      	str	r6, [r0, #12]
 8008d74:	69e6      	ldr	r6, [r4, #28]
 8008d76:	68f3      	ldr	r3, [r6, #12]
 8008d78:	b183      	cbz	r3, 8008d9c <_Balloc+0x50>
 8008d7a:	69e3      	ldr	r3, [r4, #28]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d82:	b9b8      	cbnz	r0, 8008db4 <_Balloc+0x68>
 8008d84:	2101      	movs	r1, #1
 8008d86:	fa01 f605 	lsl.w	r6, r1, r5
 8008d8a:	1d72      	adds	r2, r6, #5
 8008d8c:	0092      	lsls	r2, r2, #2
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f000 fdb4 	bl	80098fc <_calloc_r>
 8008d94:	b160      	cbz	r0, 8008db0 <_Balloc+0x64>
 8008d96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d9a:	e00e      	b.n	8008dba <_Balloc+0x6e>
 8008d9c:	2221      	movs	r2, #33	@ 0x21
 8008d9e:	2104      	movs	r1, #4
 8008da0:	4620      	mov	r0, r4
 8008da2:	f000 fdab 	bl	80098fc <_calloc_r>
 8008da6:	69e3      	ldr	r3, [r4, #28]
 8008da8:	60f0      	str	r0, [r6, #12]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e4      	bne.n	8008d7a <_Balloc+0x2e>
 8008db0:	2000      	movs	r0, #0
 8008db2:	bd70      	pop	{r4, r5, r6, pc}
 8008db4:	6802      	ldr	r2, [r0, #0]
 8008db6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008dba:	2300      	movs	r3, #0
 8008dbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008dc0:	e7f7      	b.n	8008db2 <_Balloc+0x66>
 8008dc2:	bf00      	nop
 8008dc4:	0800a12a 	.word	0x0800a12a
 8008dc8:	0800a236 	.word	0x0800a236

08008dcc <_Bfree>:
 8008dcc:	b570      	push	{r4, r5, r6, lr}
 8008dce:	69c6      	ldr	r6, [r0, #28]
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	b976      	cbnz	r6, 8008df4 <_Bfree+0x28>
 8008dd6:	2010      	movs	r0, #16
 8008dd8:	f7ff fcbc 	bl	8008754 <malloc>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	61e8      	str	r0, [r5, #28]
 8008de0:	b920      	cbnz	r0, 8008dec <_Bfree+0x20>
 8008de2:	4b09      	ldr	r3, [pc, #36]	@ (8008e08 <_Bfree+0x3c>)
 8008de4:	4809      	ldr	r0, [pc, #36]	@ (8008e0c <_Bfree+0x40>)
 8008de6:	218f      	movs	r1, #143	@ 0x8f
 8008de8:	f000 fd6a 	bl	80098c0 <__assert_func>
 8008dec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008df0:	6006      	str	r6, [r0, #0]
 8008df2:	60c6      	str	r6, [r0, #12]
 8008df4:	b13c      	cbz	r4, 8008e06 <_Bfree+0x3a>
 8008df6:	69eb      	ldr	r3, [r5, #28]
 8008df8:	6862      	ldr	r2, [r4, #4]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e00:	6021      	str	r1, [r4, #0]
 8008e02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e06:	bd70      	pop	{r4, r5, r6, pc}
 8008e08:	0800a12a 	.word	0x0800a12a
 8008e0c:	0800a236 	.word	0x0800a236

08008e10 <__multadd>:
 8008e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e14:	690d      	ldr	r5, [r1, #16]
 8008e16:	4607      	mov	r7, r0
 8008e18:	460c      	mov	r4, r1
 8008e1a:	461e      	mov	r6, r3
 8008e1c:	f101 0c14 	add.w	ip, r1, #20
 8008e20:	2000      	movs	r0, #0
 8008e22:	f8dc 3000 	ldr.w	r3, [ip]
 8008e26:	b299      	uxth	r1, r3
 8008e28:	fb02 6101 	mla	r1, r2, r1, r6
 8008e2c:	0c1e      	lsrs	r6, r3, #16
 8008e2e:	0c0b      	lsrs	r3, r1, #16
 8008e30:	fb02 3306 	mla	r3, r2, r6, r3
 8008e34:	b289      	uxth	r1, r1
 8008e36:	3001      	adds	r0, #1
 8008e38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e3c:	4285      	cmp	r5, r0
 8008e3e:	f84c 1b04 	str.w	r1, [ip], #4
 8008e42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e46:	dcec      	bgt.n	8008e22 <__multadd+0x12>
 8008e48:	b30e      	cbz	r6, 8008e8e <__multadd+0x7e>
 8008e4a:	68a3      	ldr	r3, [r4, #8]
 8008e4c:	42ab      	cmp	r3, r5
 8008e4e:	dc19      	bgt.n	8008e84 <__multadd+0x74>
 8008e50:	6861      	ldr	r1, [r4, #4]
 8008e52:	4638      	mov	r0, r7
 8008e54:	3101      	adds	r1, #1
 8008e56:	f7ff ff79 	bl	8008d4c <_Balloc>
 8008e5a:	4680      	mov	r8, r0
 8008e5c:	b928      	cbnz	r0, 8008e6a <__multadd+0x5a>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	4b0c      	ldr	r3, [pc, #48]	@ (8008e94 <__multadd+0x84>)
 8008e62:	480d      	ldr	r0, [pc, #52]	@ (8008e98 <__multadd+0x88>)
 8008e64:	21ba      	movs	r1, #186	@ 0xba
 8008e66:	f000 fd2b 	bl	80098c0 <__assert_func>
 8008e6a:	6922      	ldr	r2, [r4, #16]
 8008e6c:	3202      	adds	r2, #2
 8008e6e:	f104 010c 	add.w	r1, r4, #12
 8008e72:	0092      	lsls	r2, r2, #2
 8008e74:	300c      	adds	r0, #12
 8008e76:	f7fd ff4b 	bl	8006d10 <memcpy>
 8008e7a:	4621      	mov	r1, r4
 8008e7c:	4638      	mov	r0, r7
 8008e7e:	f7ff ffa5 	bl	8008dcc <_Bfree>
 8008e82:	4644      	mov	r4, r8
 8008e84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e88:	3501      	adds	r5, #1
 8008e8a:	615e      	str	r6, [r3, #20]
 8008e8c:	6125      	str	r5, [r4, #16]
 8008e8e:	4620      	mov	r0, r4
 8008e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e94:	0800a199 	.word	0x0800a199
 8008e98:	0800a236 	.word	0x0800a236

08008e9c <__s2b>:
 8008e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ea0:	460c      	mov	r4, r1
 8008ea2:	4615      	mov	r5, r2
 8008ea4:	461f      	mov	r7, r3
 8008ea6:	2209      	movs	r2, #9
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	4606      	mov	r6, r0
 8008eac:	fb93 f3f2 	sdiv	r3, r3, r2
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	db09      	blt.n	8008ecc <__s2b+0x30>
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f7ff ff47 	bl	8008d4c <_Balloc>
 8008ebe:	b940      	cbnz	r0, 8008ed2 <__s2b+0x36>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	4b19      	ldr	r3, [pc, #100]	@ (8008f28 <__s2b+0x8c>)
 8008ec4:	4819      	ldr	r0, [pc, #100]	@ (8008f2c <__s2b+0x90>)
 8008ec6:	21d3      	movs	r1, #211	@ 0xd3
 8008ec8:	f000 fcfa 	bl	80098c0 <__assert_func>
 8008ecc:	0052      	lsls	r2, r2, #1
 8008ece:	3101      	adds	r1, #1
 8008ed0:	e7f0      	b.n	8008eb4 <__s2b+0x18>
 8008ed2:	9b08      	ldr	r3, [sp, #32]
 8008ed4:	6143      	str	r3, [r0, #20]
 8008ed6:	2d09      	cmp	r5, #9
 8008ed8:	f04f 0301 	mov.w	r3, #1
 8008edc:	6103      	str	r3, [r0, #16]
 8008ede:	dd16      	ble.n	8008f0e <__s2b+0x72>
 8008ee0:	f104 0909 	add.w	r9, r4, #9
 8008ee4:	46c8      	mov	r8, r9
 8008ee6:	442c      	add	r4, r5
 8008ee8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008eec:	4601      	mov	r1, r0
 8008eee:	3b30      	subs	r3, #48	@ 0x30
 8008ef0:	220a      	movs	r2, #10
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f7ff ff8c 	bl	8008e10 <__multadd>
 8008ef8:	45a0      	cmp	r8, r4
 8008efa:	d1f5      	bne.n	8008ee8 <__s2b+0x4c>
 8008efc:	f1a5 0408 	sub.w	r4, r5, #8
 8008f00:	444c      	add	r4, r9
 8008f02:	1b2d      	subs	r5, r5, r4
 8008f04:	1963      	adds	r3, r4, r5
 8008f06:	42bb      	cmp	r3, r7
 8008f08:	db04      	blt.n	8008f14 <__s2b+0x78>
 8008f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f0e:	340a      	adds	r4, #10
 8008f10:	2509      	movs	r5, #9
 8008f12:	e7f6      	b.n	8008f02 <__s2b+0x66>
 8008f14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008f18:	4601      	mov	r1, r0
 8008f1a:	3b30      	subs	r3, #48	@ 0x30
 8008f1c:	220a      	movs	r2, #10
 8008f1e:	4630      	mov	r0, r6
 8008f20:	f7ff ff76 	bl	8008e10 <__multadd>
 8008f24:	e7ee      	b.n	8008f04 <__s2b+0x68>
 8008f26:	bf00      	nop
 8008f28:	0800a199 	.word	0x0800a199
 8008f2c:	0800a236 	.word	0x0800a236

08008f30 <__hi0bits>:
 8008f30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008f34:	4603      	mov	r3, r0
 8008f36:	bf36      	itet	cc
 8008f38:	0403      	lslcc	r3, r0, #16
 8008f3a:	2000      	movcs	r0, #0
 8008f3c:	2010      	movcc	r0, #16
 8008f3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f42:	bf3c      	itt	cc
 8008f44:	021b      	lslcc	r3, r3, #8
 8008f46:	3008      	addcc	r0, #8
 8008f48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f4c:	bf3c      	itt	cc
 8008f4e:	011b      	lslcc	r3, r3, #4
 8008f50:	3004      	addcc	r0, #4
 8008f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f56:	bf3c      	itt	cc
 8008f58:	009b      	lslcc	r3, r3, #2
 8008f5a:	3002      	addcc	r0, #2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	db05      	blt.n	8008f6c <__hi0bits+0x3c>
 8008f60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008f64:	f100 0001 	add.w	r0, r0, #1
 8008f68:	bf08      	it	eq
 8008f6a:	2020      	moveq	r0, #32
 8008f6c:	4770      	bx	lr

08008f6e <__lo0bits>:
 8008f6e:	6803      	ldr	r3, [r0, #0]
 8008f70:	4602      	mov	r2, r0
 8008f72:	f013 0007 	ands.w	r0, r3, #7
 8008f76:	d00b      	beq.n	8008f90 <__lo0bits+0x22>
 8008f78:	07d9      	lsls	r1, r3, #31
 8008f7a:	d421      	bmi.n	8008fc0 <__lo0bits+0x52>
 8008f7c:	0798      	lsls	r0, r3, #30
 8008f7e:	bf49      	itett	mi
 8008f80:	085b      	lsrmi	r3, r3, #1
 8008f82:	089b      	lsrpl	r3, r3, #2
 8008f84:	2001      	movmi	r0, #1
 8008f86:	6013      	strmi	r3, [r2, #0]
 8008f88:	bf5c      	itt	pl
 8008f8a:	6013      	strpl	r3, [r2, #0]
 8008f8c:	2002      	movpl	r0, #2
 8008f8e:	4770      	bx	lr
 8008f90:	b299      	uxth	r1, r3
 8008f92:	b909      	cbnz	r1, 8008f98 <__lo0bits+0x2a>
 8008f94:	0c1b      	lsrs	r3, r3, #16
 8008f96:	2010      	movs	r0, #16
 8008f98:	b2d9      	uxtb	r1, r3
 8008f9a:	b909      	cbnz	r1, 8008fa0 <__lo0bits+0x32>
 8008f9c:	3008      	adds	r0, #8
 8008f9e:	0a1b      	lsrs	r3, r3, #8
 8008fa0:	0719      	lsls	r1, r3, #28
 8008fa2:	bf04      	itt	eq
 8008fa4:	091b      	lsreq	r3, r3, #4
 8008fa6:	3004      	addeq	r0, #4
 8008fa8:	0799      	lsls	r1, r3, #30
 8008faa:	bf04      	itt	eq
 8008fac:	089b      	lsreq	r3, r3, #2
 8008fae:	3002      	addeq	r0, #2
 8008fb0:	07d9      	lsls	r1, r3, #31
 8008fb2:	d403      	bmi.n	8008fbc <__lo0bits+0x4e>
 8008fb4:	085b      	lsrs	r3, r3, #1
 8008fb6:	f100 0001 	add.w	r0, r0, #1
 8008fba:	d003      	beq.n	8008fc4 <__lo0bits+0x56>
 8008fbc:	6013      	str	r3, [r2, #0]
 8008fbe:	4770      	bx	lr
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	4770      	bx	lr
 8008fc4:	2020      	movs	r0, #32
 8008fc6:	4770      	bx	lr

08008fc8 <__i2b>:
 8008fc8:	b510      	push	{r4, lr}
 8008fca:	460c      	mov	r4, r1
 8008fcc:	2101      	movs	r1, #1
 8008fce:	f7ff febd 	bl	8008d4c <_Balloc>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	b928      	cbnz	r0, 8008fe2 <__i2b+0x1a>
 8008fd6:	4b05      	ldr	r3, [pc, #20]	@ (8008fec <__i2b+0x24>)
 8008fd8:	4805      	ldr	r0, [pc, #20]	@ (8008ff0 <__i2b+0x28>)
 8008fda:	f240 1145 	movw	r1, #325	@ 0x145
 8008fde:	f000 fc6f 	bl	80098c0 <__assert_func>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	6144      	str	r4, [r0, #20]
 8008fe6:	6103      	str	r3, [r0, #16]
 8008fe8:	bd10      	pop	{r4, pc}
 8008fea:	bf00      	nop
 8008fec:	0800a199 	.word	0x0800a199
 8008ff0:	0800a236 	.word	0x0800a236

08008ff4 <__multiply>:
 8008ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff8:	4617      	mov	r7, r2
 8008ffa:	690a      	ldr	r2, [r1, #16]
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	bfa8      	it	ge
 8009002:	463b      	movge	r3, r7
 8009004:	4689      	mov	r9, r1
 8009006:	bfa4      	itt	ge
 8009008:	460f      	movge	r7, r1
 800900a:	4699      	movge	r9, r3
 800900c:	693d      	ldr	r5, [r7, #16]
 800900e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	6879      	ldr	r1, [r7, #4]
 8009016:	eb05 060a 	add.w	r6, r5, sl
 800901a:	42b3      	cmp	r3, r6
 800901c:	b085      	sub	sp, #20
 800901e:	bfb8      	it	lt
 8009020:	3101      	addlt	r1, #1
 8009022:	f7ff fe93 	bl	8008d4c <_Balloc>
 8009026:	b930      	cbnz	r0, 8009036 <__multiply+0x42>
 8009028:	4602      	mov	r2, r0
 800902a:	4b41      	ldr	r3, [pc, #260]	@ (8009130 <__multiply+0x13c>)
 800902c:	4841      	ldr	r0, [pc, #260]	@ (8009134 <__multiply+0x140>)
 800902e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009032:	f000 fc45 	bl	80098c0 <__assert_func>
 8009036:	f100 0414 	add.w	r4, r0, #20
 800903a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800903e:	4623      	mov	r3, r4
 8009040:	2200      	movs	r2, #0
 8009042:	4573      	cmp	r3, lr
 8009044:	d320      	bcc.n	8009088 <__multiply+0x94>
 8009046:	f107 0814 	add.w	r8, r7, #20
 800904a:	f109 0114 	add.w	r1, r9, #20
 800904e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009052:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009056:	9302      	str	r3, [sp, #8]
 8009058:	1beb      	subs	r3, r5, r7
 800905a:	3b15      	subs	r3, #21
 800905c:	f023 0303 	bic.w	r3, r3, #3
 8009060:	3304      	adds	r3, #4
 8009062:	3715      	adds	r7, #21
 8009064:	42bd      	cmp	r5, r7
 8009066:	bf38      	it	cc
 8009068:	2304      	movcc	r3, #4
 800906a:	9301      	str	r3, [sp, #4]
 800906c:	9b02      	ldr	r3, [sp, #8]
 800906e:	9103      	str	r1, [sp, #12]
 8009070:	428b      	cmp	r3, r1
 8009072:	d80c      	bhi.n	800908e <__multiply+0x9a>
 8009074:	2e00      	cmp	r6, #0
 8009076:	dd03      	ble.n	8009080 <__multiply+0x8c>
 8009078:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800907c:	2b00      	cmp	r3, #0
 800907e:	d055      	beq.n	800912c <__multiply+0x138>
 8009080:	6106      	str	r6, [r0, #16]
 8009082:	b005      	add	sp, #20
 8009084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009088:	f843 2b04 	str.w	r2, [r3], #4
 800908c:	e7d9      	b.n	8009042 <__multiply+0x4e>
 800908e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009092:	f1ba 0f00 	cmp.w	sl, #0
 8009096:	d01f      	beq.n	80090d8 <__multiply+0xe4>
 8009098:	46c4      	mov	ip, r8
 800909a:	46a1      	mov	r9, r4
 800909c:	2700      	movs	r7, #0
 800909e:	f85c 2b04 	ldr.w	r2, [ip], #4
 80090a2:	f8d9 3000 	ldr.w	r3, [r9]
 80090a6:	fa1f fb82 	uxth.w	fp, r2
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	fb0a 330b 	mla	r3, sl, fp, r3
 80090b0:	443b      	add	r3, r7
 80090b2:	f8d9 7000 	ldr.w	r7, [r9]
 80090b6:	0c12      	lsrs	r2, r2, #16
 80090b8:	0c3f      	lsrs	r7, r7, #16
 80090ba:	fb0a 7202 	mla	r2, sl, r2, r7
 80090be:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090c8:	4565      	cmp	r5, ip
 80090ca:	f849 3b04 	str.w	r3, [r9], #4
 80090ce:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80090d2:	d8e4      	bhi.n	800909e <__multiply+0xaa>
 80090d4:	9b01      	ldr	r3, [sp, #4]
 80090d6:	50e7      	str	r7, [r4, r3]
 80090d8:	9b03      	ldr	r3, [sp, #12]
 80090da:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80090de:	3104      	adds	r1, #4
 80090e0:	f1b9 0f00 	cmp.w	r9, #0
 80090e4:	d020      	beq.n	8009128 <__multiply+0x134>
 80090e6:	6823      	ldr	r3, [r4, #0]
 80090e8:	4647      	mov	r7, r8
 80090ea:	46a4      	mov	ip, r4
 80090ec:	f04f 0a00 	mov.w	sl, #0
 80090f0:	f8b7 b000 	ldrh.w	fp, [r7]
 80090f4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80090f8:	fb09 220b 	mla	r2, r9, fp, r2
 80090fc:	4452      	add	r2, sl
 80090fe:	b29b      	uxth	r3, r3
 8009100:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009104:	f84c 3b04 	str.w	r3, [ip], #4
 8009108:	f857 3b04 	ldr.w	r3, [r7], #4
 800910c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009110:	f8bc 3000 	ldrh.w	r3, [ip]
 8009114:	fb09 330a 	mla	r3, r9, sl, r3
 8009118:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800911c:	42bd      	cmp	r5, r7
 800911e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009122:	d8e5      	bhi.n	80090f0 <__multiply+0xfc>
 8009124:	9a01      	ldr	r2, [sp, #4]
 8009126:	50a3      	str	r3, [r4, r2]
 8009128:	3404      	adds	r4, #4
 800912a:	e79f      	b.n	800906c <__multiply+0x78>
 800912c:	3e01      	subs	r6, #1
 800912e:	e7a1      	b.n	8009074 <__multiply+0x80>
 8009130:	0800a199 	.word	0x0800a199
 8009134:	0800a236 	.word	0x0800a236

08009138 <__pow5mult>:
 8009138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800913c:	4615      	mov	r5, r2
 800913e:	f012 0203 	ands.w	r2, r2, #3
 8009142:	4607      	mov	r7, r0
 8009144:	460e      	mov	r6, r1
 8009146:	d007      	beq.n	8009158 <__pow5mult+0x20>
 8009148:	4c25      	ldr	r4, [pc, #148]	@ (80091e0 <__pow5mult+0xa8>)
 800914a:	3a01      	subs	r2, #1
 800914c:	2300      	movs	r3, #0
 800914e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009152:	f7ff fe5d 	bl	8008e10 <__multadd>
 8009156:	4606      	mov	r6, r0
 8009158:	10ad      	asrs	r5, r5, #2
 800915a:	d03d      	beq.n	80091d8 <__pow5mult+0xa0>
 800915c:	69fc      	ldr	r4, [r7, #28]
 800915e:	b97c      	cbnz	r4, 8009180 <__pow5mult+0x48>
 8009160:	2010      	movs	r0, #16
 8009162:	f7ff faf7 	bl	8008754 <malloc>
 8009166:	4602      	mov	r2, r0
 8009168:	61f8      	str	r0, [r7, #28]
 800916a:	b928      	cbnz	r0, 8009178 <__pow5mult+0x40>
 800916c:	4b1d      	ldr	r3, [pc, #116]	@ (80091e4 <__pow5mult+0xac>)
 800916e:	481e      	ldr	r0, [pc, #120]	@ (80091e8 <__pow5mult+0xb0>)
 8009170:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009174:	f000 fba4 	bl	80098c0 <__assert_func>
 8009178:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800917c:	6004      	str	r4, [r0, #0]
 800917e:	60c4      	str	r4, [r0, #12]
 8009180:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009184:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009188:	b94c      	cbnz	r4, 800919e <__pow5mult+0x66>
 800918a:	f240 2171 	movw	r1, #625	@ 0x271
 800918e:	4638      	mov	r0, r7
 8009190:	f7ff ff1a 	bl	8008fc8 <__i2b>
 8009194:	2300      	movs	r3, #0
 8009196:	f8c8 0008 	str.w	r0, [r8, #8]
 800919a:	4604      	mov	r4, r0
 800919c:	6003      	str	r3, [r0, #0]
 800919e:	f04f 0900 	mov.w	r9, #0
 80091a2:	07eb      	lsls	r3, r5, #31
 80091a4:	d50a      	bpl.n	80091bc <__pow5mult+0x84>
 80091a6:	4631      	mov	r1, r6
 80091a8:	4622      	mov	r2, r4
 80091aa:	4638      	mov	r0, r7
 80091ac:	f7ff ff22 	bl	8008ff4 <__multiply>
 80091b0:	4631      	mov	r1, r6
 80091b2:	4680      	mov	r8, r0
 80091b4:	4638      	mov	r0, r7
 80091b6:	f7ff fe09 	bl	8008dcc <_Bfree>
 80091ba:	4646      	mov	r6, r8
 80091bc:	106d      	asrs	r5, r5, #1
 80091be:	d00b      	beq.n	80091d8 <__pow5mult+0xa0>
 80091c0:	6820      	ldr	r0, [r4, #0]
 80091c2:	b938      	cbnz	r0, 80091d4 <__pow5mult+0x9c>
 80091c4:	4622      	mov	r2, r4
 80091c6:	4621      	mov	r1, r4
 80091c8:	4638      	mov	r0, r7
 80091ca:	f7ff ff13 	bl	8008ff4 <__multiply>
 80091ce:	6020      	str	r0, [r4, #0]
 80091d0:	f8c0 9000 	str.w	r9, [r0]
 80091d4:	4604      	mov	r4, r0
 80091d6:	e7e4      	b.n	80091a2 <__pow5mult+0x6a>
 80091d8:	4630      	mov	r0, r6
 80091da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091de:	bf00      	nop
 80091e0:	0800a424 	.word	0x0800a424
 80091e4:	0800a12a 	.word	0x0800a12a
 80091e8:	0800a236 	.word	0x0800a236

080091ec <__lshift>:
 80091ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091f0:	460c      	mov	r4, r1
 80091f2:	6849      	ldr	r1, [r1, #4]
 80091f4:	6923      	ldr	r3, [r4, #16]
 80091f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091fa:	68a3      	ldr	r3, [r4, #8]
 80091fc:	4607      	mov	r7, r0
 80091fe:	4691      	mov	r9, r2
 8009200:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009204:	f108 0601 	add.w	r6, r8, #1
 8009208:	42b3      	cmp	r3, r6
 800920a:	db0b      	blt.n	8009224 <__lshift+0x38>
 800920c:	4638      	mov	r0, r7
 800920e:	f7ff fd9d 	bl	8008d4c <_Balloc>
 8009212:	4605      	mov	r5, r0
 8009214:	b948      	cbnz	r0, 800922a <__lshift+0x3e>
 8009216:	4602      	mov	r2, r0
 8009218:	4b28      	ldr	r3, [pc, #160]	@ (80092bc <__lshift+0xd0>)
 800921a:	4829      	ldr	r0, [pc, #164]	@ (80092c0 <__lshift+0xd4>)
 800921c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009220:	f000 fb4e 	bl	80098c0 <__assert_func>
 8009224:	3101      	adds	r1, #1
 8009226:	005b      	lsls	r3, r3, #1
 8009228:	e7ee      	b.n	8009208 <__lshift+0x1c>
 800922a:	2300      	movs	r3, #0
 800922c:	f100 0114 	add.w	r1, r0, #20
 8009230:	f100 0210 	add.w	r2, r0, #16
 8009234:	4618      	mov	r0, r3
 8009236:	4553      	cmp	r3, sl
 8009238:	db33      	blt.n	80092a2 <__lshift+0xb6>
 800923a:	6920      	ldr	r0, [r4, #16]
 800923c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009240:	f104 0314 	add.w	r3, r4, #20
 8009244:	f019 091f 	ands.w	r9, r9, #31
 8009248:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800924c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009250:	d02b      	beq.n	80092aa <__lshift+0xbe>
 8009252:	f1c9 0e20 	rsb	lr, r9, #32
 8009256:	468a      	mov	sl, r1
 8009258:	2200      	movs	r2, #0
 800925a:	6818      	ldr	r0, [r3, #0]
 800925c:	fa00 f009 	lsl.w	r0, r0, r9
 8009260:	4310      	orrs	r0, r2
 8009262:	f84a 0b04 	str.w	r0, [sl], #4
 8009266:	f853 2b04 	ldr.w	r2, [r3], #4
 800926a:	459c      	cmp	ip, r3
 800926c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009270:	d8f3      	bhi.n	800925a <__lshift+0x6e>
 8009272:	ebac 0304 	sub.w	r3, ip, r4
 8009276:	3b15      	subs	r3, #21
 8009278:	f023 0303 	bic.w	r3, r3, #3
 800927c:	3304      	adds	r3, #4
 800927e:	f104 0015 	add.w	r0, r4, #21
 8009282:	4560      	cmp	r0, ip
 8009284:	bf88      	it	hi
 8009286:	2304      	movhi	r3, #4
 8009288:	50ca      	str	r2, [r1, r3]
 800928a:	b10a      	cbz	r2, 8009290 <__lshift+0xa4>
 800928c:	f108 0602 	add.w	r6, r8, #2
 8009290:	3e01      	subs	r6, #1
 8009292:	4638      	mov	r0, r7
 8009294:	612e      	str	r6, [r5, #16]
 8009296:	4621      	mov	r1, r4
 8009298:	f7ff fd98 	bl	8008dcc <_Bfree>
 800929c:	4628      	mov	r0, r5
 800929e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80092a6:	3301      	adds	r3, #1
 80092a8:	e7c5      	b.n	8009236 <__lshift+0x4a>
 80092aa:	3904      	subs	r1, #4
 80092ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80092b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80092b4:	459c      	cmp	ip, r3
 80092b6:	d8f9      	bhi.n	80092ac <__lshift+0xc0>
 80092b8:	e7ea      	b.n	8009290 <__lshift+0xa4>
 80092ba:	bf00      	nop
 80092bc:	0800a199 	.word	0x0800a199
 80092c0:	0800a236 	.word	0x0800a236

080092c4 <__mcmp>:
 80092c4:	690a      	ldr	r2, [r1, #16]
 80092c6:	4603      	mov	r3, r0
 80092c8:	6900      	ldr	r0, [r0, #16]
 80092ca:	1a80      	subs	r0, r0, r2
 80092cc:	b530      	push	{r4, r5, lr}
 80092ce:	d10e      	bne.n	80092ee <__mcmp+0x2a>
 80092d0:	3314      	adds	r3, #20
 80092d2:	3114      	adds	r1, #20
 80092d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80092d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80092dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80092e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80092e4:	4295      	cmp	r5, r2
 80092e6:	d003      	beq.n	80092f0 <__mcmp+0x2c>
 80092e8:	d205      	bcs.n	80092f6 <__mcmp+0x32>
 80092ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092ee:	bd30      	pop	{r4, r5, pc}
 80092f0:	42a3      	cmp	r3, r4
 80092f2:	d3f3      	bcc.n	80092dc <__mcmp+0x18>
 80092f4:	e7fb      	b.n	80092ee <__mcmp+0x2a>
 80092f6:	2001      	movs	r0, #1
 80092f8:	e7f9      	b.n	80092ee <__mcmp+0x2a>
	...

080092fc <__mdiff>:
 80092fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009300:	4689      	mov	r9, r1
 8009302:	4606      	mov	r6, r0
 8009304:	4611      	mov	r1, r2
 8009306:	4648      	mov	r0, r9
 8009308:	4614      	mov	r4, r2
 800930a:	f7ff ffdb 	bl	80092c4 <__mcmp>
 800930e:	1e05      	subs	r5, r0, #0
 8009310:	d112      	bne.n	8009338 <__mdiff+0x3c>
 8009312:	4629      	mov	r1, r5
 8009314:	4630      	mov	r0, r6
 8009316:	f7ff fd19 	bl	8008d4c <_Balloc>
 800931a:	4602      	mov	r2, r0
 800931c:	b928      	cbnz	r0, 800932a <__mdiff+0x2e>
 800931e:	4b3f      	ldr	r3, [pc, #252]	@ (800941c <__mdiff+0x120>)
 8009320:	f240 2137 	movw	r1, #567	@ 0x237
 8009324:	483e      	ldr	r0, [pc, #248]	@ (8009420 <__mdiff+0x124>)
 8009326:	f000 facb 	bl	80098c0 <__assert_func>
 800932a:	2301      	movs	r3, #1
 800932c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009330:	4610      	mov	r0, r2
 8009332:	b003      	add	sp, #12
 8009334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009338:	bfbc      	itt	lt
 800933a:	464b      	movlt	r3, r9
 800933c:	46a1      	movlt	r9, r4
 800933e:	4630      	mov	r0, r6
 8009340:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009344:	bfba      	itte	lt
 8009346:	461c      	movlt	r4, r3
 8009348:	2501      	movlt	r5, #1
 800934a:	2500      	movge	r5, #0
 800934c:	f7ff fcfe 	bl	8008d4c <_Balloc>
 8009350:	4602      	mov	r2, r0
 8009352:	b918      	cbnz	r0, 800935c <__mdiff+0x60>
 8009354:	4b31      	ldr	r3, [pc, #196]	@ (800941c <__mdiff+0x120>)
 8009356:	f240 2145 	movw	r1, #581	@ 0x245
 800935a:	e7e3      	b.n	8009324 <__mdiff+0x28>
 800935c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009360:	6926      	ldr	r6, [r4, #16]
 8009362:	60c5      	str	r5, [r0, #12]
 8009364:	f109 0310 	add.w	r3, r9, #16
 8009368:	f109 0514 	add.w	r5, r9, #20
 800936c:	f104 0e14 	add.w	lr, r4, #20
 8009370:	f100 0b14 	add.w	fp, r0, #20
 8009374:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009378:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800937c:	9301      	str	r3, [sp, #4]
 800937e:	46d9      	mov	r9, fp
 8009380:	f04f 0c00 	mov.w	ip, #0
 8009384:	9b01      	ldr	r3, [sp, #4]
 8009386:	f85e 0b04 	ldr.w	r0, [lr], #4
 800938a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800938e:	9301      	str	r3, [sp, #4]
 8009390:	fa1f f38a 	uxth.w	r3, sl
 8009394:	4619      	mov	r1, r3
 8009396:	b283      	uxth	r3, r0
 8009398:	1acb      	subs	r3, r1, r3
 800939a:	0c00      	lsrs	r0, r0, #16
 800939c:	4463      	add	r3, ip
 800939e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80093a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80093ac:	4576      	cmp	r6, lr
 80093ae:	f849 3b04 	str.w	r3, [r9], #4
 80093b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80093b6:	d8e5      	bhi.n	8009384 <__mdiff+0x88>
 80093b8:	1b33      	subs	r3, r6, r4
 80093ba:	3b15      	subs	r3, #21
 80093bc:	f023 0303 	bic.w	r3, r3, #3
 80093c0:	3415      	adds	r4, #21
 80093c2:	3304      	adds	r3, #4
 80093c4:	42a6      	cmp	r6, r4
 80093c6:	bf38      	it	cc
 80093c8:	2304      	movcc	r3, #4
 80093ca:	441d      	add	r5, r3
 80093cc:	445b      	add	r3, fp
 80093ce:	461e      	mov	r6, r3
 80093d0:	462c      	mov	r4, r5
 80093d2:	4544      	cmp	r4, r8
 80093d4:	d30e      	bcc.n	80093f4 <__mdiff+0xf8>
 80093d6:	f108 0103 	add.w	r1, r8, #3
 80093da:	1b49      	subs	r1, r1, r5
 80093dc:	f021 0103 	bic.w	r1, r1, #3
 80093e0:	3d03      	subs	r5, #3
 80093e2:	45a8      	cmp	r8, r5
 80093e4:	bf38      	it	cc
 80093e6:	2100      	movcc	r1, #0
 80093e8:	440b      	add	r3, r1
 80093ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80093ee:	b191      	cbz	r1, 8009416 <__mdiff+0x11a>
 80093f0:	6117      	str	r7, [r2, #16]
 80093f2:	e79d      	b.n	8009330 <__mdiff+0x34>
 80093f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80093f8:	46e6      	mov	lr, ip
 80093fa:	0c08      	lsrs	r0, r1, #16
 80093fc:	fa1c fc81 	uxtah	ip, ip, r1
 8009400:	4471      	add	r1, lr
 8009402:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009406:	b289      	uxth	r1, r1
 8009408:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800940c:	f846 1b04 	str.w	r1, [r6], #4
 8009410:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009414:	e7dd      	b.n	80093d2 <__mdiff+0xd6>
 8009416:	3f01      	subs	r7, #1
 8009418:	e7e7      	b.n	80093ea <__mdiff+0xee>
 800941a:	bf00      	nop
 800941c:	0800a199 	.word	0x0800a199
 8009420:	0800a236 	.word	0x0800a236

08009424 <__ulp>:
 8009424:	b082      	sub	sp, #8
 8009426:	ed8d 0b00 	vstr	d0, [sp]
 800942a:	9a01      	ldr	r2, [sp, #4]
 800942c:	4b0f      	ldr	r3, [pc, #60]	@ (800946c <__ulp+0x48>)
 800942e:	4013      	ands	r3, r2
 8009430:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009434:	2b00      	cmp	r3, #0
 8009436:	dc08      	bgt.n	800944a <__ulp+0x26>
 8009438:	425b      	negs	r3, r3
 800943a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800943e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009442:	da04      	bge.n	800944e <__ulp+0x2a>
 8009444:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009448:	4113      	asrs	r3, r2
 800944a:	2200      	movs	r2, #0
 800944c:	e008      	b.n	8009460 <__ulp+0x3c>
 800944e:	f1a2 0314 	sub.w	r3, r2, #20
 8009452:	2b1e      	cmp	r3, #30
 8009454:	bfda      	itte	le
 8009456:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800945a:	40da      	lsrle	r2, r3
 800945c:	2201      	movgt	r2, #1
 800945e:	2300      	movs	r3, #0
 8009460:	4619      	mov	r1, r3
 8009462:	4610      	mov	r0, r2
 8009464:	ec41 0b10 	vmov	d0, r0, r1
 8009468:	b002      	add	sp, #8
 800946a:	4770      	bx	lr
 800946c:	7ff00000 	.word	0x7ff00000

08009470 <__b2d>:
 8009470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009474:	6906      	ldr	r6, [r0, #16]
 8009476:	f100 0814 	add.w	r8, r0, #20
 800947a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800947e:	1f37      	subs	r7, r6, #4
 8009480:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009484:	4610      	mov	r0, r2
 8009486:	f7ff fd53 	bl	8008f30 <__hi0bits>
 800948a:	f1c0 0320 	rsb	r3, r0, #32
 800948e:	280a      	cmp	r0, #10
 8009490:	600b      	str	r3, [r1, #0]
 8009492:	491b      	ldr	r1, [pc, #108]	@ (8009500 <__b2d+0x90>)
 8009494:	dc15      	bgt.n	80094c2 <__b2d+0x52>
 8009496:	f1c0 0c0b 	rsb	ip, r0, #11
 800949a:	fa22 f30c 	lsr.w	r3, r2, ip
 800949e:	45b8      	cmp	r8, r7
 80094a0:	ea43 0501 	orr.w	r5, r3, r1
 80094a4:	bf34      	ite	cc
 80094a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80094aa:	2300      	movcs	r3, #0
 80094ac:	3015      	adds	r0, #21
 80094ae:	fa02 f000 	lsl.w	r0, r2, r0
 80094b2:	fa23 f30c 	lsr.w	r3, r3, ip
 80094b6:	4303      	orrs	r3, r0
 80094b8:	461c      	mov	r4, r3
 80094ba:	ec45 4b10 	vmov	d0, r4, r5
 80094be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c2:	45b8      	cmp	r8, r7
 80094c4:	bf3a      	itte	cc
 80094c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80094ca:	f1a6 0708 	subcc.w	r7, r6, #8
 80094ce:	2300      	movcs	r3, #0
 80094d0:	380b      	subs	r0, #11
 80094d2:	d012      	beq.n	80094fa <__b2d+0x8a>
 80094d4:	f1c0 0120 	rsb	r1, r0, #32
 80094d8:	fa23 f401 	lsr.w	r4, r3, r1
 80094dc:	4082      	lsls	r2, r0
 80094de:	4322      	orrs	r2, r4
 80094e0:	4547      	cmp	r7, r8
 80094e2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80094e6:	bf8c      	ite	hi
 80094e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80094ec:	2200      	movls	r2, #0
 80094ee:	4083      	lsls	r3, r0
 80094f0:	40ca      	lsrs	r2, r1
 80094f2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80094f6:	4313      	orrs	r3, r2
 80094f8:	e7de      	b.n	80094b8 <__b2d+0x48>
 80094fa:	ea42 0501 	orr.w	r5, r2, r1
 80094fe:	e7db      	b.n	80094b8 <__b2d+0x48>
 8009500:	3ff00000 	.word	0x3ff00000

08009504 <__d2b>:
 8009504:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009508:	460f      	mov	r7, r1
 800950a:	2101      	movs	r1, #1
 800950c:	ec59 8b10 	vmov	r8, r9, d0
 8009510:	4616      	mov	r6, r2
 8009512:	f7ff fc1b 	bl	8008d4c <_Balloc>
 8009516:	4604      	mov	r4, r0
 8009518:	b930      	cbnz	r0, 8009528 <__d2b+0x24>
 800951a:	4602      	mov	r2, r0
 800951c:	4b23      	ldr	r3, [pc, #140]	@ (80095ac <__d2b+0xa8>)
 800951e:	4824      	ldr	r0, [pc, #144]	@ (80095b0 <__d2b+0xac>)
 8009520:	f240 310f 	movw	r1, #783	@ 0x30f
 8009524:	f000 f9cc 	bl	80098c0 <__assert_func>
 8009528:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800952c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009530:	b10d      	cbz	r5, 8009536 <__d2b+0x32>
 8009532:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009536:	9301      	str	r3, [sp, #4]
 8009538:	f1b8 0300 	subs.w	r3, r8, #0
 800953c:	d023      	beq.n	8009586 <__d2b+0x82>
 800953e:	4668      	mov	r0, sp
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	f7ff fd14 	bl	8008f6e <__lo0bits>
 8009546:	e9dd 1200 	ldrd	r1, r2, [sp]
 800954a:	b1d0      	cbz	r0, 8009582 <__d2b+0x7e>
 800954c:	f1c0 0320 	rsb	r3, r0, #32
 8009550:	fa02 f303 	lsl.w	r3, r2, r3
 8009554:	430b      	orrs	r3, r1
 8009556:	40c2      	lsrs	r2, r0
 8009558:	6163      	str	r3, [r4, #20]
 800955a:	9201      	str	r2, [sp, #4]
 800955c:	9b01      	ldr	r3, [sp, #4]
 800955e:	61a3      	str	r3, [r4, #24]
 8009560:	2b00      	cmp	r3, #0
 8009562:	bf0c      	ite	eq
 8009564:	2201      	moveq	r2, #1
 8009566:	2202      	movne	r2, #2
 8009568:	6122      	str	r2, [r4, #16]
 800956a:	b1a5      	cbz	r5, 8009596 <__d2b+0x92>
 800956c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009570:	4405      	add	r5, r0
 8009572:	603d      	str	r5, [r7, #0]
 8009574:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009578:	6030      	str	r0, [r6, #0]
 800957a:	4620      	mov	r0, r4
 800957c:	b003      	add	sp, #12
 800957e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009582:	6161      	str	r1, [r4, #20]
 8009584:	e7ea      	b.n	800955c <__d2b+0x58>
 8009586:	a801      	add	r0, sp, #4
 8009588:	f7ff fcf1 	bl	8008f6e <__lo0bits>
 800958c:	9b01      	ldr	r3, [sp, #4]
 800958e:	6163      	str	r3, [r4, #20]
 8009590:	3020      	adds	r0, #32
 8009592:	2201      	movs	r2, #1
 8009594:	e7e8      	b.n	8009568 <__d2b+0x64>
 8009596:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800959a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800959e:	6038      	str	r0, [r7, #0]
 80095a0:	6918      	ldr	r0, [r3, #16]
 80095a2:	f7ff fcc5 	bl	8008f30 <__hi0bits>
 80095a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80095aa:	e7e5      	b.n	8009578 <__d2b+0x74>
 80095ac:	0800a199 	.word	0x0800a199
 80095b0:	0800a236 	.word	0x0800a236

080095b4 <__ratio>:
 80095b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b8:	b085      	sub	sp, #20
 80095ba:	e9cd 1000 	strd	r1, r0, [sp]
 80095be:	a902      	add	r1, sp, #8
 80095c0:	f7ff ff56 	bl	8009470 <__b2d>
 80095c4:	9800      	ldr	r0, [sp, #0]
 80095c6:	a903      	add	r1, sp, #12
 80095c8:	ec55 4b10 	vmov	r4, r5, d0
 80095cc:	f7ff ff50 	bl	8009470 <__b2d>
 80095d0:	9b01      	ldr	r3, [sp, #4]
 80095d2:	6919      	ldr	r1, [r3, #16]
 80095d4:	9b00      	ldr	r3, [sp, #0]
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	1ac9      	subs	r1, r1, r3
 80095da:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80095de:	1a9b      	subs	r3, r3, r2
 80095e0:	ec5b ab10 	vmov	sl, fp, d0
 80095e4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	bfce      	itee	gt
 80095ec:	462a      	movgt	r2, r5
 80095ee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80095f2:	465a      	movle	r2, fp
 80095f4:	462f      	mov	r7, r5
 80095f6:	46d9      	mov	r9, fp
 80095f8:	bfcc      	ite	gt
 80095fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80095fe:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009602:	464b      	mov	r3, r9
 8009604:	4652      	mov	r2, sl
 8009606:	4620      	mov	r0, r4
 8009608:	4639      	mov	r1, r7
 800960a:	f7f7 f91f 	bl	800084c <__aeabi_ddiv>
 800960e:	ec41 0b10 	vmov	d0, r0, r1
 8009612:	b005      	add	sp, #20
 8009614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009618 <__copybits>:
 8009618:	3901      	subs	r1, #1
 800961a:	b570      	push	{r4, r5, r6, lr}
 800961c:	1149      	asrs	r1, r1, #5
 800961e:	6914      	ldr	r4, [r2, #16]
 8009620:	3101      	adds	r1, #1
 8009622:	f102 0314 	add.w	r3, r2, #20
 8009626:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800962a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800962e:	1f05      	subs	r5, r0, #4
 8009630:	42a3      	cmp	r3, r4
 8009632:	d30c      	bcc.n	800964e <__copybits+0x36>
 8009634:	1aa3      	subs	r3, r4, r2
 8009636:	3b11      	subs	r3, #17
 8009638:	f023 0303 	bic.w	r3, r3, #3
 800963c:	3211      	adds	r2, #17
 800963e:	42a2      	cmp	r2, r4
 8009640:	bf88      	it	hi
 8009642:	2300      	movhi	r3, #0
 8009644:	4418      	add	r0, r3
 8009646:	2300      	movs	r3, #0
 8009648:	4288      	cmp	r0, r1
 800964a:	d305      	bcc.n	8009658 <__copybits+0x40>
 800964c:	bd70      	pop	{r4, r5, r6, pc}
 800964e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009652:	f845 6f04 	str.w	r6, [r5, #4]!
 8009656:	e7eb      	b.n	8009630 <__copybits+0x18>
 8009658:	f840 3b04 	str.w	r3, [r0], #4
 800965c:	e7f4      	b.n	8009648 <__copybits+0x30>

0800965e <__any_on>:
 800965e:	f100 0214 	add.w	r2, r0, #20
 8009662:	6900      	ldr	r0, [r0, #16]
 8009664:	114b      	asrs	r3, r1, #5
 8009666:	4298      	cmp	r0, r3
 8009668:	b510      	push	{r4, lr}
 800966a:	db11      	blt.n	8009690 <__any_on+0x32>
 800966c:	dd0a      	ble.n	8009684 <__any_on+0x26>
 800966e:	f011 011f 	ands.w	r1, r1, #31
 8009672:	d007      	beq.n	8009684 <__any_on+0x26>
 8009674:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009678:	fa24 f001 	lsr.w	r0, r4, r1
 800967c:	fa00 f101 	lsl.w	r1, r0, r1
 8009680:	428c      	cmp	r4, r1
 8009682:	d10b      	bne.n	800969c <__any_on+0x3e>
 8009684:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009688:	4293      	cmp	r3, r2
 800968a:	d803      	bhi.n	8009694 <__any_on+0x36>
 800968c:	2000      	movs	r0, #0
 800968e:	bd10      	pop	{r4, pc}
 8009690:	4603      	mov	r3, r0
 8009692:	e7f7      	b.n	8009684 <__any_on+0x26>
 8009694:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009698:	2900      	cmp	r1, #0
 800969a:	d0f5      	beq.n	8009688 <__any_on+0x2a>
 800969c:	2001      	movs	r0, #1
 800969e:	e7f6      	b.n	800968e <__any_on+0x30>

080096a0 <__submore>:
 80096a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a4:	460c      	mov	r4, r1
 80096a6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80096a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096ac:	4299      	cmp	r1, r3
 80096ae:	d11d      	bne.n	80096ec <__submore+0x4c>
 80096b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80096b4:	f7ff f878 	bl	80087a8 <_malloc_r>
 80096b8:	b918      	cbnz	r0, 80096c2 <__submore+0x22>
 80096ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096c6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80096c8:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80096cc:	6360      	str	r0, [r4, #52]	@ 0x34
 80096ce:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80096d2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80096d6:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80096da:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80096de:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80096e2:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80096e6:	6020      	str	r0, [r4, #0]
 80096e8:	2000      	movs	r0, #0
 80096ea:	e7e8      	b.n	80096be <__submore+0x1e>
 80096ec:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80096ee:	0077      	lsls	r7, r6, #1
 80096f0:	463a      	mov	r2, r7
 80096f2:	f000 f80f 	bl	8009714 <_realloc_r>
 80096f6:	4605      	mov	r5, r0
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d0de      	beq.n	80096ba <__submore+0x1a>
 80096fc:	eb00 0806 	add.w	r8, r0, r6
 8009700:	4601      	mov	r1, r0
 8009702:	4632      	mov	r2, r6
 8009704:	4640      	mov	r0, r8
 8009706:	f7fd fb03 	bl	8006d10 <memcpy>
 800970a:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800970e:	f8c4 8000 	str.w	r8, [r4]
 8009712:	e7e9      	b.n	80096e8 <__submore+0x48>

08009714 <_realloc_r>:
 8009714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009718:	4607      	mov	r7, r0
 800971a:	4614      	mov	r4, r2
 800971c:	460d      	mov	r5, r1
 800971e:	b921      	cbnz	r1, 800972a <_realloc_r+0x16>
 8009720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009724:	4611      	mov	r1, r2
 8009726:	f7ff b83f 	b.w	80087a8 <_malloc_r>
 800972a:	b92a      	cbnz	r2, 8009738 <_realloc_r+0x24>
 800972c:	f7fe f968 	bl	8007a00 <_free_r>
 8009730:	4625      	mov	r5, r4
 8009732:	4628      	mov	r0, r5
 8009734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009738:	f000 f8f4 	bl	8009924 <_malloc_usable_size_r>
 800973c:	4284      	cmp	r4, r0
 800973e:	4606      	mov	r6, r0
 8009740:	d802      	bhi.n	8009748 <_realloc_r+0x34>
 8009742:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009746:	d8f4      	bhi.n	8009732 <_realloc_r+0x1e>
 8009748:	4621      	mov	r1, r4
 800974a:	4638      	mov	r0, r7
 800974c:	f7ff f82c 	bl	80087a8 <_malloc_r>
 8009750:	4680      	mov	r8, r0
 8009752:	b908      	cbnz	r0, 8009758 <_realloc_r+0x44>
 8009754:	4645      	mov	r5, r8
 8009756:	e7ec      	b.n	8009732 <_realloc_r+0x1e>
 8009758:	42b4      	cmp	r4, r6
 800975a:	4622      	mov	r2, r4
 800975c:	4629      	mov	r1, r5
 800975e:	bf28      	it	cs
 8009760:	4632      	movcs	r2, r6
 8009762:	f7fd fad5 	bl	8006d10 <memcpy>
 8009766:	4629      	mov	r1, r5
 8009768:	4638      	mov	r0, r7
 800976a:	f7fe f949 	bl	8007a00 <_free_r>
 800976e:	e7f1      	b.n	8009754 <_realloc_r+0x40>

08009770 <_strtoul_l.isra.0>:
 8009770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009774:	4e34      	ldr	r6, [pc, #208]	@ (8009848 <_strtoul_l.isra.0+0xd8>)
 8009776:	4686      	mov	lr, r0
 8009778:	460d      	mov	r5, r1
 800977a:	4628      	mov	r0, r5
 800977c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009780:	5d37      	ldrb	r7, [r6, r4]
 8009782:	f017 0708 	ands.w	r7, r7, #8
 8009786:	d1f8      	bne.n	800977a <_strtoul_l.isra.0+0xa>
 8009788:	2c2d      	cmp	r4, #45	@ 0x2d
 800978a:	d110      	bne.n	80097ae <_strtoul_l.isra.0+0x3e>
 800978c:	782c      	ldrb	r4, [r5, #0]
 800978e:	2701      	movs	r7, #1
 8009790:	1c85      	adds	r5, r0, #2
 8009792:	f033 0010 	bics.w	r0, r3, #16
 8009796:	d115      	bne.n	80097c4 <_strtoul_l.isra.0+0x54>
 8009798:	2c30      	cmp	r4, #48	@ 0x30
 800979a:	d10d      	bne.n	80097b8 <_strtoul_l.isra.0+0x48>
 800979c:	7828      	ldrb	r0, [r5, #0]
 800979e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80097a2:	2858      	cmp	r0, #88	@ 0x58
 80097a4:	d108      	bne.n	80097b8 <_strtoul_l.isra.0+0x48>
 80097a6:	786c      	ldrb	r4, [r5, #1]
 80097a8:	3502      	adds	r5, #2
 80097aa:	2310      	movs	r3, #16
 80097ac:	e00a      	b.n	80097c4 <_strtoul_l.isra.0+0x54>
 80097ae:	2c2b      	cmp	r4, #43	@ 0x2b
 80097b0:	bf04      	itt	eq
 80097b2:	782c      	ldrbeq	r4, [r5, #0]
 80097b4:	1c85      	addeq	r5, r0, #2
 80097b6:	e7ec      	b.n	8009792 <_strtoul_l.isra.0+0x22>
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1f6      	bne.n	80097aa <_strtoul_l.isra.0+0x3a>
 80097bc:	2c30      	cmp	r4, #48	@ 0x30
 80097be:	bf14      	ite	ne
 80097c0:	230a      	movne	r3, #10
 80097c2:	2308      	moveq	r3, #8
 80097c4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80097c8:	2600      	movs	r6, #0
 80097ca:	fbb8 f8f3 	udiv	r8, r8, r3
 80097ce:	fb03 f908 	mul.w	r9, r3, r8
 80097d2:	ea6f 0909 	mvn.w	r9, r9
 80097d6:	4630      	mov	r0, r6
 80097d8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80097dc:	f1bc 0f09 	cmp.w	ip, #9
 80097e0:	d810      	bhi.n	8009804 <_strtoul_l.isra.0+0x94>
 80097e2:	4664      	mov	r4, ip
 80097e4:	42a3      	cmp	r3, r4
 80097e6:	dd1e      	ble.n	8009826 <_strtoul_l.isra.0+0xb6>
 80097e8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80097ec:	d007      	beq.n	80097fe <_strtoul_l.isra.0+0x8e>
 80097ee:	4580      	cmp	r8, r0
 80097f0:	d316      	bcc.n	8009820 <_strtoul_l.isra.0+0xb0>
 80097f2:	d101      	bne.n	80097f8 <_strtoul_l.isra.0+0x88>
 80097f4:	45a1      	cmp	r9, r4
 80097f6:	db13      	blt.n	8009820 <_strtoul_l.isra.0+0xb0>
 80097f8:	fb00 4003 	mla	r0, r0, r3, r4
 80097fc:	2601      	movs	r6, #1
 80097fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009802:	e7e9      	b.n	80097d8 <_strtoul_l.isra.0+0x68>
 8009804:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009808:	f1bc 0f19 	cmp.w	ip, #25
 800980c:	d801      	bhi.n	8009812 <_strtoul_l.isra.0+0xa2>
 800980e:	3c37      	subs	r4, #55	@ 0x37
 8009810:	e7e8      	b.n	80097e4 <_strtoul_l.isra.0+0x74>
 8009812:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009816:	f1bc 0f19 	cmp.w	ip, #25
 800981a:	d804      	bhi.n	8009826 <_strtoul_l.isra.0+0xb6>
 800981c:	3c57      	subs	r4, #87	@ 0x57
 800981e:	e7e1      	b.n	80097e4 <_strtoul_l.isra.0+0x74>
 8009820:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8009824:	e7eb      	b.n	80097fe <_strtoul_l.isra.0+0x8e>
 8009826:	1c73      	adds	r3, r6, #1
 8009828:	d106      	bne.n	8009838 <_strtoul_l.isra.0+0xc8>
 800982a:	2322      	movs	r3, #34	@ 0x22
 800982c:	f8ce 3000 	str.w	r3, [lr]
 8009830:	4630      	mov	r0, r6
 8009832:	b932      	cbnz	r2, 8009842 <_strtoul_l.isra.0+0xd2>
 8009834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009838:	b107      	cbz	r7, 800983c <_strtoul_l.isra.0+0xcc>
 800983a:	4240      	negs	r0, r0
 800983c:	2a00      	cmp	r2, #0
 800983e:	d0f9      	beq.n	8009834 <_strtoul_l.isra.0+0xc4>
 8009840:	b106      	cbz	r6, 8009844 <_strtoul_l.isra.0+0xd4>
 8009842:	1e69      	subs	r1, r5, #1
 8009844:	6011      	str	r1, [r2, #0]
 8009846:	e7f5      	b.n	8009834 <_strtoul_l.isra.0+0xc4>
 8009848:	0800a321 	.word	0x0800a321

0800984c <_strtoul_r>:
 800984c:	f7ff bf90 	b.w	8009770 <_strtoul_l.isra.0>

08009850 <__ascii_wctomb>:
 8009850:	4603      	mov	r3, r0
 8009852:	4608      	mov	r0, r1
 8009854:	b141      	cbz	r1, 8009868 <__ascii_wctomb+0x18>
 8009856:	2aff      	cmp	r2, #255	@ 0xff
 8009858:	d904      	bls.n	8009864 <__ascii_wctomb+0x14>
 800985a:	228a      	movs	r2, #138	@ 0x8a
 800985c:	601a      	str	r2, [r3, #0]
 800985e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009862:	4770      	bx	lr
 8009864:	700a      	strb	r2, [r1, #0]
 8009866:	2001      	movs	r0, #1
 8009868:	4770      	bx	lr

0800986a <memmove>:
 800986a:	4288      	cmp	r0, r1
 800986c:	b510      	push	{r4, lr}
 800986e:	eb01 0402 	add.w	r4, r1, r2
 8009872:	d902      	bls.n	800987a <memmove+0x10>
 8009874:	4284      	cmp	r4, r0
 8009876:	4623      	mov	r3, r4
 8009878:	d807      	bhi.n	800988a <memmove+0x20>
 800987a:	1e43      	subs	r3, r0, #1
 800987c:	42a1      	cmp	r1, r4
 800987e:	d008      	beq.n	8009892 <memmove+0x28>
 8009880:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009884:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009888:	e7f8      	b.n	800987c <memmove+0x12>
 800988a:	4402      	add	r2, r0
 800988c:	4601      	mov	r1, r0
 800988e:	428a      	cmp	r2, r1
 8009890:	d100      	bne.n	8009894 <memmove+0x2a>
 8009892:	bd10      	pop	{r4, pc}
 8009894:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009898:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800989c:	e7f7      	b.n	800988e <memmove+0x24>
	...

080098a0 <_sbrk_r>:
 80098a0:	b538      	push	{r3, r4, r5, lr}
 80098a2:	4d06      	ldr	r5, [pc, #24]	@ (80098bc <_sbrk_r+0x1c>)
 80098a4:	2300      	movs	r3, #0
 80098a6:	4604      	mov	r4, r0
 80098a8:	4608      	mov	r0, r1
 80098aa:	602b      	str	r3, [r5, #0]
 80098ac:	f7f8 fab0 	bl	8001e10 <_sbrk>
 80098b0:	1c43      	adds	r3, r0, #1
 80098b2:	d102      	bne.n	80098ba <_sbrk_r+0x1a>
 80098b4:	682b      	ldr	r3, [r5, #0]
 80098b6:	b103      	cbz	r3, 80098ba <_sbrk_r+0x1a>
 80098b8:	6023      	str	r3, [r4, #0]
 80098ba:	bd38      	pop	{r3, r4, r5, pc}
 80098bc:	20000aa4 	.word	0x20000aa4

080098c0 <__assert_func>:
 80098c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098c2:	4614      	mov	r4, r2
 80098c4:	461a      	mov	r2, r3
 80098c6:	4b09      	ldr	r3, [pc, #36]	@ (80098ec <__assert_func+0x2c>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4605      	mov	r5, r0
 80098cc:	68d8      	ldr	r0, [r3, #12]
 80098ce:	b14c      	cbz	r4, 80098e4 <__assert_func+0x24>
 80098d0:	4b07      	ldr	r3, [pc, #28]	@ (80098f0 <__assert_func+0x30>)
 80098d2:	9100      	str	r1, [sp, #0]
 80098d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098d8:	4906      	ldr	r1, [pc, #24]	@ (80098f4 <__assert_func+0x34>)
 80098da:	462b      	mov	r3, r5
 80098dc:	f000 f82a 	bl	8009934 <fiprintf>
 80098e0:	f000 f83a 	bl	8009958 <abort>
 80098e4:	4b04      	ldr	r3, [pc, #16]	@ (80098f8 <__assert_func+0x38>)
 80098e6:	461c      	mov	r4, r3
 80098e8:	e7f3      	b.n	80098d2 <__assert_func+0x12>
 80098ea:	bf00      	nop
 80098ec:	20000190 	.word	0x20000190
 80098f0:	0800a28f 	.word	0x0800a28f
 80098f4:	0800a29c 	.word	0x0800a29c
 80098f8:	0800a2ca 	.word	0x0800a2ca

080098fc <_calloc_r>:
 80098fc:	b570      	push	{r4, r5, r6, lr}
 80098fe:	fba1 5402 	umull	r5, r4, r1, r2
 8009902:	b934      	cbnz	r4, 8009912 <_calloc_r+0x16>
 8009904:	4629      	mov	r1, r5
 8009906:	f7fe ff4f 	bl	80087a8 <_malloc_r>
 800990a:	4606      	mov	r6, r0
 800990c:	b928      	cbnz	r0, 800991a <_calloc_r+0x1e>
 800990e:	4630      	mov	r0, r6
 8009910:	bd70      	pop	{r4, r5, r6, pc}
 8009912:	220c      	movs	r2, #12
 8009914:	6002      	str	r2, [r0, #0]
 8009916:	2600      	movs	r6, #0
 8009918:	e7f9      	b.n	800990e <_calloc_r+0x12>
 800991a:	462a      	mov	r2, r5
 800991c:	4621      	mov	r1, r4
 800991e:	f7fd f945 	bl	8006bac <memset>
 8009922:	e7f4      	b.n	800990e <_calloc_r+0x12>

08009924 <_malloc_usable_size_r>:
 8009924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009928:	1f18      	subs	r0, r3, #4
 800992a:	2b00      	cmp	r3, #0
 800992c:	bfbc      	itt	lt
 800992e:	580b      	ldrlt	r3, [r1, r0]
 8009930:	18c0      	addlt	r0, r0, r3
 8009932:	4770      	bx	lr

08009934 <fiprintf>:
 8009934:	b40e      	push	{r1, r2, r3}
 8009936:	b503      	push	{r0, r1, lr}
 8009938:	4601      	mov	r1, r0
 800993a:	ab03      	add	r3, sp, #12
 800993c:	4805      	ldr	r0, [pc, #20]	@ (8009954 <fiprintf+0x20>)
 800993e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009942:	6800      	ldr	r0, [r0, #0]
 8009944:	9301      	str	r3, [sp, #4]
 8009946:	f000 f837 	bl	80099b8 <_vfiprintf_r>
 800994a:	b002      	add	sp, #8
 800994c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009950:	b003      	add	sp, #12
 8009952:	4770      	bx	lr
 8009954:	20000190 	.word	0x20000190

08009958 <abort>:
 8009958:	b508      	push	{r3, lr}
 800995a:	2006      	movs	r0, #6
 800995c:	f000 fa62 	bl	8009e24 <raise>
 8009960:	2001      	movs	r0, #1
 8009962:	f7f8 f9dd 	bl	8001d20 <_exit>

08009966 <__sfputc_r>:
 8009966:	6893      	ldr	r3, [r2, #8]
 8009968:	3b01      	subs	r3, #1
 800996a:	2b00      	cmp	r3, #0
 800996c:	b410      	push	{r4}
 800996e:	6093      	str	r3, [r2, #8]
 8009970:	da08      	bge.n	8009984 <__sfputc_r+0x1e>
 8009972:	6994      	ldr	r4, [r2, #24]
 8009974:	42a3      	cmp	r3, r4
 8009976:	db01      	blt.n	800997c <__sfputc_r+0x16>
 8009978:	290a      	cmp	r1, #10
 800997a:	d103      	bne.n	8009984 <__sfputc_r+0x1e>
 800997c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009980:	f000 b932 	b.w	8009be8 <__swbuf_r>
 8009984:	6813      	ldr	r3, [r2, #0]
 8009986:	1c58      	adds	r0, r3, #1
 8009988:	6010      	str	r0, [r2, #0]
 800998a:	7019      	strb	r1, [r3, #0]
 800998c:	4608      	mov	r0, r1
 800998e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009992:	4770      	bx	lr

08009994 <__sfputs_r>:
 8009994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009996:	4606      	mov	r6, r0
 8009998:	460f      	mov	r7, r1
 800999a:	4614      	mov	r4, r2
 800999c:	18d5      	adds	r5, r2, r3
 800999e:	42ac      	cmp	r4, r5
 80099a0:	d101      	bne.n	80099a6 <__sfputs_r+0x12>
 80099a2:	2000      	movs	r0, #0
 80099a4:	e007      	b.n	80099b6 <__sfputs_r+0x22>
 80099a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099aa:	463a      	mov	r2, r7
 80099ac:	4630      	mov	r0, r6
 80099ae:	f7ff ffda 	bl	8009966 <__sfputc_r>
 80099b2:	1c43      	adds	r3, r0, #1
 80099b4:	d1f3      	bne.n	800999e <__sfputs_r+0xa>
 80099b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099b8 <_vfiprintf_r>:
 80099b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099bc:	460d      	mov	r5, r1
 80099be:	b09d      	sub	sp, #116	@ 0x74
 80099c0:	4614      	mov	r4, r2
 80099c2:	4698      	mov	r8, r3
 80099c4:	4606      	mov	r6, r0
 80099c6:	b118      	cbz	r0, 80099d0 <_vfiprintf_r+0x18>
 80099c8:	6a03      	ldr	r3, [r0, #32]
 80099ca:	b90b      	cbnz	r3, 80099d0 <_vfiprintf_r+0x18>
 80099cc:	f7fc f9c4 	bl	8005d58 <__sinit>
 80099d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099d2:	07d9      	lsls	r1, r3, #31
 80099d4:	d405      	bmi.n	80099e2 <_vfiprintf_r+0x2a>
 80099d6:	89ab      	ldrh	r3, [r5, #12]
 80099d8:	059a      	lsls	r2, r3, #22
 80099da:	d402      	bmi.n	80099e2 <_vfiprintf_r+0x2a>
 80099dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099de:	f7fd f980 	bl	8006ce2 <__retarget_lock_acquire_recursive>
 80099e2:	89ab      	ldrh	r3, [r5, #12]
 80099e4:	071b      	lsls	r3, r3, #28
 80099e6:	d501      	bpl.n	80099ec <_vfiprintf_r+0x34>
 80099e8:	692b      	ldr	r3, [r5, #16]
 80099ea:	b99b      	cbnz	r3, 8009a14 <_vfiprintf_r+0x5c>
 80099ec:	4629      	mov	r1, r5
 80099ee:	4630      	mov	r0, r6
 80099f0:	f000 f938 	bl	8009c64 <__swsetup_r>
 80099f4:	b170      	cbz	r0, 8009a14 <_vfiprintf_r+0x5c>
 80099f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099f8:	07dc      	lsls	r4, r3, #31
 80099fa:	d504      	bpl.n	8009a06 <_vfiprintf_r+0x4e>
 80099fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a00:	b01d      	add	sp, #116	@ 0x74
 8009a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a06:	89ab      	ldrh	r3, [r5, #12]
 8009a08:	0598      	lsls	r0, r3, #22
 8009a0a:	d4f7      	bmi.n	80099fc <_vfiprintf_r+0x44>
 8009a0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a0e:	f7fd f969 	bl	8006ce4 <__retarget_lock_release_recursive>
 8009a12:	e7f3      	b.n	80099fc <_vfiprintf_r+0x44>
 8009a14:	2300      	movs	r3, #0
 8009a16:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a18:	2320      	movs	r3, #32
 8009a1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a22:	2330      	movs	r3, #48	@ 0x30
 8009a24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009bd4 <_vfiprintf_r+0x21c>
 8009a28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a2c:	f04f 0901 	mov.w	r9, #1
 8009a30:	4623      	mov	r3, r4
 8009a32:	469a      	mov	sl, r3
 8009a34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a38:	b10a      	cbz	r2, 8009a3e <_vfiprintf_r+0x86>
 8009a3a:	2a25      	cmp	r2, #37	@ 0x25
 8009a3c:	d1f9      	bne.n	8009a32 <_vfiprintf_r+0x7a>
 8009a3e:	ebba 0b04 	subs.w	fp, sl, r4
 8009a42:	d00b      	beq.n	8009a5c <_vfiprintf_r+0xa4>
 8009a44:	465b      	mov	r3, fp
 8009a46:	4622      	mov	r2, r4
 8009a48:	4629      	mov	r1, r5
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	f7ff ffa2 	bl	8009994 <__sfputs_r>
 8009a50:	3001      	adds	r0, #1
 8009a52:	f000 80a7 	beq.w	8009ba4 <_vfiprintf_r+0x1ec>
 8009a56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a58:	445a      	add	r2, fp
 8009a5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f000 809f 	beq.w	8009ba4 <_vfiprintf_r+0x1ec>
 8009a66:	2300      	movs	r3, #0
 8009a68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a70:	f10a 0a01 	add.w	sl, sl, #1
 8009a74:	9304      	str	r3, [sp, #16]
 8009a76:	9307      	str	r3, [sp, #28]
 8009a78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a7e:	4654      	mov	r4, sl
 8009a80:	2205      	movs	r2, #5
 8009a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a86:	4853      	ldr	r0, [pc, #332]	@ (8009bd4 <_vfiprintf_r+0x21c>)
 8009a88:	f7f6 fba2 	bl	80001d0 <memchr>
 8009a8c:	9a04      	ldr	r2, [sp, #16]
 8009a8e:	b9d8      	cbnz	r0, 8009ac8 <_vfiprintf_r+0x110>
 8009a90:	06d1      	lsls	r1, r2, #27
 8009a92:	bf44      	itt	mi
 8009a94:	2320      	movmi	r3, #32
 8009a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a9a:	0713      	lsls	r3, r2, #28
 8009a9c:	bf44      	itt	mi
 8009a9e:	232b      	movmi	r3, #43	@ 0x2b
 8009aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8009aa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009aaa:	d015      	beq.n	8009ad8 <_vfiprintf_r+0x120>
 8009aac:	9a07      	ldr	r2, [sp, #28]
 8009aae:	4654      	mov	r4, sl
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	f04f 0c0a 	mov.w	ip, #10
 8009ab6:	4621      	mov	r1, r4
 8009ab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009abc:	3b30      	subs	r3, #48	@ 0x30
 8009abe:	2b09      	cmp	r3, #9
 8009ac0:	d94b      	bls.n	8009b5a <_vfiprintf_r+0x1a2>
 8009ac2:	b1b0      	cbz	r0, 8009af2 <_vfiprintf_r+0x13a>
 8009ac4:	9207      	str	r2, [sp, #28]
 8009ac6:	e014      	b.n	8009af2 <_vfiprintf_r+0x13a>
 8009ac8:	eba0 0308 	sub.w	r3, r0, r8
 8009acc:	fa09 f303 	lsl.w	r3, r9, r3
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	9304      	str	r3, [sp, #16]
 8009ad4:	46a2      	mov	sl, r4
 8009ad6:	e7d2      	b.n	8009a7e <_vfiprintf_r+0xc6>
 8009ad8:	9b03      	ldr	r3, [sp, #12]
 8009ada:	1d19      	adds	r1, r3, #4
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	9103      	str	r1, [sp, #12]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	bfbb      	ittet	lt
 8009ae4:	425b      	neglt	r3, r3
 8009ae6:	f042 0202 	orrlt.w	r2, r2, #2
 8009aea:	9307      	strge	r3, [sp, #28]
 8009aec:	9307      	strlt	r3, [sp, #28]
 8009aee:	bfb8      	it	lt
 8009af0:	9204      	strlt	r2, [sp, #16]
 8009af2:	7823      	ldrb	r3, [r4, #0]
 8009af4:	2b2e      	cmp	r3, #46	@ 0x2e
 8009af6:	d10a      	bne.n	8009b0e <_vfiprintf_r+0x156>
 8009af8:	7863      	ldrb	r3, [r4, #1]
 8009afa:	2b2a      	cmp	r3, #42	@ 0x2a
 8009afc:	d132      	bne.n	8009b64 <_vfiprintf_r+0x1ac>
 8009afe:	9b03      	ldr	r3, [sp, #12]
 8009b00:	1d1a      	adds	r2, r3, #4
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	9203      	str	r2, [sp, #12]
 8009b06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b0a:	3402      	adds	r4, #2
 8009b0c:	9305      	str	r3, [sp, #20]
 8009b0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009be4 <_vfiprintf_r+0x22c>
 8009b12:	7821      	ldrb	r1, [r4, #0]
 8009b14:	2203      	movs	r2, #3
 8009b16:	4650      	mov	r0, sl
 8009b18:	f7f6 fb5a 	bl	80001d0 <memchr>
 8009b1c:	b138      	cbz	r0, 8009b2e <_vfiprintf_r+0x176>
 8009b1e:	9b04      	ldr	r3, [sp, #16]
 8009b20:	eba0 000a 	sub.w	r0, r0, sl
 8009b24:	2240      	movs	r2, #64	@ 0x40
 8009b26:	4082      	lsls	r2, r0
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	3401      	adds	r4, #1
 8009b2c:	9304      	str	r3, [sp, #16]
 8009b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b32:	4829      	ldr	r0, [pc, #164]	@ (8009bd8 <_vfiprintf_r+0x220>)
 8009b34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b38:	2206      	movs	r2, #6
 8009b3a:	f7f6 fb49 	bl	80001d0 <memchr>
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d03f      	beq.n	8009bc2 <_vfiprintf_r+0x20a>
 8009b42:	4b26      	ldr	r3, [pc, #152]	@ (8009bdc <_vfiprintf_r+0x224>)
 8009b44:	bb1b      	cbnz	r3, 8009b8e <_vfiprintf_r+0x1d6>
 8009b46:	9b03      	ldr	r3, [sp, #12]
 8009b48:	3307      	adds	r3, #7
 8009b4a:	f023 0307 	bic.w	r3, r3, #7
 8009b4e:	3308      	adds	r3, #8
 8009b50:	9303      	str	r3, [sp, #12]
 8009b52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b54:	443b      	add	r3, r7
 8009b56:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b58:	e76a      	b.n	8009a30 <_vfiprintf_r+0x78>
 8009b5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b5e:	460c      	mov	r4, r1
 8009b60:	2001      	movs	r0, #1
 8009b62:	e7a8      	b.n	8009ab6 <_vfiprintf_r+0xfe>
 8009b64:	2300      	movs	r3, #0
 8009b66:	3401      	adds	r4, #1
 8009b68:	9305      	str	r3, [sp, #20]
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	f04f 0c0a 	mov.w	ip, #10
 8009b70:	4620      	mov	r0, r4
 8009b72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b76:	3a30      	subs	r2, #48	@ 0x30
 8009b78:	2a09      	cmp	r2, #9
 8009b7a:	d903      	bls.n	8009b84 <_vfiprintf_r+0x1cc>
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d0c6      	beq.n	8009b0e <_vfiprintf_r+0x156>
 8009b80:	9105      	str	r1, [sp, #20]
 8009b82:	e7c4      	b.n	8009b0e <_vfiprintf_r+0x156>
 8009b84:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b88:	4604      	mov	r4, r0
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e7f0      	b.n	8009b70 <_vfiprintf_r+0x1b8>
 8009b8e:	ab03      	add	r3, sp, #12
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	462a      	mov	r2, r5
 8009b94:	4b12      	ldr	r3, [pc, #72]	@ (8009be0 <_vfiprintf_r+0x228>)
 8009b96:	a904      	add	r1, sp, #16
 8009b98:	4630      	mov	r0, r6
 8009b9a:	f7fb f9f9 	bl	8004f90 <_printf_float>
 8009b9e:	4607      	mov	r7, r0
 8009ba0:	1c78      	adds	r0, r7, #1
 8009ba2:	d1d6      	bne.n	8009b52 <_vfiprintf_r+0x19a>
 8009ba4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ba6:	07d9      	lsls	r1, r3, #31
 8009ba8:	d405      	bmi.n	8009bb6 <_vfiprintf_r+0x1fe>
 8009baa:	89ab      	ldrh	r3, [r5, #12]
 8009bac:	059a      	lsls	r2, r3, #22
 8009bae:	d402      	bmi.n	8009bb6 <_vfiprintf_r+0x1fe>
 8009bb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bb2:	f7fd f897 	bl	8006ce4 <__retarget_lock_release_recursive>
 8009bb6:	89ab      	ldrh	r3, [r5, #12]
 8009bb8:	065b      	lsls	r3, r3, #25
 8009bba:	f53f af1f 	bmi.w	80099fc <_vfiprintf_r+0x44>
 8009bbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bc0:	e71e      	b.n	8009a00 <_vfiprintf_r+0x48>
 8009bc2:	ab03      	add	r3, sp, #12
 8009bc4:	9300      	str	r3, [sp, #0]
 8009bc6:	462a      	mov	r2, r5
 8009bc8:	4b05      	ldr	r3, [pc, #20]	@ (8009be0 <_vfiprintf_r+0x228>)
 8009bca:	a904      	add	r1, sp, #16
 8009bcc:	4630      	mov	r0, r6
 8009bce:	f7fb fc77 	bl	80054c0 <_printf_i>
 8009bd2:	e7e4      	b.n	8009b9e <_vfiprintf_r+0x1e6>
 8009bd4:	0800a20a 	.word	0x0800a20a
 8009bd8:	0800a214 	.word	0x0800a214
 8009bdc:	08004f91 	.word	0x08004f91
 8009be0:	08009995 	.word	0x08009995
 8009be4:	0800a210 	.word	0x0800a210

08009be8 <__swbuf_r>:
 8009be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bea:	460e      	mov	r6, r1
 8009bec:	4614      	mov	r4, r2
 8009bee:	4605      	mov	r5, r0
 8009bf0:	b118      	cbz	r0, 8009bfa <__swbuf_r+0x12>
 8009bf2:	6a03      	ldr	r3, [r0, #32]
 8009bf4:	b90b      	cbnz	r3, 8009bfa <__swbuf_r+0x12>
 8009bf6:	f7fc f8af 	bl	8005d58 <__sinit>
 8009bfa:	69a3      	ldr	r3, [r4, #24]
 8009bfc:	60a3      	str	r3, [r4, #8]
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	071a      	lsls	r2, r3, #28
 8009c02:	d501      	bpl.n	8009c08 <__swbuf_r+0x20>
 8009c04:	6923      	ldr	r3, [r4, #16]
 8009c06:	b943      	cbnz	r3, 8009c1a <__swbuf_r+0x32>
 8009c08:	4621      	mov	r1, r4
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	f000 f82a 	bl	8009c64 <__swsetup_r>
 8009c10:	b118      	cbz	r0, 8009c1a <__swbuf_r+0x32>
 8009c12:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009c16:	4638      	mov	r0, r7
 8009c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	6922      	ldr	r2, [r4, #16]
 8009c1e:	1a98      	subs	r0, r3, r2
 8009c20:	6963      	ldr	r3, [r4, #20]
 8009c22:	b2f6      	uxtb	r6, r6
 8009c24:	4283      	cmp	r3, r0
 8009c26:	4637      	mov	r7, r6
 8009c28:	dc05      	bgt.n	8009c36 <__swbuf_r+0x4e>
 8009c2a:	4621      	mov	r1, r4
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	f7ff f859 	bl	8008ce4 <_fflush_r>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d1ed      	bne.n	8009c12 <__swbuf_r+0x2a>
 8009c36:	68a3      	ldr	r3, [r4, #8]
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	60a3      	str	r3, [r4, #8]
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	1c5a      	adds	r2, r3, #1
 8009c40:	6022      	str	r2, [r4, #0]
 8009c42:	701e      	strb	r6, [r3, #0]
 8009c44:	6962      	ldr	r2, [r4, #20]
 8009c46:	1c43      	adds	r3, r0, #1
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d004      	beq.n	8009c56 <__swbuf_r+0x6e>
 8009c4c:	89a3      	ldrh	r3, [r4, #12]
 8009c4e:	07db      	lsls	r3, r3, #31
 8009c50:	d5e1      	bpl.n	8009c16 <__swbuf_r+0x2e>
 8009c52:	2e0a      	cmp	r6, #10
 8009c54:	d1df      	bne.n	8009c16 <__swbuf_r+0x2e>
 8009c56:	4621      	mov	r1, r4
 8009c58:	4628      	mov	r0, r5
 8009c5a:	f7ff f843 	bl	8008ce4 <_fflush_r>
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d0d9      	beq.n	8009c16 <__swbuf_r+0x2e>
 8009c62:	e7d6      	b.n	8009c12 <__swbuf_r+0x2a>

08009c64 <__swsetup_r>:
 8009c64:	b538      	push	{r3, r4, r5, lr}
 8009c66:	4b29      	ldr	r3, [pc, #164]	@ (8009d0c <__swsetup_r+0xa8>)
 8009c68:	4605      	mov	r5, r0
 8009c6a:	6818      	ldr	r0, [r3, #0]
 8009c6c:	460c      	mov	r4, r1
 8009c6e:	b118      	cbz	r0, 8009c78 <__swsetup_r+0x14>
 8009c70:	6a03      	ldr	r3, [r0, #32]
 8009c72:	b90b      	cbnz	r3, 8009c78 <__swsetup_r+0x14>
 8009c74:	f7fc f870 	bl	8005d58 <__sinit>
 8009c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c7c:	0719      	lsls	r1, r3, #28
 8009c7e:	d422      	bmi.n	8009cc6 <__swsetup_r+0x62>
 8009c80:	06da      	lsls	r2, r3, #27
 8009c82:	d407      	bmi.n	8009c94 <__swsetup_r+0x30>
 8009c84:	2209      	movs	r2, #9
 8009c86:	602a      	str	r2, [r5, #0]
 8009c88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c8c:	81a3      	strh	r3, [r4, #12]
 8009c8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c92:	e033      	b.n	8009cfc <__swsetup_r+0x98>
 8009c94:	0758      	lsls	r0, r3, #29
 8009c96:	d512      	bpl.n	8009cbe <__swsetup_r+0x5a>
 8009c98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c9a:	b141      	cbz	r1, 8009cae <__swsetup_r+0x4a>
 8009c9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ca0:	4299      	cmp	r1, r3
 8009ca2:	d002      	beq.n	8009caa <__swsetup_r+0x46>
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	f7fd feab 	bl	8007a00 <_free_r>
 8009caa:	2300      	movs	r3, #0
 8009cac:	6363      	str	r3, [r4, #52]	@ 0x34
 8009cae:	89a3      	ldrh	r3, [r4, #12]
 8009cb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009cb4:	81a3      	strh	r3, [r4, #12]
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	6063      	str	r3, [r4, #4]
 8009cba:	6923      	ldr	r3, [r4, #16]
 8009cbc:	6023      	str	r3, [r4, #0]
 8009cbe:	89a3      	ldrh	r3, [r4, #12]
 8009cc0:	f043 0308 	orr.w	r3, r3, #8
 8009cc4:	81a3      	strh	r3, [r4, #12]
 8009cc6:	6923      	ldr	r3, [r4, #16]
 8009cc8:	b94b      	cbnz	r3, 8009cde <__swsetup_r+0x7a>
 8009cca:	89a3      	ldrh	r3, [r4, #12]
 8009ccc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009cd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cd4:	d003      	beq.n	8009cde <__swsetup_r+0x7a>
 8009cd6:	4621      	mov	r1, r4
 8009cd8:	4628      	mov	r0, r5
 8009cda:	f000 f83f 	bl	8009d5c <__smakebuf_r>
 8009cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ce2:	f013 0201 	ands.w	r2, r3, #1
 8009ce6:	d00a      	beq.n	8009cfe <__swsetup_r+0x9a>
 8009ce8:	2200      	movs	r2, #0
 8009cea:	60a2      	str	r2, [r4, #8]
 8009cec:	6962      	ldr	r2, [r4, #20]
 8009cee:	4252      	negs	r2, r2
 8009cf0:	61a2      	str	r2, [r4, #24]
 8009cf2:	6922      	ldr	r2, [r4, #16]
 8009cf4:	b942      	cbnz	r2, 8009d08 <__swsetup_r+0xa4>
 8009cf6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009cfa:	d1c5      	bne.n	8009c88 <__swsetup_r+0x24>
 8009cfc:	bd38      	pop	{r3, r4, r5, pc}
 8009cfe:	0799      	lsls	r1, r3, #30
 8009d00:	bf58      	it	pl
 8009d02:	6962      	ldrpl	r2, [r4, #20]
 8009d04:	60a2      	str	r2, [r4, #8]
 8009d06:	e7f4      	b.n	8009cf2 <__swsetup_r+0x8e>
 8009d08:	2000      	movs	r0, #0
 8009d0a:	e7f7      	b.n	8009cfc <__swsetup_r+0x98>
 8009d0c:	20000190 	.word	0x20000190

08009d10 <__swhatbuf_r>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	460c      	mov	r4, r1
 8009d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d18:	2900      	cmp	r1, #0
 8009d1a:	b096      	sub	sp, #88	@ 0x58
 8009d1c:	4615      	mov	r5, r2
 8009d1e:	461e      	mov	r6, r3
 8009d20:	da0d      	bge.n	8009d3e <__swhatbuf_r+0x2e>
 8009d22:	89a3      	ldrh	r3, [r4, #12]
 8009d24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d28:	f04f 0100 	mov.w	r1, #0
 8009d2c:	bf14      	ite	ne
 8009d2e:	2340      	movne	r3, #64	@ 0x40
 8009d30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d34:	2000      	movs	r0, #0
 8009d36:	6031      	str	r1, [r6, #0]
 8009d38:	602b      	str	r3, [r5, #0]
 8009d3a:	b016      	add	sp, #88	@ 0x58
 8009d3c:	bd70      	pop	{r4, r5, r6, pc}
 8009d3e:	466a      	mov	r2, sp
 8009d40:	f000 f89c 	bl	8009e7c <_fstat_r>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	dbec      	blt.n	8009d22 <__swhatbuf_r+0x12>
 8009d48:	9901      	ldr	r1, [sp, #4]
 8009d4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d52:	4259      	negs	r1, r3
 8009d54:	4159      	adcs	r1, r3
 8009d56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d5a:	e7eb      	b.n	8009d34 <__swhatbuf_r+0x24>

08009d5c <__smakebuf_r>:
 8009d5c:	898b      	ldrh	r3, [r1, #12]
 8009d5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d60:	079d      	lsls	r5, r3, #30
 8009d62:	4606      	mov	r6, r0
 8009d64:	460c      	mov	r4, r1
 8009d66:	d507      	bpl.n	8009d78 <__smakebuf_r+0x1c>
 8009d68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d6c:	6023      	str	r3, [r4, #0]
 8009d6e:	6123      	str	r3, [r4, #16]
 8009d70:	2301      	movs	r3, #1
 8009d72:	6163      	str	r3, [r4, #20]
 8009d74:	b003      	add	sp, #12
 8009d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d78:	ab01      	add	r3, sp, #4
 8009d7a:	466a      	mov	r2, sp
 8009d7c:	f7ff ffc8 	bl	8009d10 <__swhatbuf_r>
 8009d80:	9f00      	ldr	r7, [sp, #0]
 8009d82:	4605      	mov	r5, r0
 8009d84:	4639      	mov	r1, r7
 8009d86:	4630      	mov	r0, r6
 8009d88:	f7fe fd0e 	bl	80087a8 <_malloc_r>
 8009d8c:	b948      	cbnz	r0, 8009da2 <__smakebuf_r+0x46>
 8009d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d92:	059a      	lsls	r2, r3, #22
 8009d94:	d4ee      	bmi.n	8009d74 <__smakebuf_r+0x18>
 8009d96:	f023 0303 	bic.w	r3, r3, #3
 8009d9a:	f043 0302 	orr.w	r3, r3, #2
 8009d9e:	81a3      	strh	r3, [r4, #12]
 8009da0:	e7e2      	b.n	8009d68 <__smakebuf_r+0xc>
 8009da2:	89a3      	ldrh	r3, [r4, #12]
 8009da4:	6020      	str	r0, [r4, #0]
 8009da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009daa:	81a3      	strh	r3, [r4, #12]
 8009dac:	9b01      	ldr	r3, [sp, #4]
 8009dae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009db2:	b15b      	cbz	r3, 8009dcc <__smakebuf_r+0x70>
 8009db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009db8:	4630      	mov	r0, r6
 8009dba:	f000 f83b 	bl	8009e34 <_isatty_r>
 8009dbe:	b128      	cbz	r0, 8009dcc <__smakebuf_r+0x70>
 8009dc0:	89a3      	ldrh	r3, [r4, #12]
 8009dc2:	f023 0303 	bic.w	r3, r3, #3
 8009dc6:	f043 0301 	orr.w	r3, r3, #1
 8009dca:	81a3      	strh	r3, [r4, #12]
 8009dcc:	89a3      	ldrh	r3, [r4, #12]
 8009dce:	431d      	orrs	r5, r3
 8009dd0:	81a5      	strh	r5, [r4, #12]
 8009dd2:	e7cf      	b.n	8009d74 <__smakebuf_r+0x18>

08009dd4 <_raise_r>:
 8009dd4:	291f      	cmp	r1, #31
 8009dd6:	b538      	push	{r3, r4, r5, lr}
 8009dd8:	4605      	mov	r5, r0
 8009dda:	460c      	mov	r4, r1
 8009ddc:	d904      	bls.n	8009de8 <_raise_r+0x14>
 8009dde:	2316      	movs	r3, #22
 8009de0:	6003      	str	r3, [r0, #0]
 8009de2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009de6:	bd38      	pop	{r3, r4, r5, pc}
 8009de8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009dea:	b112      	cbz	r2, 8009df2 <_raise_r+0x1e>
 8009dec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009df0:	b94b      	cbnz	r3, 8009e06 <_raise_r+0x32>
 8009df2:	4628      	mov	r0, r5
 8009df4:	f000 f840 	bl	8009e78 <_getpid_r>
 8009df8:	4622      	mov	r2, r4
 8009dfa:	4601      	mov	r1, r0
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e02:	f000 b827 	b.w	8009e54 <_kill_r>
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d00a      	beq.n	8009e20 <_raise_r+0x4c>
 8009e0a:	1c59      	adds	r1, r3, #1
 8009e0c:	d103      	bne.n	8009e16 <_raise_r+0x42>
 8009e0e:	2316      	movs	r3, #22
 8009e10:	6003      	str	r3, [r0, #0]
 8009e12:	2001      	movs	r0, #1
 8009e14:	e7e7      	b.n	8009de6 <_raise_r+0x12>
 8009e16:	2100      	movs	r1, #0
 8009e18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	4798      	blx	r3
 8009e20:	2000      	movs	r0, #0
 8009e22:	e7e0      	b.n	8009de6 <_raise_r+0x12>

08009e24 <raise>:
 8009e24:	4b02      	ldr	r3, [pc, #8]	@ (8009e30 <raise+0xc>)
 8009e26:	4601      	mov	r1, r0
 8009e28:	6818      	ldr	r0, [r3, #0]
 8009e2a:	f7ff bfd3 	b.w	8009dd4 <_raise_r>
 8009e2e:	bf00      	nop
 8009e30:	20000190 	.word	0x20000190

08009e34 <_isatty_r>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	4d06      	ldr	r5, [pc, #24]	@ (8009e50 <_isatty_r+0x1c>)
 8009e38:	2300      	movs	r3, #0
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	4608      	mov	r0, r1
 8009e3e:	602b      	str	r3, [r5, #0]
 8009e40:	f7f7 ffce 	bl	8001de0 <_isatty>
 8009e44:	1c43      	adds	r3, r0, #1
 8009e46:	d102      	bne.n	8009e4e <_isatty_r+0x1a>
 8009e48:	682b      	ldr	r3, [r5, #0]
 8009e4a:	b103      	cbz	r3, 8009e4e <_isatty_r+0x1a>
 8009e4c:	6023      	str	r3, [r4, #0]
 8009e4e:	bd38      	pop	{r3, r4, r5, pc}
 8009e50:	20000aa4 	.word	0x20000aa4

08009e54 <_kill_r>:
 8009e54:	b538      	push	{r3, r4, r5, lr}
 8009e56:	4d07      	ldr	r5, [pc, #28]	@ (8009e74 <_kill_r+0x20>)
 8009e58:	2300      	movs	r3, #0
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	4608      	mov	r0, r1
 8009e5e:	4611      	mov	r1, r2
 8009e60:	602b      	str	r3, [r5, #0]
 8009e62:	f7f7 ff4d 	bl	8001d00 <_kill>
 8009e66:	1c43      	adds	r3, r0, #1
 8009e68:	d102      	bne.n	8009e70 <_kill_r+0x1c>
 8009e6a:	682b      	ldr	r3, [r5, #0]
 8009e6c:	b103      	cbz	r3, 8009e70 <_kill_r+0x1c>
 8009e6e:	6023      	str	r3, [r4, #0]
 8009e70:	bd38      	pop	{r3, r4, r5, pc}
 8009e72:	bf00      	nop
 8009e74:	20000aa4 	.word	0x20000aa4

08009e78 <_getpid_r>:
 8009e78:	f7f7 bf3a 	b.w	8001cf0 <_getpid>

08009e7c <_fstat_r>:
 8009e7c:	b538      	push	{r3, r4, r5, lr}
 8009e7e:	4d07      	ldr	r5, [pc, #28]	@ (8009e9c <_fstat_r+0x20>)
 8009e80:	2300      	movs	r3, #0
 8009e82:	4604      	mov	r4, r0
 8009e84:	4608      	mov	r0, r1
 8009e86:	4611      	mov	r1, r2
 8009e88:	602b      	str	r3, [r5, #0]
 8009e8a:	f7f7 ff99 	bl	8001dc0 <_fstat>
 8009e8e:	1c43      	adds	r3, r0, #1
 8009e90:	d102      	bne.n	8009e98 <_fstat_r+0x1c>
 8009e92:	682b      	ldr	r3, [r5, #0]
 8009e94:	b103      	cbz	r3, 8009e98 <_fstat_r+0x1c>
 8009e96:	6023      	str	r3, [r4, #0]
 8009e98:	bd38      	pop	{r3, r4, r5, pc}
 8009e9a:	bf00      	nop
 8009e9c:	20000aa4 	.word	0x20000aa4

08009ea0 <_init>:
 8009ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea2:	bf00      	nop
 8009ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ea6:	bc08      	pop	{r3}
 8009ea8:	469e      	mov	lr, r3
 8009eaa:	4770      	bx	lr

08009eac <_fini>:
 8009eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eae:	bf00      	nop
 8009eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eb2:	bc08      	pop	{r3}
 8009eb4:	469e      	mov	lr, r3
 8009eb6:	4770      	bx	lr
