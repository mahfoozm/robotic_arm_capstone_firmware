
capstone_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d9c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  08009f30  08009f30  0000af30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a56c  0800a56c  0000c1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a56c  0800a56c  0000b56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a574  0800a574  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a574  0800a574  0000b574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a578  0800a578  0000b578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800a57c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d0  200001e0  0800a75c  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ab0  0800a75c  0000cab0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca16  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002241  00000000  00000000  00018c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  0001ae68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4a  00000000  00000000  0001bbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001977e  00000000  00000000  0001c622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5dc  00000000  00000000  00035da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ec38  00000000  00000000  0004437c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2fb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ffc  00000000  00000000  000d2ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000d7ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f14 	.word	0x08009f14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009f14 	.word	0x08009f14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_f2lz>:
 8000c88:	ee07 0a90 	vmov	s15, r0
 8000c8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c94:	d401      	bmi.n	8000c9a <__aeabi_f2lz+0x12>
 8000c96:	f000 b823 	b.w	8000ce0 <__aeabi_f2ulz>
 8000c9a:	eef1 7a67 	vneg.f32	s15, s15
 8000c9e:	b508      	push	{r3, lr}
 8000ca0:	ee17 0a90 	vmov	r0, s15
 8000ca4:	f000 f81c 	bl	8000ce0 <__aeabi_f2ulz>
 8000ca8:	4240      	negs	r0, r0
 8000caa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cae:	bd08      	pop	{r3, pc}

08000cb0 <__aeabi_d2lz>:
 8000cb0:	b538      	push	{r3, r4, r5, lr}
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	460d      	mov	r5, r1
 8000cba:	f7ff ff0f 	bl	8000adc <__aeabi_dcmplt>
 8000cbe:	b928      	cbnz	r0, 8000ccc <__aeabi_d2lz+0x1c>
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	4629      	mov	r1, r5
 8000cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc8:	f000 b82a 	b.w	8000d20 <__aeabi_d2ulz>
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cd2:	f000 f825 	bl	8000d20 <__aeabi_d2ulz>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	bd38      	pop	{r3, r4, r5, pc}
 8000cde:	bf00      	nop

08000ce0 <__aeabi_f2ulz>:
 8000ce0:	b5d0      	push	{r4, r6, r7, lr}
 8000ce2:	f7ff fc31 	bl	8000548 <__aeabi_f2d>
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <__aeabi_f2ulz+0x38>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	4606      	mov	r6, r0
 8000cec:	460f      	mov	r7, r1
 8000cee:	f7ff fc83 	bl	80005f8 <__aeabi_dmul>
 8000cf2:	f7ff ff59 	bl	8000ba8 <__aeabi_d2uiz>
 8000cf6:	4604      	mov	r4, r0
 8000cf8:	f7ff fc04 	bl	8000504 <__aeabi_ui2d>
 8000cfc:	4b07      	ldr	r3, [pc, #28]	@ (8000d1c <__aeabi_f2ulz+0x3c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f7ff fc7a 	bl	80005f8 <__aeabi_dmul>
 8000d04:	4602      	mov	r2, r0
 8000d06:	460b      	mov	r3, r1
 8000d08:	4630      	mov	r0, r6
 8000d0a:	4639      	mov	r1, r7
 8000d0c:	f7ff fabc 	bl	8000288 <__aeabi_dsub>
 8000d10:	f7ff ff4a 	bl	8000ba8 <__aeabi_d2uiz>
 8000d14:	4621      	mov	r1, r4
 8000d16:	bdd0      	pop	{r4, r6, r7, pc}
 8000d18:	3df00000 	.word	0x3df00000
 8000d1c:	41f00000 	.word	0x41f00000

08000d20 <__aeabi_d2ulz>:
 8000d20:	b5d0      	push	{r4, r6, r7, lr}
 8000d22:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <__aeabi_d2ulz+0x34>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	4606      	mov	r6, r0
 8000d28:	460f      	mov	r7, r1
 8000d2a:	f7ff fc65 	bl	80005f8 <__aeabi_dmul>
 8000d2e:	f7ff ff3b 	bl	8000ba8 <__aeabi_d2uiz>
 8000d32:	4604      	mov	r4, r0
 8000d34:	f7ff fbe6 	bl	8000504 <__aeabi_ui2d>
 8000d38:	4b07      	ldr	r3, [pc, #28]	@ (8000d58 <__aeabi_d2ulz+0x38>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f7ff fc5c 	bl	80005f8 <__aeabi_dmul>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	4630      	mov	r0, r6
 8000d46:	4639      	mov	r1, r7
 8000d48:	f7ff fa9e 	bl	8000288 <__aeabi_dsub>
 8000d4c:	f7ff ff2c 	bl	8000ba8 <__aeabi_d2uiz>
 8000d50:	4621      	mov	r1, r4
 8000d52:	bdd0      	pop	{r4, r6, r7, pc}
 8000d54:	3df00000 	.word	0x3df00000
 8000d58:	41f00000 	.word	0x41f00000

08000d5c <DWT_Init>:
/* USER CODE BEGIN 0 */
/**
  * @brief  Initialize the DWT cycle counter for microsecond delays.
  */
void DWT_Init(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* Enable TRC */
  if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <DWT_Init+0x38>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d105      	bne.n	8000d78 <DWT_Init+0x1c>
  {
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <DWT_Init+0x38>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	4a08      	ldr	r2, [pc, #32]	@ (8000d94 <DWT_Init+0x38>)
 8000d72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d76:	60d3      	str	r3, [r2, #12]
  }
  /* Reset the cycle counter */
  DWT->CYCCNT = 0;
 8000d78:	4b07      	ldr	r3, [pc, #28]	@ (8000d98 <DWT_Init+0x3c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	605a      	str	r2, [r3, #4]
  /* Enable the cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <DWT_Init+0x3c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a05      	ldr	r2, [pc, #20]	@ (8000d98 <DWT_Init+0x3c>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6013      	str	r3, [r2, #0]
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000edf0 	.word	0xe000edf0
 8000d98:	e0001000 	.word	0xe0001000

08000d9c <delay_us>:
///**
//  * @brief  Provides a delay (in microseconds) using the DWT cycle counter.
//  * @param  us: Delay in microseconds.
//  */
void delay_us(uint32_t us)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8000da4:	4b0d      	ldr	r3, [pc, #52]	@ (8000ddc <delay_us+0x40>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (SystemCoreClock / 1000000);
 8000daa:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <delay_us+0x44>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a0d      	ldr	r2, [pc, #52]	@ (8000de4 <delay_us+0x48>)
 8000db0:	fba2 2303 	umull	r2, r3, r2, r3
 8000db4:	0c9a      	lsrs	r2, r3, #18
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	fb02 f303 	mul.w	r3, r2, r3
 8000dbc:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks);
 8000dbe:	bf00      	nop
 8000dc0:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <delay_us+0x40>)
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	68ba      	ldr	r2, [r7, #8]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d8f8      	bhi.n	8000dc0 <delay_us+0x24>
}
 8000dce:	bf00      	nop
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e0001000 	.word	0xe0001000
 8000de0:	2000000c 	.word	0x2000000c
 8000de4:	431bde83 	.word	0x431bde83

08000de8 <get_micros>:
/**
 * @brief Get the current time in microseconds using DWT.
 * @return Current time in microseconds.
 */
uint32_t get_micros(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000);
 8000dec:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <get_micros+0x24>)
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	4b07      	ldr	r3, [pc, #28]	@ (8000e10 <get_micros+0x28>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4907      	ldr	r1, [pc, #28]	@ (8000e14 <get_micros+0x2c>)
 8000df6:	fba1 1303 	umull	r1, r3, r1, r3
 8000dfa:	0c9b      	lsrs	r3, r3, #18
 8000dfc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e0001000 	.word	0xe0001000
 8000e10:	2000000c 	.word	0x2000000c
 8000e14:	431bde83 	.word	0x431bde83

08000e18 <isQueueEmpty>:

int isQueueEmpty(CommandQueue *q) {
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
    return (q->head == q->tail);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f8d3 2600 	ldr.w	r2, [r3, #1536]	@ 0x600
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f8d3 3604 	ldr.w	r3, [r3, #1540]	@ 0x604
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	bf0c      	ite	eq
 8000e30:	2301      	moveq	r3, #1
 8000e32:	2300      	movne	r3, #0
 8000e34:	b2db      	uxtb	r3, r3
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <isQueueFull>:

int isQueueFull(CommandQueue *q) {
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
    return (((q->tail + 1) % CMD_QUEUE_SIZE) == q->head);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f8d3 3604 	ldr.w	r3, [r3, #1540]	@ 0x604
 8000e52:	1c59      	adds	r1, r3, #1
 8000e54:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <isQueueFull+0x44>)
 8000e56:	fb83 2301 	smull	r2, r3, r3, r1
 8000e5a:	109a      	asrs	r2, r3, #2
 8000e5c:	17cb      	asrs	r3, r1, #31
 8000e5e:	1ad2      	subs	r2, r2, r3
 8000e60:	4613      	mov	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	1aca      	subs	r2, r1, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	@ 0x600
 8000e70:	429a      	cmp	r2, r3
 8000e72:	bf0c      	ite	eq
 8000e74:	2301      	moveq	r3, #1
 8000e76:	2300      	movne	r3, #0
 8000e78:	b2db      	uxtb	r3, r3
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	2aaaaaab 	.word	0x2aaaaaab

08000e8c <enqueueCommand>:

int enqueueCommand(CommandQueue *q, const char *cmd) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
    if (isQueueFull(q)) {
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ffd4 	bl	8000e44 <isQueueFull>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d002      	beq.n	8000ea8 <enqueueCommand+0x1c>
        return -1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea6:	e026      	b.n	8000ef6 <enqueueCommand+0x6a>
    }
    strncpy(q->commands[q->tail], cmd, CMD_MAX_LENGTH - 1);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f8d3 3604 	ldr.w	r3, [r3, #1540]	@ 0x604
 8000eae:	019b      	lsls	r3, r3, #6
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	223f      	movs	r2, #63	@ 0x3f
 8000eb6:	6839      	ldr	r1, [r7, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f005 fe1f 	bl	8006afc <strncpy>
    q->commands[q->tail][CMD_MAX_LENGTH - 1] = '\0';
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f8d3 3604 	ldr.w	r3, [r3, #1540]	@ 0x604
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	019b      	lsls	r3, r3, #6
 8000ec8:	4413      	add	r3, r2
 8000eca:	333f      	adds	r3, #63	@ 0x3f
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
    q->tail = (q->tail + 1) % CMD_QUEUE_SIZE;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f8d3 3604 	ldr.w	r3, [r3, #1540]	@ 0x604
 8000ed6:	1c59      	adds	r1, r3, #1
 8000ed8:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <enqueueCommand+0x74>)
 8000eda:	fb83 2301 	smull	r2, r3, r3, r1
 8000ede:	109a      	asrs	r2, r3, #2
 8000ee0:	17cb      	asrs	r3, r1, #31
 8000ee2:	1ad2      	subs	r2, r2, r3
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	1aca      	subs	r2, r1, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f8c3 2604 	str.w	r2, [r3, #1540]	@ 0x604
    return 0;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	2aaaaaab 	.word	0x2aaaaaab

08000f04 <dequeueCommand>:

int dequeueCommand(CommandQueue *q, char *cmd, size_t maxLen) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
    if (isQueueEmpty(q)) {
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f7ff ff81 	bl	8000e18 <isQueueEmpty>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d002      	beq.n	8000f22 <dequeueCommand+0x1e>
        return -1;
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f20:	e024      	b.n	8000f6c <dequeueCommand+0x68>
    }
    strncpy(cmd, q->commands[q->head], maxLen - 1);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f8d3 3600 	ldr.w	r3, [r3, #1536]	@ 0x600
 8000f28:	019b      	lsls	r3, r3, #6
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	18d1      	adds	r1, r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	461a      	mov	r2, r3
 8000f34:	68b8      	ldr	r0, [r7, #8]
 8000f36:	f005 fde1 	bl	8006afc <strncpy>
    cmd[maxLen - 1] = '\0';
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	4413      	add	r3, r2
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
    q->head = (q->head + 1) % CMD_QUEUE_SIZE;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f8d3 3600 	ldr.w	r3, [r3, #1536]	@ 0x600
 8000f4c:	1c59      	adds	r1, r3, #1
 8000f4e:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <dequeueCommand+0x70>)
 8000f50:	fb83 2301 	smull	r2, r3, r3, r1
 8000f54:	109a      	asrs	r2, r3, #2
 8000f56:	17cb      	asrs	r3, r1, #31
 8000f58:	1ad2      	subs	r2, r2, r3
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	4413      	add	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	1aca      	subs	r2, r1, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f8c3 2600 	str.w	r2, [r3, #1536]	@ 0x600
    return 0;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2aaaaaab 	.word	0x2aaaaaab

08000f78 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)  // Adjust if your UART instance is different
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a1a      	ldr	r2, [pc, #104]	@ (8000ff0 <HAL_UART_RxCpltCallback+0x78>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d12d      	bne.n	8000fe6 <HAL_UART_RxCpltCallback+0x6e>
    {
        // If newline or carriage return, terminate command and enqueue it
        if ((rxChar == '\n') || (rxChar == '\r'))
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff4 <HAL_UART_RxCpltCallback+0x7c>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b0a      	cmp	r3, #10
 8000f90:	d003      	beq.n	8000f9a <HAL_UART_RxCpltCallback+0x22>
 8000f92:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <HAL_UART_RxCpltCallback+0x7c>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b0d      	cmp	r3, #13
 8000f98:	d111      	bne.n	8000fbe <HAL_UART_RxCpltCallback+0x46>
        {
            commandBuffer[commandIndex] = '\0'; // Terminate the string
 8000f9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x80>)
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <HAL_UART_RxCpltCallback+0x84>)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	5499      	strb	r1, [r3, r2]
            if (commandIndex > 0) // Only enqueue if not empty
 8000fa6:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x80>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_UART_RxCpltCallback+0x3e>
            {
                if (enqueueCommand(&cmdQueue, commandBuffer) != 0)
 8000fae:	4913      	ldr	r1, [pc, #76]	@ (8000ffc <HAL_UART_RxCpltCallback+0x84>)
 8000fb0:	4813      	ldr	r0, [pc, #76]	@ (8001000 <HAL_UART_RxCpltCallback+0x88>)
 8000fb2:	f7ff ff6b 	bl	8000e8c <enqueueCommand>
                {
                    // Optionally, handle queue full (e.g., send an error message)
                }
            }
            commandIndex = 0;  // Reset for the next command
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x80>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	801a      	strh	r2, [r3, #0]
 8000fbc:	e00e      	b.n	8000fdc <HAL_UART_RxCpltCallback+0x64>
        }
        else
        {
            // Append character to buffer if space remains
            if (commandIndex < CMD_MAX_LENGTH - 1)
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x80>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	2b3e      	cmp	r3, #62	@ 0x3e
 8000fc4:	d80a      	bhi.n	8000fdc <HAL_UART_RxCpltCallback+0x64>
            {
                commandBuffer[commandIndex++] = rxChar;
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x80>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	b291      	uxth	r1, r2
 8000fce:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x80>)
 8000fd0:	8011      	strh	r1, [r2, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <HAL_UART_RxCpltCallback+0x7c>)
 8000fd6:	7819      	ldrb	r1, [r3, #0]
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <HAL_UART_RxCpltCallback+0x84>)
 8000fda:	5499      	strb	r1, [r3, r2]
            }
            // If buffer is full, you might choose to clear it or handle an error.
        }
        // Re-enable UART reception for the next character
        HAL_UART_Receive_IT(&huart2, &rxChar, 1);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4905      	ldr	r1, [pc, #20]	@ (8000ff4 <HAL_UART_RxCpltCallback+0x7c>)
 8000fe0:	4808      	ldr	r0, [pc, #32]	@ (8001004 <HAL_UART_RxCpltCallback+0x8c>)
 8000fe2:	f003 f95f 	bl	80042a4 <HAL_UART_Receive_IT>
    }
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40004400 	.word	0x40004400
 8000ff4:	2000030e 	.word	0x2000030e
 8000ff8:	20000350 	.word	0x20000350
 8000ffc:	20000310 	.word	0x20000310
 8001000:	20000354 	.word	0x20000354
 8001004:	2000027c 	.word	0x2000027c

08001008 <getEncoderPos.1>:

/**
* @brief Get the encoder count for the specified motor.
*/
int32_t getEncoderPos(uint8_t motorNum)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
 8001012:	f8c7 c000 	str.w	ip, [r7]
  if (motorNum == 1)
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d103      	bne.n	8001024 <getEncoderPos.1+0x1c>
    return __HAL_TIM_GET_COUNTER(&htim2);
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <getEncoderPos.1+0x38>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001022:	e007      	b.n	8001034 <getEncoderPos.1+0x2c>
  else if (motorNum == 2)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d103      	bne.n	8001032 <getEncoderPos.1+0x2a>
    return __HAL_TIM_GET_COUNTER(&htim1);
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <getEncoderPos.1+0x3c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001030:	e000      	b.n	8001034 <getEncoderPos.1+0x2c>
  return 0;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	2000023c 	.word	0x2000023c
 8001044:	200001fc 	.word	0x200001fc

08001048 <main>:
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b0a6      	sub	sp, #152	@ 0x98
 800104c:	af00      	add	r7, sp, #0
int main(void)
 800104e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001052:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HAL_Init();
 8001056:	f000 ff57 	bl	8001f08 <HAL_Init>
  SystemClock_Config();
 800105a:	f000 fb7b 	bl	8001754 <SystemClock_Config>
  DWT_Init();
 800105e:	f7ff fe7d 	bl	8000d5c <DWT_Init>
  MX_GPIO_Init();
 8001062:	f000 fcad 	bl	80019c0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001066:	f000 fc27 	bl	80018b8 <MX_TIM2_Init>
  MX_TIM1_Init();
 800106a:	f000 fbcb 	bl	8001804 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800106e:	f000 fc77 	bl	8001960 <MX_USART2_UART_Init>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001072:	213c      	movs	r1, #60	@ 0x3c
 8001074:	4823      	ldr	r0, [pc, #140]	@ (8001104 <main+0xbc>)
 8001076:	f002 ff03 	bl	8003e80 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800107a:	213c      	movs	r1, #60	@ 0x3c
 800107c:	4822      	ldr	r0, [pc, #136]	@ (8001108 <main+0xc0>)
 800107e:	f002 feff 	bl	8003e80 <HAL_TIM_Encoder_Start>
  HAL_UART_Receive_IT(&huart2, &rxChar, 1);
 8001082:	2201      	movs	r2, #1
 8001084:	4921      	ldr	r1, [pc, #132]	@ (800110c <main+0xc4>)
 8001086:	4822      	ldr	r0, [pc, #136]	@ (8001110 <main+0xc8>)
 8001088:	f003 f90c 	bl	80042a4 <HAL_UART_Receive_IT>
  const char *initMsg = "(+) initialized, waiting for commands...\n";
 800108c:	4b21      	ldr	r3, [pc, #132]	@ (8001114 <main+0xcc>)
 800108e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HAL_UART_Transmit(&huart2, (uint8_t*)initMsg, strlen(initMsg), 100);
 8001092:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8001096:	f7ff f8eb 	bl	8000270 <strlen>
 800109a:	4603      	mov	r3, r0
 800109c:	b29a      	uxth	r2, r3
 800109e:	2364      	movs	r3, #100	@ 0x64
 80010a0:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 80010a4:	481a      	ldr	r0, [pc, #104]	@ (8001110 <main+0xc8>)
 80010a6:	f003 f86b 	bl	8004180 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	char cmd[CMD_MAX_LENGTH];
	// Check if a command is available in the queue
	if (dequeueCommand(&cmdQueue, cmd, sizeof(cmd)) == 0) {
 80010aa:	463b      	mov	r3, r7
 80010ac:	2240      	movs	r2, #64	@ 0x40
 80010ae:	4619      	mov	r1, r3
 80010b0:	4819      	ldr	r0, [pc, #100]	@ (8001118 <main+0xd0>)
 80010b2:	f7ff ff27 	bl	8000f04 <dequeueCommand>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d11a      	bne.n	80010f2 <main+0xaa>
		char echoMsg[80];
		sprintf(echoMsg, "Received command: %s\n", cmd);
 80010bc:	463a      	mov	r2, r7
 80010be:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010c2:	4916      	ldr	r1, [pc, #88]	@ (800111c <main+0xd4>)
 80010c4:	4618      	mov	r0, r3
 80010c6:	f005 fc5f 	bl	8006988 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)echoMsg, strlen(echoMsg), 100);
 80010ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f8ce 	bl	8000270 <strlen>
 80010d4:	4603      	mov	r3, r0
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80010dc:	2364      	movs	r3, #100	@ 0x64
 80010de:	480c      	ldr	r0, [pc, #48]	@ (8001110 <main+0xc8>)
 80010e0:	f003 f84e 	bl	8004180 <HAL_UART_Transmit>
		parseCommand(cmd);
 80010e4:	463b      	mov	r3, r7
 80010e6:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80010ea:	4694      	mov	ip, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 f817 	bl	8001120 <parseCommand.0>
	}

	doMotorStepping();
 80010f2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80010f6:	469c      	mov	ip, r3
 80010f8:	f000 f9fa 	bl	80014f0 <doMotorStepping.2>
    HAL_Delay(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f000 ff69 	bl	8001fd4 <HAL_Delay>
  {
 8001102:	e7d2      	b.n	80010aa <main+0x62>
 8001104:	2000023c 	.word	0x2000023c
 8001108:	200001fc 	.word	0x200001fc
 800110c:	2000030e 	.word	0x2000030e
 8001110:	2000027c 	.word	0x2000027c
 8001114:	08009f30 	.word	0x08009f30
 8001118:	20000354 	.word	0x20000354
 800111c:	08009f5c 	.word	0x08009f5c

08001120 <parseCommand.0>:
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b0a9      	sub	sp, #164	@ 0xa4
 8001124:	af02      	add	r7, sp, #8
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	4664      	mov	r4, ip
 800112a:	f8c7 c000 	str.w	ip, [r7]
    if (line[0] == 'M')
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b4d      	cmp	r3, #77	@ 0x4d
 8001134:	f040 8108 	bne.w	8001348 <parseCommand.0+0x228>
        uint8_t motorNum = line[1] - '0'; // single-digit motor ID
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3301      	adds	r3, #1
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	3b30      	subs	r3, #48	@ 0x30
 8001140:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        char *colon1 = strchr(line, ':');
 8001144:	213a      	movs	r1, #58	@ 0x3a
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f005 fcb9 	bl	8006abe <strchr>
 800114c:	67b8      	str	r0, [r7, #120]	@ 0x78
        if (!colon1)
 800114e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001150:	2b00      	cmp	r3, #0
 8001152:	d10c      	bne.n	800116e <parseCommand.0+0x4e>
            const char *err = "ERR: no colon found\n";
 8001154:	4bba      	ldr	r3, [pc, #744]	@ (8001440 <parseCommand.0+0x320>)
 8001156:	65fb      	str	r3, [r7, #92]	@ 0x5c
            HAL_UART_Transmit(&huart2, (uint8_t*)err, strlen(err), 100);
 8001158:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800115a:	f7ff f889 	bl	8000270 <strlen>
 800115e:	4603      	mov	r3, r0
 8001160:	b29a      	uxth	r2, r3
 8001162:	2364      	movs	r3, #100	@ 0x64
 8001164:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001166:	48b7      	ldr	r0, [pc, #732]	@ (8001444 <parseCommand.0+0x324>)
 8001168:	f003 f80a 	bl	8004180 <HAL_UART_Transmit>
            return;
 800116c:	e1b7      	b.n	80014de <parseCommand.0+0x3be>
        char *colon2 = strchr(colon1 + 1, ':');
 800116e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001170:	3301      	adds	r3, #1
 8001172:	213a      	movs	r1, #58	@ 0x3a
 8001174:	4618      	mov	r0, r3
 8001176:	f005 fca2 	bl	8006abe <strchr>
 800117a:	6778      	str	r0, [r7, #116]	@ 0x74
        if (!colon2)
 800117c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10c      	bne.n	800119c <parseCommand.0+0x7c>
            const char *err = "ERR: second colon not found\n";
 8001182:	4bb1      	ldr	r3, [pc, #708]	@ (8001448 <parseCommand.0+0x328>)
 8001184:	663b      	str	r3, [r7, #96]	@ 0x60
            HAL_UART_Transmit(&huart2, (uint8_t*)err, strlen(err), 100);
 8001186:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001188:	f7ff f872 	bl	8000270 <strlen>
 800118c:	4603      	mov	r3, r0
 800118e:	b29a      	uxth	r2, r3
 8001190:	2364      	movs	r3, #100	@ 0x64
 8001192:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001194:	48ab      	ldr	r0, [pc, #684]	@ (8001444 <parseCommand.0+0x324>)
 8001196:	f002 fff3 	bl	8004180 <HAL_UART_Transmit>
            return;
 800119a:	e1a0      	b.n	80014de <parseCommand.0+0x3be>
        float movement = strtof(colon1 + 1, NULL);
 800119c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800119e:	3301      	adds	r3, #1
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f004 fc66 	bl	8005a74 <strtof>
 80011a8:	ed87 0a25 	vstr	s0, [r7, #148]	@ 0x94
        float speedVal = strtof(colon2 + 1, NULL);
 80011ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011ae:	3301      	adds	r3, #1
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f004 fc5e 	bl	8005a74 <strtof>
 80011b8:	ed87 0a24 	vstr	s0, [r7, #144]	@ 0x90
        if (movement > 1.0f) movement = 1.0f;
 80011bc:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80011c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011cc:	dd03      	ble.n	80011d6 <parseCommand.0+0xb6>
 80011ce:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80011d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        if (movement < -1.0f) movement = -1.0f;
 80011d6:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80011da:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80011de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e6:	d502      	bpl.n	80011ee <parseCommand.0+0xce>
 80011e8:	4b98      	ldr	r3, [pc, #608]	@ (800144c <parseCommand.0+0x32c>)
 80011ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        if (speedVal > 1.0f) speedVal = 1.0f;
 80011ee:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80011f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	dd03      	ble.n	8001208 <parseCommand.0+0xe8>
 8001200:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001204:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        if (speedVal < 0.0f) speedVal = 0.0f;
 8001208:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800120c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001214:	d503      	bpl.n	800121e <parseCommand.0+0xfe>
 8001216:	f04f 0300 	mov.w	r3, #0
 800121a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        int32_t steps = (int32_t)llroundf(fabsf(movement) * STEPS_PER_REV);
 800121e:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8001222:	eef0 7ae7 	vabs.f32	s15, s15
 8001226:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001450 <parseCommand.0+0x330>
 800122a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001232:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001236:	eeb0 0a67 	vmov.f32	s0, s15
 800123a:	f008 fe2d 	bl	8009e98 <llroundf>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4613      	mov	r3, r2
 8001244:	673b      	str	r3, [r7, #112]	@ 0x70
        GPIO_PinState dir = (movement >= 0.0f) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8001246:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800124a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800124e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001252:	bfac      	ite	ge
 8001254:	2301      	movge	r3, #1
 8001256:	2300      	movlt	r3, #0
 8001258:	b2db      	uxtb	r3, r3
 800125a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
        float speedFactor = fabsf(speedVal);
 800125e:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001262:	eef0 7ae7 	vabs.f32	s15, s15
 8001266:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
        if (motorNum == 1)
 800126a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800126e:	2b01      	cmp	r3, #1
 8001270:	d12c      	bne.n	80012cc <parseCommand.0+0x1ac>
            motor1_stepsRemaining = steps;
 8001272:	4a78      	ldr	r2, [pc, #480]	@ (8001454 <parseCommand.0+0x334>)
 8001274:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001276:	6013      	str	r3, [r2, #0]
            motor1_direction = dir;
 8001278:	4a77      	ldr	r2, [pc, #476]	@ (8001458 <parseCommand.0+0x338>)
 800127a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800127e:	7013      	strb	r3, [r2, #0]
            motor1_speedFactor = speedFactor;
 8001280:	4a76      	ldr	r2, [pc, #472]	@ (800145c <parseCommand.0+0x33c>)
 8001282:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001284:	6013      	str	r3, [r2, #0]
            sprintf(resp, "Command: M1 => %ld steps, dir=%s, speed=%.2f\n",
 8001286:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800128a:	2b01      	cmp	r3, #1
 800128c:	d101      	bne.n	8001292 <parseCommand.0+0x172>
 800128e:	4c74      	ldr	r4, [pc, #464]	@ (8001460 <parseCommand.0+0x340>)
 8001290:	e000      	b.n	8001294 <parseCommand.0+0x174>
 8001292:	4c74      	ldr	r4, [pc, #464]	@ (8001464 <parseCommand.0+0x344>)
 8001294:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001296:	f7ff f957 	bl	8000548 <__aeabi_f2d>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	f107 000c 	add.w	r0, r7, #12
 80012a2:	e9cd 2300 	strd	r2, r3, [sp]
 80012a6:	4623      	mov	r3, r4
 80012a8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80012aa:	496f      	ldr	r1, [pc, #444]	@ (8001468 <parseCommand.0+0x348>)
 80012ac:	f005 fb6c 	bl	8006988 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)resp, strlen(resp), 100);
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7fe ffdb 	bl	8000270 <strlen>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b29a      	uxth	r2, r3
 80012be:	f107 010c 	add.w	r1, r7, #12
 80012c2:	2364      	movs	r3, #100	@ 0x64
 80012c4:	485f      	ldr	r0, [pc, #380]	@ (8001444 <parseCommand.0+0x324>)
 80012c6:	f002 ff5b 	bl	8004180 <HAL_UART_Transmit>
 80012ca:	e108      	b.n	80014de <parseCommand.0+0x3be>
        else if (motorNum == 2)
 80012cc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d12c      	bne.n	800132e <parseCommand.0+0x20e>
            motor2_stepsRemaining = steps;
 80012d4:	4a65      	ldr	r2, [pc, #404]	@ (800146c <parseCommand.0+0x34c>)
 80012d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80012d8:	6013      	str	r3, [r2, #0]
            motor2_direction = dir;
 80012da:	4a65      	ldr	r2, [pc, #404]	@ (8001470 <parseCommand.0+0x350>)
 80012dc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80012e0:	7013      	strb	r3, [r2, #0]
            motor2_speedFactor = speedFactor;
 80012e2:	4a64      	ldr	r2, [pc, #400]	@ (8001474 <parseCommand.0+0x354>)
 80012e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80012e6:	6013      	str	r3, [r2, #0]
            sprintf(resp, "Command: M2 => %ld steps, dir=%s, speed=%.2f\n",
 80012e8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d101      	bne.n	80012f4 <parseCommand.0+0x1d4>
 80012f0:	4c5b      	ldr	r4, [pc, #364]	@ (8001460 <parseCommand.0+0x340>)
 80012f2:	e000      	b.n	80012f6 <parseCommand.0+0x1d6>
 80012f4:	4c5b      	ldr	r4, [pc, #364]	@ (8001464 <parseCommand.0+0x344>)
 80012f6:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80012f8:	f7ff f926 	bl	8000548 <__aeabi_f2d>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	f107 000c 	add.w	r0, r7, #12
 8001304:	e9cd 2300 	strd	r2, r3, [sp]
 8001308:	4623      	mov	r3, r4
 800130a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800130c:	495a      	ldr	r1, [pc, #360]	@ (8001478 <parseCommand.0+0x358>)
 800130e:	f005 fb3b 	bl	8006988 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)resp, strlen(resp), 100);
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	4618      	mov	r0, r3
 8001318:	f7fe ffaa 	bl	8000270 <strlen>
 800131c:	4603      	mov	r3, r0
 800131e:	b29a      	uxth	r2, r3
 8001320:	f107 010c 	add.w	r1, r7, #12
 8001324:	2364      	movs	r3, #100	@ 0x64
 8001326:	4847      	ldr	r0, [pc, #284]	@ (8001444 <parseCommand.0+0x324>)
 8001328:	f002 ff2a 	bl	8004180 <HAL_UART_Transmit>
 800132c:	e0d7      	b.n	80014de <parseCommand.0+0x3be>
            const char *err2 = "ERR: motorNum invalid\n";
 800132e:	4b53      	ldr	r3, [pc, #332]	@ (800147c <parseCommand.0+0x35c>)
 8001330:	667b      	str	r3, [r7, #100]	@ 0x64
            HAL_UART_Transmit(&huart2, (uint8_t*)err2, strlen(err2), 100);
 8001332:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001334:	f7fe ff9c 	bl	8000270 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	b29a      	uxth	r2, r3
 800133c:	2364      	movs	r3, #100	@ 0x64
 800133e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001340:	4840      	ldr	r0, [pc, #256]	@ (8001444 <parseCommand.0+0x324>)
 8001342:	f002 ff1d 	bl	8004180 <HAL_UART_Transmit>
 8001346:	e0ca      	b.n	80014de <parseCommand.0+0x3be>
    else if (strncmp(line, "GET:E:", 6) == 0)
 8001348:	2206      	movs	r2, #6
 800134a:	494d      	ldr	r1, [pc, #308]	@ (8001480 <parseCommand.0+0x360>)
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f005 fbc3 	bl	8006ad8 <strncmp>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d126      	bne.n	80013a6 <parseCommand.0+0x286>
        uint8_t motorNum = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	72fb      	strb	r3, [r7, #11]
        sscanf(line, "GET:E:%hhu", &motorNum);
 800135c:	f107 030b 	add.w	r3, r7, #11
 8001360:	461a      	mov	r2, r3
 8001362:	4948      	ldr	r1, [pc, #288]	@ (8001484 <parseCommand.0+0x364>)
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f005 fb31 	bl	80069cc <siscanf>
        int32_t pos = getEncoderPos(motorNum);
 800136a:	7afb      	ldrb	r3, [r7, #11]
 800136c:	46a4      	mov	ip, r4
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fe4a 	bl	8001008 <getEncoderPos.1>
 8001374:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        sprintf(resp, "E:%u:POS=%ld\n", (unsigned)motorNum, (long)pos);
 8001378:	7afb      	ldrb	r3, [r7, #11]
 800137a:	461a      	mov	r2, r3
 800137c:	f107 000c 	add.w	r0, r7, #12
 8001380:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001384:	4940      	ldr	r1, [pc, #256]	@ (8001488 <parseCommand.0+0x368>)
 8001386:	f005 faff 	bl	8006988 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)resp, strlen(resp), 100);
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	4618      	mov	r0, r3
 8001390:	f7fe ff6e 	bl	8000270 <strlen>
 8001394:	4603      	mov	r3, r0
 8001396:	b29a      	uxth	r2, r3
 8001398:	f107 010c 	add.w	r1, r7, #12
 800139c:	2364      	movs	r3, #100	@ 0x64
 800139e:	4829      	ldr	r0, [pc, #164]	@ (8001444 <parseCommand.0+0x324>)
 80013a0:	f002 feee 	bl	8004180 <HAL_UART_Transmit>
 80013a4:	e09b      	b.n	80014de <parseCommand.0+0x3be>
    else if (strncmp(line, "RESET:", 6) == 0)  // New RESET command handler
 80013a6:	2206      	movs	r2, #6
 80013a8:	4938      	ldr	r1, [pc, #224]	@ (800148c <parseCommand.0+0x36c>)
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f005 fb94 	bl	8006ad8 <strncmp>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f040 8084 	bne.w	80014c0 <parseCommand.0+0x3a0>
        uint8_t motorNum = line[6] - '0';  // Extract motor number after "RESET:"
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3306      	adds	r3, #6
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	3b30      	subs	r3, #48	@ 0x30
 80013c0:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
        if (motorNum == 1)
 80013c4:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d11a      	bne.n	8001402 <parseCommand.0+0x2e2>
            motor1_resetting = true;
 80013cc:	4b30      	ldr	r3, [pc, #192]	@ (8001490 <parseCommand.0+0x370>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
            motor1_speedFactor = 1.0f;  // Use maximum speed for reset
 80013d2:	4b22      	ldr	r3, [pc, #136]	@ (800145c <parseCommand.0+0x33c>)
 80013d4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80013d8:	601a      	str	r2, [r3, #0]
            sprintf(resp, "Resetting motor 1 to zero position\n");
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	492d      	ldr	r1, [pc, #180]	@ (8001494 <parseCommand.0+0x374>)
 80013e0:	4618      	mov	r0, r3
 80013e2:	f005 fad1 	bl	8006988 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)resp, strlen(resp), 100);
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7fe ff40 	bl	8000270 <strlen>
 80013f0:	4603      	mov	r3, r0
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	f107 010c 	add.w	r1, r7, #12
 80013f8:	2364      	movs	r3, #100	@ 0x64
 80013fa:	4812      	ldr	r0, [pc, #72]	@ (8001444 <parseCommand.0+0x324>)
 80013fc:	f002 fec0 	bl	8004180 <HAL_UART_Transmit>
 8001400:	e06d      	b.n	80014de <parseCommand.0+0x3be>
        else if (motorNum == 2)
 8001402:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001406:	2b02      	cmp	r3, #2
 8001408:	d14a      	bne.n	80014a0 <parseCommand.0+0x380>
            motor2_resetting = true;
 800140a:	4b23      	ldr	r3, [pc, #140]	@ (8001498 <parseCommand.0+0x378>)
 800140c:	2201      	movs	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
            motor2_speedFactor = 1.0f;  // Use maximum speed for reset
 8001410:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <parseCommand.0+0x354>)
 8001412:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001416:	601a      	str	r2, [r3, #0]
            sprintf(resp, "Resetting motor 2 to zero position\n");
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	491f      	ldr	r1, [pc, #124]	@ (800149c <parseCommand.0+0x37c>)
 800141e:	4618      	mov	r0, r3
 8001420:	f005 fab2 	bl	8006988 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)resp, strlen(resp), 100);
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	4618      	mov	r0, r3
 800142a:	f7fe ff21 	bl	8000270 <strlen>
 800142e:	4603      	mov	r3, r0
 8001430:	b29a      	uxth	r2, r3
 8001432:	f107 010c 	add.w	r1, r7, #12
 8001436:	2364      	movs	r3, #100	@ 0x64
 8001438:	4802      	ldr	r0, [pc, #8]	@ (8001444 <parseCommand.0+0x324>)
 800143a:	f002 fea1 	bl	8004180 <HAL_UART_Transmit>
 800143e:	e04e      	b.n	80014de <parseCommand.0+0x3be>
 8001440:	08009f74 	.word	0x08009f74
 8001444:	2000027c 	.word	0x2000027c
 8001448:	08009f8c 	.word	0x08009f8c
 800144c:	bf800000 	.word	0xbf800000
 8001450:	43c80000 	.word	0x43c80000
 8001454:	200002fc 	.word	0x200002fc
 8001458:	20000008 	.word	0x20000008
 800145c:	20000000 	.word	0x20000000
 8001460:	08009fac 	.word	0x08009fac
 8001464:	08009fb0 	.word	0x08009fb0
 8001468:	08009fb4 	.word	0x08009fb4
 800146c:	20000300 	.word	0x20000300
 8001470:	20000009 	.word	0x20000009
 8001474:	20000004 	.word	0x20000004
 8001478:	08009fe4 	.word	0x08009fe4
 800147c:	0800a014 	.word	0x0800a014
 8001480:	0800a02c 	.word	0x0800a02c
 8001484:	0800a034 	.word	0x0800a034
 8001488:	0800a040 	.word	0x0800a040
 800148c:	0800a050 	.word	0x0800a050
 8001490:	2000030c 	.word	0x2000030c
 8001494:	0800a058 	.word	0x0800a058
 8001498:	2000030d 	.word	0x2000030d
 800149c:	0800a07c 	.word	0x0800a07c
            const char *err = "ERR: Invalid motor number for RESET\n";
 80014a0:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <parseCommand.0+0x3c4>)
 80014a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            HAL_UART_Transmit(&huart2, (uint8_t*)err, strlen(err), 100);
 80014a6:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80014aa:	f7fe fee1 	bl	8000270 <strlen>
 80014ae:	4603      	mov	r3, r0
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	2364      	movs	r3, #100	@ 0x64
 80014b4:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80014b8:	480b      	ldr	r0, [pc, #44]	@ (80014e8 <parseCommand.0+0x3c8>)
 80014ba:	f002 fe61 	bl	8004180 <HAL_UART_Transmit>
 80014be:	e00e      	b.n	80014de <parseCommand.0+0x3be>
        const char *err = "ERR: Unknown command\n";
 80014c0:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <parseCommand.0+0x3cc>)
 80014c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        HAL_UART_Transmit(&huart2, (uint8_t*)err, strlen(err), 100);
 80014c6:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80014ca:	f7fe fed1 	bl	8000270 <strlen>
 80014ce:	4603      	mov	r3, r0
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	2364      	movs	r3, #100	@ 0x64
 80014d4:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80014d8:	4803      	ldr	r0, [pc, #12]	@ (80014e8 <parseCommand.0+0x3c8>)
 80014da:	f002 fe51 	bl	8004180 <HAL_UART_Transmit>
}
 80014de:	379c      	adds	r7, #156	@ 0x9c
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd90      	pop	{r4, r7, pc}
 80014e4:	0800a0a0 	.word	0x0800a0a0
 80014e8:	2000027c 	.word	0x2000027c
 80014ec:	0800a0c8 	.word	0x0800a0c8

080014f0 <doMotorStepping.2>:
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b08d      	sub	sp, #52	@ 0x34
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4664      	mov	r4, ip
 80014f8:	f8c7 c004 	str.w	ip, [r7, #4]
    uint32_t now_us = get_micros();
 80014fc:	f7ff fc74 	bl	8000de8 <get_micros>
 8001500:	61f8      	str	r0, [r7, #28]
    if (motor1_resetting)  // Reset mode for Motor 1
 8001502:	4b87      	ldr	r3, [pc, #540]	@ (8001720 <doMotorStepping.2+0x230>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d045      	beq.n	8001596 <doMotorStepping.2+0xa6>
        int32_t pos = getEncoderPos(1);
 800150a:	46a4      	mov	ip, r4
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff fd7b 	bl	8001008 <getEncoderPos.1>
 8001512:	61b8      	str	r0, [r7, #24]
        if (pos == 0)  // Stop when encoder reaches zero
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d103      	bne.n	8001522 <doMotorStepping.2+0x32>
            motor1_resetting = false;
 800151a:	4b81      	ldr	r3, [pc, #516]	@ (8001720 <doMotorStepping.2+0x230>)
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	e075      	b.n	800160e <doMotorStepping.2+0x11e>
        else if (now_us >= motor1_nextStepTime_us)
 8001522:	4b80      	ldr	r3, [pc, #512]	@ (8001724 <doMotorStepping.2+0x234>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	429a      	cmp	r2, r3
 800152a:	d370      	bcc.n	800160e <doMotorStepping.2+0x11e>
            GPIO_PinState dir = (pos > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2b00      	cmp	r3, #0
 8001530:	bfd4      	ite	le
 8001532:	2301      	movle	r3, #1
 8001534:	2300      	movgt	r3, #0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	75fb      	strb	r3, [r7, #23]
            HAL_GPIO_WritePin(Motor1_DIR_GPIO_Port, Motor1_DIR_Pin, dir);
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	461a      	mov	r2, r3
 800153e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001542:	4879      	ldr	r0, [pc, #484]	@ (8001728 <doMotorStepping.2+0x238>)
 8001544:	f001 f82c 	bl	80025a0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(Motor1_PUL_GPIO_Port, Motor1_PUL_Pin, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	2180      	movs	r1, #128	@ 0x80
 800154c:	4876      	ldr	r0, [pc, #472]	@ (8001728 <doMotorStepping.2+0x238>)
 800154e:	f001 f827 	bl	80025a0 <HAL_GPIO_WritePin>
            delay_us(10);  // 10 μs pulse width
 8001552:	200a      	movs	r0, #10
 8001554:	f7ff fc22 	bl	8000d9c <delay_us>
            HAL_GPIO_WritePin(Motor1_PUL_GPIO_Port, Motor1_PUL_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	2180      	movs	r1, #128	@ 0x80
 800155c:	4872      	ldr	r0, [pc, #456]	@ (8001728 <doMotorStepping.2+0x238>)
 800155e:	f001 f81f 	bl	80025a0 <HAL_GPIO_WritePin>
            uint32_t interval_us = MAX_STEP_INTERVAL_US - (uint32_t)(motor1_speedFactor * (MAX_STEP_INTERVAL_US - MIN_STEP_INTERVAL_US));
 8001562:	4b72      	ldr	r3, [pc, #456]	@ (800172c <doMotorStepping.2+0x23c>)
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8001730 <doMotorStepping.2+0x240>
 800156c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001574:	ee17 3a90 	vmov	r3, s15
 8001578:	f5c3 33c3 	rsb	r3, r3, #99840	@ 0x18600
 800157c:	33a0      	adds	r3, #160	@ 0xa0
 800157e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (interval_us < MIN_STEP_INTERVAL_US) interval_us = MIN_STEP_INTERVAL_US;
 8001580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001582:	2b09      	cmp	r3, #9
 8001584:	d801      	bhi.n	800158a <doMotorStepping.2+0x9a>
 8001586:	230a      	movs	r3, #10
 8001588:	62fb      	str	r3, [r7, #44]	@ 0x2c
            motor1_nextStepTime_us = now_us + interval_us;
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800158e:	4413      	add	r3, r2
 8001590:	4a64      	ldr	r2, [pc, #400]	@ (8001724 <doMotorStepping.2+0x234>)
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	e03b      	b.n	800160e <doMotorStepping.2+0x11e>
    else if (motor1_stepsRemaining > 0 && now_us >= motor1_nextStepTime_us)  // Normal stepping
 8001596:	4b67      	ldr	r3, [pc, #412]	@ (8001734 <doMotorStepping.2+0x244>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	dd37      	ble.n	800160e <doMotorStepping.2+0x11e>
 800159e:	4b61      	ldr	r3, [pc, #388]	@ (8001724 <doMotorStepping.2+0x234>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	69fa      	ldr	r2, [r7, #28]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d332      	bcc.n	800160e <doMotorStepping.2+0x11e>
        HAL_GPIO_WritePin(Motor1_DIR_GPIO_Port, Motor1_DIR_Pin, motor1_direction);
 80015a8:	4b63      	ldr	r3, [pc, #396]	@ (8001738 <doMotorStepping.2+0x248>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015b2:	485d      	ldr	r0, [pc, #372]	@ (8001728 <doMotorStepping.2+0x238>)
 80015b4:	f000 fff4 	bl	80025a0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Motor1_PUL_GPIO_Port, Motor1_PUL_Pin, GPIO_PIN_SET);
 80015b8:	2201      	movs	r2, #1
 80015ba:	2180      	movs	r1, #128	@ 0x80
 80015bc:	485a      	ldr	r0, [pc, #360]	@ (8001728 <doMotorStepping.2+0x238>)
 80015be:	f000 ffef 	bl	80025a0 <HAL_GPIO_WritePin>
        delay_us(10);
 80015c2:	200a      	movs	r0, #10
 80015c4:	f7ff fbea 	bl	8000d9c <delay_us>
        HAL_GPIO_WritePin(Motor1_PUL_GPIO_Port, Motor1_PUL_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2180      	movs	r1, #128	@ 0x80
 80015cc:	4856      	ldr	r0, [pc, #344]	@ (8001728 <doMotorStepping.2+0x238>)
 80015ce:	f000 ffe7 	bl	80025a0 <HAL_GPIO_WritePin>
        motor1_stepsRemaining--;
 80015d2:	4b58      	ldr	r3, [pc, #352]	@ (8001734 <doMotorStepping.2+0x244>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	4a56      	ldr	r2, [pc, #344]	@ (8001734 <doMotorStepping.2+0x244>)
 80015da:	6013      	str	r3, [r2, #0]
        uint32_t interval_us = MAX_STEP_INTERVAL_US - (uint32_t)(motor1_speedFactor * (MAX_STEP_INTERVAL_US - MIN_STEP_INTERVAL_US));
 80015dc:	4b53      	ldr	r3, [pc, #332]	@ (800172c <doMotorStepping.2+0x23c>)
 80015de:	edd3 7a00 	vldr	s15, [r3]
 80015e2:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001730 <doMotorStepping.2+0x240>
 80015e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ee:	ee17 3a90 	vmov	r3, s15
 80015f2:	f5c3 33c3 	rsb	r3, r3, #99840	@ 0x18600
 80015f6:	33a0      	adds	r3, #160	@ 0xa0
 80015f8:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (interval_us < MIN_STEP_INTERVAL_US) interval_us = MIN_STEP_INTERVAL_US;
 80015fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015fc:	2b09      	cmp	r3, #9
 80015fe:	d801      	bhi.n	8001604 <doMotorStepping.2+0x114>
 8001600:	230a      	movs	r3, #10
 8001602:	62bb      	str	r3, [r7, #40]	@ 0x28
        motor1_nextStepTime_us = now_us + interval_us;
 8001604:	69fa      	ldr	r2, [r7, #28]
 8001606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001608:	4413      	add	r3, r2
 800160a:	4a46      	ldr	r2, [pc, #280]	@ (8001724 <doMotorStepping.2+0x234>)
 800160c:	6013      	str	r3, [r2, #0]
    if (motor2_resetting)  // Reset mode for Motor 2
 800160e:	4b4b      	ldr	r3, [pc, #300]	@ (800173c <doMotorStepping.2+0x24c>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d044      	beq.n	80016a0 <doMotorStepping.2+0x1b0>
        int32_t pos = getEncoderPos(2);
 8001616:	46a4      	mov	ip, r4
 8001618:	2002      	movs	r0, #2
 800161a:	f7ff fcf5 	bl	8001008 <getEncoderPos.1>
 800161e:	6138      	str	r0, [r7, #16]
        if (pos == 0)  // Stop when encoder reaches zero
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d103      	bne.n	800162e <doMotorStepping.2+0x13e>
            motor2_resetting = false;
 8001626:	4b45      	ldr	r3, [pc, #276]	@ (800173c <doMotorStepping.2+0x24c>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
}
 800162c:	e073      	b.n	8001716 <doMotorStepping.2+0x226>
        else if (now_us >= motor2_nextStepTime_us)
 800162e:	4b44      	ldr	r3, [pc, #272]	@ (8001740 <doMotorStepping.2+0x250>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	429a      	cmp	r2, r3
 8001636:	d36e      	bcc.n	8001716 <doMotorStepping.2+0x226>
            GPIO_PinState dir = (pos > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	2b00      	cmp	r3, #0
 800163c:	bfd4      	ite	le
 800163e:	2301      	movle	r3, #1
 8001640:	2300      	movgt	r3, #0
 8001642:	b2db      	uxtb	r3, r3
 8001644:	73fb      	strb	r3, [r7, #15]
            HAL_GPIO_WritePin(Motor2_DIR_GPIO_Port, Motor2_DIR_Pin, dir);
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	461a      	mov	r2, r3
 800164a:	2180      	movs	r1, #128	@ 0x80
 800164c:	483d      	ldr	r0, [pc, #244]	@ (8001744 <doMotorStepping.2+0x254>)
 800164e:	f000 ffa7 	bl	80025a0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(Motor2_PUL_GPIO_Port, Motor2_PUL_Pin, GPIO_PIN_SET);
 8001652:	2201      	movs	r2, #1
 8001654:	2140      	movs	r1, #64	@ 0x40
 8001656:	483b      	ldr	r0, [pc, #236]	@ (8001744 <doMotorStepping.2+0x254>)
 8001658:	f000 ffa2 	bl	80025a0 <HAL_GPIO_WritePin>
            delay_us(10);
 800165c:	200a      	movs	r0, #10
 800165e:	f7ff fb9d 	bl	8000d9c <delay_us>
            HAL_GPIO_WritePin(Motor2_PUL_GPIO_Port, Motor2_PUL_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	2140      	movs	r1, #64	@ 0x40
 8001666:	4837      	ldr	r0, [pc, #220]	@ (8001744 <doMotorStepping.2+0x254>)
 8001668:	f000 ff9a 	bl	80025a0 <HAL_GPIO_WritePin>
            uint32_t interval_us = MAX_STEP_INTERVAL_US - (uint32_t)(motor2_speedFactor * (MAX_STEP_INTERVAL_US - MIN_STEP_INTERVAL_US));
 800166c:	4b36      	ldr	r3, [pc, #216]	@ (8001748 <doMotorStepping.2+0x258>)
 800166e:	edd3 7a00 	vldr	s15, [r3]
 8001672:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001730 <doMotorStepping.2+0x240>
 8001676:	ee67 7a87 	vmul.f32	s15, s15, s14
 800167a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800167e:	ee17 3a90 	vmov	r3, s15
 8001682:	f5c3 33c3 	rsb	r3, r3, #99840	@ 0x18600
 8001686:	33a0      	adds	r3, #160	@ 0xa0
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
            if (interval_us < MIN_STEP_INTERVAL_US) interval_us = MIN_STEP_INTERVAL_US;
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	2b09      	cmp	r3, #9
 800168e:	d801      	bhi.n	8001694 <doMotorStepping.2+0x1a4>
 8001690:	230a      	movs	r3, #10
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
            motor2_nextStepTime_us = now_us + interval_us;
 8001694:	69fa      	ldr	r2, [r7, #28]
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001698:	4413      	add	r3, r2
 800169a:	4a29      	ldr	r2, [pc, #164]	@ (8001740 <doMotorStepping.2+0x250>)
 800169c:	6013      	str	r3, [r2, #0]
}
 800169e:	e03a      	b.n	8001716 <doMotorStepping.2+0x226>
    else if (motor2_stepsRemaining > 0 && now_us >= motor2_nextStepTime_us)  // Normal stepping
 80016a0:	4b2a      	ldr	r3, [pc, #168]	@ (800174c <doMotorStepping.2+0x25c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	dd36      	ble.n	8001716 <doMotorStepping.2+0x226>
 80016a8:	4b25      	ldr	r3, [pc, #148]	@ (8001740 <doMotorStepping.2+0x250>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	69fa      	ldr	r2, [r7, #28]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d331      	bcc.n	8001716 <doMotorStepping.2+0x226>
        HAL_GPIO_WritePin(Motor2_DIR_GPIO_Port, Motor2_DIR_Pin, motor2_direction);
 80016b2:	4b27      	ldr	r3, [pc, #156]	@ (8001750 <doMotorStepping.2+0x260>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	2180      	movs	r1, #128	@ 0x80
 80016ba:	4822      	ldr	r0, [pc, #136]	@ (8001744 <doMotorStepping.2+0x254>)
 80016bc:	f000 ff70 	bl	80025a0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Motor2_PUL_GPIO_Port, Motor2_PUL_Pin, GPIO_PIN_SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2140      	movs	r1, #64	@ 0x40
 80016c4:	481f      	ldr	r0, [pc, #124]	@ (8001744 <doMotorStepping.2+0x254>)
 80016c6:	f000 ff6b 	bl	80025a0 <HAL_GPIO_WritePin>
        delay_us(10);
 80016ca:	200a      	movs	r0, #10
 80016cc:	f7ff fb66 	bl	8000d9c <delay_us>
        HAL_GPIO_WritePin(Motor2_PUL_GPIO_Port, Motor2_PUL_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2140      	movs	r1, #64	@ 0x40
 80016d4:	481b      	ldr	r0, [pc, #108]	@ (8001744 <doMotorStepping.2+0x254>)
 80016d6:	f000 ff63 	bl	80025a0 <HAL_GPIO_WritePin>
        motor2_stepsRemaining--;
 80016da:	4b1c      	ldr	r3, [pc, #112]	@ (800174c <doMotorStepping.2+0x25c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3b01      	subs	r3, #1
 80016e0:	4a1a      	ldr	r2, [pc, #104]	@ (800174c <doMotorStepping.2+0x25c>)
 80016e2:	6013      	str	r3, [r2, #0]
        uint32_t interval_us = MAX_STEP_INTERVAL_US - (uint32_t)(motor2_speedFactor * (MAX_STEP_INTERVAL_US - MIN_STEP_INTERVAL_US));
 80016e4:	4b18      	ldr	r3, [pc, #96]	@ (8001748 <doMotorStepping.2+0x258>)
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001730 <doMotorStepping.2+0x240>
 80016ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016f6:	ee17 3a90 	vmov	r3, s15
 80016fa:	f5c3 33c3 	rsb	r3, r3, #99840	@ 0x18600
 80016fe:	33a0      	adds	r3, #160	@ 0xa0
 8001700:	623b      	str	r3, [r7, #32]
        if (interval_us < MIN_STEP_INTERVAL_US) interval_us = MIN_STEP_INTERVAL_US;
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	2b09      	cmp	r3, #9
 8001706:	d801      	bhi.n	800170c <doMotorStepping.2+0x21c>
 8001708:	230a      	movs	r3, #10
 800170a:	623b      	str	r3, [r7, #32]
        motor2_nextStepTime_us = now_us + interval_us;
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	6a3b      	ldr	r3, [r7, #32]
 8001710:	4413      	add	r3, r2
 8001712:	4a0b      	ldr	r2, [pc, #44]	@ (8001740 <doMotorStepping.2+0x250>)
 8001714:	6013      	str	r3, [r2, #0]
}
 8001716:	bf00      	nop
 8001718:	3734      	adds	r7, #52	@ 0x34
 800171a:	46bd      	mov	sp, r7
 800171c:	bd90      	pop	{r4, r7, pc}
 800171e:	bf00      	nop
 8001720:	2000030c 	.word	0x2000030c
 8001724:	20000304 	.word	0x20000304
 8001728:	48000800 	.word	0x48000800
 800172c:	20000000 	.word	0x20000000
 8001730:	47c34b00 	.word	0x47c34b00
 8001734:	200002fc 	.word	0x200002fc
 8001738:	20000008 	.word	0x20000008
 800173c:	2000030d 	.word	0x2000030d
 8001740:	20000308 	.word	0x20000308
 8001744:	48000400 	.word	0x48000400
 8001748:	20000004 	.word	0x20000004
 800174c:	20000300 	.word	0x20000300
 8001750:	20000009 	.word	0x20000009

08001754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b09c      	sub	sp, #112	@ 0x70
 8001758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800175e:	2228      	movs	r2, #40	@ 0x28
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f005 f9a3 	bl	8006aae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001768:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001778:	463b      	mov	r3, r7
 800177a:	2234      	movs	r2, #52	@ 0x34
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f005 f995 	bl	8006aae <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001784:	2302      	movs	r3, #2
 8001786:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001788:	2301      	movs	r3, #1
 800178a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800178c:	2310      	movs	r3, #16
 800178e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001790:	2302      	movs	r3, #2
 8001792:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001794:	2300      	movs	r3, #0
 8001796:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001798:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800179c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 ff14 	bl	80025d0 <HAL_RCC_OscConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80017ae:	f000 f985 	bl	8001abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b2:	230f      	movs	r3, #15
 80017b4:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b6:	2302      	movs	r3, #2
 80017b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ba:	2300      	movs	r3, #0
 80017bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c4:	2300      	movs	r3, #0
 80017c6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017cc:	2102      	movs	r1, #2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f001 ff0c 	bl	80035ec <HAL_RCC_ClockConfig>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80017da:	f000 f96f 	bl	8001abc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80017de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017e8:	463b      	mov	r3, r7
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 f926 	bl	8003a3c <HAL_RCCEx_PeriphCLKConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80017f6:	f000 f961 	bl	8001abc <Error_Handler>
  }
}
 80017fa:	bf00      	nop
 80017fc:	3770      	adds	r7, #112	@ 0x70
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08c      	sub	sp, #48	@ 0x30
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	2224      	movs	r2, #36	@ 0x24
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f005 f94b 	bl	8006aae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001818:	463b      	mov	r3, r7
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001822:	4b23      	ldr	r3, [pc, #140]	@ (80018b0 <MX_TIM1_Init+0xac>)
 8001824:	4a23      	ldr	r2, [pc, #140]	@ (80018b4 <MX_TIM1_Init+0xb0>)
 8001826:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001828:	4b21      	ldr	r3, [pc, #132]	@ (80018b0 <MX_TIM1_Init+0xac>)
 800182a:	2200      	movs	r2, #0
 800182c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182e:	4b20      	ldr	r3, [pc, #128]	@ (80018b0 <MX_TIM1_Init+0xac>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001834:	4b1e      	ldr	r3, [pc, #120]	@ (80018b0 <MX_TIM1_Init+0xac>)
 8001836:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800183a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183c:	4b1c      	ldr	r3, [pc, #112]	@ (80018b0 <MX_TIM1_Init+0xac>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001842:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <MX_TIM1_Init+0xac>)
 8001844:	2200      	movs	r2, #0
 8001846:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001848:	4b19      	ldr	r3, [pc, #100]	@ (80018b0 <MX_TIM1_Init+0xac>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800184e:	2301      	movs	r3, #1
 8001850:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001856:	2301      	movs	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001866:	2301      	movs	r3, #1
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800186a:	2300      	movs	r3, #0
 800186c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	4619      	mov	r1, r3
 8001878:	480d      	ldr	r0, [pc, #52]	@ (80018b0 <MX_TIM1_Init+0xac>)
 800187a:	f002 fa6f 	bl	8003d5c <HAL_TIM_Encoder_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001884:	f000 f91a 	bl	8001abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001894:	463b      	mov	r3, r7
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <MX_TIM1_Init+0xac>)
 800189a:	f002 fbbd 	bl	8004018 <HAL_TIMEx_MasterConfigSynchronization>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80018a4:	f000 f90a 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	3730      	adds	r7, #48	@ 0x30
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200001fc 	.word	0x200001fc
 80018b4:	40012c00 	.word	0x40012c00

080018b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	@ 0x30
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	2224      	movs	r2, #36	@ 0x24
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f005 f8f1 	bl	8006aae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	463b      	mov	r3, r7
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018d6:	4b21      	ldr	r3, [pc, #132]	@ (800195c <MX_TIM2_Init+0xa4>)
 80018d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018de:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <MX_TIM2_Init+0xa4>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e4:	4b1d      	ldr	r3, [pc, #116]	@ (800195c <MX_TIM2_Init+0xa4>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80018ea:	4b1c      	ldr	r3, [pc, #112]	@ (800195c <MX_TIM2_Init+0xa4>)
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295
 80018f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f2:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <MX_TIM2_Init+0xa4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f8:	4b18      	ldr	r3, [pc, #96]	@ (800195c <MX_TIM2_Init+0xa4>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80018fe:	2301      	movs	r3, #1
 8001900:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001906:	2301      	movs	r3, #1
 8001908:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001916:	2301      	movs	r3, #1
 8001918:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	4619      	mov	r1, r3
 8001928:	480c      	ldr	r0, [pc, #48]	@ (800195c <MX_TIM2_Init+0xa4>)
 800192a:	f002 fa17 	bl	8003d5c <HAL_TIM_Encoder_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001934:	f000 f8c2 	bl	8001abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001938:	2300      	movs	r3, #0
 800193a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001940:	463b      	mov	r3, r7
 8001942:	4619      	mov	r1, r3
 8001944:	4805      	ldr	r0, [pc, #20]	@ (800195c <MX_TIM2_Init+0xa4>)
 8001946:	f002 fb67 	bl	8004018 <HAL_TIMEx_MasterConfigSynchronization>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001950:	f000 f8b4 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	3730      	adds	r7, #48	@ 0x30
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	2000023c 	.word	0x2000023c

08001960 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001964:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <MX_USART2_UART_Init+0x58>)
 8001966:	4a15      	ldr	r2, [pc, #84]	@ (80019bc <MX_USART2_UART_Init+0x5c>)
 8001968:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800196a:	4b13      	ldr	r3, [pc, #76]	@ (80019b8 <MX_USART2_UART_Init+0x58>)
 800196c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001970:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001972:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <MX_USART2_UART_Init+0x58>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001978:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <MX_USART2_UART_Init+0x58>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800197e:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <MX_USART2_UART_Init+0x58>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001984:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <MX_USART2_UART_Init+0x58>)
 8001986:	220c      	movs	r2, #12
 8001988:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198a:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <MX_USART2_UART_Init+0x58>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001990:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <MX_USART2_UART_Init+0x58>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001996:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <MX_USART2_UART_Init+0x58>)
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <MX_USART2_UART_Init+0x58>)
 800199e:	2200      	movs	r2, #0
 80019a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019a2:	4805      	ldr	r0, [pc, #20]	@ (80019b8 <MX_USART2_UART_Init+0x58>)
 80019a4:	f002 fb9e 	bl	80040e4 <HAL_UART_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019ae:	f000 f885 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2000027c 	.word	0x2000027c
 80019bc:	40004400 	.word	0x40004400

080019c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	@ 0x28
 80019c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d6:	4b35      	ldr	r3, [pc, #212]	@ (8001aac <MX_GPIO_Init+0xec>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	4a34      	ldr	r2, [pc, #208]	@ (8001aac <MX_GPIO_Init+0xec>)
 80019dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80019e0:	6153      	str	r3, [r2, #20]
 80019e2:	4b32      	ldr	r3, [pc, #200]	@ (8001aac <MX_GPIO_Init+0xec>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019ee:	4b2f      	ldr	r3, [pc, #188]	@ (8001aac <MX_GPIO_Init+0xec>)
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	4a2e      	ldr	r2, [pc, #184]	@ (8001aac <MX_GPIO_Init+0xec>)
 80019f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019f8:	6153      	str	r3, [r2, #20]
 80019fa:	4b2c      	ldr	r3, [pc, #176]	@ (8001aac <MX_GPIO_Init+0xec>)
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	4b29      	ldr	r3, [pc, #164]	@ (8001aac <MX_GPIO_Init+0xec>)
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	4a28      	ldr	r2, [pc, #160]	@ (8001aac <MX_GPIO_Init+0xec>)
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a10:	6153      	str	r3, [r2, #20]
 8001a12:	4b26      	ldr	r3, [pc, #152]	@ (8001aac <MX_GPIO_Init+0xec>)
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1e:	4b23      	ldr	r3, [pc, #140]	@ (8001aac <MX_GPIO_Init+0xec>)
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	4a22      	ldr	r2, [pc, #136]	@ (8001aac <MX_GPIO_Init+0xec>)
 8001a24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a28:	6153      	str	r3, [r2, #20]
 8001a2a:	4b20      	ldr	r3, [pc, #128]	@ (8001aac <MX_GPIO_Init+0xec>)
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|Motor2_PUL_Pin|Motor2_DIR_Pin, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	f44f 5103 	mov.w	r1, #8384	@ 0x20c0
 8001a3c:	481c      	ldr	r0, [pc, #112]	@ (8001ab0 <MX_GPIO_Init+0xf0>)
 8001a3e:	f000 fdaf 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Motor1_PUL_Pin|Motor1_DIR_Pin, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8001a48:	481a      	ldr	r0, [pc, #104]	@ (8001ab4 <MX_GPIO_Init+0xf4>)
 8001a4a:	f000 fda9 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a54:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <MX_GPIO_Init+0xf8>)
 8001a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4619      	mov	r1, r3
 8001a62:	4814      	ldr	r0, [pc, #80]	@ (8001ab4 <MX_GPIO_Init+0xf4>)
 8001a64:	f000 fc2a 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Motor2_PUL_Pin Motor2_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Motor2_PUL_Pin|Motor2_DIR_Pin;
 8001a68:	f44f 5303 	mov.w	r3, #8384	@ 0x20c0
 8001a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	480b      	ldr	r0, [pc, #44]	@ (8001ab0 <MX_GPIO_Init+0xf0>)
 8001a82:	f000 fc1b 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor1_PUL_Pin Motor1_DIR_Pin */
  GPIO_InitStruct.Pin = Motor1_PUL_Pin|Motor1_DIR_Pin;
 8001a86:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <MX_GPIO_Init+0xf4>)
 8001aa0:	f000 fc0c 	bl	80022bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001aa4:	bf00      	nop
 8001aa6:	3728      	adds	r7, #40	@ 0x28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	48000400 	.word	0x48000400
 8001ab4:	48000800 	.word	0x48000800
 8001ab8:	10210000 	.word	0x10210000

08001abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac0:	b672      	cpsid	i
}
 8001ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <Error_Handler+0x8>

08001ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ace:	4b0f      	ldr	r3, [pc, #60]	@ (8001b0c <HAL_MspInit+0x44>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	4a0e      	ldr	r2, [pc, #56]	@ (8001b0c <HAL_MspInit+0x44>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6193      	str	r3, [r2, #24]
 8001ada:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <HAL_MspInit+0x44>)
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <HAL_MspInit+0x44>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	4a08      	ldr	r2, [pc, #32]	@ (8001b0c <HAL_MspInit+0x44>)
 8001aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001af0:	61d3      	str	r3, [r2, #28]
 8001af2:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <HAL_MspInit+0x44>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001afe:	2007      	movs	r0, #7
 8001b00:	f000 fb5c 	bl	80021bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40021000 	.word	0x40021000

08001b10 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08c      	sub	sp, #48	@ 0x30
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 031c 	add.w	r3, r7, #28
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a2f      	ldr	r2, [pc, #188]	@ (8001bec <HAL_TIM_Encoder_MspInit+0xdc>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d12a      	bne.n	8001b88 <HAL_TIM_Encoder_MspInit+0x78>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b32:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	4a2e      	ldr	r2, [pc, #184]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b38:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b3c:	6193      	str	r3, [r2, #24]
 8001b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b46:	61bb      	str	r3, [r7, #24]
 8001b48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	4b29      	ldr	r3, [pc, #164]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	4a28      	ldr	r2, [pc, #160]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b54:	6153      	str	r3, [r2, #20]
 8001b56:	4b26      	ldr	r3, [pc, #152]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder2_A__Pin|Encoder2_B__Pin;
 8001b62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b74:	2306      	movs	r3, #6
 8001b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b82:	f000 fb9b 	bl	80022bc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b86:	e02d      	b.n	8001be4 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b90:	d128      	bne.n	8001be4 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b92:	4b17      	ldr	r3, [pc, #92]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4a16      	ldr	r2, [pc, #88]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	61d3      	str	r3, [r2, #28]
 8001b9e:	4b14      	ldr	r3, [pc, #80]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	4a10      	ldr	r2, [pc, #64]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bb4:	6153      	str	r3, [r2, #20]
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder1_A__Pin|Encoder1_B__Pin;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001be0:	f000 fb6c 	bl	80022bc <HAL_GPIO_Init>
}
 8001be4:	bf00      	nop
 8001be6:	3730      	adds	r7, #48	@ 0x30
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40012c00 	.word	0x40012c00
 8001bf0:	40021000 	.word	0x40021000

08001bf4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	@ 0x28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a1b      	ldr	r2, [pc, #108]	@ (8001c80 <HAL_UART_MspInit+0x8c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d130      	bne.n	8001c78 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c16:	4b1b      	ldr	r3, [pc, #108]	@ (8001c84 <HAL_UART_MspInit+0x90>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	4a1a      	ldr	r2, [pc, #104]	@ (8001c84 <HAL_UART_MspInit+0x90>)
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c20:	61d3      	str	r3, [r2, #28]
 8001c22:	4b18      	ldr	r3, [pc, #96]	@ (8001c84 <HAL_UART_MspInit+0x90>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <HAL_UART_MspInit+0x90>)
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	4a14      	ldr	r2, [pc, #80]	@ (8001c84 <HAL_UART_MspInit+0x90>)
 8001c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c38:	6153      	str	r3, [r2, #20]
 8001c3a:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <HAL_UART_MspInit+0x90>)
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c46:	230c      	movs	r3, #12
 8001c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c52:	2303      	movs	r3, #3
 8001c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c56:	2307      	movs	r3, #7
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c64:	f000 fb2a 	bl	80022bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2026      	movs	r0, #38	@ 0x26
 8001c6e:	f000 fab0 	bl	80021d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c72:	2026      	movs	r0, #38	@ 0x26
 8001c74:	f000 fac9 	bl	800220a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c78:	bf00      	nop
 8001c7a:	3728      	adds	r7, #40	@ 0x28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40004400 	.word	0x40004400
 8001c84:	40021000 	.word	0x40021000

08001c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <NMI_Handler+0x4>

08001c90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <HardFault_Handler+0x4>

08001c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <MemManage_Handler+0x4>

08001ca0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <BusFault_Handler+0x4>

08001ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <UsageFault_Handler+0x4>

08001cb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cde:	f000 f959 	bl	8001f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cec:	4802      	ldr	r0, [pc, #8]	@ (8001cf8 <USART2_IRQHandler+0x10>)
 8001cee:	f002 fb7b 	bl	80043e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000027c 	.word	0x2000027c

08001cfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return 1;
 8001d00:	2301      	movs	r3, #1
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <_kill>:

int _kill(int pid, int sig)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d16:	f004 ff4f 	bl	8006bb8 <__errno>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2216      	movs	r2, #22
 8001d1e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <_exit>:

void _exit (int status)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ffe7 	bl	8001d0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d3e:	bf00      	nop
 8001d40:	e7fd      	b.n	8001d3e <_exit+0x12>

08001d42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	e00a      	b.n	8001d6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d54:	f3af 8000 	nop.w
 8001d58:	4601      	mov	r1, r0
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	60ba      	str	r2, [r7, #8]
 8001d60:	b2ca      	uxtb	r2, r1
 8001d62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	3301      	adds	r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	dbf0      	blt.n	8001d54 <_read+0x12>
  }

  return len;
 8001d72:	687b      	ldr	r3, [r7, #4]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	e009      	b.n	8001da2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	60ba      	str	r2, [r7, #8]
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	dbf1      	blt.n	8001d8e <_write+0x12>
  }
  return len;
 8001daa:	687b      	ldr	r3, [r7, #4]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_close>:

int _close(int file)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ddc:	605a      	str	r2, [r3, #4]
  return 0;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <_isatty>:

int _isatty(int file)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001df4:	2301      	movs	r3, #1
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b085      	sub	sp, #20
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e24:	4a14      	ldr	r2, [pc, #80]	@ (8001e78 <_sbrk+0x5c>)
 8001e26:	4b15      	ldr	r3, [pc, #84]	@ (8001e7c <_sbrk+0x60>)
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e30:	4b13      	ldr	r3, [pc, #76]	@ (8001e80 <_sbrk+0x64>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d102      	bne.n	8001e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e38:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <_sbrk+0x64>)
 8001e3a:	4a12      	ldr	r2, [pc, #72]	@ (8001e84 <_sbrk+0x68>)
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3e:	4b10      	ldr	r3, [pc, #64]	@ (8001e80 <_sbrk+0x64>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d207      	bcs.n	8001e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e4c:	f004 feb4 	bl	8006bb8 <__errno>
 8001e50:	4603      	mov	r3, r0
 8001e52:	220c      	movs	r2, #12
 8001e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5a:	e009      	b.n	8001e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e5c:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e62:	4b07      	ldr	r3, [pc, #28]	@ (8001e80 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	@ (8001e80 <_sbrk+0x64>)
 8001e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20004000 	.word	0x20004000
 8001e7c:	00000400 	.word	0x00000400
 8001e80:	2000095c 	.word	0x2000095c
 8001e84:	20000ab0 	.word	0x20000ab0

08001e88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e8c:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <SystemInit+0x28>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e92:	4a07      	ldr	r2, [pc, #28]	@ (8001eb0 <SystemInit+0x28>)
 8001e94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e9c:	4b04      	ldr	r3, [pc, #16]	@ (8001eb0 <SystemInit+0x28>)
 8001e9e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ea2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001eb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001eec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001eb8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001eba:	e003      	b.n	8001ec4 <LoopCopyDataInit>

08001ebc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ebe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ec0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ec2:	3104      	adds	r1, #4

08001ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ec4:	480b      	ldr	r0, [pc, #44]	@ (8001ef4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ec8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001eca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ecc:	d3f6      	bcc.n	8001ebc <CopyDataInit>
	ldr	r2, =_sbss
 8001ece:	4a0b      	ldr	r2, [pc, #44]	@ (8001efc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ed0:	e002      	b.n	8001ed8 <LoopFillZerobss>

08001ed2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ed2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ed4:	f842 3b04 	str.w	r3, [r2], #4

08001ed8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ed8:	4b09      	ldr	r3, [pc, #36]	@ (8001f00 <LoopForever+0x16>)
	cmp	r2, r3
 8001eda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001edc:	d3f9      	bcc.n	8001ed2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ede:	f7ff ffd3 	bl	8001e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ee2:	f004 fe6f 	bl	8006bc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ee6:	f7ff f8af 	bl	8001048 <main>

08001eea <LoopForever>:

LoopForever:
    b LoopForever
 8001eea:	e7fe      	b.n	8001eea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001eec:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8001ef0:	0800a57c 	.word	0x0800a57c
	ldr	r0, =_sdata
 8001ef4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ef8:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8001efc:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8001f00:	20000ab0 	.word	0x20000ab0

08001f04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC1_IRQHandler>
	...

08001f08 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f0c:	4b08      	ldr	r3, [pc, #32]	@ (8001f30 <HAL_Init+0x28>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a07      	ldr	r2, [pc, #28]	@ (8001f30 <HAL_Init+0x28>)
 8001f12:	f043 0310 	orr.w	r3, r3, #16
 8001f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f18:	2003      	movs	r0, #3
 8001f1a:	f000 f94f 	bl	80021bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f000 f808 	bl	8001f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f24:	f7ff fdd0 	bl	8001ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40022000 	.word	0x40022000

08001f34 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f3c:	4b12      	ldr	r3, [pc, #72]	@ (8001f88 <HAL_InitTick+0x54>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <HAL_InitTick+0x58>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4619      	mov	r1, r3
 8001f46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f967 	bl	8002226 <HAL_SYSTICK_Config>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00e      	b.n	8001f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b0f      	cmp	r3, #15
 8001f66:	d80a      	bhi.n	8001f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f000 f92f 	bl	80021d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f74:	4a06      	ldr	r2, [pc, #24]	@ (8001f90 <HAL_InitTick+0x5c>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e000      	b.n	8001f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	2000000c 	.word	0x2000000c
 8001f8c:	20000014 	.word	0x20000014
 8001f90:	20000010 	.word	0x20000010

08001f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f98:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <HAL_IncTick+0x20>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <HAL_IncTick+0x24>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a04      	ldr	r2, [pc, #16]	@ (8001fb8 <HAL_IncTick+0x24>)
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000014 	.word	0x20000014
 8001fb8:	20000960 	.word	0x20000960

08001fbc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return uwTick;  
 8001fc0:	4b03      	ldr	r3, [pc, #12]	@ (8001fd0 <HAL_GetTick+0x14>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20000960 	.word	0x20000960

08001fd4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fdc:	f7ff ffee 	bl	8001fbc <HAL_GetTick>
 8001fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fec:	d005      	beq.n	8001ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fee:	4b0a      	ldr	r3, [pc, #40]	@ (8002018 <HAL_Delay+0x44>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ffa:	bf00      	nop
 8001ffc:	f7ff ffde 	bl	8001fbc <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	429a      	cmp	r2, r3
 800200a:	d8f7      	bhi.n	8001ffc <HAL_Delay+0x28>
  {
  }
}
 800200c:	bf00      	nop
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000014 	.word	0x20000014

0800201c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800202c:	4b0c      	ldr	r3, [pc, #48]	@ (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002038:	4013      	ands	r3, r2
 800203a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002044:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002048:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800204c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204e:	4a04      	ldr	r2, [pc, #16]	@ (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	60d3      	str	r3, [r2, #12]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002068:	4b04      	ldr	r3, [pc, #16]	@ (800207c <__NVIC_GetPriorityGrouping+0x18>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	f003 0307 	and.w	r3, r3, #7
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	2b00      	cmp	r3, #0
 8002090:	db0b      	blt.n	80020aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	f003 021f 	and.w	r2, r3, #31
 8002098:	4907      	ldr	r1, [pc, #28]	@ (80020b8 <__NVIC_EnableIRQ+0x38>)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	2001      	movs	r0, #1
 80020a2:	fa00 f202 	lsl.w	r2, r0, r2
 80020a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000e100 	.word	0xe000e100

080020bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	6039      	str	r1, [r7, #0]
 80020c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	db0a      	blt.n	80020e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	490c      	ldr	r1, [pc, #48]	@ (8002108 <__NVIC_SetPriority+0x4c>)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	0112      	lsls	r2, r2, #4
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	440b      	add	r3, r1
 80020e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e4:	e00a      	b.n	80020fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4908      	ldr	r1, [pc, #32]	@ (800210c <__NVIC_SetPriority+0x50>)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	3b04      	subs	r3, #4
 80020f4:	0112      	lsls	r2, r2, #4
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	440b      	add	r3, r1
 80020fa:	761a      	strb	r2, [r3, #24]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000e100 	.word	0xe000e100
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002110:	b480      	push	{r7}
 8002112:	b089      	sub	sp, #36	@ 0x24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f1c3 0307 	rsb	r3, r3, #7
 800212a:	2b04      	cmp	r3, #4
 800212c:	bf28      	it	cs
 800212e:	2304      	movcs	r3, #4
 8002130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3304      	adds	r3, #4
 8002136:	2b06      	cmp	r3, #6
 8002138:	d902      	bls.n	8002140 <NVIC_EncodePriority+0x30>
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3b03      	subs	r3, #3
 800213e:	e000      	b.n	8002142 <NVIC_EncodePriority+0x32>
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	f04f 32ff 	mov.w	r2, #4294967295
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43da      	mvns	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	401a      	ands	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002158:	f04f 31ff 	mov.w	r1, #4294967295
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	43d9      	mvns	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	4313      	orrs	r3, r2
         );
}
 800216a:	4618      	mov	r0, r3
 800216c:	3724      	adds	r7, #36	@ 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002188:	d301      	bcc.n	800218e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800218a:	2301      	movs	r3, #1
 800218c:	e00f      	b.n	80021ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800218e:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <SysTick_Config+0x40>)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3b01      	subs	r3, #1
 8002194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002196:	210f      	movs	r1, #15
 8002198:	f04f 30ff 	mov.w	r0, #4294967295
 800219c:	f7ff ff8e 	bl	80020bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a0:	4b05      	ldr	r3, [pc, #20]	@ (80021b8 <SysTick_Config+0x40>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021a6:	4b04      	ldr	r3, [pc, #16]	@ (80021b8 <SysTick_Config+0x40>)
 80021a8:	2207      	movs	r2, #7
 80021aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	e000e010 	.word	0xe000e010

080021bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff ff29 	bl	800201c <__NVIC_SetPriorityGrouping>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b086      	sub	sp, #24
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
 80021de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e4:	f7ff ff3e 	bl	8002064 <__NVIC_GetPriorityGrouping>
 80021e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68b9      	ldr	r1, [r7, #8]
 80021ee:	6978      	ldr	r0, [r7, #20]
 80021f0:	f7ff ff8e 	bl	8002110 <NVIC_EncodePriority>
 80021f4:	4602      	mov	r2, r0
 80021f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff5d 	bl	80020bc <__NVIC_SetPriority>
}
 8002202:	bf00      	nop
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	4603      	mov	r3, r0
 8002212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff31 	bl	8002080 <__NVIC_EnableIRQ>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff ffa2 	bl	8002178 <SysTick_Config>
 8002234:	4603      	mov	r3, r0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002250:	2b02      	cmp	r3, #2
 8002252:	d005      	beq.n	8002260 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2204      	movs	r2, #4
 8002258:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
 800225e:	e027      	b.n	80022b0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 020e 	bic.w	r2, r2, #14
 800226e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0201 	bic.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002288:	2101      	movs	r1, #1
 800228a:	fa01 f202 	lsl.w	r2, r1, r2
 800228e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
    } 
  }
  return status;
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ca:	e14e      	b.n	800256a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	2101      	movs	r1, #1
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	fa01 f303 	lsl.w	r3, r1, r3
 80022d8:	4013      	ands	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 8140 	beq.w	8002564 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x38>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b12      	cmp	r3, #18
 80022f2:	d123      	bne.n	800233c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	08da      	lsrs	r2, r3, #3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3208      	adds	r2, #8
 80022fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002300:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	220f      	movs	r2, #15
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	08da      	lsrs	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3208      	adds	r2, #8
 8002336:	6939      	ldr	r1, [r7, #16]
 8002338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	2203      	movs	r2, #3
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0203 	and.w	r2, r3, #3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4313      	orrs	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d00b      	beq.n	8002390 <HAL_GPIO_Init+0xd4>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d007      	beq.n	8002390 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002384:	2b11      	cmp	r3, #17
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b12      	cmp	r3, #18
 800238e:	d130      	bne.n	80023f2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c6:	2201      	movs	r2, #1
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	091b      	lsrs	r3, r3, #4
 80023dc:	f003 0201 	and.w	r2, r3, #1
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	2203      	movs	r2, #3
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 809a 	beq.w	8002564 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002430:	4b55      	ldr	r3, [pc, #340]	@ (8002588 <HAL_GPIO_Init+0x2cc>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	4a54      	ldr	r2, [pc, #336]	@ (8002588 <HAL_GPIO_Init+0x2cc>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6193      	str	r3, [r2, #24]
 800243c:	4b52      	ldr	r3, [pc, #328]	@ (8002588 <HAL_GPIO_Init+0x2cc>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002448:	4a50      	ldr	r2, [pc, #320]	@ (800258c <HAL_GPIO_Init+0x2d0>)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	089b      	lsrs	r3, r3, #2
 800244e:	3302      	adds	r3, #2
 8002450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002454:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	220f      	movs	r2, #15
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002472:	d013      	beq.n	800249c <HAL_GPIO_Init+0x1e0>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a46      	ldr	r2, [pc, #280]	@ (8002590 <HAL_GPIO_Init+0x2d4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00d      	beq.n	8002498 <HAL_GPIO_Init+0x1dc>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a45      	ldr	r2, [pc, #276]	@ (8002594 <HAL_GPIO_Init+0x2d8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d007      	beq.n	8002494 <HAL_GPIO_Init+0x1d8>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a44      	ldr	r2, [pc, #272]	@ (8002598 <HAL_GPIO_Init+0x2dc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d101      	bne.n	8002490 <HAL_GPIO_Init+0x1d4>
 800248c:	2303      	movs	r3, #3
 800248e:	e006      	b.n	800249e <HAL_GPIO_Init+0x1e2>
 8002490:	2305      	movs	r3, #5
 8002492:	e004      	b.n	800249e <HAL_GPIO_Init+0x1e2>
 8002494:	2302      	movs	r3, #2
 8002496:	e002      	b.n	800249e <HAL_GPIO_Init+0x1e2>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <HAL_GPIO_Init+0x1e2>
 800249c:	2300      	movs	r3, #0
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	f002 0203 	and.w	r2, r2, #3
 80024a4:	0092      	lsls	r2, r2, #2
 80024a6:	4093      	lsls	r3, r2
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024ae:	4937      	ldr	r1, [pc, #220]	@ (800258c <HAL_GPIO_Init+0x2d0>)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	089b      	lsrs	r3, r3, #2
 80024b4:	3302      	adds	r3, #2
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024bc:	4b37      	ldr	r3, [pc, #220]	@ (800259c <HAL_GPIO_Init+0x2e0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024e0:	4a2e      	ldr	r2, [pc, #184]	@ (800259c <HAL_GPIO_Init+0x2e0>)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024e6:	4b2d      	ldr	r3, [pc, #180]	@ (800259c <HAL_GPIO_Init+0x2e0>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800250a:	4a24      	ldr	r2, [pc, #144]	@ (800259c <HAL_GPIO_Init+0x2e0>)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002510:	4b22      	ldr	r3, [pc, #136]	@ (800259c <HAL_GPIO_Init+0x2e0>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	43db      	mvns	r3, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002534:	4a19      	ldr	r2, [pc, #100]	@ (800259c <HAL_GPIO_Init+0x2e0>)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800253a:	4b18      	ldr	r3, [pc, #96]	@ (800259c <HAL_GPIO_Init+0x2e0>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	43db      	mvns	r3, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800255e:	4a0f      	ldr	r2, [pc, #60]	@ (800259c <HAL_GPIO_Init+0x2e0>)
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	3301      	adds	r3, #1
 8002568:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	fa22 f303 	lsr.w	r3, r2, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	f47f aea9 	bne.w	80022cc <HAL_GPIO_Init+0x10>
  }
}
 800257a:	bf00      	nop
 800257c:	bf00      	nop
 800257e:	371c      	adds	r7, #28
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	40021000 	.word	0x40021000
 800258c:	40010000 	.word	0x40010000
 8002590:	48000400 	.word	0x48000400
 8002594:	48000800 	.word	0x48000800
 8002598:	48000c00 	.word	0x48000c00
 800259c:	40010400 	.word	0x40010400

080025a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	807b      	strh	r3, [r7, #2]
 80025ac:	4613      	mov	r3, r2
 80025ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b0:	787b      	ldrb	r3, [r7, #1]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025b6:	887a      	ldrh	r2, [r7, #2]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025bc:	e002      	b.n	80025c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025be:	887a      	ldrh	r2, [r7, #2]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025e0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	f000 bff4 	b.w	80035de <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 816d 	beq.w	80028e6 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800260c:	4bb4      	ldr	r3, [pc, #720]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	2b04      	cmp	r3, #4
 8002616:	d00c      	beq.n	8002632 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002618:	4bb1      	ldr	r3, [pc, #708]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 030c 	and.w	r3, r3, #12
 8002620:	2b08      	cmp	r3, #8
 8002622:	d157      	bne.n	80026d4 <HAL_RCC_OscConfig+0x104>
 8002624:	4bae      	ldr	r3, [pc, #696]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800262c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002630:	d150      	bne.n	80026d4 <HAL_RCC_OscConfig+0x104>
 8002632:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002636:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800263e:	fa93 f3a3 	rbit	r3, r3
 8002642:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002646:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b3f      	cmp	r3, #63	@ 0x3f
 8002652:	d802      	bhi.n	800265a <HAL_RCC_OscConfig+0x8a>
 8002654:	4ba2      	ldr	r3, [pc, #648]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	e015      	b.n	8002686 <HAL_RCC_OscConfig+0xb6>
 800265a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800265e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800266e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002672:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002676:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800267a:	fa93 f3a3 	rbit	r3, r3
 800267e:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002682:	4b97      	ldr	r3, [pc, #604]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 8002684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002686:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800268a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800268e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002692:	fa92 f2a2 	rbit	r2, r2
 8002696:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800269a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800269e:	fab2 f282 	clz	r2, r2
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	f042 0220 	orr.w	r2, r2, #32
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	f002 021f 	and.w	r2, r2, #31
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f202 	lsl.w	r2, r1, r2
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 8114 	beq.w	80028e4 <HAL_RCC_OscConfig+0x314>
 80026bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f040 810b 	bne.w	80028e4 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	f000 bf85 	b.w	80035de <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026e4:	d106      	bne.n	80026f4 <HAL_RCC_OscConfig+0x124>
 80026e6:	4b7e      	ldr	r3, [pc, #504]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a7d      	ldr	r2, [pc, #500]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e036      	b.n	8002762 <HAL_RCC_OscConfig+0x192>
 80026f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10c      	bne.n	800271e <HAL_RCC_OscConfig+0x14e>
 8002704:	4b76      	ldr	r3, [pc, #472]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a75      	ldr	r2, [pc, #468]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 800270a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	4b73      	ldr	r3, [pc, #460]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a72      	ldr	r2, [pc, #456]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 8002716:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	e021      	b.n	8002762 <HAL_RCC_OscConfig+0x192>
 800271e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002722:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800272e:	d10c      	bne.n	800274a <HAL_RCC_OscConfig+0x17a>
 8002730:	4b6b      	ldr	r3, [pc, #428]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a6a      	ldr	r2, [pc, #424]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 8002736:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	4b68      	ldr	r3, [pc, #416]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a67      	ldr	r2, [pc, #412]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 8002742:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	e00b      	b.n	8002762 <HAL_RCC_OscConfig+0x192>
 800274a:	4b65      	ldr	r3, [pc, #404]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a64      	ldr	r2, [pc, #400]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 8002750:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	4b62      	ldr	r3, [pc, #392]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a61      	ldr	r2, [pc, #388]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 800275c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002760:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002762:	4b5f      	ldr	r3, [pc, #380]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 8002764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002766:	f023 020f 	bic.w	r2, r3, #15
 800276a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	495a      	ldr	r1, [pc, #360]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 8002778:	4313      	orrs	r3, r2
 800277a:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800277c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002780:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d054      	beq.n	8002836 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7ff fc16 	bl	8001fbc <HAL_GetTick>
 8002790:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002794:	e00a      	b.n	80027ac <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002796:	f7ff fc11 	bl	8001fbc <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	@ 0x64
 80027a4:	d902      	bls.n	80027ac <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	f000 bf19 	b.w	80035de <HAL_RCC_OscConfig+0x100e>
 80027ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027b0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80027b8:	fa93 f3a3 	rbit	r3, r3
 80027bc:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80027c0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80027cc:	d802      	bhi.n	80027d4 <HAL_RCC_OscConfig+0x204>
 80027ce:	4b44      	ldr	r3, [pc, #272]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	e015      	b.n	8002800 <HAL_RCC_OscConfig+0x230>
 80027d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027d8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80027e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027ec:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80027f0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80027f4:	fa93 f3a3 	rbit	r3, r3
 80027f8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80027fc:	4b38      	ldr	r3, [pc, #224]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002804:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002808:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800280c:	fa92 f2a2 	rbit	r2, r2
 8002810:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002814:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002818:	fab2 f282 	clz	r2, r2
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	f042 0220 	orr.w	r2, r2, #32
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	f002 021f 	and.w	r2, r2, #31
 8002828:	2101      	movs	r1, #1
 800282a:	fa01 f202 	lsl.w	r2, r1, r2
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0b0      	beq.n	8002796 <HAL_RCC_OscConfig+0x1c6>
 8002834:	e057      	b.n	80028e6 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002836:	f7ff fbc1 	bl	8001fbc <HAL_GetTick>
 800283a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283e:	e00a      	b.n	8002856 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002840:	f7ff fbbc 	bl	8001fbc <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b64      	cmp	r3, #100	@ 0x64
 800284e:	d902      	bls.n	8002856 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	f000 bec4 	b.w	80035de <HAL_RCC_OscConfig+0x100e>
 8002856:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800285a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800286a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b3f      	cmp	r3, #63	@ 0x3f
 8002876:	d802      	bhi.n	800287e <HAL_RCC_OscConfig+0x2ae>
 8002878:	4b19      	ldr	r3, [pc, #100]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	e015      	b.n	80028aa <HAL_RCC_OscConfig+0x2da>
 800287e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002882:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002892:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002896:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800289a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80028a6:	4b0e      	ldr	r3, [pc, #56]	@ (80028e0 <HAL_RCC_OscConfig+0x310>)
 80028a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028ae:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80028b2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80028b6:	fa92 f2a2 	rbit	r2, r2
 80028ba:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80028be:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80028c2:	fab2 f282 	clz	r2, r2
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	f042 0220 	orr.w	r2, r2, #32
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	f002 021f 	and.w	r2, r2, #31
 80028d2:	2101      	movs	r1, #1
 80028d4:	fa01 f202 	lsl.w	r2, r1, r2
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1b0      	bne.n	8002840 <HAL_RCC_OscConfig+0x270>
 80028de:	e002      	b.n	80028e6 <HAL_RCC_OscConfig+0x316>
 80028e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 816c 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028fc:	4bcc      	ldr	r3, [pc, #816]	@ (8002c30 <HAL_RCC_OscConfig+0x660>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 030c 	and.w	r3, r3, #12
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00b      	beq.n	8002920 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002908:	4bc9      	ldr	r3, [pc, #804]	@ (8002c30 <HAL_RCC_OscConfig+0x660>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 030c 	and.w	r3, r3, #12
 8002910:	2b08      	cmp	r3, #8
 8002912:	d16d      	bne.n	80029f0 <HAL_RCC_OscConfig+0x420>
 8002914:	4bc6      	ldr	r3, [pc, #792]	@ (8002c30 <HAL_RCC_OscConfig+0x660>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d167      	bne.n	80029f0 <HAL_RCC_OscConfig+0x420>
 8002920:	2302      	movs	r3, #2
 8002922:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002932:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b3f      	cmp	r3, #63	@ 0x3f
 800293e:	d802      	bhi.n	8002946 <HAL_RCC_OscConfig+0x376>
 8002940:	4bbb      	ldr	r3, [pc, #748]	@ (8002c30 <HAL_RCC_OscConfig+0x660>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	e013      	b.n	800296e <HAL_RCC_OscConfig+0x39e>
 8002946:	2302      	movs	r3, #2
 8002948:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002958:	2302      	movs	r3, #2
 800295a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800295e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800296a:	4bb1      	ldr	r3, [pc, #708]	@ (8002c30 <HAL_RCC_OscConfig+0x660>)
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	2202      	movs	r2, #2
 8002970:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002974:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002978:	fa92 f2a2 	rbit	r2, r2
 800297c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002980:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002984:	fab2 f282 	clz	r2, r2
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	f042 0220 	orr.w	r2, r2, #32
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	f002 021f 	and.w	r2, r2, #31
 8002994:	2101      	movs	r1, #1
 8002996:	fa01 f202 	lsl.w	r2, r1, r2
 800299a:	4013      	ands	r3, r2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <HAL_RCC_OscConfig+0x3e6>
 80029a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d002      	beq.n	80029b6 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	f000 be14 	b.w	80035de <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b6:	4b9e      	ldr	r3, [pc, #632]	@ (8002c30 <HAL_RCC_OscConfig+0x660>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	21f8      	movs	r1, #248	@ 0xf8
 80029cc:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80029d4:	fa91 f1a1 	rbit	r1, r1
 80029d8:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80029dc:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80029e0:	fab1 f181 	clz	r1, r1
 80029e4:	b2c9      	uxtb	r1, r1
 80029e6:	408b      	lsls	r3, r1
 80029e8:	4991      	ldr	r1, [pc, #580]	@ (8002c30 <HAL_RCC_OscConfig+0x660>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ee:	e0f1      	b.n	8002bd4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 8083 	beq.w	8002b08 <HAL_RCC_OscConfig+0x538>
 8002a02:	2301      	movs	r3, #1
 8002a04:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002a14:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a18:	fab3 f383 	clz	r3, r3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a22:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2e:	f7ff fac5 	bl	8001fbc <HAL_GetTick>
 8002a32:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a38:	f7ff fac0 	bl	8001fbc <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d902      	bls.n	8002a4e <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	f000 bdc8 	b.w	80035de <HAL_RCC_OscConfig+0x100e>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002a60:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a64:	fab3 f383 	clz	r3, r3
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a6c:	d802      	bhi.n	8002a74 <HAL_RCC_OscConfig+0x4a4>
 8002a6e:	4b70      	ldr	r3, [pc, #448]	@ (8002c30 <HAL_RCC_OscConfig+0x660>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	e013      	b.n	8002a9c <HAL_RCC_OscConfig+0x4cc>
 8002a74:	2302      	movs	r3, #2
 8002a76:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002a86:	2302      	movs	r3, #2
 8002a88:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002a8c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002a98:	4b65      	ldr	r3, [pc, #404]	@ (8002c30 <HAL_RCC_OscConfig+0x660>)
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002aa2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002aa6:	fa92 f2a2 	rbit	r2, r2
 8002aaa:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002aae:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002ab2:	fab2 f282 	clz	r2, r2
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	f042 0220 	orr.w	r2, r2, #32
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	f002 021f 	and.w	r2, r2, #31
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0b4      	beq.n	8002a38 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ace:	4b58      	ldr	r3, [pc, #352]	@ (8002c30 <HAL_RCC_OscConfig+0x660>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ada:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	21f8      	movs	r1, #248	@ 0xf8
 8002ae4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002aec:	fa91 f1a1 	rbit	r1, r1
 8002af0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002af4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002af8:	fab1 f181 	clz	r1, r1
 8002afc:	b2c9      	uxtb	r1, r1
 8002afe:	408b      	lsls	r3, r1
 8002b00:	494b      	ldr	r1, [pc, #300]	@ (8002c30 <HAL_RCC_OscConfig+0x660>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	600b      	str	r3, [r1, #0]
 8002b06:	e065      	b.n	8002bd4 <HAL_RCC_OscConfig+0x604>
 8002b08:	2301      	movs	r3, #1
 8002b0a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002b1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b28:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	461a      	mov	r2, r3
 8002b30:	2300      	movs	r3, #0
 8002b32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7ff fa42 	bl	8001fbc <HAL_GetTick>
 8002b38:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b3e:	f7ff fa3d 	bl	8001fbc <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d902      	bls.n	8002b54 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	f000 bd45 	b.w	80035de <HAL_RCC_OscConfig+0x100e>
 8002b54:	2302      	movs	r3, #2
 8002b56:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b72:	d802      	bhi.n	8002b7a <HAL_RCC_OscConfig+0x5aa>
 8002b74:	4b2e      	ldr	r3, [pc, #184]	@ (8002c30 <HAL_RCC_OscConfig+0x660>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	e013      	b.n	8002ba2 <HAL_RCC_OscConfig+0x5d2>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002b84:	fa93 f3a3 	rbit	r3, r3
 8002b88:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002b92:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002b9e:	4b24      	ldr	r3, [pc, #144]	@ (8002c30 <HAL_RCC_OscConfig+0x660>)
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002ba8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002bac:	fa92 f2a2 	rbit	r2, r2
 8002bb0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002bb4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002bb8:	fab2 f282 	clz	r2, r2
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	f042 0220 	orr.w	r2, r2, #32
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	f002 021f 	and.w	r2, r2, #31
 8002bc8:	2101      	movs	r1, #1
 8002bca:	fa01 f202 	lsl.w	r2, r1, r2
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1b4      	bne.n	8002b3e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 8115 	beq.w	8002e14 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d07e      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x728>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c10:	fab3 f383 	clz	r3, r3
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	461a      	mov	r2, r3
 8002c18:	4b06      	ldr	r3, [pc, #24]	@ (8002c34 <HAL_RCC_OscConfig+0x664>)
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	461a      	mov	r2, r3
 8002c20:	2301      	movs	r3, #1
 8002c22:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c24:	f7ff f9ca 	bl	8001fbc <HAL_GetTick>
 8002c28:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2c:	e00f      	b.n	8002c4e <HAL_RCC_OscConfig+0x67e>
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000
 8002c34:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c38:	f7ff f9c0 	bl	8001fbc <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d902      	bls.n	8002c4e <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	f000 bcc8 	b.w	80035de <HAL_RCC_OscConfig+0x100e>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c58:	fa93 f3a3 	rbit	r3, r3
 8002c5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c64:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c68:	2202      	movs	r2, #2
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c70:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	fa93 f2a3 	rbit	r2, r3
 8002c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	fa93 f2a3 	rbit	r2, r3
 8002c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002ca6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca8:	4bb0      	ldr	r3, [pc, #704]	@ (8002f6c <HAL_RCC_OscConfig+0x99c>)
 8002caa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002cb4:	2102      	movs	r1, #2
 8002cb6:	6019      	str	r1, [r3, #0]
 8002cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cbc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	fa93 f1a3 	rbit	r1, r3
 8002cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002cce:	6019      	str	r1, [r3, #0]
  return result;
 8002cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	fab3 f383 	clz	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	2101      	movs	r1, #1
 8002cec:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0a0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x668>
 8002cf6:	e08d      	b.n	8002e14 <HAL_RCC_OscConfig+0x844>
 8002cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d00:	2201      	movs	r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d08:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	fa93 f2a3 	rbit	r2, r3
 8002d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d16:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d1a:	601a      	str	r2, [r3, #0]
  return result;
 8002d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d20:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d24:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4b90      	ldr	r3, [pc, #576]	@ (8002f70 <HAL_RCC_OscConfig+0x9a0>)
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	461a      	mov	r2, r3
 8002d36:	2300      	movs	r3, #0
 8002d38:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3a:	f7ff f93f 	bl	8001fbc <HAL_GetTick>
 8002d3e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d42:	e00a      	b.n	8002d5a <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d44:	f7ff f93a 	bl	8001fbc <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d902      	bls.n	8002d5a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	f000 bc42 	b.w	80035de <HAL_RCC_OscConfig+0x100e>
 8002d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d62:	2202      	movs	r2, #2
 8002d64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	fa93 f2a3 	rbit	r2, r3
 8002d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d78:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d82:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d86:	2202      	movs	r2, #2
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	fa93 f2a3 	rbit	r2, r3
 8002d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002daa:	2202      	movs	r2, #2
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	fa93 f2a3 	rbit	r2, r3
 8002dbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002dc4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc6:	4b69      	ldr	r3, [pc, #420]	@ (8002f6c <HAL_RCC_OscConfig+0x99c>)
 8002dc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dce:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002dd2:	2102      	movs	r1, #2
 8002dd4:	6019      	str	r1, [r3, #0]
 8002dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dda:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	fa93 f1a3 	rbit	r1, r3
 8002de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002dec:	6019      	str	r1, [r3, #0]
  return result;
 8002dee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	fab3 f383 	clz	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	2101      	movs	r1, #1
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d197      	bne.n	8002d44 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 819e 	beq.w	8003166 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e30:	4b4e      	ldr	r3, [pc, #312]	@ (8002f6c <HAL_RCC_OscConfig+0x99c>)
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d116      	bne.n	8002e6a <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3c:	4b4b      	ldr	r3, [pc, #300]	@ (8002f6c <HAL_RCC_OscConfig+0x99c>)
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	4a4a      	ldr	r2, [pc, #296]	@ (8002f6c <HAL_RCC_OscConfig+0x99c>)
 8002e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e46:	61d3      	str	r3, [r2, #28]
 8002e48:	4b48      	ldr	r3, [pc, #288]	@ (8002f6c <HAL_RCC_OscConfig+0x99c>)
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002e50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e54:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002e62:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e64:	2301      	movs	r3, #1
 8002e66:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6a:	4b42      	ldr	r3, [pc, #264]	@ (8002f74 <HAL_RCC_OscConfig+0x9a4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d11a      	bne.n	8002eac <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e76:	4b3f      	ldr	r3, [pc, #252]	@ (8002f74 <HAL_RCC_OscConfig+0x9a4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a3e      	ldr	r2, [pc, #248]	@ (8002f74 <HAL_RCC_OscConfig+0x9a4>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e82:	f7ff f89b 	bl	8001fbc <HAL_GetTick>
 8002e86:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8a:	e009      	b.n	8002ea0 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8c:	f7ff f896 	bl	8001fbc <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b64      	cmp	r3, #100	@ 0x64
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e39e      	b.n	80035de <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea0:	4b34      	ldr	r3, [pc, #208]	@ (8002f74 <HAL_RCC_OscConfig+0x9a4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0ef      	beq.n	8002e8c <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x8fa>
 8002ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8002f6c <HAL_RCC_OscConfig+0x99c>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	4a2a      	ldr	r2, [pc, #168]	@ (8002f6c <HAL_RCC_OscConfig+0x99c>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6213      	str	r3, [r2, #32]
 8002ec8:	e035      	b.n	8002f36 <HAL_RCC_OscConfig+0x966>
 8002eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ece:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x924>
 8002eda:	4b24      	ldr	r3, [pc, #144]	@ (8002f6c <HAL_RCC_OscConfig+0x99c>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	4a23      	ldr	r2, [pc, #140]	@ (8002f6c <HAL_RCC_OscConfig+0x99c>)
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	6213      	str	r3, [r2, #32]
 8002ee6:	4b21      	ldr	r3, [pc, #132]	@ (8002f6c <HAL_RCC_OscConfig+0x99c>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	4a20      	ldr	r2, [pc, #128]	@ (8002f6c <HAL_RCC_OscConfig+0x99c>)
 8002eec:	f023 0304 	bic.w	r3, r3, #4
 8002ef0:	6213      	str	r3, [r2, #32]
 8002ef2:	e020      	b.n	8002f36 <HAL_RCC_OscConfig+0x966>
 8002ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	2b05      	cmp	r3, #5
 8002f02:	d10c      	bne.n	8002f1e <HAL_RCC_OscConfig+0x94e>
 8002f04:	4b19      	ldr	r3, [pc, #100]	@ (8002f6c <HAL_RCC_OscConfig+0x99c>)
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	4a18      	ldr	r2, [pc, #96]	@ (8002f6c <HAL_RCC_OscConfig+0x99c>)
 8002f0a:	f043 0304 	orr.w	r3, r3, #4
 8002f0e:	6213      	str	r3, [r2, #32]
 8002f10:	4b16      	ldr	r3, [pc, #88]	@ (8002f6c <HAL_RCC_OscConfig+0x99c>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4a15      	ldr	r2, [pc, #84]	@ (8002f6c <HAL_RCC_OscConfig+0x99c>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6213      	str	r3, [r2, #32]
 8002f1c:	e00b      	b.n	8002f36 <HAL_RCC_OscConfig+0x966>
 8002f1e:	4b13      	ldr	r3, [pc, #76]	@ (8002f6c <HAL_RCC_OscConfig+0x99c>)
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	4a12      	ldr	r2, [pc, #72]	@ (8002f6c <HAL_RCC_OscConfig+0x99c>)
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	6213      	str	r3, [r2, #32]
 8002f2a:	4b10      	ldr	r3, [pc, #64]	@ (8002f6c <HAL_RCC_OscConfig+0x99c>)
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	4a0f      	ldr	r2, [pc, #60]	@ (8002f6c <HAL_RCC_OscConfig+0x99c>)
 8002f30:	f023 0304 	bic.w	r3, r3, #4
 8002f34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 8087 	beq.w	8003056 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f48:	f7ff f838 	bl	8001fbc <HAL_GetTick>
 8002f4c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f50:	e012      	b.n	8002f78 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7ff f833 	bl	8001fbc <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d908      	bls.n	8002f78 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e339      	b.n	80035de <HAL_RCC_OscConfig+0x100e>
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	10908120 	.word	0x10908120
 8002f74:	40007000 	.word	0x40007000
 8002f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f80:	2202      	movs	r2, #2
 8002f82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f88:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	fa93 f2a3 	rbit	r2, r3
 8002f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f96:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	fa93 f2a3 	rbit	r2, r3
 8002fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fba:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002fbe:	601a      	str	r2, [r3, #0]
  return result;
 8002fc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002fc8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d102      	bne.n	8002fe0 <HAL_RCC_OscConfig+0xa10>
 8002fda:	4b98      	ldr	r3, [pc, #608]	@ (800323c <HAL_RCC_OscConfig+0xc6c>)
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	e013      	b.n	8003008 <HAL_RCC_OscConfig+0xa38>
 8002fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002fe8:	2202      	movs	r2, #2
 8002fea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	fa93 f2a3 	rbit	r2, r3
 8002ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffe:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	4b8d      	ldr	r3, [pc, #564]	@ (800323c <HAL_RCC_OscConfig+0xc6c>)
 8003006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003008:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800300c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003010:	2102      	movs	r1, #2
 8003012:	6011      	str	r1, [r2, #0]
 8003014:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003018:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800301c:	6812      	ldr	r2, [r2, #0]
 800301e:	fa92 f1a2 	rbit	r1, r2
 8003022:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003026:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800302a:	6011      	str	r1, [r2, #0]
  return result;
 800302c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003030:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003034:	6812      	ldr	r2, [r2, #0]
 8003036:	fab2 f282 	clz	r2, r2
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	f002 021f 	and.w	r2, r2, #31
 8003046:	2101      	movs	r1, #1
 8003048:	fa01 f202 	lsl.w	r2, r1, r2
 800304c:	4013      	ands	r3, r2
 800304e:	2b00      	cmp	r3, #0
 8003050:	f43f af7f 	beq.w	8002f52 <HAL_RCC_OscConfig+0x982>
 8003054:	e07d      	b.n	8003152 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003056:	f7fe ffb1 	bl	8001fbc <HAL_GetTick>
 800305a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800305e:	e00b      	b.n	8003078 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003060:	f7fe ffac 	bl	8001fbc <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003070:	4293      	cmp	r3, r2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e2b2      	b.n	80035de <HAL_RCC_OscConfig+0x100e>
 8003078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003080:	2202      	movs	r2, #2
 8003082:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003088:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	fa93 f2a3 	rbit	r2, r3
 8003092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003096:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80030a4:	2202      	movs	r2, #2
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ac:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	fa93 f2a3 	rbit	r2, r3
 80030b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ba:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80030be:	601a      	str	r2, [r3, #0]
  return result;
 80030c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80030c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d102      	bne.n	80030e0 <HAL_RCC_OscConfig+0xb10>
 80030da:	4b58      	ldr	r3, [pc, #352]	@ (800323c <HAL_RCC_OscConfig+0xc6c>)
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	e013      	b.n	8003108 <HAL_RCC_OscConfig+0xb38>
 80030e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80030e8:	2202      	movs	r2, #2
 80030ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	fa93 f2a3 	rbit	r2, r3
 80030fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fe:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	4b4d      	ldr	r3, [pc, #308]	@ (800323c <HAL_RCC_OscConfig+0xc6c>)
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800310c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003110:	2102      	movs	r1, #2
 8003112:	6011      	str	r1, [r2, #0]
 8003114:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003118:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800311c:	6812      	ldr	r2, [r2, #0]
 800311e:	fa92 f1a2 	rbit	r1, r2
 8003122:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003126:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800312a:	6011      	str	r1, [r2, #0]
  return result;
 800312c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003130:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	fab2 f282 	clz	r2, r2
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	f002 021f 	and.w	r2, r2, #31
 8003146:	2101      	movs	r1, #1
 8003148:	fa01 f202 	lsl.w	r2, r1, r2
 800314c:	4013      	ands	r3, r2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d186      	bne.n	8003060 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003152:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003156:	2b01      	cmp	r3, #1
 8003158:	d105      	bne.n	8003166 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800315a:	4b38      	ldr	r3, [pc, #224]	@ (800323c <HAL_RCC_OscConfig+0xc6c>)
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	4a37      	ldr	r2, [pc, #220]	@ (800323c <HAL_RCC_OscConfig+0xc6c>)
 8003160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003164:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 8232 	beq.w	80035dc <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003178:	4b30      	ldr	r3, [pc, #192]	@ (800323c <HAL_RCC_OscConfig+0xc6c>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 030c 	and.w	r3, r3, #12
 8003180:	2b08      	cmp	r3, #8
 8003182:	f000 8201 	beq.w	8003588 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800318a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	2b02      	cmp	r3, #2
 8003194:	f040 8157 	bne.w	8003446 <HAL_RCC_OscConfig+0xe76>
 8003198:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800319c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80031a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031aa:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	fa93 f2a3 	rbit	r2, r3
 80031b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80031bc:	601a      	str	r2, [r3, #0]
  return result;
 80031be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80031c6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c8:	fab3 f383 	clz	r3, r3
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031d2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	461a      	mov	r2, r3
 80031da:	2300      	movs	r3, #0
 80031dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031de:	f7fe feed 	bl	8001fbc <HAL_GetTick>
 80031e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e6:	e009      	b.n	80031fc <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e8:	f7fe fee8 	bl	8001fbc <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e1f0      	b.n	80035de <HAL_RCC_OscConfig+0x100e>
 80031fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003200:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003204:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003208:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	fa93 f2a3 	rbit	r2, r3
 8003218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003220:	601a      	str	r2, [r3, #0]
  return result;
 8003222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003226:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800322a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800322c:	fab3 f383 	clz	r3, r3
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b3f      	cmp	r3, #63	@ 0x3f
 8003234:	d804      	bhi.n	8003240 <HAL_RCC_OscConfig+0xc70>
 8003236:	4b01      	ldr	r3, [pc, #4]	@ (800323c <HAL_RCC_OscConfig+0xc6c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	e029      	b.n	8003290 <HAL_RCC_OscConfig+0xcc0>
 800323c:	40021000 	.word	0x40021000
 8003240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003244:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003248:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800324c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003252:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	fa93 f2a3 	rbit	r2, r3
 800325c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003260:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800326e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003278:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	fa93 f2a3 	rbit	r2, r3
 8003282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003286:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	4bc3      	ldr	r3, [pc, #780]	@ (800359c <HAL_RCC_OscConfig+0xfcc>)
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003294:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003298:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800329c:	6011      	str	r1, [r2, #0]
 800329e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032a2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	fa92 f1a2 	rbit	r1, r2
 80032ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032b0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80032b4:	6011      	str	r1, [r2, #0]
  return result;
 80032b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032ba:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	fab2 f282 	clz	r2, r2
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	f042 0220 	orr.w	r2, r2, #32
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	f002 021f 	and.w	r2, r2, #31
 80032d0:	2101      	movs	r1, #1
 80032d2:	fa01 f202 	lsl.w	r2, r1, r2
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d185      	bne.n	80031e8 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032dc:	4baf      	ldr	r3, [pc, #700]	@ (800359c <HAL_RCC_OscConfig+0xfcc>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80032e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80032f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	430b      	orrs	r3, r1
 80032fe:	49a7      	ldr	r1, [pc, #668]	@ (800359c <HAL_RCC_OscConfig+0xfcc>)
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
 8003304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003308:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800330c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003316:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	fa93 f2a3 	rbit	r2, r3
 8003320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003324:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003328:	601a      	str	r2, [r3, #0]
  return result;
 800332a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003332:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003334:	fab3 f383 	clz	r3, r3
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800333e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	461a      	mov	r2, r3
 8003346:	2301      	movs	r3, #1
 8003348:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334a:	f7fe fe37 	bl	8001fbc <HAL_GetTick>
 800334e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003352:	e009      	b.n	8003368 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003354:	f7fe fe32 	bl	8001fbc <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e13a      	b.n	80035de <HAL_RCC_OscConfig+0x100e>
 8003368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003370:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003374:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800337a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	fa93 f2a3 	rbit	r2, r3
 8003384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003388:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800338c:	601a      	str	r2, [r3, #0]
  return result;
 800338e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003392:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003396:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003398:	fab3 f383 	clz	r3, r3
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b3f      	cmp	r3, #63	@ 0x3f
 80033a0:	d802      	bhi.n	80033a8 <HAL_RCC_OscConfig+0xdd8>
 80033a2:	4b7e      	ldr	r3, [pc, #504]	@ (800359c <HAL_RCC_OscConfig+0xfcc>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	e027      	b.n	80033f8 <HAL_RCC_OscConfig+0xe28>
 80033a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ac:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80033b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ba:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	fa93 f2a3 	rbit	r2, r3
 80033c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80033d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	fa93 f2a3 	rbit	r2, r3
 80033ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ee:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	4b69      	ldr	r3, [pc, #420]	@ (800359c <HAL_RCC_OscConfig+0xfcc>)
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033fc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003400:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003404:	6011      	str	r1, [r2, #0]
 8003406:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800340a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	fa92 f1a2 	rbit	r1, r2
 8003414:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003418:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800341c:	6011      	str	r1, [r2, #0]
  return result;
 800341e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003422:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	fab2 f282 	clz	r2, r2
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	f042 0220 	orr.w	r2, r2, #32
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	f002 021f 	and.w	r2, r2, #31
 8003438:	2101      	movs	r1, #1
 800343a:	fa01 f202 	lsl.w	r2, r1, r2
 800343e:	4013      	ands	r3, r2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d087      	beq.n	8003354 <HAL_RCC_OscConfig+0xd84>
 8003444:	e0ca      	b.n	80035dc <HAL_RCC_OscConfig+0x100c>
 8003446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800344e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003452:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003458:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	fa93 f2a3 	rbit	r2, r3
 8003462:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003466:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800346a:	601a      	str	r2, [r3, #0]
  return result;
 800346c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003470:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003474:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003476:	fab3 f383 	clz	r3, r3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003480:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	461a      	mov	r2, r3
 8003488:	2300      	movs	r3, #0
 800348a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fe fd96 	bl	8001fbc <HAL_GetTick>
 8003490:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003494:	e009      	b.n	80034aa <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003496:	f7fe fd91 	bl	8001fbc <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e099      	b.n	80035de <HAL_RCC_OscConfig+0x100e>
 80034aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ae:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80034b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034bc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	fa93 f2a3 	rbit	r2, r3
 80034c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ca:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80034ce:	601a      	str	r2, [r3, #0]
  return result;
 80034d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80034d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80034e2:	d802      	bhi.n	80034ea <HAL_RCC_OscConfig+0xf1a>
 80034e4:	4b2d      	ldr	r3, [pc, #180]	@ (800359c <HAL_RCC_OscConfig+0xfcc>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	e027      	b.n	800353a <HAL_RCC_OscConfig+0xf6a>
 80034ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ee:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80034f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	fa93 f2a3 	rbit	r2, r3
 8003506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800350a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003514:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003518:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003522:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	fa93 f2a3 	rbit	r2, r3
 800352c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003530:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	4b19      	ldr	r3, [pc, #100]	@ (800359c <HAL_RCC_OscConfig+0xfcc>)
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800353e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003542:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003546:	6011      	str	r1, [r2, #0]
 8003548:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800354c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003550:	6812      	ldr	r2, [r2, #0]
 8003552:	fa92 f1a2 	rbit	r1, r2
 8003556:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800355a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800355e:	6011      	str	r1, [r2, #0]
  return result;
 8003560:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003564:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003568:	6812      	ldr	r2, [r2, #0]
 800356a:	fab2 f282 	clz	r2, r2
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	f042 0220 	orr.w	r2, r2, #32
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	f002 021f 	and.w	r2, r2, #31
 800357a:	2101      	movs	r1, #1
 800357c:	fa01 f202 	lsl.w	r2, r1, r2
 8003580:	4013      	ands	r3, r2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d187      	bne.n	8003496 <HAL_RCC_OscConfig+0xec6>
 8003586:	e029      	b.n	80035dc <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800358c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d103      	bne.n	80035a0 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e020      	b.n	80035de <HAL_RCC_OscConfig+0x100e>
 800359c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035a0:	4b11      	ldr	r3, [pc, #68]	@ (80035e8 <HAL_RCC_OscConfig+0x1018>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035a8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80035ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80035b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d10b      	bne.n	80035d8 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80035c0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80035c4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80035c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40021000 	.word	0x40021000

080035ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b09e      	sub	sp, #120	@ 0x78
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e154      	b.n	80038ae <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003604:	4b89      	ldr	r3, [pc, #548]	@ (800382c <HAL_RCC_ClockConfig+0x240>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d910      	bls.n	8003634 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b86      	ldr	r3, [pc, #536]	@ (800382c <HAL_RCC_ClockConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 0207 	bic.w	r2, r3, #7
 800361a:	4984      	ldr	r1, [pc, #528]	@ (800382c <HAL_RCC_ClockConfig+0x240>)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	4b82      	ldr	r3, [pc, #520]	@ (800382c <HAL_RCC_ClockConfig+0x240>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d001      	beq.n	8003634 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e13c      	b.n	80038ae <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003640:	4b7b      	ldr	r3, [pc, #492]	@ (8003830 <HAL_RCC_ClockConfig+0x244>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	4978      	ldr	r1, [pc, #480]	@ (8003830 <HAL_RCC_ClockConfig+0x244>)
 800364e:	4313      	orrs	r3, r2
 8003650:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 80cd 	beq.w	80037fa <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d137      	bne.n	80036d8 <HAL_RCC_ClockConfig+0xec>
 8003668:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800366c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003676:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003678:	fab3 f383 	clz	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003680:	d802      	bhi.n	8003688 <HAL_RCC_ClockConfig+0x9c>
 8003682:	4b6b      	ldr	r3, [pc, #428]	@ (8003830 <HAL_RCC_ClockConfig+0x244>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	e00f      	b.n	80036a8 <HAL_RCC_ClockConfig+0xbc>
 8003688:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800368c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003690:	fa93 f3a3 	rbit	r3, r3
 8003694:	667b      	str	r3, [r7, #100]	@ 0x64
 8003696:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800369a:	663b      	str	r3, [r7, #96]	@ 0x60
 800369c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800369e:	fa93 f3a3 	rbit	r3, r3
 80036a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036a4:	4b62      	ldr	r3, [pc, #392]	@ (8003830 <HAL_RCC_ClockConfig+0x244>)
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80036ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036b0:	fa92 f2a2 	rbit	r2, r2
 80036b4:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80036b6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80036b8:	fab2 f282 	clz	r2, r2
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	f042 0220 	orr.w	r2, r2, #32
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	f002 021f 	and.w	r2, r2, #31
 80036c8:	2101      	movs	r1, #1
 80036ca:	fa01 f202 	lsl.w	r2, r1, r2
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d171      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0ea      	b.n	80038ae <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d137      	bne.n	8003750 <HAL_RCC_ClockConfig+0x164>
 80036e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036e4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80036ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f0:	fab3 f383 	clz	r3, r3
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80036f8:	d802      	bhi.n	8003700 <HAL_RCC_ClockConfig+0x114>
 80036fa:	4b4d      	ldr	r3, [pc, #308]	@ (8003830 <HAL_RCC_ClockConfig+0x244>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	e00f      	b.n	8003720 <HAL_RCC_ClockConfig+0x134>
 8003700:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003704:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003708:	fa93 f3a3 	rbit	r3, r3
 800370c:	647b      	str	r3, [r7, #68]	@ 0x44
 800370e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003712:	643b      	str	r3, [r7, #64]	@ 0x40
 8003714:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800371c:	4b44      	ldr	r3, [pc, #272]	@ (8003830 <HAL_RCC_ClockConfig+0x244>)
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003724:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003726:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003728:	fa92 f2a2 	rbit	r2, r2
 800372c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800372e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003730:	fab2 f282 	clz	r2, r2
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	f042 0220 	orr.w	r2, r2, #32
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	f002 021f 	and.w	r2, r2, #31
 8003740:	2101      	movs	r1, #1
 8003742:	fa01 f202 	lsl.w	r2, r1, r2
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d135      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0ae      	b.n	80038ae <HAL_RCC_ClockConfig+0x2c2>
 8003750:	2302      	movs	r3, #2
 8003752:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003756:	fa93 f3a3 	rbit	r3, r3
 800375a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800375c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375e:	fab3 f383 	clz	r3, r3
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b3f      	cmp	r3, #63	@ 0x3f
 8003766:	d802      	bhi.n	800376e <HAL_RCC_ClockConfig+0x182>
 8003768:	4b31      	ldr	r3, [pc, #196]	@ (8003830 <HAL_RCC_ClockConfig+0x244>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	e00d      	b.n	800378a <HAL_RCC_ClockConfig+0x19e>
 800376e:	2302      	movs	r3, #2
 8003770:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003774:	fa93 f3a3 	rbit	r3, r3
 8003778:	627b      	str	r3, [r7, #36]	@ 0x24
 800377a:	2302      	movs	r3, #2
 800377c:	623b      	str	r3, [r7, #32]
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	fa93 f3a3 	rbit	r3, r3
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	4b2a      	ldr	r3, [pc, #168]	@ (8003830 <HAL_RCC_ClockConfig+0x244>)
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	2202      	movs	r2, #2
 800378c:	61ba      	str	r2, [r7, #24]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	fa92 f2a2 	rbit	r2, r2
 8003794:	617a      	str	r2, [r7, #20]
  return result;
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	fab2 f282 	clz	r2, r2
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	f042 0220 	orr.w	r2, r2, #32
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	f002 021f 	and.w	r2, r2, #31
 80037a8:	2101      	movs	r1, #1
 80037aa:	fa01 f202 	lsl.w	r2, r1, r2
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e07a      	b.n	80038ae <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003830 <HAL_RCC_ClockConfig+0x244>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f023 0203 	bic.w	r2, r3, #3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	491a      	ldr	r1, [pc, #104]	@ (8003830 <HAL_RCC_ClockConfig+0x244>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037ca:	f7fe fbf7 	bl	8001fbc <HAL_GetTick>
 80037ce:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d0:	e00a      	b.n	80037e8 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d2:	f7fe fbf3 	bl	8001fbc <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e062      	b.n	80038ae <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e8:	4b11      	ldr	r3, [pc, #68]	@ (8003830 <HAL_RCC_ClockConfig+0x244>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 020c 	and.w	r2, r3, #12
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d1eb      	bne.n	80037d2 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037fa:	4b0c      	ldr	r3, [pc, #48]	@ (800382c <HAL_RCC_ClockConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d215      	bcs.n	8003834 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003808:	4b08      	ldr	r3, [pc, #32]	@ (800382c <HAL_RCC_ClockConfig+0x240>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f023 0207 	bic.w	r2, r3, #7
 8003810:	4906      	ldr	r1, [pc, #24]	@ (800382c <HAL_RCC_ClockConfig+0x240>)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	4313      	orrs	r3, r2
 8003816:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003818:	4b04      	ldr	r3, [pc, #16]	@ (800382c <HAL_RCC_ClockConfig+0x240>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d006      	beq.n	8003834 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e041      	b.n	80038ae <HAL_RCC_ClockConfig+0x2c2>
 800382a:	bf00      	nop
 800382c:	40022000 	.word	0x40022000
 8003830:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003840:	4b1d      	ldr	r3, [pc, #116]	@ (80038b8 <HAL_RCC_ClockConfig+0x2cc>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	491a      	ldr	r1, [pc, #104]	@ (80038b8 <HAL_RCC_ClockConfig+0x2cc>)
 800384e:	4313      	orrs	r3, r2
 8003850:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d009      	beq.n	8003872 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800385e:	4b16      	ldr	r3, [pc, #88]	@ (80038b8 <HAL_RCC_ClockConfig+0x2cc>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4912      	ldr	r1, [pc, #72]	@ (80038b8 <HAL_RCC_ClockConfig+0x2cc>)
 800386e:	4313      	orrs	r3, r2
 8003870:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003872:	f000 f829 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 8003876:	4601      	mov	r1, r0
 8003878:	4b0f      	ldr	r3, [pc, #60]	@ (80038b8 <HAL_RCC_ClockConfig+0x2cc>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003880:	22f0      	movs	r2, #240	@ 0xf0
 8003882:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	fa92 f2a2 	rbit	r2, r2
 800388a:	60fa      	str	r2, [r7, #12]
  return result;
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	fab2 f282 	clz	r2, r2
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	40d3      	lsrs	r3, r2
 8003896:	4a09      	ldr	r2, [pc, #36]	@ (80038bc <HAL_RCC_ClockConfig+0x2d0>)
 8003898:	5cd3      	ldrb	r3, [r2, r3]
 800389a:	fa21 f303 	lsr.w	r3, r1, r3
 800389e:	4a08      	ldr	r2, [pc, #32]	@ (80038c0 <HAL_RCC_ClockConfig+0x2d4>)
 80038a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80038a2:	4b08      	ldr	r3, [pc, #32]	@ (80038c4 <HAL_RCC_ClockConfig+0x2d8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fe fb44 	bl	8001f34 <HAL_InitTick>
  
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3778      	adds	r7, #120	@ 0x78
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000
 80038bc:	0800a0ec 	.word	0x0800a0ec
 80038c0:	2000000c 	.word	0x2000000c
 80038c4:	20000010 	.word	0x20000010

080038c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b08b      	sub	sp, #44	@ 0x2c
 80038cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	2300      	movs	r3, #0
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	2300      	movs	r3, #0
 80038d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80038e2:	4b29      	ldr	r3, [pc, #164]	@ (8003988 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d002      	beq.n	80038f8 <HAL_RCC_GetSysClockFreq+0x30>
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d003      	beq.n	80038fe <HAL_RCC_GetSysClockFreq+0x36>
 80038f6:	e03c      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038f8:	4b24      	ldr	r3, [pc, #144]	@ (800398c <HAL_RCC_GetSysClockFreq+0xc4>)
 80038fa:	623b      	str	r3, [r7, #32]
      break;
 80038fc:	e03c      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003904:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8003908:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	fa92 f2a2 	rbit	r2, r2
 8003910:	607a      	str	r2, [r7, #4]
  return result;
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	fab2 f282 	clz	r2, r2
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	40d3      	lsrs	r3, r2
 800391c:	4a1c      	ldr	r2, [pc, #112]	@ (8003990 <HAL_RCC_GetSysClockFreq+0xc8>)
 800391e:	5cd3      	ldrb	r3, [r2, r3]
 8003920:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003922:	4b19      	ldr	r3, [pc, #100]	@ (8003988 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	220f      	movs	r2, #15
 800392c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	fa92 f2a2 	rbit	r2, r2
 8003934:	60fa      	str	r2, [r7, #12]
  return result;
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	fab2 f282 	clz	r2, r2
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	40d3      	lsrs	r3, r2
 8003940:	4a14      	ldr	r2, [pc, #80]	@ (8003994 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003942:	5cd3      	ldrb	r3, [r2, r3]
 8003944:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003950:	4a0e      	ldr	r2, [pc, #56]	@ (800398c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	fbb2 f2f3 	udiv	r2, r2, r3
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003960:	e004      	b.n	800396c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	4a0c      	ldr	r2, [pc, #48]	@ (8003998 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003966:	fb02 f303 	mul.w	r3, r2, r3
 800396a:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800396c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396e:	623b      	str	r3, [r7, #32]
      break;
 8003970:	e002      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003972:	4b06      	ldr	r3, [pc, #24]	@ (800398c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003974:	623b      	str	r3, [r7, #32]
      break;
 8003976:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003978:	6a3b      	ldr	r3, [r7, #32]
}
 800397a:	4618      	mov	r0, r3
 800397c:	372c      	adds	r7, #44	@ 0x2c
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40021000 	.word	0x40021000
 800398c:	007a1200 	.word	0x007a1200
 8003990:	0800a104 	.word	0x0800a104
 8003994:	0800a114 	.word	0x0800a114
 8003998:	003d0900 	.word	0x003d0900

0800399c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a0:	4b03      	ldr	r3, [pc, #12]	@ (80039b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039a2:	681b      	ldr	r3, [r3, #0]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	2000000c 	.word	0x2000000c

080039b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80039ba:	f7ff ffef 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039be:	4601      	mov	r1, r0
 80039c0:	4b0b      	ldr	r3, [pc, #44]	@ (80039f0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80039c8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80039cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	fa92 f2a2 	rbit	r2, r2
 80039d4:	603a      	str	r2, [r7, #0]
  return result;
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	fab2 f282 	clz	r2, r2
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	40d3      	lsrs	r3, r2
 80039e0:	4a04      	ldr	r2, [pc, #16]	@ (80039f4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80039e2:	5cd3      	ldrb	r3, [r2, r3]
 80039e4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40021000 	.word	0x40021000
 80039f4:	0800a0fc 	.word	0x0800a0fc

080039f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80039fe:	f7ff ffcd 	bl	800399c <HAL_RCC_GetHCLKFreq>
 8003a02:	4601      	mov	r1, r0
 8003a04:	4b0b      	ldr	r3, [pc, #44]	@ (8003a34 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003a0c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003a10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	fa92 f2a2 	rbit	r2, r2
 8003a18:	603a      	str	r2, [r7, #0]
  return result;
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	fab2 f282 	clz	r2, r2
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	40d3      	lsrs	r3, r2
 8003a24:	4a04      	ldr	r2, [pc, #16]	@ (8003a38 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a26:	5cd3      	ldrb	r3, [r2, r3]
 8003a28:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40021000 	.word	0x40021000
 8003a38:	0800a0fc 	.word	0x0800a0fc

08003a3c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b092      	sub	sp, #72	@ 0x48
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 80d5 	beq.w	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a60:	4b4d      	ldr	r3, [pc, #308]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10e      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a6c:	4b4a      	ldr	r3, [pc, #296]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	4a49      	ldr	r2, [pc, #292]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a76:	61d3      	str	r3, [r2, #28]
 8003a78:	4b47      	ldr	r3, [pc, #284]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a84:	2301      	movs	r3, #1
 8003a86:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8a:	4b44      	ldr	r3, [pc, #272]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d118      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a96:	4b41      	ldr	r3, [pc, #260]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a40      	ldr	r2, [pc, #256]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aa0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aa2:	f7fe fa8b 	bl	8001fbc <HAL_GetTick>
 8003aa6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa8:	e008      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aaa:	f7fe fa87 	bl	8001fbc <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b64      	cmp	r3, #100	@ 0x64
 8003ab6:	d901      	bls.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e149      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x314>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abc:	4b37      	ldr	r3, [pc, #220]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ac8:	4b33      	ldr	r3, [pc, #204]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 8082 	beq.w	8003bde <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ae2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d07a      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003af2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003af6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afa:	fa93 f3a3 	rbit	r3, r3
 8003afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b02:	fab3 f383 	clz	r3, r3
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4b25      	ldr	r3, [pc, #148]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	461a      	mov	r2, r3
 8003b12:	2301      	movs	r3, #1
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b1e:	fa93 f3a3 	rbit	r3, r3
 8003b22:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b26:	fab3 f383 	clz	r3, r3
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	461a      	mov	r2, r3
 8003b36:	2300      	movs	r3, #0
 8003b38:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b3a:	4a17      	ldr	r2, [pc, #92]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b3e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d049      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4a:	f7fe fa37 	bl	8001fbc <HAL_GetTick>
 8003b4e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b50:	e00a      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b52:	f7fe fa33 	bl	8001fbc <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e0f3      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b6e:	fa93 f3a3 	rbit	r3, r3
 8003b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b74:	2302      	movs	r3, #2
 8003b76:	623b      	str	r3, [r7, #32]
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	61fb      	str	r3, [r7, #28]
  return result;
 8003b80:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b82:	fab3 f383 	clz	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d108      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003b92:	4b01      	ldr	r3, [pc, #4]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	e00d      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	40007000 	.word	0x40007000
 8003ba0:	10908100 	.word	0x10908100
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	fa93 f3a3 	rbit	r3, r3
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	4b69      	ldr	r3, [pc, #420]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	613a      	str	r2, [r7, #16]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	fa92 f2a2 	rbit	r2, r2
 8003bbe:	60fa      	str	r2, [r7, #12]
  return result;
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	fab2 f282 	clz	r2, r2
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	f002 021f 	and.w	r2, r2, #31
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd8:	4013      	ands	r3, r2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0b9      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003bde:	4b5e      	ldr	r3, [pc, #376]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	495b      	ldr	r1, [pc, #364]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bf0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d105      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf8:	4b57      	ldr	r3, [pc, #348]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	4a56      	ldr	r2, [pc, #344]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003bfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c10:	4b51      	ldr	r3, [pc, #324]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c14:	f023 0203 	bic.w	r2, r3, #3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	494e      	ldr	r1, [pc, #312]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d008      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c32:	f023 0210 	bic.w	r2, r3, #16
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	4947      	ldr	r1, [pc, #284]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c4c:	4b42      	ldr	r3, [pc, #264]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c58:	493f      	ldr	r1, [pc, #252]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6e:	f023 0220 	bic.w	r2, r3, #32
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	4938      	ldr	r1, [pc, #224]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c88:	4b33      	ldr	r3, [pc, #204]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	4930      	ldr	r1, [pc, #192]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	4929      	ldr	r1, [pc, #164]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003cc4:	4b24      	ldr	r3, [pc, #144]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc8:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	4921      	ldr	r1, [pc, #132]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d008      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	491a      	ldr	r1, [pc, #104]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d00:	4b15      	ldr	r3, [pc, #84]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d04:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0c:	4912      	ldr	r1, [pc, #72]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d22:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2a:	490b      	ldr	r1, [pc, #44]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003d3c:	4b06      	ldr	r3, [pc, #24]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d40:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d48:	4903      	ldr	r1, [pc, #12]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3748      	adds	r7, #72	@ 0x48
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40021000 	.word	0x40021000

08003d5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e083      	b.n	8003e78 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d106      	bne.n	8003d8a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7fd fec3 	bl	8001b10 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6812      	ldr	r2, [r2, #0]
 8003d9c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003da0:	f023 0307 	bic.w	r3, r3, #7
 8003da4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3304      	adds	r3, #4
 8003dae:	4619      	mov	r1, r3
 8003db0:	4610      	mov	r0, r2
 8003db2:	f000 f89d 	bl	8003ef0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dde:	f023 0303 	bic.w	r3, r3, #3
 8003de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	021b      	lsls	r3, r3, #8
 8003dee:	4313      	orrs	r3, r2
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003dfc:	f023 030c 	bic.w	r3, r3, #12
 8003e00:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	021b      	lsls	r3, r3, #8
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	011a      	lsls	r2, r3, #4
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	031b      	lsls	r3, r3, #12
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003e3a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003e42:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_TIM_Encoder_Start+0x18>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d008      	beq.n	8003ea8 <HAL_TIM_Encoder_Start+0x28>
 8003e96:	e00f      	b.n	8003eb8 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 f893 	bl	8003fcc <TIM_CCxChannelCmd>
      break;
 8003ea6:	e016      	b.n	8003ed6 <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2201      	movs	r2, #1
 8003eae:	2104      	movs	r1, #4
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 f88b 	bl	8003fcc <TIM_CCxChannelCmd>
      break;
 8003eb6:	e00e      	b.n	8003ed6 <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 f883 	bl	8003fcc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	2104      	movs	r1, #4
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 f87c 	bl	8003fcc <TIM_CCxChannelCmd>
      break;
 8003ed4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0201 	orr.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a2e      	ldr	r2, [pc, #184]	@ (8003fbc <TIM_Base_SetConfig+0xcc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_Base_SetConfig+0x20>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f0e:	d108      	bne.n	8003f22 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a25      	ldr	r2, [pc, #148]	@ (8003fbc <TIM_Base_SetConfig+0xcc>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00f      	beq.n	8003f4a <TIM_Base_SetConfig+0x5a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f30:	d00b      	beq.n	8003f4a <TIM_Base_SetConfig+0x5a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a22      	ldr	r2, [pc, #136]	@ (8003fc0 <TIM_Base_SetConfig+0xd0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d007      	beq.n	8003f4a <TIM_Base_SetConfig+0x5a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a21      	ldr	r2, [pc, #132]	@ (8003fc4 <TIM_Base_SetConfig+0xd4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d003      	beq.n	8003f4a <TIM_Base_SetConfig+0x5a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a20      	ldr	r2, [pc, #128]	@ (8003fc8 <TIM_Base_SetConfig+0xd8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d108      	bne.n	8003f5c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a0e      	ldr	r2, [pc, #56]	@ (8003fbc <TIM_Base_SetConfig+0xcc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00b      	beq.n	8003fa0 <TIM_Base_SetConfig+0xb0>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a0d      	ldr	r2, [pc, #52]	@ (8003fc0 <TIM_Base_SetConfig+0xd0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d007      	beq.n	8003fa0 <TIM_Base_SetConfig+0xb0>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a0c      	ldr	r2, [pc, #48]	@ (8003fc4 <TIM_Base_SetConfig+0xd4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d003      	beq.n	8003fa0 <TIM_Base_SetConfig+0xb0>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a0b      	ldr	r2, [pc, #44]	@ (8003fc8 <TIM_Base_SetConfig+0xd8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d103      	bne.n	8003fa8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	615a      	str	r2, [r3, #20]
}
 8003fae:	bf00      	nop
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40012c00 	.word	0x40012c00
 8003fc0:	40014000 	.word	0x40014000
 8003fc4:	40014400 	.word	0x40014400
 8003fc8:	40014800 	.word	0x40014800

08003fcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f003 031f 	and.w	r3, r3, #31
 8003fde:	2201      	movs	r2, #1
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a1a      	ldr	r2, [r3, #32]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	43db      	mvns	r3, r3
 8003fee:	401a      	ands	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a1a      	ldr	r2, [r3, #32]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	fa01 f303 	lsl.w	r3, r1, r3
 8004004:	431a      	orrs	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	621a      	str	r2, [r3, #32]
}
 800400a:	bf00      	nop
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800402c:	2302      	movs	r3, #2
 800402e:	e04f      	b.n	80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a21      	ldr	r2, [pc, #132]	@ (80040dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d108      	bne.n	800406c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004060:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	4313      	orrs	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004072:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a14      	ldr	r2, [pc, #80]	@ (80040dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d009      	beq.n	80040a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004098:	d004      	beq.n	80040a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a10      	ldr	r2, [pc, #64]	@ (80040e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d10c      	bne.n	80040be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	40012c00 	.word	0x40012c00
 80040e0:	40014000 	.word	0x40014000

080040e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e040      	b.n	8004178 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fd fd74 	bl	8001bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2224      	movs	r2, #36	@ 0x24
 8004110:	675a      	str	r2, [r3, #116]	@ 0x74

  __HAL_UART_DISABLE(huart);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0201 	bic.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fab8 	bl	8004698 <UART_SetConfig>
 8004128:	4603      	mov	r3, r0
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e022      	b.n	8004178 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fc2e 	bl	800499c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800414e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800415e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fcb5 	bl	8004ae0 <UART_CheckIdleState>
 8004176:	4603      	mov	r3, r0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08a      	sub	sp, #40	@ 0x28
 8004184:	af02      	add	r7, sp, #8
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	4613      	mov	r3, r2
 800418e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004194:	2b20      	cmp	r3, #32
 8004196:	d17f      	bne.n	8004298 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_UART_Transmit+0x24>
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e078      	b.n	800429a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_UART_Transmit+0x36>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e071      	b.n	800429a <HAL_UART_Transmit+0x11a>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2221      	movs	r2, #33	@ 0x21
 80041c8:	675a      	str	r2, [r3, #116]	@ 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80041ca:	f7fd fef7 	bl	8001fbc <HAL_GetTick>
 80041ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	88fa      	ldrh	r2, [r7, #6]
 80041d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	88fa      	ldrh	r2, [r7, #6]
 80041dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e8:	d108      	bne.n	80041fc <HAL_UART_Transmit+0x7c>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d104      	bne.n	80041fc <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	e003      	b.n	8004204 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004200:	2300      	movs	r3, #0
 8004202:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004204:	e02c      	b.n	8004260 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2200      	movs	r2, #0
 800420e:	2180      	movs	r1, #128	@ 0x80
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 fcaa 	bl	8004b6a <UART_WaitOnFlagUntilTimeout>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e03c      	b.n	800429a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10b      	bne.n	800423e <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	881a      	ldrh	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004232:	b292      	uxth	r2, r2
 8004234:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	3302      	adds	r3, #2
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	e007      	b.n	800424e <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	781a      	ldrb	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	3301      	adds	r3, #1
 800424c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1cc      	bne.n	8004206 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2200      	movs	r2, #0
 8004274:	2140      	movs	r1, #64	@ 0x40
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 fc77 	bl	8004b6a <UART_WaitOnFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e009      	b.n	800429a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2220      	movs	r2, #32
 800428a:	675a      	str	r2, [r3, #116]	@ 0x74

    __HAL_UNLOCK(huart);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    return HAL_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	e000      	b.n	800429a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004298:	2302      	movs	r3, #2
  }
}
 800429a:	4618      	mov	r0, r3
 800429c:	3720      	adds	r7, #32
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	4613      	mov	r3, r2
 80042b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042b6:	2b20      	cmp	r3, #32
 80042b8:	f040 808a 	bne.w	80043d0 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_UART_Receive_IT+0x24>
 80042c2:	88fb      	ldrh	r3, [r7, #6]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e082      	b.n	80043d2 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_UART_Receive_IT+0x36>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e07b      	b.n	80043d2 <HAL_UART_Receive_IT+0x12e>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    huart->pRxBuffPtr  = pData;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferSize  = Size;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	88fa      	ldrh	r2, [r7, #6]
 80042ec:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	88fa      	ldrh	r2, [r7, #6]
 80042f4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    huart->RxISR       = NULL;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004306:	d10e      	bne.n	8004326 <HAL_UART_Receive_IT+0x82>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d105      	bne.n	800431c <HAL_UART_Receive_IT+0x78>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004316:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800431a:	e02d      	b.n	8004378 <HAL_UART_Receive_IT+0xd4>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	22ff      	movs	r2, #255	@ 0xff
 8004320:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004324:	e028      	b.n	8004378 <HAL_UART_Receive_IT+0xd4>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10d      	bne.n	800434a <HAL_UART_Receive_IT+0xa6>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d104      	bne.n	8004340 <HAL_UART_Receive_IT+0x9c>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	22ff      	movs	r2, #255	@ 0xff
 800433a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800433e:	e01b      	b.n	8004378 <HAL_UART_Receive_IT+0xd4>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	227f      	movs	r2, #127	@ 0x7f
 8004344:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004348:	e016      	b.n	8004378 <HAL_UART_Receive_IT+0xd4>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004352:	d10d      	bne.n	8004370 <HAL_UART_Receive_IT+0xcc>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d104      	bne.n	8004366 <HAL_UART_Receive_IT+0xc2>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	227f      	movs	r2, #127	@ 0x7f
 8004360:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004364:	e008      	b.n	8004378 <HAL_UART_Receive_IT+0xd4>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	223f      	movs	r2, #63	@ 0x3f
 800436a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800436e:	e003      	b.n	8004378 <HAL_UART_Receive_IT+0xd4>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2222      	movs	r2, #34	@ 0x22
 8004382:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800439c:	d107      	bne.n	80043ae <HAL_UART_Receive_IT+0x10a>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d103      	bne.n	80043ae <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4a0d      	ldr	r2, [pc, #52]	@ (80043e0 <HAL_UART_Receive_IT+0x13c>)
 80043aa:	661a      	str	r2, [r3, #96]	@ 0x60
 80043ac:	e002      	b.n	80043b4 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4a0c      	ldr	r2, [pc, #48]	@ (80043e4 <HAL_UART_Receive_IT+0x140>)
 80043b2:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    __HAL_UNLOCK(huart);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 7290 	orr.w	r2, r2, #288	@ 0x120
 80043ca:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	e000      	b.n	80043d2 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80043d0:	2302      	movs	r3, #2
  }
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	08004da5 	.word	0x08004da5
 80043e4:	08004cff 	.word	0x08004cff

080043e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004408:	69fa      	ldr	r2, [r7, #28]
 800440a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800440e:	4013      	ands	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d113      	bne.n	8004440 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00e      	beq.n	8004440 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d009      	beq.n	8004440 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 8113 	beq.w	800465c <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4798      	blx	r3
      }
      return;
 800443e:	e10d      	b.n	800465c <HAL_UART_IRQHandler+0x274>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 80d6 	beq.w	80045f4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d105      	bne.n	800445e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80cb 	beq.w	80045f4 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00e      	beq.n	8004486 <HAL_UART_IRQHandler+0x9e>
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800446e:	2b00      	cmp	r3, #0
 8004470:	d009      	beq.n	8004486 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2201      	movs	r2, #1
 8004478:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800447e:	f043 0201 	orr.w	r2, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00e      	beq.n	80044ae <HAL_UART_IRQHandler+0xc6>
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2202      	movs	r2, #2
 80044a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044a6:	f043 0204 	orr.w	r2, r3, #4
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00e      	beq.n	80044d6 <HAL_UART_IRQHandler+0xee>
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d009      	beq.n	80044d6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2204      	movs	r2, #4
 80044c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044ce:	f043 0202 	orr.w	r2, r3, #2
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d013      	beq.n	8004508 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d104      	bne.n	80044f4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d009      	beq.n	8004508 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2208      	movs	r2, #8
 80044fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004500:	f043 0208 	orr.w	r2, r3, #8
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00f      	beq.n	8004532 <HAL_UART_IRQHandler+0x14a>
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800452a:	f043 0220 	orr.w	r2, r3, #32
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 8092 	beq.w	8004660 <HAL_UART_IRQHandler+0x278>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f003 0320 	and.w	r3, r3, #32
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00c      	beq.n	8004560 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d007      	beq.n	8004560 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004564:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004570:	2b40      	cmp	r3, #64	@ 0x40
 8004572:	d004      	beq.n	800457e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800457a:	2b00      	cmp	r3, #0
 800457c:	d031      	beq.n	80045e2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fb6e 	bl	8004c60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800458e:	2b40      	cmp	r3, #64	@ 0x40
 8004590:	d123      	bne.n	80045da <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045a0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d013      	beq.n	80045d2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045ae:	4a2f      	ldr	r2, [pc, #188]	@ (800466c <HAL_UART_IRQHandler+0x284>)
 80045b0:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fd fe41 	bl	800223e <HAL_DMA_Abort_IT>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d016      	beq.n	80045f0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80045cc:	4610      	mov	r0, r2
 80045ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d0:	e00e      	b.n	80045f0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f856 	bl	8004684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d8:	e00a      	b.n	80045f0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f852 	bl	8004684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e0:	e006      	b.n	80045f0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f84e 	bl	8004684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	67da      	str	r2, [r3, #124]	@ 0x7c
      }
    }
    return;
 80045ee:	e037      	b.n	8004660 <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f0:	bf00      	nop
    return;
 80045f2:	e035      	b.n	8004660 <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00d      	beq.n	800461a <HAL_UART_IRQHandler+0x232>
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d008      	beq.n	800461a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004610:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fc19 	bl	8004e4a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004618:	e025      	b.n	8004666 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00d      	beq.n	8004640 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800462a:	2b00      	cmp	r3, #0
 800462c:	d008      	beq.n	8004640 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004632:	2b00      	cmp	r3, #0
 8004634:	d016      	beq.n	8004664 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	4798      	blx	r3
    }
    return;
 800463e:	e011      	b.n	8004664 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00d      	beq.n	8004666 <HAL_UART_IRQHandler+0x27e>
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fb39 	bl	8004ccc <UART_EndTransmit_IT>
    return;
 800465a:	e004      	b.n	8004666 <HAL_UART_IRQHandler+0x27e>
      return;
 800465c:	bf00      	nop
 800465e:	e002      	b.n	8004666 <HAL_UART_IRQHandler+0x27e>
    return;
 8004660:	bf00      	nop
 8004662:	e000      	b.n	8004666 <HAL_UART_IRQHandler+0x27e>
    return;
 8004664:	bf00      	nop
  }

}
 8004666:	3720      	adds	r7, #32
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	08004ca1 	.word	0x08004ca1

08004670 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	4ba2      	ldr	r3, [pc, #648]	@ (8004950 <UART_SetConfig+0x2b8>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6812      	ldr	r2, [r2, #0]
 80046ce:	6939      	ldr	r1, [r7, #16]
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	430a      	orrs	r2, r1
 800470c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a90      	ldr	r2, [pc, #576]	@ (8004954 <UART_SetConfig+0x2bc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d120      	bne.n	800475a <UART_SetConfig+0xc2>
 8004718:	4b8f      	ldr	r3, [pc, #572]	@ (8004958 <UART_SetConfig+0x2c0>)
 800471a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471c:	f003 0303 	and.w	r3, r3, #3
 8004720:	2b03      	cmp	r3, #3
 8004722:	d817      	bhi.n	8004754 <UART_SetConfig+0xbc>
 8004724:	a201      	add	r2, pc, #4	@ (adr r2, 800472c <UART_SetConfig+0x94>)
 8004726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472a:	bf00      	nop
 800472c:	0800473d 	.word	0x0800473d
 8004730:	08004749 	.word	0x08004749
 8004734:	0800474f 	.word	0x0800474f
 8004738:	08004743 	.word	0x08004743
 800473c:	2300      	movs	r3, #0
 800473e:	77fb      	strb	r3, [r7, #31]
 8004740:	e01d      	b.n	800477e <UART_SetConfig+0xe6>
 8004742:	2302      	movs	r3, #2
 8004744:	77fb      	strb	r3, [r7, #31]
 8004746:	e01a      	b.n	800477e <UART_SetConfig+0xe6>
 8004748:	2304      	movs	r3, #4
 800474a:	77fb      	strb	r3, [r7, #31]
 800474c:	e017      	b.n	800477e <UART_SetConfig+0xe6>
 800474e:	2308      	movs	r3, #8
 8004750:	77fb      	strb	r3, [r7, #31]
 8004752:	e014      	b.n	800477e <UART_SetConfig+0xe6>
 8004754:	2310      	movs	r3, #16
 8004756:	77fb      	strb	r3, [r7, #31]
 8004758:	e011      	b.n	800477e <UART_SetConfig+0xe6>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a7f      	ldr	r2, [pc, #508]	@ (800495c <UART_SetConfig+0x2c4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d102      	bne.n	800476a <UART_SetConfig+0xd2>
 8004764:	2300      	movs	r3, #0
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e009      	b.n	800477e <UART_SetConfig+0xe6>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a7c      	ldr	r2, [pc, #496]	@ (8004960 <UART_SetConfig+0x2c8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d102      	bne.n	800477a <UART_SetConfig+0xe2>
 8004774:	2300      	movs	r3, #0
 8004776:	77fb      	strb	r3, [r7, #31]
 8004778:	e001      	b.n	800477e <UART_SetConfig+0xe6>
 800477a:	2310      	movs	r3, #16
 800477c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004786:	f040 8083 	bne.w	8004890 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800478a:	7ffb      	ldrb	r3, [r7, #31]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d85f      	bhi.n	8004850 <UART_SetConfig+0x1b8>
 8004790:	a201      	add	r2, pc, #4	@ (adr r2, 8004798 <UART_SetConfig+0x100>)
 8004792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004796:	bf00      	nop
 8004798:	080047bd 	.word	0x080047bd
 800479c:	080047dd 	.word	0x080047dd
 80047a0:	080047fd 	.word	0x080047fd
 80047a4:	08004851 	.word	0x08004851
 80047a8:	08004819 	.word	0x08004819
 80047ac:	08004851 	.word	0x08004851
 80047b0:	08004851 	.word	0x08004851
 80047b4:	08004851 	.word	0x08004851
 80047b8:	08004839 	.word	0x08004839
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047bc:	f7ff f8fa 	bl	80039b4 <HAL_RCC_GetPCLK1Freq>
 80047c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	005a      	lsls	r2, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	085b      	lsrs	r3, r3, #1
 80047cc:	441a      	add	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	61bb      	str	r3, [r7, #24]
        break;
 80047da:	e03c      	b.n	8004856 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047dc:	f7ff f90c 	bl	80039f8 <HAL_RCC_GetPCLK2Freq>
 80047e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	005a      	lsls	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	085b      	lsrs	r3, r3, #1
 80047ec:	441a      	add	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	61bb      	str	r3, [r7, #24]
        break;
 80047fa:	e02c      	b.n	8004856 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	085b      	lsrs	r3, r3, #1
 8004802:	f503 0374 	add.w	r3, r3, #15990784	@ 0xf40000
 8004806:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6852      	ldr	r2, [r2, #4]
 800480e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004812:	b29b      	uxth	r3, r3
 8004814:	61bb      	str	r3, [r7, #24]
        break;
 8004816:	e01e      	b.n	8004856 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004818:	f7ff f856 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 800481c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	005a      	lsls	r2, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	085b      	lsrs	r3, r3, #1
 8004828:	441a      	add	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004832:	b29b      	uxth	r3, r3
 8004834:	61bb      	str	r3, [r7, #24]
        break;
 8004836:	e00e      	b.n	8004856 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	085b      	lsrs	r3, r3, #1
 800483e:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	fbb2 f3f3 	udiv	r3, r2, r3
 800484a:	b29b      	uxth	r3, r3
 800484c:	61bb      	str	r3, [r7, #24]
        break;
 800484e:	e002      	b.n	8004856 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	75fb      	strb	r3, [r7, #23]
        break;
 8004854:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2b0f      	cmp	r3, #15
 800485a:	d916      	bls.n	800488a <UART_SetConfig+0x1f2>
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004862:	d212      	bcs.n	800488a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	b29b      	uxth	r3, r3
 8004868:	f023 030f 	bic.w	r3, r3, #15
 800486c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	085b      	lsrs	r3, r3, #1
 8004872:	b29b      	uxth	r3, r3
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	b29a      	uxth	r2, r3
 800487a:	897b      	ldrh	r3, [r7, #10]
 800487c:	4313      	orrs	r3, r2
 800487e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	897a      	ldrh	r2, [r7, #10]
 8004886:	60da      	str	r2, [r3, #12]
 8004888:	e07d      	b.n	8004986 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	75fb      	strb	r3, [r7, #23]
 800488e:	e07a      	b.n	8004986 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8004890:	7ffb      	ldrb	r3, [r7, #31]
 8004892:	2b08      	cmp	r3, #8
 8004894:	d866      	bhi.n	8004964 <UART_SetConfig+0x2cc>
 8004896:	a201      	add	r2, pc, #4	@ (adr r2, 800489c <UART_SetConfig+0x204>)
 8004898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489c:	080048c1 	.word	0x080048c1
 80048a0:	080048df 	.word	0x080048df
 80048a4:	080048fd 	.word	0x080048fd
 80048a8:	08004965 	.word	0x08004965
 80048ac:	08004919 	.word	0x08004919
 80048b0:	08004965 	.word	0x08004965
 80048b4:	08004965 	.word	0x08004965
 80048b8:	08004965 	.word	0x08004965
 80048bc:	08004937 	.word	0x08004937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048c0:	f7ff f878 	bl	80039b4 <HAL_RCC_GetPCLK1Freq>
 80048c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	085a      	lsrs	r2, r3, #1
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	441a      	add	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	b29b      	uxth	r3, r3
 80048da:	61bb      	str	r3, [r7, #24]
        break;
 80048dc:	e045      	b.n	800496a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048de:	f7ff f88b 	bl	80039f8 <HAL_RCC_GetPCLK2Freq>
 80048e2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	085a      	lsrs	r2, r3, #1
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	441a      	add	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	61bb      	str	r3, [r7, #24]
        break;
 80048fa:	e036      	b.n	800496a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	f503 03f4 	add.w	r3, r3, #7995392	@ 0x7a0000
 8004906:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6852      	ldr	r2, [r2, #4]
 800490e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004912:	b29b      	uxth	r3, r3
 8004914:	61bb      	str	r3, [r7, #24]
        break;
 8004916:	e028      	b.n	800496a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004918:	f7fe ffd6 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 800491c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	085a      	lsrs	r2, r3, #1
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	441a      	add	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004930:	b29b      	uxth	r3, r3
 8004932:	61bb      	str	r3, [r7, #24]
        break;
 8004934:	e019      	b.n	800496a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	085b      	lsrs	r3, r3, #1
 800493c:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	b29b      	uxth	r3, r3
 800494a:	61bb      	str	r3, [r7, #24]
        break;
 800494c:	e00d      	b.n	800496a <UART_SetConfig+0x2d2>
 800494e:	bf00      	nop
 8004950:	efff69f3 	.word	0xefff69f3
 8004954:	40013800 	.word	0x40013800
 8004958:	40021000 	.word	0x40021000
 800495c:	40004400 	.word	0x40004400
 8004960:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	75fb      	strb	r3, [r7, #23]
        break;
 8004968:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b0f      	cmp	r3, #15
 800496e:	d908      	bls.n	8004982 <UART_SetConfig+0x2ea>
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004976:	d204      	bcs.n	8004982 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	60da      	str	r2, [r3, #12]
 8004980:	e001      	b.n	8004986 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->TxISR = NULL;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	665a      	str	r2, [r3, #100]	@ 0x64

  return ret;
 8004992:	7dfb      	ldrb	r3, [r7, #23]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3720      	adds	r7, #32
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01a      	beq.n	8004ab2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a9a:	d10a      	bne.n	8004ab2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	605a      	str	r2, [r3, #4]
  }
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af02      	add	r7, sp, #8
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004aee:	f7fd fa65 	bl	8001fbc <HAL_GetTick>
 8004af2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d10e      	bne.n	8004b20 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f82a 	bl	8004b6a <UART_WaitOnFlagUntilTimeout>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e020      	b.n	8004b62 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d10e      	bne.n	8004b4c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b2e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f814 	bl	8004b6a <UART_WaitOnFlagUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e00a      	b.n	8004b62 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2220      	movs	r2, #32
 8004b56:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UNLOCK(huart);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	603b      	str	r3, [r7, #0]
 8004b76:	4613      	mov	r3, r2
 8004b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b7a:	e05d      	b.n	8004c38 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b82:	d059      	beq.n	8004c38 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b84:	f7fd fa1a 	bl	8001fbc <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d302      	bcc.n	8004b9a <UART_WaitOnFlagUntilTimeout+0x30>
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d11b      	bne.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8004ba8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0201 	bic.w	r2, r2, #1
 8004bb8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	675a      	str	r2, [r3, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	679a      	str	r2, [r3, #120]	@ 0x78

        __HAL_UNLOCK(huart);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

        return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e042      	b.n	8004c58 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d02b      	beq.n	8004c38 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bee:	d123      	bne.n	8004c38 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bf8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8004c08:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0201 	bic.w	r2, r2, #1
 8004c18:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	675a      	str	r2, [r3, #116]	@ 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2220      	movs	r2, #32
 8004c24:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	67da      	str	r2, [r3, #124]	@ 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          
          return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e00f      	b.n	8004c58 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	69da      	ldr	r2, [r3, #28]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	4013      	ands	r3, r2
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	bf0c      	ite	eq
 8004c48:	2301      	moveq	r3, #1
 8004c4a:	2300      	movne	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d092      	beq.n	8004b7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8004c76:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0201 	bic.w	r2, r2, #1
 8004c86:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f7ff fce0 	bl	8004684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cc4:	bf00      	nop
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ce2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff fcbd 	bl	8004670 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cf6:	bf00      	nop
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004d0c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d12:	2b22      	cmp	r3, #34	@ 0x22
 8004d14:	d13a      	bne.n	8004d8c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004d1c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d1e:	89bb      	ldrh	r3, [r7, #12]
 8004d20:	b2d9      	uxtb	r1, r3
 8004d22:	89fb      	ldrh	r3, [r7, #14]
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d2a:	400a      	ands	r2, r1
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d121      	bne.n	8004d9c <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8004d66:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0201 	bic.w	r2, r2, #1
 8004d76:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	661a      	str	r2, [r3, #96]	@ 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7fc f8f7 	bl	8000f78 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d8a:	e007      	b.n	8004d9c <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699a      	ldr	r2, [r3, #24]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0208 	orr.w	r2, r2, #8
 8004d9a:	619a      	str	r2, [r3, #24]
}
 8004d9c:	bf00      	nop
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004db2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004db8:	2b22      	cmp	r3, #34	@ 0x22
 8004dba:	d13a      	bne.n	8004e32 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004dc2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dc8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004dca:	89ba      	ldrh	r2, [r7, #12]
 8004dcc:	89fb      	ldrh	r3, [r7, #14]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dda:	1c9a      	adds	r2, r3, #2
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d121      	bne.n	8004e42 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8004e0c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0201 	bic.w	r2, r2, #1
 8004e1c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2220      	movs	r2, #32
 8004e22:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	661a      	str	r2, [r3, #96]	@ 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fc f8a4 	bl	8000f78 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e30:	e007      	b.n	8004e42 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	699a      	ldr	r2, [r3, #24]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f042 0208 	orr.w	r2, r2, #8
 8004e40:	619a      	str	r2, [r3, #24]
}
 8004e42:	bf00      	nop
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <sulp>:
 8004e5e:	b570      	push	{r4, r5, r6, lr}
 8004e60:	4604      	mov	r4, r0
 8004e62:	460d      	mov	r5, r1
 8004e64:	ec45 4b10 	vmov	d0, r4, r5
 8004e68:	4616      	mov	r6, r2
 8004e6a:	f003 fd01 	bl	8008870 <__ulp>
 8004e6e:	ec51 0b10 	vmov	r0, r1, d0
 8004e72:	b17e      	cbz	r6, 8004e94 <sulp+0x36>
 8004e74:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004e78:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	dd09      	ble.n	8004e94 <sulp+0x36>
 8004e80:	051b      	lsls	r3, r3, #20
 8004e82:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8004e86:	2400      	movs	r4, #0
 8004e88:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8004e8c:	4622      	mov	r2, r4
 8004e8e:	462b      	mov	r3, r5
 8004e90:	f7fb fbb2 	bl	80005f8 <__aeabi_dmul>
 8004e94:	ec41 0b10 	vmov	d0, r0, r1
 8004e98:	bd70      	pop	{r4, r5, r6, pc}
 8004e9a:	0000      	movs	r0, r0
 8004e9c:	0000      	movs	r0, r0
	...

08004ea0 <_strtod_l>:
 8004ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea4:	b09f      	sub	sp, #124	@ 0x7c
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004eaa:	2200      	movs	r2, #0
 8004eac:	921a      	str	r2, [sp, #104]	@ 0x68
 8004eae:	9005      	str	r0, [sp, #20]
 8004eb0:	f04f 0a00 	mov.w	sl, #0
 8004eb4:	f04f 0b00 	mov.w	fp, #0
 8004eb8:	460a      	mov	r2, r1
 8004eba:	9219      	str	r2, [sp, #100]	@ 0x64
 8004ebc:	7811      	ldrb	r1, [r2, #0]
 8004ebe:	292b      	cmp	r1, #43	@ 0x2b
 8004ec0:	d04a      	beq.n	8004f58 <_strtod_l+0xb8>
 8004ec2:	d838      	bhi.n	8004f36 <_strtod_l+0x96>
 8004ec4:	290d      	cmp	r1, #13
 8004ec6:	d832      	bhi.n	8004f2e <_strtod_l+0x8e>
 8004ec8:	2908      	cmp	r1, #8
 8004eca:	d832      	bhi.n	8004f32 <_strtod_l+0x92>
 8004ecc:	2900      	cmp	r1, #0
 8004ece:	d03b      	beq.n	8004f48 <_strtod_l+0xa8>
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	920e      	str	r2, [sp, #56]	@ 0x38
 8004ed4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8004ed6:	782a      	ldrb	r2, [r5, #0]
 8004ed8:	2a30      	cmp	r2, #48	@ 0x30
 8004eda:	f040 80b2 	bne.w	8005042 <_strtod_l+0x1a2>
 8004ede:	786a      	ldrb	r2, [r5, #1]
 8004ee0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004ee4:	2a58      	cmp	r2, #88	@ 0x58
 8004ee6:	d16e      	bne.n	8004fc6 <_strtod_l+0x126>
 8004ee8:	9302      	str	r3, [sp, #8]
 8004eea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004eec:	9301      	str	r3, [sp, #4]
 8004eee:	ab1a      	add	r3, sp, #104	@ 0x68
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	4a8f      	ldr	r2, [pc, #572]	@ (8005130 <_strtod_l+0x290>)
 8004ef4:	9805      	ldr	r0, [sp, #20]
 8004ef6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004ef8:	a919      	add	r1, sp, #100	@ 0x64
 8004efa:	f002 fdb3 	bl	8007a64 <__gethex>
 8004efe:	f010 060f 	ands.w	r6, r0, #15
 8004f02:	4604      	mov	r4, r0
 8004f04:	d005      	beq.n	8004f12 <_strtod_l+0x72>
 8004f06:	2e06      	cmp	r6, #6
 8004f08:	d128      	bne.n	8004f5c <_strtod_l+0xbc>
 8004f0a:	3501      	adds	r5, #1
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	9519      	str	r5, [sp, #100]	@ 0x64
 8004f10:	930e      	str	r3, [sp, #56]	@ 0x38
 8004f12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f040 858e 	bne.w	8005a36 <_strtod_l+0xb96>
 8004f1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f1c:	b1cb      	cbz	r3, 8004f52 <_strtod_l+0xb2>
 8004f1e:	4652      	mov	r2, sl
 8004f20:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8004f24:	ec43 2b10 	vmov	d0, r2, r3
 8004f28:	b01f      	add	sp, #124	@ 0x7c
 8004f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2e:	2920      	cmp	r1, #32
 8004f30:	d1ce      	bne.n	8004ed0 <_strtod_l+0x30>
 8004f32:	3201      	adds	r2, #1
 8004f34:	e7c1      	b.n	8004eba <_strtod_l+0x1a>
 8004f36:	292d      	cmp	r1, #45	@ 0x2d
 8004f38:	d1ca      	bne.n	8004ed0 <_strtod_l+0x30>
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	910e      	str	r1, [sp, #56]	@ 0x38
 8004f3e:	1c51      	adds	r1, r2, #1
 8004f40:	9119      	str	r1, [sp, #100]	@ 0x64
 8004f42:	7852      	ldrb	r2, [r2, #1]
 8004f44:	2a00      	cmp	r2, #0
 8004f46:	d1c5      	bne.n	8004ed4 <_strtod_l+0x34>
 8004f48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004f4a:	9419      	str	r4, [sp, #100]	@ 0x64
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f040 8570 	bne.w	8005a32 <_strtod_l+0xb92>
 8004f52:	4652      	mov	r2, sl
 8004f54:	465b      	mov	r3, fp
 8004f56:	e7e5      	b.n	8004f24 <_strtod_l+0x84>
 8004f58:	2100      	movs	r1, #0
 8004f5a:	e7ef      	b.n	8004f3c <_strtod_l+0x9c>
 8004f5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004f5e:	b13a      	cbz	r2, 8004f70 <_strtod_l+0xd0>
 8004f60:	2135      	movs	r1, #53	@ 0x35
 8004f62:	a81c      	add	r0, sp, #112	@ 0x70
 8004f64:	f003 fd7e 	bl	8008a64 <__copybits>
 8004f68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004f6a:	9805      	ldr	r0, [sp, #20]
 8004f6c:	f003 f954 	bl	8008218 <_Bfree>
 8004f70:	3e01      	subs	r6, #1
 8004f72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8004f74:	2e04      	cmp	r6, #4
 8004f76:	d806      	bhi.n	8004f86 <_strtod_l+0xe6>
 8004f78:	e8df f006 	tbb	[pc, r6]
 8004f7c:	201d0314 	.word	0x201d0314
 8004f80:	14          	.byte	0x14
 8004f81:	00          	.byte	0x00
 8004f82:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8004f86:	05e1      	lsls	r1, r4, #23
 8004f88:	bf48      	it	mi
 8004f8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004f8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004f92:	0d1b      	lsrs	r3, r3, #20
 8004f94:	051b      	lsls	r3, r3, #20
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1bb      	bne.n	8004f12 <_strtod_l+0x72>
 8004f9a:	f001 fe0d 	bl	8006bb8 <__errno>
 8004f9e:	2322      	movs	r3, #34	@ 0x22
 8004fa0:	6003      	str	r3, [r0, #0]
 8004fa2:	e7b6      	b.n	8004f12 <_strtod_l+0x72>
 8004fa4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8004fa8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004fac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004fb0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004fb4:	e7e7      	b.n	8004f86 <_strtod_l+0xe6>
 8004fb6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8005138 <_strtod_l+0x298>
 8004fba:	e7e4      	b.n	8004f86 <_strtod_l+0xe6>
 8004fbc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8004fc0:	f04f 3aff 	mov.w	sl, #4294967295
 8004fc4:	e7df      	b.n	8004f86 <_strtod_l+0xe6>
 8004fc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	9219      	str	r2, [sp, #100]	@ 0x64
 8004fcc:	785b      	ldrb	r3, [r3, #1]
 8004fce:	2b30      	cmp	r3, #48	@ 0x30
 8004fd0:	d0f9      	beq.n	8004fc6 <_strtod_l+0x126>
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d09d      	beq.n	8004f12 <_strtod_l+0x72>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	2700      	movs	r7, #0
 8004fda:	9308      	str	r3, [sp, #32]
 8004fdc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004fde:	930c      	str	r3, [sp, #48]	@ 0x30
 8004fe0:	970b      	str	r7, [sp, #44]	@ 0x2c
 8004fe2:	46b9      	mov	r9, r7
 8004fe4:	220a      	movs	r2, #10
 8004fe6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004fe8:	7805      	ldrb	r5, [r0, #0]
 8004fea:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8004fee:	b2d9      	uxtb	r1, r3
 8004ff0:	2909      	cmp	r1, #9
 8004ff2:	d928      	bls.n	8005046 <_strtod_l+0x1a6>
 8004ff4:	494f      	ldr	r1, [pc, #316]	@ (8005134 <_strtod_l+0x294>)
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f001 fd6e 	bl	8006ad8 <strncmp>
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d032      	beq.n	8005066 <_strtod_l+0x1c6>
 8005000:	2000      	movs	r0, #0
 8005002:	462a      	mov	r2, r5
 8005004:	900a      	str	r0, [sp, #40]	@ 0x28
 8005006:	464d      	mov	r5, r9
 8005008:	4603      	mov	r3, r0
 800500a:	2a65      	cmp	r2, #101	@ 0x65
 800500c:	d001      	beq.n	8005012 <_strtod_l+0x172>
 800500e:	2a45      	cmp	r2, #69	@ 0x45
 8005010:	d114      	bne.n	800503c <_strtod_l+0x19c>
 8005012:	b91d      	cbnz	r5, 800501c <_strtod_l+0x17c>
 8005014:	9a08      	ldr	r2, [sp, #32]
 8005016:	4302      	orrs	r2, r0
 8005018:	d096      	beq.n	8004f48 <_strtod_l+0xa8>
 800501a:	2500      	movs	r5, #0
 800501c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800501e:	1c62      	adds	r2, r4, #1
 8005020:	9219      	str	r2, [sp, #100]	@ 0x64
 8005022:	7862      	ldrb	r2, [r4, #1]
 8005024:	2a2b      	cmp	r2, #43	@ 0x2b
 8005026:	d07a      	beq.n	800511e <_strtod_l+0x27e>
 8005028:	2a2d      	cmp	r2, #45	@ 0x2d
 800502a:	d07e      	beq.n	800512a <_strtod_l+0x28a>
 800502c:	f04f 0c00 	mov.w	ip, #0
 8005030:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005034:	2909      	cmp	r1, #9
 8005036:	f240 8085 	bls.w	8005144 <_strtod_l+0x2a4>
 800503a:	9419      	str	r4, [sp, #100]	@ 0x64
 800503c:	f04f 0800 	mov.w	r8, #0
 8005040:	e0a5      	b.n	800518e <_strtod_l+0x2ee>
 8005042:	2300      	movs	r3, #0
 8005044:	e7c8      	b.n	8004fd8 <_strtod_l+0x138>
 8005046:	f1b9 0f08 	cmp.w	r9, #8
 800504a:	bfd8      	it	le
 800504c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800504e:	f100 0001 	add.w	r0, r0, #1
 8005052:	bfda      	itte	le
 8005054:	fb02 3301 	mlale	r3, r2, r1, r3
 8005058:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800505a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800505e:	f109 0901 	add.w	r9, r9, #1
 8005062:	9019      	str	r0, [sp, #100]	@ 0x64
 8005064:	e7bf      	b.n	8004fe6 <_strtod_l+0x146>
 8005066:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	9219      	str	r2, [sp, #100]	@ 0x64
 800506c:	785a      	ldrb	r2, [r3, #1]
 800506e:	f1b9 0f00 	cmp.w	r9, #0
 8005072:	d03b      	beq.n	80050ec <_strtod_l+0x24c>
 8005074:	900a      	str	r0, [sp, #40]	@ 0x28
 8005076:	464d      	mov	r5, r9
 8005078:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800507c:	2b09      	cmp	r3, #9
 800507e:	d912      	bls.n	80050a6 <_strtod_l+0x206>
 8005080:	2301      	movs	r3, #1
 8005082:	e7c2      	b.n	800500a <_strtod_l+0x16a>
 8005084:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	9219      	str	r2, [sp, #100]	@ 0x64
 800508a:	785a      	ldrb	r2, [r3, #1]
 800508c:	3001      	adds	r0, #1
 800508e:	2a30      	cmp	r2, #48	@ 0x30
 8005090:	d0f8      	beq.n	8005084 <_strtod_l+0x1e4>
 8005092:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005096:	2b08      	cmp	r3, #8
 8005098:	f200 84d2 	bhi.w	8005a40 <_strtod_l+0xba0>
 800509c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800509e:	900a      	str	r0, [sp, #40]	@ 0x28
 80050a0:	2000      	movs	r0, #0
 80050a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80050a4:	4605      	mov	r5, r0
 80050a6:	3a30      	subs	r2, #48	@ 0x30
 80050a8:	f100 0301 	add.w	r3, r0, #1
 80050ac:	d018      	beq.n	80050e0 <_strtod_l+0x240>
 80050ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80050b0:	4419      	add	r1, r3
 80050b2:	910a      	str	r1, [sp, #40]	@ 0x28
 80050b4:	462e      	mov	r6, r5
 80050b6:	f04f 0e0a 	mov.w	lr, #10
 80050ba:	1c71      	adds	r1, r6, #1
 80050bc:	eba1 0c05 	sub.w	ip, r1, r5
 80050c0:	4563      	cmp	r3, ip
 80050c2:	dc15      	bgt.n	80050f0 <_strtod_l+0x250>
 80050c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80050c8:	182b      	adds	r3, r5, r0
 80050ca:	2b08      	cmp	r3, #8
 80050cc:	f105 0501 	add.w	r5, r5, #1
 80050d0:	4405      	add	r5, r0
 80050d2:	dc1a      	bgt.n	800510a <_strtod_l+0x26a>
 80050d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80050d6:	230a      	movs	r3, #10
 80050d8:	fb03 2301 	mla	r3, r3, r1, r2
 80050dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80050de:	2300      	movs	r3, #0
 80050e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80050e2:	1c51      	adds	r1, r2, #1
 80050e4:	9119      	str	r1, [sp, #100]	@ 0x64
 80050e6:	7852      	ldrb	r2, [r2, #1]
 80050e8:	4618      	mov	r0, r3
 80050ea:	e7c5      	b.n	8005078 <_strtod_l+0x1d8>
 80050ec:	4648      	mov	r0, r9
 80050ee:	e7ce      	b.n	800508e <_strtod_l+0x1ee>
 80050f0:	2e08      	cmp	r6, #8
 80050f2:	dc05      	bgt.n	8005100 <_strtod_l+0x260>
 80050f4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80050f6:	fb0e f606 	mul.w	r6, lr, r6
 80050fa:	960b      	str	r6, [sp, #44]	@ 0x2c
 80050fc:	460e      	mov	r6, r1
 80050fe:	e7dc      	b.n	80050ba <_strtod_l+0x21a>
 8005100:	2910      	cmp	r1, #16
 8005102:	bfd8      	it	le
 8005104:	fb0e f707 	mulle.w	r7, lr, r7
 8005108:	e7f8      	b.n	80050fc <_strtod_l+0x25c>
 800510a:	2b0f      	cmp	r3, #15
 800510c:	bfdc      	itt	le
 800510e:	230a      	movle	r3, #10
 8005110:	fb03 2707 	mlale	r7, r3, r7, r2
 8005114:	e7e3      	b.n	80050de <_strtod_l+0x23e>
 8005116:	2300      	movs	r3, #0
 8005118:	930a      	str	r3, [sp, #40]	@ 0x28
 800511a:	2301      	movs	r3, #1
 800511c:	e77a      	b.n	8005014 <_strtod_l+0x174>
 800511e:	f04f 0c00 	mov.w	ip, #0
 8005122:	1ca2      	adds	r2, r4, #2
 8005124:	9219      	str	r2, [sp, #100]	@ 0x64
 8005126:	78a2      	ldrb	r2, [r4, #2]
 8005128:	e782      	b.n	8005030 <_strtod_l+0x190>
 800512a:	f04f 0c01 	mov.w	ip, #1
 800512e:	e7f8      	b.n	8005122 <_strtod_l+0x282>
 8005130:	0800a328 	.word	0x0800a328
 8005134:	0800a124 	.word	0x0800a124
 8005138:	7ff00000 	.word	0x7ff00000
 800513c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800513e:	1c51      	adds	r1, r2, #1
 8005140:	9119      	str	r1, [sp, #100]	@ 0x64
 8005142:	7852      	ldrb	r2, [r2, #1]
 8005144:	2a30      	cmp	r2, #48	@ 0x30
 8005146:	d0f9      	beq.n	800513c <_strtod_l+0x29c>
 8005148:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800514c:	2908      	cmp	r1, #8
 800514e:	f63f af75 	bhi.w	800503c <_strtod_l+0x19c>
 8005152:	3a30      	subs	r2, #48	@ 0x30
 8005154:	9209      	str	r2, [sp, #36]	@ 0x24
 8005156:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005158:	920f      	str	r2, [sp, #60]	@ 0x3c
 800515a:	f04f 080a 	mov.w	r8, #10
 800515e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005160:	1c56      	adds	r6, r2, #1
 8005162:	9619      	str	r6, [sp, #100]	@ 0x64
 8005164:	7852      	ldrb	r2, [r2, #1]
 8005166:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800516a:	f1be 0f09 	cmp.w	lr, #9
 800516e:	d939      	bls.n	80051e4 <_strtod_l+0x344>
 8005170:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005172:	1a76      	subs	r6, r6, r1
 8005174:	2e08      	cmp	r6, #8
 8005176:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800517a:	dc03      	bgt.n	8005184 <_strtod_l+0x2e4>
 800517c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800517e:	4588      	cmp	r8, r1
 8005180:	bfa8      	it	ge
 8005182:	4688      	movge	r8, r1
 8005184:	f1bc 0f00 	cmp.w	ip, #0
 8005188:	d001      	beq.n	800518e <_strtod_l+0x2ee>
 800518a:	f1c8 0800 	rsb	r8, r8, #0
 800518e:	2d00      	cmp	r5, #0
 8005190:	d14e      	bne.n	8005230 <_strtod_l+0x390>
 8005192:	9908      	ldr	r1, [sp, #32]
 8005194:	4308      	orrs	r0, r1
 8005196:	f47f aebc 	bne.w	8004f12 <_strtod_l+0x72>
 800519a:	2b00      	cmp	r3, #0
 800519c:	f47f aed4 	bne.w	8004f48 <_strtod_l+0xa8>
 80051a0:	2a69      	cmp	r2, #105	@ 0x69
 80051a2:	d028      	beq.n	80051f6 <_strtod_l+0x356>
 80051a4:	dc25      	bgt.n	80051f2 <_strtod_l+0x352>
 80051a6:	2a49      	cmp	r2, #73	@ 0x49
 80051a8:	d025      	beq.n	80051f6 <_strtod_l+0x356>
 80051aa:	2a4e      	cmp	r2, #78	@ 0x4e
 80051ac:	f47f aecc 	bne.w	8004f48 <_strtod_l+0xa8>
 80051b0:	499a      	ldr	r1, [pc, #616]	@ (800541c <_strtod_l+0x57c>)
 80051b2:	a819      	add	r0, sp, #100	@ 0x64
 80051b4:	f002 fe78 	bl	8007ea8 <__match>
 80051b8:	2800      	cmp	r0, #0
 80051ba:	f43f aec5 	beq.w	8004f48 <_strtod_l+0xa8>
 80051be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b28      	cmp	r3, #40	@ 0x28
 80051c4:	d12e      	bne.n	8005224 <_strtod_l+0x384>
 80051c6:	4996      	ldr	r1, [pc, #600]	@ (8005420 <_strtod_l+0x580>)
 80051c8:	aa1c      	add	r2, sp, #112	@ 0x70
 80051ca:	a819      	add	r0, sp, #100	@ 0x64
 80051cc:	f002 fe80 	bl	8007ed0 <__hexnan>
 80051d0:	2805      	cmp	r0, #5
 80051d2:	d127      	bne.n	8005224 <_strtod_l+0x384>
 80051d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80051d6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80051da:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80051de:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80051e2:	e696      	b.n	8004f12 <_strtod_l+0x72>
 80051e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80051e6:	fb08 2101 	mla	r1, r8, r1, r2
 80051ea:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80051ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80051f0:	e7b5      	b.n	800515e <_strtod_l+0x2be>
 80051f2:	2a6e      	cmp	r2, #110	@ 0x6e
 80051f4:	e7da      	b.n	80051ac <_strtod_l+0x30c>
 80051f6:	498b      	ldr	r1, [pc, #556]	@ (8005424 <_strtod_l+0x584>)
 80051f8:	a819      	add	r0, sp, #100	@ 0x64
 80051fa:	f002 fe55 	bl	8007ea8 <__match>
 80051fe:	2800      	cmp	r0, #0
 8005200:	f43f aea2 	beq.w	8004f48 <_strtod_l+0xa8>
 8005204:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005206:	4988      	ldr	r1, [pc, #544]	@ (8005428 <_strtod_l+0x588>)
 8005208:	3b01      	subs	r3, #1
 800520a:	a819      	add	r0, sp, #100	@ 0x64
 800520c:	9319      	str	r3, [sp, #100]	@ 0x64
 800520e:	f002 fe4b 	bl	8007ea8 <__match>
 8005212:	b910      	cbnz	r0, 800521a <_strtod_l+0x37a>
 8005214:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005216:	3301      	adds	r3, #1
 8005218:	9319      	str	r3, [sp, #100]	@ 0x64
 800521a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8005438 <_strtod_l+0x598>
 800521e:	f04f 0a00 	mov.w	sl, #0
 8005222:	e676      	b.n	8004f12 <_strtod_l+0x72>
 8005224:	4881      	ldr	r0, [pc, #516]	@ (800542c <_strtod_l+0x58c>)
 8005226:	f001 fd03 	bl	8006c30 <nan>
 800522a:	ec5b ab10 	vmov	sl, fp, d0
 800522e:	e670      	b.n	8004f12 <_strtod_l+0x72>
 8005230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005232:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005234:	eba8 0303 	sub.w	r3, r8, r3
 8005238:	f1b9 0f00 	cmp.w	r9, #0
 800523c:	bf08      	it	eq
 800523e:	46a9      	moveq	r9, r5
 8005240:	2d10      	cmp	r5, #16
 8005242:	9309      	str	r3, [sp, #36]	@ 0x24
 8005244:	462c      	mov	r4, r5
 8005246:	bfa8      	it	ge
 8005248:	2410      	movge	r4, #16
 800524a:	f7fb f95b 	bl	8000504 <__aeabi_ui2d>
 800524e:	2d09      	cmp	r5, #9
 8005250:	4682      	mov	sl, r0
 8005252:	468b      	mov	fp, r1
 8005254:	dc13      	bgt.n	800527e <_strtod_l+0x3de>
 8005256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005258:	2b00      	cmp	r3, #0
 800525a:	f43f ae5a 	beq.w	8004f12 <_strtod_l+0x72>
 800525e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005260:	dd78      	ble.n	8005354 <_strtod_l+0x4b4>
 8005262:	2b16      	cmp	r3, #22
 8005264:	dc5f      	bgt.n	8005326 <_strtod_l+0x486>
 8005266:	4972      	ldr	r1, [pc, #456]	@ (8005430 <_strtod_l+0x590>)
 8005268:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800526c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005270:	4652      	mov	r2, sl
 8005272:	465b      	mov	r3, fp
 8005274:	f7fb f9c0 	bl	80005f8 <__aeabi_dmul>
 8005278:	4682      	mov	sl, r0
 800527a:	468b      	mov	fp, r1
 800527c:	e649      	b.n	8004f12 <_strtod_l+0x72>
 800527e:	4b6c      	ldr	r3, [pc, #432]	@ (8005430 <_strtod_l+0x590>)
 8005280:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005284:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005288:	f7fb f9b6 	bl	80005f8 <__aeabi_dmul>
 800528c:	4682      	mov	sl, r0
 800528e:	4638      	mov	r0, r7
 8005290:	468b      	mov	fp, r1
 8005292:	f7fb f937 	bl	8000504 <__aeabi_ui2d>
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	4650      	mov	r0, sl
 800529c:	4659      	mov	r1, fp
 800529e:	f7fa fff5 	bl	800028c <__adddf3>
 80052a2:	2d0f      	cmp	r5, #15
 80052a4:	4682      	mov	sl, r0
 80052a6:	468b      	mov	fp, r1
 80052a8:	ddd5      	ble.n	8005256 <_strtod_l+0x3b6>
 80052aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052ac:	1b2c      	subs	r4, r5, r4
 80052ae:	441c      	add	r4, r3
 80052b0:	2c00      	cmp	r4, #0
 80052b2:	f340 8093 	ble.w	80053dc <_strtod_l+0x53c>
 80052b6:	f014 030f 	ands.w	r3, r4, #15
 80052ba:	d00a      	beq.n	80052d2 <_strtod_l+0x432>
 80052bc:	495c      	ldr	r1, [pc, #368]	@ (8005430 <_strtod_l+0x590>)
 80052be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80052c2:	4652      	mov	r2, sl
 80052c4:	465b      	mov	r3, fp
 80052c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052ca:	f7fb f995 	bl	80005f8 <__aeabi_dmul>
 80052ce:	4682      	mov	sl, r0
 80052d0:	468b      	mov	fp, r1
 80052d2:	f034 040f 	bics.w	r4, r4, #15
 80052d6:	d073      	beq.n	80053c0 <_strtod_l+0x520>
 80052d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80052dc:	dd49      	ble.n	8005372 <_strtod_l+0x4d2>
 80052de:	2400      	movs	r4, #0
 80052e0:	46a0      	mov	r8, r4
 80052e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80052e4:	46a1      	mov	r9, r4
 80052e6:	9a05      	ldr	r2, [sp, #20]
 80052e8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8005438 <_strtod_l+0x598>
 80052ec:	2322      	movs	r3, #34	@ 0x22
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	f04f 0a00 	mov.w	sl, #0
 80052f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f43f ae0b 	beq.w	8004f12 <_strtod_l+0x72>
 80052fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80052fe:	9805      	ldr	r0, [sp, #20]
 8005300:	f002 ff8a 	bl	8008218 <_Bfree>
 8005304:	9805      	ldr	r0, [sp, #20]
 8005306:	4649      	mov	r1, r9
 8005308:	f002 ff86 	bl	8008218 <_Bfree>
 800530c:	9805      	ldr	r0, [sp, #20]
 800530e:	4641      	mov	r1, r8
 8005310:	f002 ff82 	bl	8008218 <_Bfree>
 8005314:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005316:	9805      	ldr	r0, [sp, #20]
 8005318:	f002 ff7e 	bl	8008218 <_Bfree>
 800531c:	9805      	ldr	r0, [sp, #20]
 800531e:	4621      	mov	r1, r4
 8005320:	f002 ff7a 	bl	8008218 <_Bfree>
 8005324:	e5f5      	b.n	8004f12 <_strtod_l+0x72>
 8005326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005328:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800532c:	4293      	cmp	r3, r2
 800532e:	dbbc      	blt.n	80052aa <_strtod_l+0x40a>
 8005330:	4c3f      	ldr	r4, [pc, #252]	@ (8005430 <_strtod_l+0x590>)
 8005332:	f1c5 050f 	rsb	r5, r5, #15
 8005336:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800533a:	4652      	mov	r2, sl
 800533c:	465b      	mov	r3, fp
 800533e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005342:	f7fb f959 	bl	80005f8 <__aeabi_dmul>
 8005346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005348:	1b5d      	subs	r5, r3, r5
 800534a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800534e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005352:	e78f      	b.n	8005274 <_strtod_l+0x3d4>
 8005354:	3316      	adds	r3, #22
 8005356:	dba8      	blt.n	80052aa <_strtod_l+0x40a>
 8005358:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800535a:	eba3 0808 	sub.w	r8, r3, r8
 800535e:	4b34      	ldr	r3, [pc, #208]	@ (8005430 <_strtod_l+0x590>)
 8005360:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005364:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005368:	4650      	mov	r0, sl
 800536a:	4659      	mov	r1, fp
 800536c:	f7fb fa6e 	bl	800084c <__aeabi_ddiv>
 8005370:	e782      	b.n	8005278 <_strtod_l+0x3d8>
 8005372:	2300      	movs	r3, #0
 8005374:	4f2f      	ldr	r7, [pc, #188]	@ (8005434 <_strtod_l+0x594>)
 8005376:	1124      	asrs	r4, r4, #4
 8005378:	4650      	mov	r0, sl
 800537a:	4659      	mov	r1, fp
 800537c:	461e      	mov	r6, r3
 800537e:	2c01      	cmp	r4, #1
 8005380:	dc21      	bgt.n	80053c6 <_strtod_l+0x526>
 8005382:	b10b      	cbz	r3, 8005388 <_strtod_l+0x4e8>
 8005384:	4682      	mov	sl, r0
 8005386:	468b      	mov	fp, r1
 8005388:	492a      	ldr	r1, [pc, #168]	@ (8005434 <_strtod_l+0x594>)
 800538a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800538e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005392:	4652      	mov	r2, sl
 8005394:	465b      	mov	r3, fp
 8005396:	e9d1 0100 	ldrd	r0, r1, [r1]
 800539a:	f7fb f92d 	bl	80005f8 <__aeabi_dmul>
 800539e:	4b26      	ldr	r3, [pc, #152]	@ (8005438 <_strtod_l+0x598>)
 80053a0:	460a      	mov	r2, r1
 80053a2:	400b      	ands	r3, r1
 80053a4:	4925      	ldr	r1, [pc, #148]	@ (800543c <_strtod_l+0x59c>)
 80053a6:	428b      	cmp	r3, r1
 80053a8:	4682      	mov	sl, r0
 80053aa:	d898      	bhi.n	80052de <_strtod_l+0x43e>
 80053ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80053b0:	428b      	cmp	r3, r1
 80053b2:	bf86      	itte	hi
 80053b4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8005440 <_strtod_l+0x5a0>
 80053b8:	f04f 3aff 	movhi.w	sl, #4294967295
 80053bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80053c0:	2300      	movs	r3, #0
 80053c2:	9308      	str	r3, [sp, #32]
 80053c4:	e076      	b.n	80054b4 <_strtod_l+0x614>
 80053c6:	07e2      	lsls	r2, r4, #31
 80053c8:	d504      	bpl.n	80053d4 <_strtod_l+0x534>
 80053ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053ce:	f7fb f913 	bl	80005f8 <__aeabi_dmul>
 80053d2:	2301      	movs	r3, #1
 80053d4:	3601      	adds	r6, #1
 80053d6:	1064      	asrs	r4, r4, #1
 80053d8:	3708      	adds	r7, #8
 80053da:	e7d0      	b.n	800537e <_strtod_l+0x4de>
 80053dc:	d0f0      	beq.n	80053c0 <_strtod_l+0x520>
 80053de:	4264      	negs	r4, r4
 80053e0:	f014 020f 	ands.w	r2, r4, #15
 80053e4:	d00a      	beq.n	80053fc <_strtod_l+0x55c>
 80053e6:	4b12      	ldr	r3, [pc, #72]	@ (8005430 <_strtod_l+0x590>)
 80053e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053ec:	4650      	mov	r0, sl
 80053ee:	4659      	mov	r1, fp
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	f7fb fa2a 	bl	800084c <__aeabi_ddiv>
 80053f8:	4682      	mov	sl, r0
 80053fa:	468b      	mov	fp, r1
 80053fc:	1124      	asrs	r4, r4, #4
 80053fe:	d0df      	beq.n	80053c0 <_strtod_l+0x520>
 8005400:	2c1f      	cmp	r4, #31
 8005402:	dd1f      	ble.n	8005444 <_strtod_l+0x5a4>
 8005404:	2400      	movs	r4, #0
 8005406:	46a0      	mov	r8, r4
 8005408:	940b      	str	r4, [sp, #44]	@ 0x2c
 800540a:	46a1      	mov	r9, r4
 800540c:	9a05      	ldr	r2, [sp, #20]
 800540e:	2322      	movs	r3, #34	@ 0x22
 8005410:	f04f 0a00 	mov.w	sl, #0
 8005414:	f04f 0b00 	mov.w	fp, #0
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	e76b      	b.n	80052f4 <_strtod_l+0x454>
 800541c:	0800a133 	.word	0x0800a133
 8005420:	0800a314 	.word	0x0800a314
 8005424:	0800a12b 	.word	0x0800a12b
 8005428:	0800a168 	.word	0x0800a168
 800542c:	0800a312 	.word	0x0800a312
 8005430:	0800a3a0 	.word	0x0800a3a0
 8005434:	0800a378 	.word	0x0800a378
 8005438:	7ff00000 	.word	0x7ff00000
 800543c:	7ca00000 	.word	0x7ca00000
 8005440:	7fefffff 	.word	0x7fefffff
 8005444:	f014 0310 	ands.w	r3, r4, #16
 8005448:	bf18      	it	ne
 800544a:	236a      	movne	r3, #106	@ 0x6a
 800544c:	4ea9      	ldr	r6, [pc, #676]	@ (80056f4 <_strtod_l+0x854>)
 800544e:	9308      	str	r3, [sp, #32]
 8005450:	4650      	mov	r0, sl
 8005452:	4659      	mov	r1, fp
 8005454:	2300      	movs	r3, #0
 8005456:	07e7      	lsls	r7, r4, #31
 8005458:	d504      	bpl.n	8005464 <_strtod_l+0x5c4>
 800545a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800545e:	f7fb f8cb 	bl	80005f8 <__aeabi_dmul>
 8005462:	2301      	movs	r3, #1
 8005464:	1064      	asrs	r4, r4, #1
 8005466:	f106 0608 	add.w	r6, r6, #8
 800546a:	d1f4      	bne.n	8005456 <_strtod_l+0x5b6>
 800546c:	b10b      	cbz	r3, 8005472 <_strtod_l+0x5d2>
 800546e:	4682      	mov	sl, r0
 8005470:	468b      	mov	fp, r1
 8005472:	9b08      	ldr	r3, [sp, #32]
 8005474:	b1b3      	cbz	r3, 80054a4 <_strtod_l+0x604>
 8005476:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800547a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800547e:	2b00      	cmp	r3, #0
 8005480:	4659      	mov	r1, fp
 8005482:	dd0f      	ble.n	80054a4 <_strtod_l+0x604>
 8005484:	2b1f      	cmp	r3, #31
 8005486:	dd56      	ble.n	8005536 <_strtod_l+0x696>
 8005488:	2b34      	cmp	r3, #52	@ 0x34
 800548a:	bfde      	ittt	le
 800548c:	f04f 33ff 	movle.w	r3, #4294967295
 8005490:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005494:	4093      	lslle	r3, r2
 8005496:	f04f 0a00 	mov.w	sl, #0
 800549a:	bfcc      	ite	gt
 800549c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80054a0:	ea03 0b01 	andle.w	fp, r3, r1
 80054a4:	2200      	movs	r2, #0
 80054a6:	2300      	movs	r3, #0
 80054a8:	4650      	mov	r0, sl
 80054aa:	4659      	mov	r1, fp
 80054ac:	f7fb fb0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d1a7      	bne.n	8005404 <_strtod_l+0x564>
 80054b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80054ba:	9805      	ldr	r0, [sp, #20]
 80054bc:	462b      	mov	r3, r5
 80054be:	464a      	mov	r2, r9
 80054c0:	f002 ff12 	bl	80082e8 <__s2b>
 80054c4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80054c6:	2800      	cmp	r0, #0
 80054c8:	f43f af09 	beq.w	80052de <_strtod_l+0x43e>
 80054cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054d0:	2a00      	cmp	r2, #0
 80054d2:	eba3 0308 	sub.w	r3, r3, r8
 80054d6:	bfa8      	it	ge
 80054d8:	2300      	movge	r3, #0
 80054da:	9312      	str	r3, [sp, #72]	@ 0x48
 80054dc:	2400      	movs	r4, #0
 80054de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80054e2:	9316      	str	r3, [sp, #88]	@ 0x58
 80054e4:	46a0      	mov	r8, r4
 80054e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054e8:	9805      	ldr	r0, [sp, #20]
 80054ea:	6859      	ldr	r1, [r3, #4]
 80054ec:	f002 fe54 	bl	8008198 <_Balloc>
 80054f0:	4681      	mov	r9, r0
 80054f2:	2800      	cmp	r0, #0
 80054f4:	f43f aef7 	beq.w	80052e6 <_strtod_l+0x446>
 80054f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	3202      	adds	r2, #2
 80054fe:	f103 010c 	add.w	r1, r3, #12
 8005502:	0092      	lsls	r2, r2, #2
 8005504:	300c      	adds	r0, #12
 8005506:	f001 fb84 	bl	8006c12 <memcpy>
 800550a:	ec4b ab10 	vmov	d0, sl, fp
 800550e:	9805      	ldr	r0, [sp, #20]
 8005510:	aa1c      	add	r2, sp, #112	@ 0x70
 8005512:	a91b      	add	r1, sp, #108	@ 0x6c
 8005514:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005518:	f003 fa1a 	bl	8008950 <__d2b>
 800551c:	901a      	str	r0, [sp, #104]	@ 0x68
 800551e:	2800      	cmp	r0, #0
 8005520:	f43f aee1 	beq.w	80052e6 <_strtod_l+0x446>
 8005524:	9805      	ldr	r0, [sp, #20]
 8005526:	2101      	movs	r1, #1
 8005528:	f002 ff74 	bl	8008414 <__i2b>
 800552c:	4680      	mov	r8, r0
 800552e:	b948      	cbnz	r0, 8005544 <_strtod_l+0x6a4>
 8005530:	f04f 0800 	mov.w	r8, #0
 8005534:	e6d7      	b.n	80052e6 <_strtod_l+0x446>
 8005536:	f04f 32ff 	mov.w	r2, #4294967295
 800553a:	fa02 f303 	lsl.w	r3, r2, r3
 800553e:	ea03 0a0a 	and.w	sl, r3, sl
 8005542:	e7af      	b.n	80054a4 <_strtod_l+0x604>
 8005544:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005546:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005548:	2d00      	cmp	r5, #0
 800554a:	bfab      	itete	ge
 800554c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800554e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005550:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005552:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005554:	bfac      	ite	ge
 8005556:	18ef      	addge	r7, r5, r3
 8005558:	1b5e      	sublt	r6, r3, r5
 800555a:	9b08      	ldr	r3, [sp, #32]
 800555c:	1aed      	subs	r5, r5, r3
 800555e:	4415      	add	r5, r2
 8005560:	4b65      	ldr	r3, [pc, #404]	@ (80056f8 <_strtod_l+0x858>)
 8005562:	3d01      	subs	r5, #1
 8005564:	429d      	cmp	r5, r3
 8005566:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800556a:	da50      	bge.n	800560e <_strtod_l+0x76e>
 800556c:	1b5b      	subs	r3, r3, r5
 800556e:	2b1f      	cmp	r3, #31
 8005570:	eba2 0203 	sub.w	r2, r2, r3
 8005574:	f04f 0101 	mov.w	r1, #1
 8005578:	dc3d      	bgt.n	80055f6 <_strtod_l+0x756>
 800557a:	fa01 f303 	lsl.w	r3, r1, r3
 800557e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005580:	2300      	movs	r3, #0
 8005582:	9310      	str	r3, [sp, #64]	@ 0x40
 8005584:	18bd      	adds	r5, r7, r2
 8005586:	9b08      	ldr	r3, [sp, #32]
 8005588:	42af      	cmp	r7, r5
 800558a:	4416      	add	r6, r2
 800558c:	441e      	add	r6, r3
 800558e:	463b      	mov	r3, r7
 8005590:	bfa8      	it	ge
 8005592:	462b      	movge	r3, r5
 8005594:	42b3      	cmp	r3, r6
 8005596:	bfa8      	it	ge
 8005598:	4633      	movge	r3, r6
 800559a:	2b00      	cmp	r3, #0
 800559c:	bfc2      	ittt	gt
 800559e:	1aed      	subgt	r5, r5, r3
 80055a0:	1af6      	subgt	r6, r6, r3
 80055a2:	1aff      	subgt	r7, r7, r3
 80055a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	dd16      	ble.n	80055d8 <_strtod_l+0x738>
 80055aa:	4641      	mov	r1, r8
 80055ac:	9805      	ldr	r0, [sp, #20]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f002 ffe8 	bl	8008584 <__pow5mult>
 80055b4:	4680      	mov	r8, r0
 80055b6:	2800      	cmp	r0, #0
 80055b8:	d0ba      	beq.n	8005530 <_strtod_l+0x690>
 80055ba:	4601      	mov	r1, r0
 80055bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80055be:	9805      	ldr	r0, [sp, #20]
 80055c0:	f002 ff3e 	bl	8008440 <__multiply>
 80055c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80055c6:	2800      	cmp	r0, #0
 80055c8:	f43f ae8d 	beq.w	80052e6 <_strtod_l+0x446>
 80055cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80055ce:	9805      	ldr	r0, [sp, #20]
 80055d0:	f002 fe22 	bl	8008218 <_Bfree>
 80055d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80055d8:	2d00      	cmp	r5, #0
 80055da:	dc1d      	bgt.n	8005618 <_strtod_l+0x778>
 80055dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055de:	2b00      	cmp	r3, #0
 80055e0:	dd23      	ble.n	800562a <_strtod_l+0x78a>
 80055e2:	4649      	mov	r1, r9
 80055e4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80055e6:	9805      	ldr	r0, [sp, #20]
 80055e8:	f002 ffcc 	bl	8008584 <__pow5mult>
 80055ec:	4681      	mov	r9, r0
 80055ee:	b9e0      	cbnz	r0, 800562a <_strtod_l+0x78a>
 80055f0:	f04f 0900 	mov.w	r9, #0
 80055f4:	e677      	b.n	80052e6 <_strtod_l+0x446>
 80055f6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80055fa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80055fe:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005602:	35e2      	adds	r5, #226	@ 0xe2
 8005604:	fa01 f305 	lsl.w	r3, r1, r5
 8005608:	9310      	str	r3, [sp, #64]	@ 0x40
 800560a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800560c:	e7ba      	b.n	8005584 <_strtod_l+0x6e4>
 800560e:	2300      	movs	r3, #0
 8005610:	9310      	str	r3, [sp, #64]	@ 0x40
 8005612:	2301      	movs	r3, #1
 8005614:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005616:	e7b5      	b.n	8005584 <_strtod_l+0x6e4>
 8005618:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800561a:	9805      	ldr	r0, [sp, #20]
 800561c:	462a      	mov	r2, r5
 800561e:	f003 f80b 	bl	8008638 <__lshift>
 8005622:	901a      	str	r0, [sp, #104]	@ 0x68
 8005624:	2800      	cmp	r0, #0
 8005626:	d1d9      	bne.n	80055dc <_strtod_l+0x73c>
 8005628:	e65d      	b.n	80052e6 <_strtod_l+0x446>
 800562a:	2e00      	cmp	r6, #0
 800562c:	dd07      	ble.n	800563e <_strtod_l+0x79e>
 800562e:	4649      	mov	r1, r9
 8005630:	9805      	ldr	r0, [sp, #20]
 8005632:	4632      	mov	r2, r6
 8005634:	f003 f800 	bl	8008638 <__lshift>
 8005638:	4681      	mov	r9, r0
 800563a:	2800      	cmp	r0, #0
 800563c:	d0d8      	beq.n	80055f0 <_strtod_l+0x750>
 800563e:	2f00      	cmp	r7, #0
 8005640:	dd08      	ble.n	8005654 <_strtod_l+0x7b4>
 8005642:	4641      	mov	r1, r8
 8005644:	9805      	ldr	r0, [sp, #20]
 8005646:	463a      	mov	r2, r7
 8005648:	f002 fff6 	bl	8008638 <__lshift>
 800564c:	4680      	mov	r8, r0
 800564e:	2800      	cmp	r0, #0
 8005650:	f43f ae49 	beq.w	80052e6 <_strtod_l+0x446>
 8005654:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005656:	9805      	ldr	r0, [sp, #20]
 8005658:	464a      	mov	r2, r9
 800565a:	f003 f875 	bl	8008748 <__mdiff>
 800565e:	4604      	mov	r4, r0
 8005660:	2800      	cmp	r0, #0
 8005662:	f43f ae40 	beq.w	80052e6 <_strtod_l+0x446>
 8005666:	68c3      	ldr	r3, [r0, #12]
 8005668:	930f      	str	r3, [sp, #60]	@ 0x3c
 800566a:	2300      	movs	r3, #0
 800566c:	60c3      	str	r3, [r0, #12]
 800566e:	4641      	mov	r1, r8
 8005670:	f003 f84e 	bl	8008710 <__mcmp>
 8005674:	2800      	cmp	r0, #0
 8005676:	da45      	bge.n	8005704 <_strtod_l+0x864>
 8005678:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800567a:	ea53 030a 	orrs.w	r3, r3, sl
 800567e:	d16b      	bne.n	8005758 <_strtod_l+0x8b8>
 8005680:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005684:	2b00      	cmp	r3, #0
 8005686:	d167      	bne.n	8005758 <_strtod_l+0x8b8>
 8005688:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800568c:	0d1b      	lsrs	r3, r3, #20
 800568e:	051b      	lsls	r3, r3, #20
 8005690:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005694:	d960      	bls.n	8005758 <_strtod_l+0x8b8>
 8005696:	6963      	ldr	r3, [r4, #20]
 8005698:	b913      	cbnz	r3, 80056a0 <_strtod_l+0x800>
 800569a:	6923      	ldr	r3, [r4, #16]
 800569c:	2b01      	cmp	r3, #1
 800569e:	dd5b      	ble.n	8005758 <_strtod_l+0x8b8>
 80056a0:	4621      	mov	r1, r4
 80056a2:	2201      	movs	r2, #1
 80056a4:	9805      	ldr	r0, [sp, #20]
 80056a6:	f002 ffc7 	bl	8008638 <__lshift>
 80056aa:	4641      	mov	r1, r8
 80056ac:	4604      	mov	r4, r0
 80056ae:	f003 f82f 	bl	8008710 <__mcmp>
 80056b2:	2800      	cmp	r0, #0
 80056b4:	dd50      	ble.n	8005758 <_strtod_l+0x8b8>
 80056b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80056ba:	9a08      	ldr	r2, [sp, #32]
 80056bc:	0d1b      	lsrs	r3, r3, #20
 80056be:	051b      	lsls	r3, r3, #20
 80056c0:	2a00      	cmp	r2, #0
 80056c2:	d06a      	beq.n	800579a <_strtod_l+0x8fa>
 80056c4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80056c8:	d867      	bhi.n	800579a <_strtod_l+0x8fa>
 80056ca:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80056ce:	f67f ae9d 	bls.w	800540c <_strtod_l+0x56c>
 80056d2:	4b0a      	ldr	r3, [pc, #40]	@ (80056fc <_strtod_l+0x85c>)
 80056d4:	4650      	mov	r0, sl
 80056d6:	4659      	mov	r1, fp
 80056d8:	2200      	movs	r2, #0
 80056da:	f7fa ff8d 	bl	80005f8 <__aeabi_dmul>
 80056de:	4b08      	ldr	r3, [pc, #32]	@ (8005700 <_strtod_l+0x860>)
 80056e0:	400b      	ands	r3, r1
 80056e2:	4682      	mov	sl, r0
 80056e4:	468b      	mov	fp, r1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f47f ae08 	bne.w	80052fc <_strtod_l+0x45c>
 80056ec:	9a05      	ldr	r2, [sp, #20]
 80056ee:	2322      	movs	r3, #34	@ 0x22
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	e603      	b.n	80052fc <_strtod_l+0x45c>
 80056f4:	0800a340 	.word	0x0800a340
 80056f8:	fffffc02 	.word	0xfffffc02
 80056fc:	39500000 	.word	0x39500000
 8005700:	7ff00000 	.word	0x7ff00000
 8005704:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8005708:	d165      	bne.n	80057d6 <_strtod_l+0x936>
 800570a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800570c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005710:	b35a      	cbz	r2, 800576a <_strtod_l+0x8ca>
 8005712:	4a9f      	ldr	r2, [pc, #636]	@ (8005990 <_strtod_l+0xaf0>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d12b      	bne.n	8005770 <_strtod_l+0x8d0>
 8005718:	9b08      	ldr	r3, [sp, #32]
 800571a:	4651      	mov	r1, sl
 800571c:	b303      	cbz	r3, 8005760 <_strtod_l+0x8c0>
 800571e:	4b9d      	ldr	r3, [pc, #628]	@ (8005994 <_strtod_l+0xaf4>)
 8005720:	465a      	mov	r2, fp
 8005722:	4013      	ands	r3, r2
 8005724:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005728:	f04f 32ff 	mov.w	r2, #4294967295
 800572c:	d81b      	bhi.n	8005766 <_strtod_l+0x8c6>
 800572e:	0d1b      	lsrs	r3, r3, #20
 8005730:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	4299      	cmp	r1, r3
 800573a:	d119      	bne.n	8005770 <_strtod_l+0x8d0>
 800573c:	4b96      	ldr	r3, [pc, #600]	@ (8005998 <_strtod_l+0xaf8>)
 800573e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005740:	429a      	cmp	r2, r3
 8005742:	d102      	bne.n	800574a <_strtod_l+0x8aa>
 8005744:	3101      	adds	r1, #1
 8005746:	f43f adce 	beq.w	80052e6 <_strtod_l+0x446>
 800574a:	4b92      	ldr	r3, [pc, #584]	@ (8005994 <_strtod_l+0xaf4>)
 800574c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800574e:	401a      	ands	r2, r3
 8005750:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005754:	f04f 0a00 	mov.w	sl, #0
 8005758:	9b08      	ldr	r3, [sp, #32]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1b9      	bne.n	80056d2 <_strtod_l+0x832>
 800575e:	e5cd      	b.n	80052fc <_strtod_l+0x45c>
 8005760:	f04f 33ff 	mov.w	r3, #4294967295
 8005764:	e7e8      	b.n	8005738 <_strtod_l+0x898>
 8005766:	4613      	mov	r3, r2
 8005768:	e7e6      	b.n	8005738 <_strtod_l+0x898>
 800576a:	ea53 030a 	orrs.w	r3, r3, sl
 800576e:	d0a2      	beq.n	80056b6 <_strtod_l+0x816>
 8005770:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005772:	b1db      	cbz	r3, 80057ac <_strtod_l+0x90c>
 8005774:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005776:	4213      	tst	r3, r2
 8005778:	d0ee      	beq.n	8005758 <_strtod_l+0x8b8>
 800577a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800577c:	9a08      	ldr	r2, [sp, #32]
 800577e:	4650      	mov	r0, sl
 8005780:	4659      	mov	r1, fp
 8005782:	b1bb      	cbz	r3, 80057b4 <_strtod_l+0x914>
 8005784:	f7ff fb6b 	bl	8004e5e <sulp>
 8005788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800578c:	ec53 2b10 	vmov	r2, r3, d0
 8005790:	f7fa fd7c 	bl	800028c <__adddf3>
 8005794:	4682      	mov	sl, r0
 8005796:	468b      	mov	fp, r1
 8005798:	e7de      	b.n	8005758 <_strtod_l+0x8b8>
 800579a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800579e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80057a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80057a6:	f04f 3aff 	mov.w	sl, #4294967295
 80057aa:	e7d5      	b.n	8005758 <_strtod_l+0x8b8>
 80057ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80057ae:	ea13 0f0a 	tst.w	r3, sl
 80057b2:	e7e1      	b.n	8005778 <_strtod_l+0x8d8>
 80057b4:	f7ff fb53 	bl	8004e5e <sulp>
 80057b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057bc:	ec53 2b10 	vmov	r2, r3, d0
 80057c0:	f7fa fd62 	bl	8000288 <__aeabi_dsub>
 80057c4:	2200      	movs	r2, #0
 80057c6:	2300      	movs	r3, #0
 80057c8:	4682      	mov	sl, r0
 80057ca:	468b      	mov	fp, r1
 80057cc:	f7fb f97c 	bl	8000ac8 <__aeabi_dcmpeq>
 80057d0:	2800      	cmp	r0, #0
 80057d2:	d0c1      	beq.n	8005758 <_strtod_l+0x8b8>
 80057d4:	e61a      	b.n	800540c <_strtod_l+0x56c>
 80057d6:	4641      	mov	r1, r8
 80057d8:	4620      	mov	r0, r4
 80057da:	f003 f911 	bl	8008a00 <__ratio>
 80057de:	ec57 6b10 	vmov	r6, r7, d0
 80057e2:	2200      	movs	r2, #0
 80057e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80057e8:	4630      	mov	r0, r6
 80057ea:	4639      	mov	r1, r7
 80057ec:	f7fb f980 	bl	8000af0 <__aeabi_dcmple>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d06f      	beq.n	80058d4 <_strtod_l+0xa34>
 80057f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d17a      	bne.n	80058f0 <_strtod_l+0xa50>
 80057fa:	f1ba 0f00 	cmp.w	sl, #0
 80057fe:	d158      	bne.n	80058b2 <_strtod_l+0xa12>
 8005800:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005802:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005806:	2b00      	cmp	r3, #0
 8005808:	d15a      	bne.n	80058c0 <_strtod_l+0xa20>
 800580a:	4b64      	ldr	r3, [pc, #400]	@ (800599c <_strtod_l+0xafc>)
 800580c:	2200      	movs	r2, #0
 800580e:	4630      	mov	r0, r6
 8005810:	4639      	mov	r1, r7
 8005812:	f7fb f963 	bl	8000adc <__aeabi_dcmplt>
 8005816:	2800      	cmp	r0, #0
 8005818:	d159      	bne.n	80058ce <_strtod_l+0xa2e>
 800581a:	4630      	mov	r0, r6
 800581c:	4639      	mov	r1, r7
 800581e:	4b60      	ldr	r3, [pc, #384]	@ (80059a0 <_strtod_l+0xb00>)
 8005820:	2200      	movs	r2, #0
 8005822:	f7fa fee9 	bl	80005f8 <__aeabi_dmul>
 8005826:	4606      	mov	r6, r0
 8005828:	460f      	mov	r7, r1
 800582a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800582e:	9606      	str	r6, [sp, #24]
 8005830:	9307      	str	r3, [sp, #28]
 8005832:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005836:	4d57      	ldr	r5, [pc, #348]	@ (8005994 <_strtod_l+0xaf4>)
 8005838:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800583c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800583e:	401d      	ands	r5, r3
 8005840:	4b58      	ldr	r3, [pc, #352]	@ (80059a4 <_strtod_l+0xb04>)
 8005842:	429d      	cmp	r5, r3
 8005844:	f040 80b2 	bne.w	80059ac <_strtod_l+0xb0c>
 8005848:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800584a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800584e:	ec4b ab10 	vmov	d0, sl, fp
 8005852:	f003 f80d 	bl	8008870 <__ulp>
 8005856:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800585a:	ec51 0b10 	vmov	r0, r1, d0
 800585e:	f7fa fecb 	bl	80005f8 <__aeabi_dmul>
 8005862:	4652      	mov	r2, sl
 8005864:	465b      	mov	r3, fp
 8005866:	f7fa fd11 	bl	800028c <__adddf3>
 800586a:	460b      	mov	r3, r1
 800586c:	4949      	ldr	r1, [pc, #292]	@ (8005994 <_strtod_l+0xaf4>)
 800586e:	4a4e      	ldr	r2, [pc, #312]	@ (80059a8 <_strtod_l+0xb08>)
 8005870:	4019      	ands	r1, r3
 8005872:	4291      	cmp	r1, r2
 8005874:	4682      	mov	sl, r0
 8005876:	d942      	bls.n	80058fe <_strtod_l+0xa5e>
 8005878:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800587a:	4b47      	ldr	r3, [pc, #284]	@ (8005998 <_strtod_l+0xaf8>)
 800587c:	429a      	cmp	r2, r3
 800587e:	d103      	bne.n	8005888 <_strtod_l+0x9e8>
 8005880:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005882:	3301      	adds	r3, #1
 8005884:	f43f ad2f 	beq.w	80052e6 <_strtod_l+0x446>
 8005888:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8005998 <_strtod_l+0xaf8>
 800588c:	f04f 3aff 	mov.w	sl, #4294967295
 8005890:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005892:	9805      	ldr	r0, [sp, #20]
 8005894:	f002 fcc0 	bl	8008218 <_Bfree>
 8005898:	9805      	ldr	r0, [sp, #20]
 800589a:	4649      	mov	r1, r9
 800589c:	f002 fcbc 	bl	8008218 <_Bfree>
 80058a0:	9805      	ldr	r0, [sp, #20]
 80058a2:	4641      	mov	r1, r8
 80058a4:	f002 fcb8 	bl	8008218 <_Bfree>
 80058a8:	9805      	ldr	r0, [sp, #20]
 80058aa:	4621      	mov	r1, r4
 80058ac:	f002 fcb4 	bl	8008218 <_Bfree>
 80058b0:	e619      	b.n	80054e6 <_strtod_l+0x646>
 80058b2:	f1ba 0f01 	cmp.w	sl, #1
 80058b6:	d103      	bne.n	80058c0 <_strtod_l+0xa20>
 80058b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f43f ada6 	beq.w	800540c <_strtod_l+0x56c>
 80058c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005970 <_strtod_l+0xad0>
 80058c4:	4f35      	ldr	r7, [pc, #212]	@ (800599c <_strtod_l+0xafc>)
 80058c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80058ca:	2600      	movs	r6, #0
 80058cc:	e7b1      	b.n	8005832 <_strtod_l+0x992>
 80058ce:	4f34      	ldr	r7, [pc, #208]	@ (80059a0 <_strtod_l+0xb00>)
 80058d0:	2600      	movs	r6, #0
 80058d2:	e7aa      	b.n	800582a <_strtod_l+0x98a>
 80058d4:	4b32      	ldr	r3, [pc, #200]	@ (80059a0 <_strtod_l+0xb00>)
 80058d6:	4630      	mov	r0, r6
 80058d8:	4639      	mov	r1, r7
 80058da:	2200      	movs	r2, #0
 80058dc:	f7fa fe8c 	bl	80005f8 <__aeabi_dmul>
 80058e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80058e2:	4606      	mov	r6, r0
 80058e4:	460f      	mov	r7, r1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d09f      	beq.n	800582a <_strtod_l+0x98a>
 80058ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80058ee:	e7a0      	b.n	8005832 <_strtod_l+0x992>
 80058f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005978 <_strtod_l+0xad8>
 80058f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80058f8:	ec57 6b17 	vmov	r6, r7, d7
 80058fc:	e799      	b.n	8005832 <_strtod_l+0x992>
 80058fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005902:	9b08      	ldr	r3, [sp, #32]
 8005904:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1c1      	bne.n	8005890 <_strtod_l+0x9f0>
 800590c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005910:	0d1b      	lsrs	r3, r3, #20
 8005912:	051b      	lsls	r3, r3, #20
 8005914:	429d      	cmp	r5, r3
 8005916:	d1bb      	bne.n	8005890 <_strtod_l+0x9f0>
 8005918:	4630      	mov	r0, r6
 800591a:	4639      	mov	r1, r7
 800591c:	f7fb f9c8 	bl	8000cb0 <__aeabi_d2lz>
 8005920:	f7fa fe3c 	bl	800059c <__aeabi_l2d>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	4630      	mov	r0, r6
 800592a:	4639      	mov	r1, r7
 800592c:	f7fa fcac 	bl	8000288 <__aeabi_dsub>
 8005930:	460b      	mov	r3, r1
 8005932:	4602      	mov	r2, r0
 8005934:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005938:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800593c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800593e:	ea46 060a 	orr.w	r6, r6, sl
 8005942:	431e      	orrs	r6, r3
 8005944:	d06f      	beq.n	8005a26 <_strtod_l+0xb86>
 8005946:	a30e      	add	r3, pc, #56	@ (adr r3, 8005980 <_strtod_l+0xae0>)
 8005948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594c:	f7fb f8c6 	bl	8000adc <__aeabi_dcmplt>
 8005950:	2800      	cmp	r0, #0
 8005952:	f47f acd3 	bne.w	80052fc <_strtod_l+0x45c>
 8005956:	a30c      	add	r3, pc, #48	@ (adr r3, 8005988 <_strtod_l+0xae8>)
 8005958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005960:	f7fb f8da 	bl	8000b18 <__aeabi_dcmpgt>
 8005964:	2800      	cmp	r0, #0
 8005966:	d093      	beq.n	8005890 <_strtod_l+0x9f0>
 8005968:	e4c8      	b.n	80052fc <_strtod_l+0x45c>
 800596a:	bf00      	nop
 800596c:	f3af 8000 	nop.w
 8005970:	00000000 	.word	0x00000000
 8005974:	bff00000 	.word	0xbff00000
 8005978:	00000000 	.word	0x00000000
 800597c:	3ff00000 	.word	0x3ff00000
 8005980:	94a03595 	.word	0x94a03595
 8005984:	3fdfffff 	.word	0x3fdfffff
 8005988:	35afe535 	.word	0x35afe535
 800598c:	3fe00000 	.word	0x3fe00000
 8005990:	000fffff 	.word	0x000fffff
 8005994:	7ff00000 	.word	0x7ff00000
 8005998:	7fefffff 	.word	0x7fefffff
 800599c:	3ff00000 	.word	0x3ff00000
 80059a0:	3fe00000 	.word	0x3fe00000
 80059a4:	7fe00000 	.word	0x7fe00000
 80059a8:	7c9fffff 	.word	0x7c9fffff
 80059ac:	9b08      	ldr	r3, [sp, #32]
 80059ae:	b323      	cbz	r3, 80059fa <_strtod_l+0xb5a>
 80059b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80059b4:	d821      	bhi.n	80059fa <_strtod_l+0xb5a>
 80059b6:	a328      	add	r3, pc, #160	@ (adr r3, 8005a58 <_strtod_l+0xbb8>)
 80059b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059bc:	4630      	mov	r0, r6
 80059be:	4639      	mov	r1, r7
 80059c0:	f7fb f896 	bl	8000af0 <__aeabi_dcmple>
 80059c4:	b1a0      	cbz	r0, 80059f0 <_strtod_l+0xb50>
 80059c6:	4639      	mov	r1, r7
 80059c8:	4630      	mov	r0, r6
 80059ca:	f7fb f8ed 	bl	8000ba8 <__aeabi_d2uiz>
 80059ce:	2801      	cmp	r0, #1
 80059d0:	bf38      	it	cc
 80059d2:	2001      	movcc	r0, #1
 80059d4:	f7fa fd96 	bl	8000504 <__aeabi_ui2d>
 80059d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059da:	4606      	mov	r6, r0
 80059dc:	460f      	mov	r7, r1
 80059de:	b9fb      	cbnz	r3, 8005a20 <_strtod_l+0xb80>
 80059e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80059e4:	9014      	str	r0, [sp, #80]	@ 0x50
 80059e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80059e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80059ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80059f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80059f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80059f6:	1b5b      	subs	r3, r3, r5
 80059f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80059fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80059fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005a02:	f002 ff35 	bl	8008870 <__ulp>
 8005a06:	4650      	mov	r0, sl
 8005a08:	ec53 2b10 	vmov	r2, r3, d0
 8005a0c:	4659      	mov	r1, fp
 8005a0e:	f7fa fdf3 	bl	80005f8 <__aeabi_dmul>
 8005a12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005a16:	f7fa fc39 	bl	800028c <__adddf3>
 8005a1a:	4682      	mov	sl, r0
 8005a1c:	468b      	mov	fp, r1
 8005a1e:	e770      	b.n	8005902 <_strtod_l+0xa62>
 8005a20:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005a24:	e7e0      	b.n	80059e8 <_strtod_l+0xb48>
 8005a26:	a30e      	add	r3, pc, #56	@ (adr r3, 8005a60 <_strtod_l+0xbc0>)
 8005a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2c:	f7fb f856 	bl	8000adc <__aeabi_dcmplt>
 8005a30:	e798      	b.n	8005964 <_strtod_l+0xac4>
 8005a32:	2300      	movs	r3, #0
 8005a34:	930e      	str	r3, [sp, #56]	@ 0x38
 8005a36:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005a38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	f7ff ba6d 	b.w	8004f1a <_strtod_l+0x7a>
 8005a40:	2a65      	cmp	r2, #101	@ 0x65
 8005a42:	f43f ab68 	beq.w	8005116 <_strtod_l+0x276>
 8005a46:	2a45      	cmp	r2, #69	@ 0x45
 8005a48:	f43f ab65 	beq.w	8005116 <_strtod_l+0x276>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	f7ff bba0 	b.w	8005192 <_strtod_l+0x2f2>
 8005a52:	bf00      	nop
 8005a54:	f3af 8000 	nop.w
 8005a58:	ffc00000 	.word	0xffc00000
 8005a5c:	41dfffff 	.word	0x41dfffff
 8005a60:	94a03595 	.word	0x94a03595
 8005a64:	3fcfffff 	.word	0x3fcfffff

08005a68 <_strtod_r>:
 8005a68:	4b01      	ldr	r3, [pc, #4]	@ (8005a70 <_strtod_r+0x8>)
 8005a6a:	f7ff ba19 	b.w	8004ea0 <_strtod_l>
 8005a6e:	bf00      	nop
 8005a70:	20000024 	.word	0x20000024

08005a74 <strtof>:
 8005a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a78:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8005b38 <strtof+0xc4>
 8005a7c:	4b29      	ldr	r3, [pc, #164]	@ (8005b24 <strtof+0xb0>)
 8005a7e:	460a      	mov	r2, r1
 8005a80:	ed2d 8b02 	vpush	{d8}
 8005a84:	4601      	mov	r1, r0
 8005a86:	f8d8 0000 	ldr.w	r0, [r8]
 8005a8a:	f7ff fa09 	bl	8004ea0 <_strtod_l>
 8005a8e:	ec55 4b10 	vmov	r4, r5, d0
 8005a92:	4622      	mov	r2, r4
 8005a94:	462b      	mov	r3, r5
 8005a96:	4620      	mov	r0, r4
 8005a98:	4629      	mov	r1, r5
 8005a9a:	f7fb f847 	bl	8000b2c <__aeabi_dcmpun>
 8005a9e:	b190      	cbz	r0, 8005ac6 <strtof+0x52>
 8005aa0:	2d00      	cmp	r5, #0
 8005aa2:	4821      	ldr	r0, [pc, #132]	@ (8005b28 <strtof+0xb4>)
 8005aa4:	da09      	bge.n	8005aba <strtof+0x46>
 8005aa6:	f001 f8cb 	bl	8006c40 <nanf>
 8005aaa:	eeb1 8a40 	vneg.f32	s16, s0
 8005aae:	eeb0 0a48 	vmov.f32	s0, s16
 8005ab2:	ecbd 8b02 	vpop	{d8}
 8005ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aba:	ecbd 8b02 	vpop	{d8}
 8005abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac2:	f001 b8bd 	b.w	8006c40 <nanf>
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	4629      	mov	r1, r5
 8005aca:	f7fb f88d 	bl	8000be8 <__aeabi_d2f>
 8005ace:	ee08 0a10 	vmov	s16, r0
 8005ad2:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8005b2c <strtof+0xb8>
 8005ad6:	eeb0 7ac8 	vabs.f32	s14, s16
 8005ada:	eeb4 7a67 	vcmp.f32	s14, s15
 8005ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae2:	dd11      	ble.n	8005b08 <strtof+0x94>
 8005ae4:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8005ae8:	4b11      	ldr	r3, [pc, #68]	@ (8005b30 <strtof+0xbc>)
 8005aea:	f04f 32ff 	mov.w	r2, #4294967295
 8005aee:	4620      	mov	r0, r4
 8005af0:	4639      	mov	r1, r7
 8005af2:	f7fb f81b 	bl	8000b2c <__aeabi_dcmpun>
 8005af6:	b980      	cbnz	r0, 8005b1a <strtof+0xa6>
 8005af8:	4b0d      	ldr	r3, [pc, #52]	@ (8005b30 <strtof+0xbc>)
 8005afa:	f04f 32ff 	mov.w	r2, #4294967295
 8005afe:	4620      	mov	r0, r4
 8005b00:	4639      	mov	r1, r7
 8005b02:	f7fa fff5 	bl	8000af0 <__aeabi_dcmple>
 8005b06:	b940      	cbnz	r0, 8005b1a <strtof+0xa6>
 8005b08:	ee18 3a10 	vmov	r3, s16
 8005b0c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8005b10:	d1cd      	bne.n	8005aae <strtof+0x3a>
 8005b12:	4b08      	ldr	r3, [pc, #32]	@ (8005b34 <strtof+0xc0>)
 8005b14:	402b      	ands	r3, r5
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0c9      	beq.n	8005aae <strtof+0x3a>
 8005b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b1e:	2222      	movs	r2, #34	@ 0x22
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	e7c4      	b.n	8005aae <strtof+0x3a>
 8005b24:	20000024 	.word	0x20000024
 8005b28:	0800a312 	.word	0x0800a312
 8005b2c:	7f7fffff 	.word	0x7f7fffff
 8005b30:	7fefffff 	.word	0x7fefffff
 8005b34:	7ff00000 	.word	0x7ff00000
 8005b38:	20000190 	.word	0x20000190

08005b3c <__cvt>:
 8005b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b40:	ec57 6b10 	vmov	r6, r7, d0
 8005b44:	2f00      	cmp	r7, #0
 8005b46:	460c      	mov	r4, r1
 8005b48:	4619      	mov	r1, r3
 8005b4a:	463b      	mov	r3, r7
 8005b4c:	bfbb      	ittet	lt
 8005b4e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005b52:	461f      	movlt	r7, r3
 8005b54:	2300      	movge	r3, #0
 8005b56:	232d      	movlt	r3, #45	@ 0x2d
 8005b58:	700b      	strb	r3, [r1, #0]
 8005b5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b5c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005b60:	4691      	mov	r9, r2
 8005b62:	f023 0820 	bic.w	r8, r3, #32
 8005b66:	bfbc      	itt	lt
 8005b68:	4632      	movlt	r2, r6
 8005b6a:	4616      	movlt	r6, r2
 8005b6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b70:	d005      	beq.n	8005b7e <__cvt+0x42>
 8005b72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005b76:	d100      	bne.n	8005b7a <__cvt+0x3e>
 8005b78:	3401      	adds	r4, #1
 8005b7a:	2102      	movs	r1, #2
 8005b7c:	e000      	b.n	8005b80 <__cvt+0x44>
 8005b7e:	2103      	movs	r1, #3
 8005b80:	ab03      	add	r3, sp, #12
 8005b82:	9301      	str	r3, [sp, #4]
 8005b84:	ab02      	add	r3, sp, #8
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	ec47 6b10 	vmov	d0, r6, r7
 8005b8c:	4653      	mov	r3, sl
 8005b8e:	4622      	mov	r2, r4
 8005b90:	f001 f8e6 	bl	8006d60 <_dtoa_r>
 8005b94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005b98:	4605      	mov	r5, r0
 8005b9a:	d119      	bne.n	8005bd0 <__cvt+0x94>
 8005b9c:	f019 0f01 	tst.w	r9, #1
 8005ba0:	d00e      	beq.n	8005bc0 <__cvt+0x84>
 8005ba2:	eb00 0904 	add.w	r9, r0, r4
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	2300      	movs	r3, #0
 8005baa:	4630      	mov	r0, r6
 8005bac:	4639      	mov	r1, r7
 8005bae:	f7fa ff8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bb2:	b108      	cbz	r0, 8005bb8 <__cvt+0x7c>
 8005bb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005bb8:	2230      	movs	r2, #48	@ 0x30
 8005bba:	9b03      	ldr	r3, [sp, #12]
 8005bbc:	454b      	cmp	r3, r9
 8005bbe:	d31e      	bcc.n	8005bfe <__cvt+0xc2>
 8005bc0:	9b03      	ldr	r3, [sp, #12]
 8005bc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005bc4:	1b5b      	subs	r3, r3, r5
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	b004      	add	sp, #16
 8005bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005bd4:	eb00 0904 	add.w	r9, r0, r4
 8005bd8:	d1e5      	bne.n	8005ba6 <__cvt+0x6a>
 8005bda:	7803      	ldrb	r3, [r0, #0]
 8005bdc:	2b30      	cmp	r3, #48	@ 0x30
 8005bde:	d10a      	bne.n	8005bf6 <__cvt+0xba>
 8005be0:	2200      	movs	r2, #0
 8005be2:	2300      	movs	r3, #0
 8005be4:	4630      	mov	r0, r6
 8005be6:	4639      	mov	r1, r7
 8005be8:	f7fa ff6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bec:	b918      	cbnz	r0, 8005bf6 <__cvt+0xba>
 8005bee:	f1c4 0401 	rsb	r4, r4, #1
 8005bf2:	f8ca 4000 	str.w	r4, [sl]
 8005bf6:	f8da 3000 	ldr.w	r3, [sl]
 8005bfa:	4499      	add	r9, r3
 8005bfc:	e7d3      	b.n	8005ba6 <__cvt+0x6a>
 8005bfe:	1c59      	adds	r1, r3, #1
 8005c00:	9103      	str	r1, [sp, #12]
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	e7d9      	b.n	8005bba <__cvt+0x7e>

08005c06 <__exponent>:
 8005c06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c08:	2900      	cmp	r1, #0
 8005c0a:	bfba      	itte	lt
 8005c0c:	4249      	neglt	r1, r1
 8005c0e:	232d      	movlt	r3, #45	@ 0x2d
 8005c10:	232b      	movge	r3, #43	@ 0x2b
 8005c12:	2909      	cmp	r1, #9
 8005c14:	7002      	strb	r2, [r0, #0]
 8005c16:	7043      	strb	r3, [r0, #1]
 8005c18:	dd29      	ble.n	8005c6e <__exponent+0x68>
 8005c1a:	f10d 0307 	add.w	r3, sp, #7
 8005c1e:	461d      	mov	r5, r3
 8005c20:	270a      	movs	r7, #10
 8005c22:	461a      	mov	r2, r3
 8005c24:	fbb1 f6f7 	udiv	r6, r1, r7
 8005c28:	fb07 1416 	mls	r4, r7, r6, r1
 8005c2c:	3430      	adds	r4, #48	@ 0x30
 8005c2e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005c32:	460c      	mov	r4, r1
 8005c34:	2c63      	cmp	r4, #99	@ 0x63
 8005c36:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c3a:	4631      	mov	r1, r6
 8005c3c:	dcf1      	bgt.n	8005c22 <__exponent+0x1c>
 8005c3e:	3130      	adds	r1, #48	@ 0x30
 8005c40:	1e94      	subs	r4, r2, #2
 8005c42:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c46:	1c41      	adds	r1, r0, #1
 8005c48:	4623      	mov	r3, r4
 8005c4a:	42ab      	cmp	r3, r5
 8005c4c:	d30a      	bcc.n	8005c64 <__exponent+0x5e>
 8005c4e:	f10d 0309 	add.w	r3, sp, #9
 8005c52:	1a9b      	subs	r3, r3, r2
 8005c54:	42ac      	cmp	r4, r5
 8005c56:	bf88      	it	hi
 8005c58:	2300      	movhi	r3, #0
 8005c5a:	3302      	adds	r3, #2
 8005c5c:	4403      	add	r3, r0
 8005c5e:	1a18      	subs	r0, r3, r0
 8005c60:	b003      	add	sp, #12
 8005c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c64:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005c68:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005c6c:	e7ed      	b.n	8005c4a <__exponent+0x44>
 8005c6e:	2330      	movs	r3, #48	@ 0x30
 8005c70:	3130      	adds	r1, #48	@ 0x30
 8005c72:	7083      	strb	r3, [r0, #2]
 8005c74:	70c1      	strb	r1, [r0, #3]
 8005c76:	1d03      	adds	r3, r0, #4
 8005c78:	e7f1      	b.n	8005c5e <__exponent+0x58>
	...

08005c7c <_printf_float>:
 8005c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c80:	b08d      	sub	sp, #52	@ 0x34
 8005c82:	460c      	mov	r4, r1
 8005c84:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005c88:	4616      	mov	r6, r2
 8005c8a:	461f      	mov	r7, r3
 8005c8c:	4605      	mov	r5, r0
 8005c8e:	f000 ff49 	bl	8006b24 <_localeconv_r>
 8005c92:	6803      	ldr	r3, [r0, #0]
 8005c94:	9304      	str	r3, [sp, #16]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fa faea 	bl	8000270 <strlen>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ca0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ca4:	9005      	str	r0, [sp, #20]
 8005ca6:	3307      	adds	r3, #7
 8005ca8:	f023 0307 	bic.w	r3, r3, #7
 8005cac:	f103 0208 	add.w	r2, r3, #8
 8005cb0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005cb4:	f8d4 b000 	ldr.w	fp, [r4]
 8005cb8:	f8c8 2000 	str.w	r2, [r8]
 8005cbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005cc0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005cc4:	9307      	str	r3, [sp, #28]
 8005cc6:	f8cd 8018 	str.w	r8, [sp, #24]
 8005cca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005cce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cd2:	4b9c      	ldr	r3, [pc, #624]	@ (8005f44 <_printf_float+0x2c8>)
 8005cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd8:	f7fa ff28 	bl	8000b2c <__aeabi_dcmpun>
 8005cdc:	bb70      	cbnz	r0, 8005d3c <_printf_float+0xc0>
 8005cde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ce2:	4b98      	ldr	r3, [pc, #608]	@ (8005f44 <_printf_float+0x2c8>)
 8005ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce8:	f7fa ff02 	bl	8000af0 <__aeabi_dcmple>
 8005cec:	bb30      	cbnz	r0, 8005d3c <_printf_float+0xc0>
 8005cee:	2200      	movs	r2, #0
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	4640      	mov	r0, r8
 8005cf4:	4649      	mov	r1, r9
 8005cf6:	f7fa fef1 	bl	8000adc <__aeabi_dcmplt>
 8005cfa:	b110      	cbz	r0, 8005d02 <_printf_float+0x86>
 8005cfc:	232d      	movs	r3, #45	@ 0x2d
 8005cfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d02:	4a91      	ldr	r2, [pc, #580]	@ (8005f48 <_printf_float+0x2cc>)
 8005d04:	4b91      	ldr	r3, [pc, #580]	@ (8005f4c <_printf_float+0x2d0>)
 8005d06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005d0a:	bf8c      	ite	hi
 8005d0c:	4690      	movhi	r8, r2
 8005d0e:	4698      	movls	r8, r3
 8005d10:	2303      	movs	r3, #3
 8005d12:	6123      	str	r3, [r4, #16]
 8005d14:	f02b 0304 	bic.w	r3, fp, #4
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	f04f 0900 	mov.w	r9, #0
 8005d1e:	9700      	str	r7, [sp, #0]
 8005d20:	4633      	mov	r3, r6
 8005d22:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005d24:	4621      	mov	r1, r4
 8005d26:	4628      	mov	r0, r5
 8005d28:	f000 f9d2 	bl	80060d0 <_printf_common>
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	f040 808d 	bne.w	8005e4c <_printf_float+0x1d0>
 8005d32:	f04f 30ff 	mov.w	r0, #4294967295
 8005d36:	b00d      	add	sp, #52	@ 0x34
 8005d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d3c:	4642      	mov	r2, r8
 8005d3e:	464b      	mov	r3, r9
 8005d40:	4640      	mov	r0, r8
 8005d42:	4649      	mov	r1, r9
 8005d44:	f7fa fef2 	bl	8000b2c <__aeabi_dcmpun>
 8005d48:	b140      	cbz	r0, 8005d5c <_printf_float+0xe0>
 8005d4a:	464b      	mov	r3, r9
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	bfbc      	itt	lt
 8005d50:	232d      	movlt	r3, #45	@ 0x2d
 8005d52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005d56:	4a7e      	ldr	r2, [pc, #504]	@ (8005f50 <_printf_float+0x2d4>)
 8005d58:	4b7e      	ldr	r3, [pc, #504]	@ (8005f54 <_printf_float+0x2d8>)
 8005d5a:	e7d4      	b.n	8005d06 <_printf_float+0x8a>
 8005d5c:	6863      	ldr	r3, [r4, #4]
 8005d5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005d62:	9206      	str	r2, [sp, #24]
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	d13b      	bne.n	8005de0 <_printf_float+0x164>
 8005d68:	2306      	movs	r3, #6
 8005d6a:	6063      	str	r3, [r4, #4]
 8005d6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005d70:	2300      	movs	r3, #0
 8005d72:	6022      	str	r2, [r4, #0]
 8005d74:	9303      	str	r3, [sp, #12]
 8005d76:	ab0a      	add	r3, sp, #40	@ 0x28
 8005d78:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005d7c:	ab09      	add	r3, sp, #36	@ 0x24
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	6861      	ldr	r1, [r4, #4]
 8005d82:	ec49 8b10 	vmov	d0, r8, r9
 8005d86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f7ff fed6 	bl	8005b3c <__cvt>
 8005d90:	9b06      	ldr	r3, [sp, #24]
 8005d92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d94:	2b47      	cmp	r3, #71	@ 0x47
 8005d96:	4680      	mov	r8, r0
 8005d98:	d129      	bne.n	8005dee <_printf_float+0x172>
 8005d9a:	1cc8      	adds	r0, r1, #3
 8005d9c:	db02      	blt.n	8005da4 <_printf_float+0x128>
 8005d9e:	6863      	ldr	r3, [r4, #4]
 8005da0:	4299      	cmp	r1, r3
 8005da2:	dd41      	ble.n	8005e28 <_printf_float+0x1ac>
 8005da4:	f1aa 0a02 	sub.w	sl, sl, #2
 8005da8:	fa5f fa8a 	uxtb.w	sl, sl
 8005dac:	3901      	subs	r1, #1
 8005dae:	4652      	mov	r2, sl
 8005db0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005db4:	9109      	str	r1, [sp, #36]	@ 0x24
 8005db6:	f7ff ff26 	bl	8005c06 <__exponent>
 8005dba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005dbc:	1813      	adds	r3, r2, r0
 8005dbe:	2a01      	cmp	r2, #1
 8005dc0:	4681      	mov	r9, r0
 8005dc2:	6123      	str	r3, [r4, #16]
 8005dc4:	dc02      	bgt.n	8005dcc <_printf_float+0x150>
 8005dc6:	6822      	ldr	r2, [r4, #0]
 8005dc8:	07d2      	lsls	r2, r2, #31
 8005dca:	d501      	bpl.n	8005dd0 <_printf_float+0x154>
 8005dcc:	3301      	adds	r3, #1
 8005dce:	6123      	str	r3, [r4, #16]
 8005dd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0a2      	beq.n	8005d1e <_printf_float+0xa2>
 8005dd8:	232d      	movs	r3, #45	@ 0x2d
 8005dda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dde:	e79e      	b.n	8005d1e <_printf_float+0xa2>
 8005de0:	9a06      	ldr	r2, [sp, #24]
 8005de2:	2a47      	cmp	r2, #71	@ 0x47
 8005de4:	d1c2      	bne.n	8005d6c <_printf_float+0xf0>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1c0      	bne.n	8005d6c <_printf_float+0xf0>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e7bd      	b.n	8005d6a <_printf_float+0xee>
 8005dee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005df2:	d9db      	bls.n	8005dac <_printf_float+0x130>
 8005df4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005df8:	d118      	bne.n	8005e2c <_printf_float+0x1b0>
 8005dfa:	2900      	cmp	r1, #0
 8005dfc:	6863      	ldr	r3, [r4, #4]
 8005dfe:	dd0b      	ble.n	8005e18 <_printf_float+0x19c>
 8005e00:	6121      	str	r1, [r4, #16]
 8005e02:	b913      	cbnz	r3, 8005e0a <_printf_float+0x18e>
 8005e04:	6822      	ldr	r2, [r4, #0]
 8005e06:	07d0      	lsls	r0, r2, #31
 8005e08:	d502      	bpl.n	8005e10 <_printf_float+0x194>
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	440b      	add	r3, r1
 8005e0e:	6123      	str	r3, [r4, #16]
 8005e10:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005e12:	f04f 0900 	mov.w	r9, #0
 8005e16:	e7db      	b.n	8005dd0 <_printf_float+0x154>
 8005e18:	b913      	cbnz	r3, 8005e20 <_printf_float+0x1a4>
 8005e1a:	6822      	ldr	r2, [r4, #0]
 8005e1c:	07d2      	lsls	r2, r2, #31
 8005e1e:	d501      	bpl.n	8005e24 <_printf_float+0x1a8>
 8005e20:	3302      	adds	r3, #2
 8005e22:	e7f4      	b.n	8005e0e <_printf_float+0x192>
 8005e24:	2301      	movs	r3, #1
 8005e26:	e7f2      	b.n	8005e0e <_printf_float+0x192>
 8005e28:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005e2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e2e:	4299      	cmp	r1, r3
 8005e30:	db05      	blt.n	8005e3e <_printf_float+0x1c2>
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	6121      	str	r1, [r4, #16]
 8005e36:	07d8      	lsls	r0, r3, #31
 8005e38:	d5ea      	bpl.n	8005e10 <_printf_float+0x194>
 8005e3a:	1c4b      	adds	r3, r1, #1
 8005e3c:	e7e7      	b.n	8005e0e <_printf_float+0x192>
 8005e3e:	2900      	cmp	r1, #0
 8005e40:	bfd4      	ite	le
 8005e42:	f1c1 0202 	rsble	r2, r1, #2
 8005e46:	2201      	movgt	r2, #1
 8005e48:	4413      	add	r3, r2
 8005e4a:	e7e0      	b.n	8005e0e <_printf_float+0x192>
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	055a      	lsls	r2, r3, #21
 8005e50:	d407      	bmi.n	8005e62 <_printf_float+0x1e6>
 8005e52:	6923      	ldr	r3, [r4, #16]
 8005e54:	4642      	mov	r2, r8
 8005e56:	4631      	mov	r1, r6
 8005e58:	4628      	mov	r0, r5
 8005e5a:	47b8      	blx	r7
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	d12b      	bne.n	8005eb8 <_printf_float+0x23c>
 8005e60:	e767      	b.n	8005d32 <_printf_float+0xb6>
 8005e62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e66:	f240 80dd 	bls.w	8006024 <_printf_float+0x3a8>
 8005e6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e6e:	2200      	movs	r2, #0
 8005e70:	2300      	movs	r3, #0
 8005e72:	f7fa fe29 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e76:	2800      	cmp	r0, #0
 8005e78:	d033      	beq.n	8005ee2 <_printf_float+0x266>
 8005e7a:	4a37      	ldr	r2, [pc, #220]	@ (8005f58 <_printf_float+0x2dc>)
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4628      	mov	r0, r5
 8005e82:	47b8      	blx	r7
 8005e84:	3001      	adds	r0, #1
 8005e86:	f43f af54 	beq.w	8005d32 <_printf_float+0xb6>
 8005e8a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005e8e:	4543      	cmp	r3, r8
 8005e90:	db02      	blt.n	8005e98 <_printf_float+0x21c>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	07d8      	lsls	r0, r3, #31
 8005e96:	d50f      	bpl.n	8005eb8 <_printf_float+0x23c>
 8005e98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	47b8      	blx	r7
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	f43f af45 	beq.w	8005d32 <_printf_float+0xb6>
 8005ea8:	f04f 0900 	mov.w	r9, #0
 8005eac:	f108 38ff 	add.w	r8, r8, #4294967295
 8005eb0:	f104 0a1a 	add.w	sl, r4, #26
 8005eb4:	45c8      	cmp	r8, r9
 8005eb6:	dc09      	bgt.n	8005ecc <_printf_float+0x250>
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	079b      	lsls	r3, r3, #30
 8005ebc:	f100 8103 	bmi.w	80060c6 <_printf_float+0x44a>
 8005ec0:	68e0      	ldr	r0, [r4, #12]
 8005ec2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ec4:	4298      	cmp	r0, r3
 8005ec6:	bfb8      	it	lt
 8005ec8:	4618      	movlt	r0, r3
 8005eca:	e734      	b.n	8005d36 <_printf_float+0xba>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	4652      	mov	r2, sl
 8005ed0:	4631      	mov	r1, r6
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	47b8      	blx	r7
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	f43f af2b 	beq.w	8005d32 <_printf_float+0xb6>
 8005edc:	f109 0901 	add.w	r9, r9, #1
 8005ee0:	e7e8      	b.n	8005eb4 <_printf_float+0x238>
 8005ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	dc39      	bgt.n	8005f5c <_printf_float+0x2e0>
 8005ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8005f58 <_printf_float+0x2dc>)
 8005eea:	2301      	movs	r3, #1
 8005eec:	4631      	mov	r1, r6
 8005eee:	4628      	mov	r0, r5
 8005ef0:	47b8      	blx	r7
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	f43f af1d 	beq.w	8005d32 <_printf_float+0xb6>
 8005ef8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005efc:	ea59 0303 	orrs.w	r3, r9, r3
 8005f00:	d102      	bne.n	8005f08 <_printf_float+0x28c>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	07d9      	lsls	r1, r3, #31
 8005f06:	d5d7      	bpl.n	8005eb8 <_printf_float+0x23c>
 8005f08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	4628      	mov	r0, r5
 8005f10:	47b8      	blx	r7
 8005f12:	3001      	adds	r0, #1
 8005f14:	f43f af0d 	beq.w	8005d32 <_printf_float+0xb6>
 8005f18:	f04f 0a00 	mov.w	sl, #0
 8005f1c:	f104 0b1a 	add.w	fp, r4, #26
 8005f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f22:	425b      	negs	r3, r3
 8005f24:	4553      	cmp	r3, sl
 8005f26:	dc01      	bgt.n	8005f2c <_printf_float+0x2b0>
 8005f28:	464b      	mov	r3, r9
 8005f2a:	e793      	b.n	8005e54 <_printf_float+0x1d8>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	465a      	mov	r2, fp
 8005f30:	4631      	mov	r1, r6
 8005f32:	4628      	mov	r0, r5
 8005f34:	47b8      	blx	r7
 8005f36:	3001      	adds	r0, #1
 8005f38:	f43f aefb 	beq.w	8005d32 <_printf_float+0xb6>
 8005f3c:	f10a 0a01 	add.w	sl, sl, #1
 8005f40:	e7ee      	b.n	8005f20 <_printf_float+0x2a4>
 8005f42:	bf00      	nop
 8005f44:	7fefffff 	.word	0x7fefffff
 8005f48:	0800a12a 	.word	0x0800a12a
 8005f4c:	0800a126 	.word	0x0800a126
 8005f50:	0800a132 	.word	0x0800a132
 8005f54:	0800a12e 	.word	0x0800a12e
 8005f58:	0800a2d2 	.word	0x0800a2d2
 8005f5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f62:	4553      	cmp	r3, sl
 8005f64:	bfa8      	it	ge
 8005f66:	4653      	movge	r3, sl
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	4699      	mov	r9, r3
 8005f6c:	dc36      	bgt.n	8005fdc <_printf_float+0x360>
 8005f6e:	f04f 0b00 	mov.w	fp, #0
 8005f72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f76:	f104 021a 	add.w	r2, r4, #26
 8005f7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f7c:	9306      	str	r3, [sp, #24]
 8005f7e:	eba3 0309 	sub.w	r3, r3, r9
 8005f82:	455b      	cmp	r3, fp
 8005f84:	dc31      	bgt.n	8005fea <_printf_float+0x36e>
 8005f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f88:	459a      	cmp	sl, r3
 8005f8a:	dc3a      	bgt.n	8006002 <_printf_float+0x386>
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	07da      	lsls	r2, r3, #31
 8005f90:	d437      	bmi.n	8006002 <_printf_float+0x386>
 8005f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f94:	ebaa 0903 	sub.w	r9, sl, r3
 8005f98:	9b06      	ldr	r3, [sp, #24]
 8005f9a:	ebaa 0303 	sub.w	r3, sl, r3
 8005f9e:	4599      	cmp	r9, r3
 8005fa0:	bfa8      	it	ge
 8005fa2:	4699      	movge	r9, r3
 8005fa4:	f1b9 0f00 	cmp.w	r9, #0
 8005fa8:	dc33      	bgt.n	8006012 <_printf_float+0x396>
 8005faa:	f04f 0800 	mov.w	r8, #0
 8005fae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fb2:	f104 0b1a 	add.w	fp, r4, #26
 8005fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fb8:	ebaa 0303 	sub.w	r3, sl, r3
 8005fbc:	eba3 0309 	sub.w	r3, r3, r9
 8005fc0:	4543      	cmp	r3, r8
 8005fc2:	f77f af79 	ble.w	8005eb8 <_printf_float+0x23c>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	465a      	mov	r2, fp
 8005fca:	4631      	mov	r1, r6
 8005fcc:	4628      	mov	r0, r5
 8005fce:	47b8      	blx	r7
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	f43f aeae 	beq.w	8005d32 <_printf_float+0xb6>
 8005fd6:	f108 0801 	add.w	r8, r8, #1
 8005fda:	e7ec      	b.n	8005fb6 <_printf_float+0x33a>
 8005fdc:	4642      	mov	r2, r8
 8005fde:	4631      	mov	r1, r6
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	47b8      	blx	r7
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d1c2      	bne.n	8005f6e <_printf_float+0x2f2>
 8005fe8:	e6a3      	b.n	8005d32 <_printf_float+0xb6>
 8005fea:	2301      	movs	r3, #1
 8005fec:	4631      	mov	r1, r6
 8005fee:	4628      	mov	r0, r5
 8005ff0:	9206      	str	r2, [sp, #24]
 8005ff2:	47b8      	blx	r7
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	f43f ae9c 	beq.w	8005d32 <_printf_float+0xb6>
 8005ffa:	9a06      	ldr	r2, [sp, #24]
 8005ffc:	f10b 0b01 	add.w	fp, fp, #1
 8006000:	e7bb      	b.n	8005f7a <_printf_float+0x2fe>
 8006002:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006006:	4631      	mov	r1, r6
 8006008:	4628      	mov	r0, r5
 800600a:	47b8      	blx	r7
 800600c:	3001      	adds	r0, #1
 800600e:	d1c0      	bne.n	8005f92 <_printf_float+0x316>
 8006010:	e68f      	b.n	8005d32 <_printf_float+0xb6>
 8006012:	9a06      	ldr	r2, [sp, #24]
 8006014:	464b      	mov	r3, r9
 8006016:	4442      	add	r2, r8
 8006018:	4631      	mov	r1, r6
 800601a:	4628      	mov	r0, r5
 800601c:	47b8      	blx	r7
 800601e:	3001      	adds	r0, #1
 8006020:	d1c3      	bne.n	8005faa <_printf_float+0x32e>
 8006022:	e686      	b.n	8005d32 <_printf_float+0xb6>
 8006024:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006028:	f1ba 0f01 	cmp.w	sl, #1
 800602c:	dc01      	bgt.n	8006032 <_printf_float+0x3b6>
 800602e:	07db      	lsls	r3, r3, #31
 8006030:	d536      	bpl.n	80060a0 <_printf_float+0x424>
 8006032:	2301      	movs	r3, #1
 8006034:	4642      	mov	r2, r8
 8006036:	4631      	mov	r1, r6
 8006038:	4628      	mov	r0, r5
 800603a:	47b8      	blx	r7
 800603c:	3001      	adds	r0, #1
 800603e:	f43f ae78 	beq.w	8005d32 <_printf_float+0xb6>
 8006042:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006046:	4631      	mov	r1, r6
 8006048:	4628      	mov	r0, r5
 800604a:	47b8      	blx	r7
 800604c:	3001      	adds	r0, #1
 800604e:	f43f ae70 	beq.w	8005d32 <_printf_float+0xb6>
 8006052:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006056:	2200      	movs	r2, #0
 8006058:	2300      	movs	r3, #0
 800605a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800605e:	f7fa fd33 	bl	8000ac8 <__aeabi_dcmpeq>
 8006062:	b9c0      	cbnz	r0, 8006096 <_printf_float+0x41a>
 8006064:	4653      	mov	r3, sl
 8006066:	f108 0201 	add.w	r2, r8, #1
 800606a:	4631      	mov	r1, r6
 800606c:	4628      	mov	r0, r5
 800606e:	47b8      	blx	r7
 8006070:	3001      	adds	r0, #1
 8006072:	d10c      	bne.n	800608e <_printf_float+0x412>
 8006074:	e65d      	b.n	8005d32 <_printf_float+0xb6>
 8006076:	2301      	movs	r3, #1
 8006078:	465a      	mov	r2, fp
 800607a:	4631      	mov	r1, r6
 800607c:	4628      	mov	r0, r5
 800607e:	47b8      	blx	r7
 8006080:	3001      	adds	r0, #1
 8006082:	f43f ae56 	beq.w	8005d32 <_printf_float+0xb6>
 8006086:	f108 0801 	add.w	r8, r8, #1
 800608a:	45d0      	cmp	r8, sl
 800608c:	dbf3      	blt.n	8006076 <_printf_float+0x3fa>
 800608e:	464b      	mov	r3, r9
 8006090:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006094:	e6df      	b.n	8005e56 <_printf_float+0x1da>
 8006096:	f04f 0800 	mov.w	r8, #0
 800609a:	f104 0b1a 	add.w	fp, r4, #26
 800609e:	e7f4      	b.n	800608a <_printf_float+0x40e>
 80060a0:	2301      	movs	r3, #1
 80060a2:	4642      	mov	r2, r8
 80060a4:	e7e1      	b.n	800606a <_printf_float+0x3ee>
 80060a6:	2301      	movs	r3, #1
 80060a8:	464a      	mov	r2, r9
 80060aa:	4631      	mov	r1, r6
 80060ac:	4628      	mov	r0, r5
 80060ae:	47b8      	blx	r7
 80060b0:	3001      	adds	r0, #1
 80060b2:	f43f ae3e 	beq.w	8005d32 <_printf_float+0xb6>
 80060b6:	f108 0801 	add.w	r8, r8, #1
 80060ba:	68e3      	ldr	r3, [r4, #12]
 80060bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060be:	1a5b      	subs	r3, r3, r1
 80060c0:	4543      	cmp	r3, r8
 80060c2:	dcf0      	bgt.n	80060a6 <_printf_float+0x42a>
 80060c4:	e6fc      	b.n	8005ec0 <_printf_float+0x244>
 80060c6:	f04f 0800 	mov.w	r8, #0
 80060ca:	f104 0919 	add.w	r9, r4, #25
 80060ce:	e7f4      	b.n	80060ba <_printf_float+0x43e>

080060d0 <_printf_common>:
 80060d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060d4:	4616      	mov	r6, r2
 80060d6:	4698      	mov	r8, r3
 80060d8:	688a      	ldr	r2, [r1, #8]
 80060da:	690b      	ldr	r3, [r1, #16]
 80060dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060e0:	4293      	cmp	r3, r2
 80060e2:	bfb8      	it	lt
 80060e4:	4613      	movlt	r3, r2
 80060e6:	6033      	str	r3, [r6, #0]
 80060e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060ec:	4607      	mov	r7, r0
 80060ee:	460c      	mov	r4, r1
 80060f0:	b10a      	cbz	r2, 80060f6 <_printf_common+0x26>
 80060f2:	3301      	adds	r3, #1
 80060f4:	6033      	str	r3, [r6, #0]
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	0699      	lsls	r1, r3, #26
 80060fa:	bf42      	ittt	mi
 80060fc:	6833      	ldrmi	r3, [r6, #0]
 80060fe:	3302      	addmi	r3, #2
 8006100:	6033      	strmi	r3, [r6, #0]
 8006102:	6825      	ldr	r5, [r4, #0]
 8006104:	f015 0506 	ands.w	r5, r5, #6
 8006108:	d106      	bne.n	8006118 <_printf_common+0x48>
 800610a:	f104 0a19 	add.w	sl, r4, #25
 800610e:	68e3      	ldr	r3, [r4, #12]
 8006110:	6832      	ldr	r2, [r6, #0]
 8006112:	1a9b      	subs	r3, r3, r2
 8006114:	42ab      	cmp	r3, r5
 8006116:	dc26      	bgt.n	8006166 <_printf_common+0x96>
 8006118:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800611c:	6822      	ldr	r2, [r4, #0]
 800611e:	3b00      	subs	r3, #0
 8006120:	bf18      	it	ne
 8006122:	2301      	movne	r3, #1
 8006124:	0692      	lsls	r2, r2, #26
 8006126:	d42b      	bmi.n	8006180 <_printf_common+0xb0>
 8006128:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800612c:	4641      	mov	r1, r8
 800612e:	4638      	mov	r0, r7
 8006130:	47c8      	blx	r9
 8006132:	3001      	adds	r0, #1
 8006134:	d01e      	beq.n	8006174 <_printf_common+0xa4>
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	6922      	ldr	r2, [r4, #16]
 800613a:	f003 0306 	and.w	r3, r3, #6
 800613e:	2b04      	cmp	r3, #4
 8006140:	bf02      	ittt	eq
 8006142:	68e5      	ldreq	r5, [r4, #12]
 8006144:	6833      	ldreq	r3, [r6, #0]
 8006146:	1aed      	subeq	r5, r5, r3
 8006148:	68a3      	ldr	r3, [r4, #8]
 800614a:	bf0c      	ite	eq
 800614c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006150:	2500      	movne	r5, #0
 8006152:	4293      	cmp	r3, r2
 8006154:	bfc4      	itt	gt
 8006156:	1a9b      	subgt	r3, r3, r2
 8006158:	18ed      	addgt	r5, r5, r3
 800615a:	2600      	movs	r6, #0
 800615c:	341a      	adds	r4, #26
 800615e:	42b5      	cmp	r5, r6
 8006160:	d11a      	bne.n	8006198 <_printf_common+0xc8>
 8006162:	2000      	movs	r0, #0
 8006164:	e008      	b.n	8006178 <_printf_common+0xa8>
 8006166:	2301      	movs	r3, #1
 8006168:	4652      	mov	r2, sl
 800616a:	4641      	mov	r1, r8
 800616c:	4638      	mov	r0, r7
 800616e:	47c8      	blx	r9
 8006170:	3001      	adds	r0, #1
 8006172:	d103      	bne.n	800617c <_printf_common+0xac>
 8006174:	f04f 30ff 	mov.w	r0, #4294967295
 8006178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800617c:	3501      	adds	r5, #1
 800617e:	e7c6      	b.n	800610e <_printf_common+0x3e>
 8006180:	18e1      	adds	r1, r4, r3
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	2030      	movs	r0, #48	@ 0x30
 8006186:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800618a:	4422      	add	r2, r4
 800618c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006190:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006194:	3302      	adds	r3, #2
 8006196:	e7c7      	b.n	8006128 <_printf_common+0x58>
 8006198:	2301      	movs	r3, #1
 800619a:	4622      	mov	r2, r4
 800619c:	4641      	mov	r1, r8
 800619e:	4638      	mov	r0, r7
 80061a0:	47c8      	blx	r9
 80061a2:	3001      	adds	r0, #1
 80061a4:	d0e6      	beq.n	8006174 <_printf_common+0xa4>
 80061a6:	3601      	adds	r6, #1
 80061a8:	e7d9      	b.n	800615e <_printf_common+0x8e>
	...

080061ac <_printf_i>:
 80061ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061b0:	7e0f      	ldrb	r7, [r1, #24]
 80061b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061b4:	2f78      	cmp	r7, #120	@ 0x78
 80061b6:	4691      	mov	r9, r2
 80061b8:	4680      	mov	r8, r0
 80061ba:	460c      	mov	r4, r1
 80061bc:	469a      	mov	sl, r3
 80061be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061c2:	d807      	bhi.n	80061d4 <_printf_i+0x28>
 80061c4:	2f62      	cmp	r7, #98	@ 0x62
 80061c6:	d80a      	bhi.n	80061de <_printf_i+0x32>
 80061c8:	2f00      	cmp	r7, #0
 80061ca:	f000 80d1 	beq.w	8006370 <_printf_i+0x1c4>
 80061ce:	2f58      	cmp	r7, #88	@ 0x58
 80061d0:	f000 80b8 	beq.w	8006344 <_printf_i+0x198>
 80061d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061dc:	e03a      	b.n	8006254 <_printf_i+0xa8>
 80061de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80061e2:	2b15      	cmp	r3, #21
 80061e4:	d8f6      	bhi.n	80061d4 <_printf_i+0x28>
 80061e6:	a101      	add	r1, pc, #4	@ (adr r1, 80061ec <_printf_i+0x40>)
 80061e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061ec:	08006245 	.word	0x08006245
 80061f0:	08006259 	.word	0x08006259
 80061f4:	080061d5 	.word	0x080061d5
 80061f8:	080061d5 	.word	0x080061d5
 80061fc:	080061d5 	.word	0x080061d5
 8006200:	080061d5 	.word	0x080061d5
 8006204:	08006259 	.word	0x08006259
 8006208:	080061d5 	.word	0x080061d5
 800620c:	080061d5 	.word	0x080061d5
 8006210:	080061d5 	.word	0x080061d5
 8006214:	080061d5 	.word	0x080061d5
 8006218:	08006357 	.word	0x08006357
 800621c:	08006283 	.word	0x08006283
 8006220:	08006311 	.word	0x08006311
 8006224:	080061d5 	.word	0x080061d5
 8006228:	080061d5 	.word	0x080061d5
 800622c:	08006379 	.word	0x08006379
 8006230:	080061d5 	.word	0x080061d5
 8006234:	08006283 	.word	0x08006283
 8006238:	080061d5 	.word	0x080061d5
 800623c:	080061d5 	.word	0x080061d5
 8006240:	08006319 	.word	0x08006319
 8006244:	6833      	ldr	r3, [r6, #0]
 8006246:	1d1a      	adds	r2, r3, #4
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6032      	str	r2, [r6, #0]
 800624c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006250:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006254:	2301      	movs	r3, #1
 8006256:	e09c      	b.n	8006392 <_printf_i+0x1e6>
 8006258:	6833      	ldr	r3, [r6, #0]
 800625a:	6820      	ldr	r0, [r4, #0]
 800625c:	1d19      	adds	r1, r3, #4
 800625e:	6031      	str	r1, [r6, #0]
 8006260:	0606      	lsls	r6, r0, #24
 8006262:	d501      	bpl.n	8006268 <_printf_i+0xbc>
 8006264:	681d      	ldr	r5, [r3, #0]
 8006266:	e003      	b.n	8006270 <_printf_i+0xc4>
 8006268:	0645      	lsls	r5, r0, #25
 800626a:	d5fb      	bpl.n	8006264 <_printf_i+0xb8>
 800626c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006270:	2d00      	cmp	r5, #0
 8006272:	da03      	bge.n	800627c <_printf_i+0xd0>
 8006274:	232d      	movs	r3, #45	@ 0x2d
 8006276:	426d      	negs	r5, r5
 8006278:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800627c:	4858      	ldr	r0, [pc, #352]	@ (80063e0 <_printf_i+0x234>)
 800627e:	230a      	movs	r3, #10
 8006280:	e011      	b.n	80062a6 <_printf_i+0xfa>
 8006282:	6821      	ldr	r1, [r4, #0]
 8006284:	6833      	ldr	r3, [r6, #0]
 8006286:	0608      	lsls	r0, r1, #24
 8006288:	f853 5b04 	ldr.w	r5, [r3], #4
 800628c:	d402      	bmi.n	8006294 <_printf_i+0xe8>
 800628e:	0649      	lsls	r1, r1, #25
 8006290:	bf48      	it	mi
 8006292:	b2ad      	uxthmi	r5, r5
 8006294:	2f6f      	cmp	r7, #111	@ 0x6f
 8006296:	4852      	ldr	r0, [pc, #328]	@ (80063e0 <_printf_i+0x234>)
 8006298:	6033      	str	r3, [r6, #0]
 800629a:	bf14      	ite	ne
 800629c:	230a      	movne	r3, #10
 800629e:	2308      	moveq	r3, #8
 80062a0:	2100      	movs	r1, #0
 80062a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062a6:	6866      	ldr	r6, [r4, #4]
 80062a8:	60a6      	str	r6, [r4, #8]
 80062aa:	2e00      	cmp	r6, #0
 80062ac:	db05      	blt.n	80062ba <_printf_i+0x10e>
 80062ae:	6821      	ldr	r1, [r4, #0]
 80062b0:	432e      	orrs	r6, r5
 80062b2:	f021 0104 	bic.w	r1, r1, #4
 80062b6:	6021      	str	r1, [r4, #0]
 80062b8:	d04b      	beq.n	8006352 <_printf_i+0x1a6>
 80062ba:	4616      	mov	r6, r2
 80062bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80062c0:	fb03 5711 	mls	r7, r3, r1, r5
 80062c4:	5dc7      	ldrb	r7, [r0, r7]
 80062c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062ca:	462f      	mov	r7, r5
 80062cc:	42bb      	cmp	r3, r7
 80062ce:	460d      	mov	r5, r1
 80062d0:	d9f4      	bls.n	80062bc <_printf_i+0x110>
 80062d2:	2b08      	cmp	r3, #8
 80062d4:	d10b      	bne.n	80062ee <_printf_i+0x142>
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	07df      	lsls	r7, r3, #31
 80062da:	d508      	bpl.n	80062ee <_printf_i+0x142>
 80062dc:	6923      	ldr	r3, [r4, #16]
 80062de:	6861      	ldr	r1, [r4, #4]
 80062e0:	4299      	cmp	r1, r3
 80062e2:	bfde      	ittt	le
 80062e4:	2330      	movle	r3, #48	@ 0x30
 80062e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062ee:	1b92      	subs	r2, r2, r6
 80062f0:	6122      	str	r2, [r4, #16]
 80062f2:	f8cd a000 	str.w	sl, [sp]
 80062f6:	464b      	mov	r3, r9
 80062f8:	aa03      	add	r2, sp, #12
 80062fa:	4621      	mov	r1, r4
 80062fc:	4640      	mov	r0, r8
 80062fe:	f7ff fee7 	bl	80060d0 <_printf_common>
 8006302:	3001      	adds	r0, #1
 8006304:	d14a      	bne.n	800639c <_printf_i+0x1f0>
 8006306:	f04f 30ff 	mov.w	r0, #4294967295
 800630a:	b004      	add	sp, #16
 800630c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	f043 0320 	orr.w	r3, r3, #32
 8006316:	6023      	str	r3, [r4, #0]
 8006318:	4832      	ldr	r0, [pc, #200]	@ (80063e4 <_printf_i+0x238>)
 800631a:	2778      	movs	r7, #120	@ 0x78
 800631c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	6831      	ldr	r1, [r6, #0]
 8006324:	061f      	lsls	r7, r3, #24
 8006326:	f851 5b04 	ldr.w	r5, [r1], #4
 800632a:	d402      	bmi.n	8006332 <_printf_i+0x186>
 800632c:	065f      	lsls	r7, r3, #25
 800632e:	bf48      	it	mi
 8006330:	b2ad      	uxthmi	r5, r5
 8006332:	6031      	str	r1, [r6, #0]
 8006334:	07d9      	lsls	r1, r3, #31
 8006336:	bf44      	itt	mi
 8006338:	f043 0320 	orrmi.w	r3, r3, #32
 800633c:	6023      	strmi	r3, [r4, #0]
 800633e:	b11d      	cbz	r5, 8006348 <_printf_i+0x19c>
 8006340:	2310      	movs	r3, #16
 8006342:	e7ad      	b.n	80062a0 <_printf_i+0xf4>
 8006344:	4826      	ldr	r0, [pc, #152]	@ (80063e0 <_printf_i+0x234>)
 8006346:	e7e9      	b.n	800631c <_printf_i+0x170>
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	f023 0320 	bic.w	r3, r3, #32
 800634e:	6023      	str	r3, [r4, #0]
 8006350:	e7f6      	b.n	8006340 <_printf_i+0x194>
 8006352:	4616      	mov	r6, r2
 8006354:	e7bd      	b.n	80062d2 <_printf_i+0x126>
 8006356:	6833      	ldr	r3, [r6, #0]
 8006358:	6825      	ldr	r5, [r4, #0]
 800635a:	6961      	ldr	r1, [r4, #20]
 800635c:	1d18      	adds	r0, r3, #4
 800635e:	6030      	str	r0, [r6, #0]
 8006360:	062e      	lsls	r6, r5, #24
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	d501      	bpl.n	800636a <_printf_i+0x1be>
 8006366:	6019      	str	r1, [r3, #0]
 8006368:	e002      	b.n	8006370 <_printf_i+0x1c4>
 800636a:	0668      	lsls	r0, r5, #25
 800636c:	d5fb      	bpl.n	8006366 <_printf_i+0x1ba>
 800636e:	8019      	strh	r1, [r3, #0]
 8006370:	2300      	movs	r3, #0
 8006372:	6123      	str	r3, [r4, #16]
 8006374:	4616      	mov	r6, r2
 8006376:	e7bc      	b.n	80062f2 <_printf_i+0x146>
 8006378:	6833      	ldr	r3, [r6, #0]
 800637a:	1d1a      	adds	r2, r3, #4
 800637c:	6032      	str	r2, [r6, #0]
 800637e:	681e      	ldr	r6, [r3, #0]
 8006380:	6862      	ldr	r2, [r4, #4]
 8006382:	2100      	movs	r1, #0
 8006384:	4630      	mov	r0, r6
 8006386:	f7f9 ff23 	bl	80001d0 <memchr>
 800638a:	b108      	cbz	r0, 8006390 <_printf_i+0x1e4>
 800638c:	1b80      	subs	r0, r0, r6
 800638e:	6060      	str	r0, [r4, #4]
 8006390:	6863      	ldr	r3, [r4, #4]
 8006392:	6123      	str	r3, [r4, #16]
 8006394:	2300      	movs	r3, #0
 8006396:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800639a:	e7aa      	b.n	80062f2 <_printf_i+0x146>
 800639c:	6923      	ldr	r3, [r4, #16]
 800639e:	4632      	mov	r2, r6
 80063a0:	4649      	mov	r1, r9
 80063a2:	4640      	mov	r0, r8
 80063a4:	47d0      	blx	sl
 80063a6:	3001      	adds	r0, #1
 80063a8:	d0ad      	beq.n	8006306 <_printf_i+0x15a>
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	079b      	lsls	r3, r3, #30
 80063ae:	d413      	bmi.n	80063d8 <_printf_i+0x22c>
 80063b0:	68e0      	ldr	r0, [r4, #12]
 80063b2:	9b03      	ldr	r3, [sp, #12]
 80063b4:	4298      	cmp	r0, r3
 80063b6:	bfb8      	it	lt
 80063b8:	4618      	movlt	r0, r3
 80063ba:	e7a6      	b.n	800630a <_printf_i+0x15e>
 80063bc:	2301      	movs	r3, #1
 80063be:	4632      	mov	r2, r6
 80063c0:	4649      	mov	r1, r9
 80063c2:	4640      	mov	r0, r8
 80063c4:	47d0      	blx	sl
 80063c6:	3001      	adds	r0, #1
 80063c8:	d09d      	beq.n	8006306 <_printf_i+0x15a>
 80063ca:	3501      	adds	r5, #1
 80063cc:	68e3      	ldr	r3, [r4, #12]
 80063ce:	9903      	ldr	r1, [sp, #12]
 80063d0:	1a5b      	subs	r3, r3, r1
 80063d2:	42ab      	cmp	r3, r5
 80063d4:	dcf2      	bgt.n	80063bc <_printf_i+0x210>
 80063d6:	e7eb      	b.n	80063b0 <_printf_i+0x204>
 80063d8:	2500      	movs	r5, #0
 80063da:	f104 0619 	add.w	r6, r4, #25
 80063de:	e7f5      	b.n	80063cc <_printf_i+0x220>
 80063e0:	0800a136 	.word	0x0800a136
 80063e4:	0800a147 	.word	0x0800a147

080063e8 <_scanf_float>:
 80063e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ec:	b087      	sub	sp, #28
 80063ee:	4691      	mov	r9, r2
 80063f0:	9303      	str	r3, [sp, #12]
 80063f2:	688b      	ldr	r3, [r1, #8]
 80063f4:	1e5a      	subs	r2, r3, #1
 80063f6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80063fa:	bf81      	itttt	hi
 80063fc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006400:	eb03 0b05 	addhi.w	fp, r3, r5
 8006404:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006408:	608b      	strhi	r3, [r1, #8]
 800640a:	680b      	ldr	r3, [r1, #0]
 800640c:	460a      	mov	r2, r1
 800640e:	f04f 0500 	mov.w	r5, #0
 8006412:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006416:	f842 3b1c 	str.w	r3, [r2], #28
 800641a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800641e:	4680      	mov	r8, r0
 8006420:	460c      	mov	r4, r1
 8006422:	bf98      	it	ls
 8006424:	f04f 0b00 	movls.w	fp, #0
 8006428:	9201      	str	r2, [sp, #4]
 800642a:	4616      	mov	r6, r2
 800642c:	46aa      	mov	sl, r5
 800642e:	462f      	mov	r7, r5
 8006430:	9502      	str	r5, [sp, #8]
 8006432:	68a2      	ldr	r2, [r4, #8]
 8006434:	b15a      	cbz	r2, 800644e <_scanf_float+0x66>
 8006436:	f8d9 3000 	ldr.w	r3, [r9]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b4e      	cmp	r3, #78	@ 0x4e
 800643e:	d863      	bhi.n	8006508 <_scanf_float+0x120>
 8006440:	2b40      	cmp	r3, #64	@ 0x40
 8006442:	d83b      	bhi.n	80064bc <_scanf_float+0xd4>
 8006444:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006448:	b2c8      	uxtb	r0, r1
 800644a:	280e      	cmp	r0, #14
 800644c:	d939      	bls.n	80064c2 <_scanf_float+0xda>
 800644e:	b11f      	cbz	r7, 8006458 <_scanf_float+0x70>
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006456:	6023      	str	r3, [r4, #0]
 8006458:	f10a 3aff 	add.w	sl, sl, #4294967295
 800645c:	f1ba 0f01 	cmp.w	sl, #1
 8006460:	f200 8114 	bhi.w	800668c <_scanf_float+0x2a4>
 8006464:	9b01      	ldr	r3, [sp, #4]
 8006466:	429e      	cmp	r6, r3
 8006468:	f200 8105 	bhi.w	8006676 <_scanf_float+0x28e>
 800646c:	2001      	movs	r0, #1
 800646e:	b007      	add	sp, #28
 8006470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006474:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006478:	2a0d      	cmp	r2, #13
 800647a:	d8e8      	bhi.n	800644e <_scanf_float+0x66>
 800647c:	a101      	add	r1, pc, #4	@ (adr r1, 8006484 <_scanf_float+0x9c>)
 800647e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006482:	bf00      	nop
 8006484:	080065cd 	.word	0x080065cd
 8006488:	0800644f 	.word	0x0800644f
 800648c:	0800644f 	.word	0x0800644f
 8006490:	0800644f 	.word	0x0800644f
 8006494:	08006629 	.word	0x08006629
 8006498:	08006603 	.word	0x08006603
 800649c:	0800644f 	.word	0x0800644f
 80064a0:	0800644f 	.word	0x0800644f
 80064a4:	080065db 	.word	0x080065db
 80064a8:	0800644f 	.word	0x0800644f
 80064ac:	0800644f 	.word	0x0800644f
 80064b0:	0800644f 	.word	0x0800644f
 80064b4:	0800644f 	.word	0x0800644f
 80064b8:	08006597 	.word	0x08006597
 80064bc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80064c0:	e7da      	b.n	8006478 <_scanf_float+0x90>
 80064c2:	290e      	cmp	r1, #14
 80064c4:	d8c3      	bhi.n	800644e <_scanf_float+0x66>
 80064c6:	a001      	add	r0, pc, #4	@ (adr r0, 80064cc <_scanf_float+0xe4>)
 80064c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80064cc:	08006587 	.word	0x08006587
 80064d0:	0800644f 	.word	0x0800644f
 80064d4:	08006587 	.word	0x08006587
 80064d8:	08006617 	.word	0x08006617
 80064dc:	0800644f 	.word	0x0800644f
 80064e0:	08006529 	.word	0x08006529
 80064e4:	0800656d 	.word	0x0800656d
 80064e8:	0800656d 	.word	0x0800656d
 80064ec:	0800656d 	.word	0x0800656d
 80064f0:	0800656d 	.word	0x0800656d
 80064f4:	0800656d 	.word	0x0800656d
 80064f8:	0800656d 	.word	0x0800656d
 80064fc:	0800656d 	.word	0x0800656d
 8006500:	0800656d 	.word	0x0800656d
 8006504:	0800656d 	.word	0x0800656d
 8006508:	2b6e      	cmp	r3, #110	@ 0x6e
 800650a:	d809      	bhi.n	8006520 <_scanf_float+0x138>
 800650c:	2b60      	cmp	r3, #96	@ 0x60
 800650e:	d8b1      	bhi.n	8006474 <_scanf_float+0x8c>
 8006510:	2b54      	cmp	r3, #84	@ 0x54
 8006512:	d07b      	beq.n	800660c <_scanf_float+0x224>
 8006514:	2b59      	cmp	r3, #89	@ 0x59
 8006516:	d19a      	bne.n	800644e <_scanf_float+0x66>
 8006518:	2d07      	cmp	r5, #7
 800651a:	d198      	bne.n	800644e <_scanf_float+0x66>
 800651c:	2508      	movs	r5, #8
 800651e:	e02f      	b.n	8006580 <_scanf_float+0x198>
 8006520:	2b74      	cmp	r3, #116	@ 0x74
 8006522:	d073      	beq.n	800660c <_scanf_float+0x224>
 8006524:	2b79      	cmp	r3, #121	@ 0x79
 8006526:	e7f6      	b.n	8006516 <_scanf_float+0x12e>
 8006528:	6821      	ldr	r1, [r4, #0]
 800652a:	05c8      	lsls	r0, r1, #23
 800652c:	d51e      	bpl.n	800656c <_scanf_float+0x184>
 800652e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006532:	6021      	str	r1, [r4, #0]
 8006534:	3701      	adds	r7, #1
 8006536:	f1bb 0f00 	cmp.w	fp, #0
 800653a:	d003      	beq.n	8006544 <_scanf_float+0x15c>
 800653c:	3201      	adds	r2, #1
 800653e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006542:	60a2      	str	r2, [r4, #8]
 8006544:	68a3      	ldr	r3, [r4, #8]
 8006546:	3b01      	subs	r3, #1
 8006548:	60a3      	str	r3, [r4, #8]
 800654a:	6923      	ldr	r3, [r4, #16]
 800654c:	3301      	adds	r3, #1
 800654e:	6123      	str	r3, [r4, #16]
 8006550:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006554:	3b01      	subs	r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	f8c9 3004 	str.w	r3, [r9, #4]
 800655c:	f340 8082 	ble.w	8006664 <_scanf_float+0x27c>
 8006560:	f8d9 3000 	ldr.w	r3, [r9]
 8006564:	3301      	adds	r3, #1
 8006566:	f8c9 3000 	str.w	r3, [r9]
 800656a:	e762      	b.n	8006432 <_scanf_float+0x4a>
 800656c:	eb1a 0105 	adds.w	r1, sl, r5
 8006570:	f47f af6d 	bne.w	800644e <_scanf_float+0x66>
 8006574:	6822      	ldr	r2, [r4, #0]
 8006576:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800657a:	6022      	str	r2, [r4, #0]
 800657c:	460d      	mov	r5, r1
 800657e:	468a      	mov	sl, r1
 8006580:	f806 3b01 	strb.w	r3, [r6], #1
 8006584:	e7de      	b.n	8006544 <_scanf_float+0x15c>
 8006586:	6822      	ldr	r2, [r4, #0]
 8006588:	0610      	lsls	r0, r2, #24
 800658a:	f57f af60 	bpl.w	800644e <_scanf_float+0x66>
 800658e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006592:	6022      	str	r2, [r4, #0]
 8006594:	e7f4      	b.n	8006580 <_scanf_float+0x198>
 8006596:	f1ba 0f00 	cmp.w	sl, #0
 800659a:	d10c      	bne.n	80065b6 <_scanf_float+0x1ce>
 800659c:	b977      	cbnz	r7, 80065bc <_scanf_float+0x1d4>
 800659e:	6822      	ldr	r2, [r4, #0]
 80065a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80065a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80065a8:	d108      	bne.n	80065bc <_scanf_float+0x1d4>
 80065aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80065ae:	6022      	str	r2, [r4, #0]
 80065b0:	f04f 0a01 	mov.w	sl, #1
 80065b4:	e7e4      	b.n	8006580 <_scanf_float+0x198>
 80065b6:	f1ba 0f02 	cmp.w	sl, #2
 80065ba:	d050      	beq.n	800665e <_scanf_float+0x276>
 80065bc:	2d01      	cmp	r5, #1
 80065be:	d002      	beq.n	80065c6 <_scanf_float+0x1de>
 80065c0:	2d04      	cmp	r5, #4
 80065c2:	f47f af44 	bne.w	800644e <_scanf_float+0x66>
 80065c6:	3501      	adds	r5, #1
 80065c8:	b2ed      	uxtb	r5, r5
 80065ca:	e7d9      	b.n	8006580 <_scanf_float+0x198>
 80065cc:	f1ba 0f01 	cmp.w	sl, #1
 80065d0:	f47f af3d 	bne.w	800644e <_scanf_float+0x66>
 80065d4:	f04f 0a02 	mov.w	sl, #2
 80065d8:	e7d2      	b.n	8006580 <_scanf_float+0x198>
 80065da:	b975      	cbnz	r5, 80065fa <_scanf_float+0x212>
 80065dc:	2f00      	cmp	r7, #0
 80065de:	f47f af37 	bne.w	8006450 <_scanf_float+0x68>
 80065e2:	6822      	ldr	r2, [r4, #0]
 80065e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80065e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80065ec:	f040 8103 	bne.w	80067f6 <_scanf_float+0x40e>
 80065f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80065f4:	6022      	str	r2, [r4, #0]
 80065f6:	2501      	movs	r5, #1
 80065f8:	e7c2      	b.n	8006580 <_scanf_float+0x198>
 80065fa:	2d03      	cmp	r5, #3
 80065fc:	d0e3      	beq.n	80065c6 <_scanf_float+0x1de>
 80065fe:	2d05      	cmp	r5, #5
 8006600:	e7df      	b.n	80065c2 <_scanf_float+0x1da>
 8006602:	2d02      	cmp	r5, #2
 8006604:	f47f af23 	bne.w	800644e <_scanf_float+0x66>
 8006608:	2503      	movs	r5, #3
 800660a:	e7b9      	b.n	8006580 <_scanf_float+0x198>
 800660c:	2d06      	cmp	r5, #6
 800660e:	f47f af1e 	bne.w	800644e <_scanf_float+0x66>
 8006612:	2507      	movs	r5, #7
 8006614:	e7b4      	b.n	8006580 <_scanf_float+0x198>
 8006616:	6822      	ldr	r2, [r4, #0]
 8006618:	0591      	lsls	r1, r2, #22
 800661a:	f57f af18 	bpl.w	800644e <_scanf_float+0x66>
 800661e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006622:	6022      	str	r2, [r4, #0]
 8006624:	9702      	str	r7, [sp, #8]
 8006626:	e7ab      	b.n	8006580 <_scanf_float+0x198>
 8006628:	6822      	ldr	r2, [r4, #0]
 800662a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800662e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006632:	d005      	beq.n	8006640 <_scanf_float+0x258>
 8006634:	0550      	lsls	r0, r2, #21
 8006636:	f57f af0a 	bpl.w	800644e <_scanf_float+0x66>
 800663a:	2f00      	cmp	r7, #0
 800663c:	f000 80db 	beq.w	80067f6 <_scanf_float+0x40e>
 8006640:	0591      	lsls	r1, r2, #22
 8006642:	bf58      	it	pl
 8006644:	9902      	ldrpl	r1, [sp, #8]
 8006646:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800664a:	bf58      	it	pl
 800664c:	1a79      	subpl	r1, r7, r1
 800664e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006652:	bf58      	it	pl
 8006654:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006658:	6022      	str	r2, [r4, #0]
 800665a:	2700      	movs	r7, #0
 800665c:	e790      	b.n	8006580 <_scanf_float+0x198>
 800665e:	f04f 0a03 	mov.w	sl, #3
 8006662:	e78d      	b.n	8006580 <_scanf_float+0x198>
 8006664:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006668:	4649      	mov	r1, r9
 800666a:	4640      	mov	r0, r8
 800666c:	4798      	blx	r3
 800666e:	2800      	cmp	r0, #0
 8006670:	f43f aedf 	beq.w	8006432 <_scanf_float+0x4a>
 8006674:	e6eb      	b.n	800644e <_scanf_float+0x66>
 8006676:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800667a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800667e:	464a      	mov	r2, r9
 8006680:	4640      	mov	r0, r8
 8006682:	4798      	blx	r3
 8006684:	6923      	ldr	r3, [r4, #16]
 8006686:	3b01      	subs	r3, #1
 8006688:	6123      	str	r3, [r4, #16]
 800668a:	e6eb      	b.n	8006464 <_scanf_float+0x7c>
 800668c:	1e6b      	subs	r3, r5, #1
 800668e:	2b06      	cmp	r3, #6
 8006690:	d824      	bhi.n	80066dc <_scanf_float+0x2f4>
 8006692:	2d02      	cmp	r5, #2
 8006694:	d836      	bhi.n	8006704 <_scanf_float+0x31c>
 8006696:	9b01      	ldr	r3, [sp, #4]
 8006698:	429e      	cmp	r6, r3
 800669a:	f67f aee7 	bls.w	800646c <_scanf_float+0x84>
 800669e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066a6:	464a      	mov	r2, r9
 80066a8:	4640      	mov	r0, r8
 80066aa:	4798      	blx	r3
 80066ac:	6923      	ldr	r3, [r4, #16]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	6123      	str	r3, [r4, #16]
 80066b2:	e7f0      	b.n	8006696 <_scanf_float+0x2ae>
 80066b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066b8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80066bc:	464a      	mov	r2, r9
 80066be:	4640      	mov	r0, r8
 80066c0:	4798      	blx	r3
 80066c2:	6923      	ldr	r3, [r4, #16]
 80066c4:	3b01      	subs	r3, #1
 80066c6:	6123      	str	r3, [r4, #16]
 80066c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066cc:	fa5f fa8a 	uxtb.w	sl, sl
 80066d0:	f1ba 0f02 	cmp.w	sl, #2
 80066d4:	d1ee      	bne.n	80066b4 <_scanf_float+0x2cc>
 80066d6:	3d03      	subs	r5, #3
 80066d8:	b2ed      	uxtb	r5, r5
 80066da:	1b76      	subs	r6, r6, r5
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	05da      	lsls	r2, r3, #23
 80066e0:	d530      	bpl.n	8006744 <_scanf_float+0x35c>
 80066e2:	055b      	lsls	r3, r3, #21
 80066e4:	d511      	bpl.n	800670a <_scanf_float+0x322>
 80066e6:	9b01      	ldr	r3, [sp, #4]
 80066e8:	429e      	cmp	r6, r3
 80066ea:	f67f aebf 	bls.w	800646c <_scanf_float+0x84>
 80066ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066f6:	464a      	mov	r2, r9
 80066f8:	4640      	mov	r0, r8
 80066fa:	4798      	blx	r3
 80066fc:	6923      	ldr	r3, [r4, #16]
 80066fe:	3b01      	subs	r3, #1
 8006700:	6123      	str	r3, [r4, #16]
 8006702:	e7f0      	b.n	80066e6 <_scanf_float+0x2fe>
 8006704:	46aa      	mov	sl, r5
 8006706:	46b3      	mov	fp, r6
 8006708:	e7de      	b.n	80066c8 <_scanf_float+0x2e0>
 800670a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800670e:	6923      	ldr	r3, [r4, #16]
 8006710:	2965      	cmp	r1, #101	@ 0x65
 8006712:	f103 33ff 	add.w	r3, r3, #4294967295
 8006716:	f106 35ff 	add.w	r5, r6, #4294967295
 800671a:	6123      	str	r3, [r4, #16]
 800671c:	d00c      	beq.n	8006738 <_scanf_float+0x350>
 800671e:	2945      	cmp	r1, #69	@ 0x45
 8006720:	d00a      	beq.n	8006738 <_scanf_float+0x350>
 8006722:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006726:	464a      	mov	r2, r9
 8006728:	4640      	mov	r0, r8
 800672a:	4798      	blx	r3
 800672c:	6923      	ldr	r3, [r4, #16]
 800672e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006732:	3b01      	subs	r3, #1
 8006734:	1eb5      	subs	r5, r6, #2
 8006736:	6123      	str	r3, [r4, #16]
 8006738:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800673c:	464a      	mov	r2, r9
 800673e:	4640      	mov	r0, r8
 8006740:	4798      	blx	r3
 8006742:	462e      	mov	r6, r5
 8006744:	6822      	ldr	r2, [r4, #0]
 8006746:	f012 0210 	ands.w	r2, r2, #16
 800674a:	d001      	beq.n	8006750 <_scanf_float+0x368>
 800674c:	2000      	movs	r0, #0
 800674e:	e68e      	b.n	800646e <_scanf_float+0x86>
 8006750:	7032      	strb	r2, [r6, #0]
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006758:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800675c:	d125      	bne.n	80067aa <_scanf_float+0x3c2>
 800675e:	9b02      	ldr	r3, [sp, #8]
 8006760:	429f      	cmp	r7, r3
 8006762:	d00a      	beq.n	800677a <_scanf_float+0x392>
 8006764:	1bda      	subs	r2, r3, r7
 8006766:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800676a:	429e      	cmp	r6, r3
 800676c:	bf28      	it	cs
 800676e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006772:	4922      	ldr	r1, [pc, #136]	@ (80067fc <_scanf_float+0x414>)
 8006774:	4630      	mov	r0, r6
 8006776:	f000 f907 	bl	8006988 <siprintf>
 800677a:	9901      	ldr	r1, [sp, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	4640      	mov	r0, r8
 8006780:	f7ff f972 	bl	8005a68 <_strtod_r>
 8006784:	9b03      	ldr	r3, [sp, #12]
 8006786:	6821      	ldr	r1, [r4, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f011 0f02 	tst.w	r1, #2
 800678e:	ec57 6b10 	vmov	r6, r7, d0
 8006792:	f103 0204 	add.w	r2, r3, #4
 8006796:	d015      	beq.n	80067c4 <_scanf_float+0x3dc>
 8006798:	9903      	ldr	r1, [sp, #12]
 800679a:	600a      	str	r2, [r1, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	e9c3 6700 	strd	r6, r7, [r3]
 80067a2:	68e3      	ldr	r3, [r4, #12]
 80067a4:	3301      	adds	r3, #1
 80067a6:	60e3      	str	r3, [r4, #12]
 80067a8:	e7d0      	b.n	800674c <_scanf_float+0x364>
 80067aa:	9b04      	ldr	r3, [sp, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d0e4      	beq.n	800677a <_scanf_float+0x392>
 80067b0:	9905      	ldr	r1, [sp, #20]
 80067b2:	230a      	movs	r3, #10
 80067b4:	3101      	adds	r1, #1
 80067b6:	4640      	mov	r0, r8
 80067b8:	f002 fa12 	bl	8008be0 <_strtol_r>
 80067bc:	9b04      	ldr	r3, [sp, #16]
 80067be:	9e05      	ldr	r6, [sp, #20]
 80067c0:	1ac2      	subs	r2, r0, r3
 80067c2:	e7d0      	b.n	8006766 <_scanf_float+0x37e>
 80067c4:	f011 0f04 	tst.w	r1, #4
 80067c8:	9903      	ldr	r1, [sp, #12]
 80067ca:	600a      	str	r2, [r1, #0]
 80067cc:	d1e6      	bne.n	800679c <_scanf_float+0x3b4>
 80067ce:	681d      	ldr	r5, [r3, #0]
 80067d0:	4632      	mov	r2, r6
 80067d2:	463b      	mov	r3, r7
 80067d4:	4630      	mov	r0, r6
 80067d6:	4639      	mov	r1, r7
 80067d8:	f7fa f9a8 	bl	8000b2c <__aeabi_dcmpun>
 80067dc:	b128      	cbz	r0, 80067ea <_scanf_float+0x402>
 80067de:	4808      	ldr	r0, [pc, #32]	@ (8006800 <_scanf_float+0x418>)
 80067e0:	f000 fa2e 	bl	8006c40 <nanf>
 80067e4:	ed85 0a00 	vstr	s0, [r5]
 80067e8:	e7db      	b.n	80067a2 <_scanf_float+0x3ba>
 80067ea:	4630      	mov	r0, r6
 80067ec:	4639      	mov	r1, r7
 80067ee:	f7fa f9fb 	bl	8000be8 <__aeabi_d2f>
 80067f2:	6028      	str	r0, [r5, #0]
 80067f4:	e7d5      	b.n	80067a2 <_scanf_float+0x3ba>
 80067f6:	2700      	movs	r7, #0
 80067f8:	e62e      	b.n	8006458 <_scanf_float+0x70>
 80067fa:	bf00      	nop
 80067fc:	0800a158 	.word	0x0800a158
 8006800:	0800a312 	.word	0x0800a312

08006804 <std>:
 8006804:	2300      	movs	r3, #0
 8006806:	b510      	push	{r4, lr}
 8006808:	4604      	mov	r4, r0
 800680a:	e9c0 3300 	strd	r3, r3, [r0]
 800680e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006812:	6083      	str	r3, [r0, #8]
 8006814:	8181      	strh	r1, [r0, #12]
 8006816:	6643      	str	r3, [r0, #100]	@ 0x64
 8006818:	81c2      	strh	r2, [r0, #14]
 800681a:	6183      	str	r3, [r0, #24]
 800681c:	4619      	mov	r1, r3
 800681e:	2208      	movs	r2, #8
 8006820:	305c      	adds	r0, #92	@ 0x5c
 8006822:	f000 f944 	bl	8006aae <memset>
 8006826:	4b0d      	ldr	r3, [pc, #52]	@ (800685c <std+0x58>)
 8006828:	6263      	str	r3, [r4, #36]	@ 0x24
 800682a:	4b0d      	ldr	r3, [pc, #52]	@ (8006860 <std+0x5c>)
 800682c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800682e:	4b0d      	ldr	r3, [pc, #52]	@ (8006864 <std+0x60>)
 8006830:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006832:	4b0d      	ldr	r3, [pc, #52]	@ (8006868 <std+0x64>)
 8006834:	6323      	str	r3, [r4, #48]	@ 0x30
 8006836:	4b0d      	ldr	r3, [pc, #52]	@ (800686c <std+0x68>)
 8006838:	6224      	str	r4, [r4, #32]
 800683a:	429c      	cmp	r4, r3
 800683c:	d006      	beq.n	800684c <std+0x48>
 800683e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006842:	4294      	cmp	r4, r2
 8006844:	d002      	beq.n	800684c <std+0x48>
 8006846:	33d0      	adds	r3, #208	@ 0xd0
 8006848:	429c      	cmp	r4, r3
 800684a:	d105      	bne.n	8006858 <std+0x54>
 800684c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006854:	f000 b9da 	b.w	8006c0c <__retarget_lock_init_recursive>
 8006858:	bd10      	pop	{r4, pc}
 800685a:	bf00      	nop
 800685c:	08006a25 	.word	0x08006a25
 8006860:	08006a4b 	.word	0x08006a4b
 8006864:	08006a83 	.word	0x08006a83
 8006868:	08006aa7 	.word	0x08006aa7
 800686c:	20000964 	.word	0x20000964

08006870 <stdio_exit_handler>:
 8006870:	4a02      	ldr	r2, [pc, #8]	@ (800687c <stdio_exit_handler+0xc>)
 8006872:	4903      	ldr	r1, [pc, #12]	@ (8006880 <stdio_exit_handler+0x10>)
 8006874:	4803      	ldr	r0, [pc, #12]	@ (8006884 <stdio_exit_handler+0x14>)
 8006876:	f000 b869 	b.w	800694c <_fwalk_sglue>
 800687a:	bf00      	nop
 800687c:	20000018 	.word	0x20000018
 8006880:	080095f1 	.word	0x080095f1
 8006884:	20000194 	.word	0x20000194

08006888 <cleanup_stdio>:
 8006888:	6841      	ldr	r1, [r0, #4]
 800688a:	4b0c      	ldr	r3, [pc, #48]	@ (80068bc <cleanup_stdio+0x34>)
 800688c:	4299      	cmp	r1, r3
 800688e:	b510      	push	{r4, lr}
 8006890:	4604      	mov	r4, r0
 8006892:	d001      	beq.n	8006898 <cleanup_stdio+0x10>
 8006894:	f002 feac 	bl	80095f0 <_fflush_r>
 8006898:	68a1      	ldr	r1, [r4, #8]
 800689a:	4b09      	ldr	r3, [pc, #36]	@ (80068c0 <cleanup_stdio+0x38>)
 800689c:	4299      	cmp	r1, r3
 800689e:	d002      	beq.n	80068a6 <cleanup_stdio+0x1e>
 80068a0:	4620      	mov	r0, r4
 80068a2:	f002 fea5 	bl	80095f0 <_fflush_r>
 80068a6:	68e1      	ldr	r1, [r4, #12]
 80068a8:	4b06      	ldr	r3, [pc, #24]	@ (80068c4 <cleanup_stdio+0x3c>)
 80068aa:	4299      	cmp	r1, r3
 80068ac:	d004      	beq.n	80068b8 <cleanup_stdio+0x30>
 80068ae:	4620      	mov	r0, r4
 80068b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068b4:	f002 be9c 	b.w	80095f0 <_fflush_r>
 80068b8:	bd10      	pop	{r4, pc}
 80068ba:	bf00      	nop
 80068bc:	20000964 	.word	0x20000964
 80068c0:	200009cc 	.word	0x200009cc
 80068c4:	20000a34 	.word	0x20000a34

080068c8 <global_stdio_init.part.0>:
 80068c8:	b510      	push	{r4, lr}
 80068ca:	4b0b      	ldr	r3, [pc, #44]	@ (80068f8 <global_stdio_init.part.0+0x30>)
 80068cc:	4c0b      	ldr	r4, [pc, #44]	@ (80068fc <global_stdio_init.part.0+0x34>)
 80068ce:	4a0c      	ldr	r2, [pc, #48]	@ (8006900 <global_stdio_init.part.0+0x38>)
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	4620      	mov	r0, r4
 80068d4:	2200      	movs	r2, #0
 80068d6:	2104      	movs	r1, #4
 80068d8:	f7ff ff94 	bl	8006804 <std>
 80068dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068e0:	2201      	movs	r2, #1
 80068e2:	2109      	movs	r1, #9
 80068e4:	f7ff ff8e 	bl	8006804 <std>
 80068e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068ec:	2202      	movs	r2, #2
 80068ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068f2:	2112      	movs	r1, #18
 80068f4:	f7ff bf86 	b.w	8006804 <std>
 80068f8:	20000a9c 	.word	0x20000a9c
 80068fc:	20000964 	.word	0x20000964
 8006900:	08006871 	.word	0x08006871

08006904 <__sfp_lock_acquire>:
 8006904:	4801      	ldr	r0, [pc, #4]	@ (800690c <__sfp_lock_acquire+0x8>)
 8006906:	f000 b982 	b.w	8006c0e <__retarget_lock_acquire_recursive>
 800690a:	bf00      	nop
 800690c:	20000aa5 	.word	0x20000aa5

08006910 <__sfp_lock_release>:
 8006910:	4801      	ldr	r0, [pc, #4]	@ (8006918 <__sfp_lock_release+0x8>)
 8006912:	f000 b97d 	b.w	8006c10 <__retarget_lock_release_recursive>
 8006916:	bf00      	nop
 8006918:	20000aa5 	.word	0x20000aa5

0800691c <__sinit>:
 800691c:	b510      	push	{r4, lr}
 800691e:	4604      	mov	r4, r0
 8006920:	f7ff fff0 	bl	8006904 <__sfp_lock_acquire>
 8006924:	6a23      	ldr	r3, [r4, #32]
 8006926:	b11b      	cbz	r3, 8006930 <__sinit+0x14>
 8006928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800692c:	f7ff bff0 	b.w	8006910 <__sfp_lock_release>
 8006930:	4b04      	ldr	r3, [pc, #16]	@ (8006944 <__sinit+0x28>)
 8006932:	6223      	str	r3, [r4, #32]
 8006934:	4b04      	ldr	r3, [pc, #16]	@ (8006948 <__sinit+0x2c>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1f5      	bne.n	8006928 <__sinit+0xc>
 800693c:	f7ff ffc4 	bl	80068c8 <global_stdio_init.part.0>
 8006940:	e7f2      	b.n	8006928 <__sinit+0xc>
 8006942:	bf00      	nop
 8006944:	08006889 	.word	0x08006889
 8006948:	20000a9c 	.word	0x20000a9c

0800694c <_fwalk_sglue>:
 800694c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006950:	4607      	mov	r7, r0
 8006952:	4688      	mov	r8, r1
 8006954:	4614      	mov	r4, r2
 8006956:	2600      	movs	r6, #0
 8006958:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800695c:	f1b9 0901 	subs.w	r9, r9, #1
 8006960:	d505      	bpl.n	800696e <_fwalk_sglue+0x22>
 8006962:	6824      	ldr	r4, [r4, #0]
 8006964:	2c00      	cmp	r4, #0
 8006966:	d1f7      	bne.n	8006958 <_fwalk_sglue+0xc>
 8006968:	4630      	mov	r0, r6
 800696a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800696e:	89ab      	ldrh	r3, [r5, #12]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d907      	bls.n	8006984 <_fwalk_sglue+0x38>
 8006974:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006978:	3301      	adds	r3, #1
 800697a:	d003      	beq.n	8006984 <_fwalk_sglue+0x38>
 800697c:	4629      	mov	r1, r5
 800697e:	4638      	mov	r0, r7
 8006980:	47c0      	blx	r8
 8006982:	4306      	orrs	r6, r0
 8006984:	3568      	adds	r5, #104	@ 0x68
 8006986:	e7e9      	b.n	800695c <_fwalk_sglue+0x10>

08006988 <siprintf>:
 8006988:	b40e      	push	{r1, r2, r3}
 800698a:	b510      	push	{r4, lr}
 800698c:	b09d      	sub	sp, #116	@ 0x74
 800698e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006990:	9002      	str	r0, [sp, #8]
 8006992:	9006      	str	r0, [sp, #24]
 8006994:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006998:	480a      	ldr	r0, [pc, #40]	@ (80069c4 <siprintf+0x3c>)
 800699a:	9107      	str	r1, [sp, #28]
 800699c:	9104      	str	r1, [sp, #16]
 800699e:	490a      	ldr	r1, [pc, #40]	@ (80069c8 <siprintf+0x40>)
 80069a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80069a4:	9105      	str	r1, [sp, #20]
 80069a6:	2400      	movs	r4, #0
 80069a8:	a902      	add	r1, sp, #8
 80069aa:	6800      	ldr	r0, [r0, #0]
 80069ac:	9301      	str	r3, [sp, #4]
 80069ae:	941b      	str	r4, [sp, #108]	@ 0x6c
 80069b0:	f002 f980 	bl	8008cb4 <_svfiprintf_r>
 80069b4:	9b02      	ldr	r3, [sp, #8]
 80069b6:	701c      	strb	r4, [r3, #0]
 80069b8:	b01d      	add	sp, #116	@ 0x74
 80069ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069be:	b003      	add	sp, #12
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	20000190 	.word	0x20000190
 80069c8:	ffff0208 	.word	0xffff0208

080069cc <siscanf>:
 80069cc:	b40e      	push	{r1, r2, r3}
 80069ce:	b570      	push	{r4, r5, r6, lr}
 80069d0:	b09d      	sub	sp, #116	@ 0x74
 80069d2:	ac21      	add	r4, sp, #132	@ 0x84
 80069d4:	2500      	movs	r5, #0
 80069d6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80069da:	f854 6b04 	ldr.w	r6, [r4], #4
 80069de:	f8ad 2014 	strh.w	r2, [sp, #20]
 80069e2:	951b      	str	r5, [sp, #108]	@ 0x6c
 80069e4:	9002      	str	r0, [sp, #8]
 80069e6:	9006      	str	r0, [sp, #24]
 80069e8:	f7f9 fc42 	bl	8000270 <strlen>
 80069ec:	4b0b      	ldr	r3, [pc, #44]	@ (8006a1c <siscanf+0x50>)
 80069ee:	9003      	str	r0, [sp, #12]
 80069f0:	9007      	str	r0, [sp, #28]
 80069f2:	480b      	ldr	r0, [pc, #44]	@ (8006a20 <siscanf+0x54>)
 80069f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80069fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80069fe:	4632      	mov	r2, r6
 8006a00:	4623      	mov	r3, r4
 8006a02:	a902      	add	r1, sp, #8
 8006a04:	6800      	ldr	r0, [r0, #0]
 8006a06:	950f      	str	r5, [sp, #60]	@ 0x3c
 8006a08:	9514      	str	r5, [sp, #80]	@ 0x50
 8006a0a:	9401      	str	r4, [sp, #4]
 8006a0c:	f002 faa8 	bl	8008f60 <__ssvfiscanf_r>
 8006a10:	b01d      	add	sp, #116	@ 0x74
 8006a12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a16:	b003      	add	sp, #12
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	08006a47 	.word	0x08006a47
 8006a20:	20000190 	.word	0x20000190

08006a24 <__sread>:
 8006a24:	b510      	push	{r4, lr}
 8006a26:	460c      	mov	r4, r1
 8006a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a2c:	f000 f8a0 	bl	8006b70 <_read_r>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	bfab      	itete	ge
 8006a34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a36:	89a3      	ldrhlt	r3, [r4, #12]
 8006a38:	181b      	addge	r3, r3, r0
 8006a3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a3e:	bfac      	ite	ge
 8006a40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a42:	81a3      	strhlt	r3, [r4, #12]
 8006a44:	bd10      	pop	{r4, pc}

08006a46 <__seofread>:
 8006a46:	2000      	movs	r0, #0
 8006a48:	4770      	bx	lr

08006a4a <__swrite>:
 8006a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a4e:	461f      	mov	r7, r3
 8006a50:	898b      	ldrh	r3, [r1, #12]
 8006a52:	05db      	lsls	r3, r3, #23
 8006a54:	4605      	mov	r5, r0
 8006a56:	460c      	mov	r4, r1
 8006a58:	4616      	mov	r6, r2
 8006a5a:	d505      	bpl.n	8006a68 <__swrite+0x1e>
 8006a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a60:	2302      	movs	r3, #2
 8006a62:	2200      	movs	r2, #0
 8006a64:	f000 f872 	bl	8006b4c <_lseek_r>
 8006a68:	89a3      	ldrh	r3, [r4, #12]
 8006a6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a72:	81a3      	strh	r3, [r4, #12]
 8006a74:	4632      	mov	r2, r6
 8006a76:	463b      	mov	r3, r7
 8006a78:	4628      	mov	r0, r5
 8006a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7e:	f000 b889 	b.w	8006b94 <_write_r>

08006a82 <__sseek>:
 8006a82:	b510      	push	{r4, lr}
 8006a84:	460c      	mov	r4, r1
 8006a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a8a:	f000 f85f 	bl	8006b4c <_lseek_r>
 8006a8e:	1c43      	adds	r3, r0, #1
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	bf15      	itete	ne
 8006a94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a9e:	81a3      	strheq	r3, [r4, #12]
 8006aa0:	bf18      	it	ne
 8006aa2:	81a3      	strhne	r3, [r4, #12]
 8006aa4:	bd10      	pop	{r4, pc}

08006aa6 <__sclose>:
 8006aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aaa:	f000 b83f 	b.w	8006b2c <_close_r>

08006aae <memset>:
 8006aae:	4402      	add	r2, r0
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d100      	bne.n	8006ab8 <memset+0xa>
 8006ab6:	4770      	bx	lr
 8006ab8:	f803 1b01 	strb.w	r1, [r3], #1
 8006abc:	e7f9      	b.n	8006ab2 <memset+0x4>

08006abe <strchr>:
 8006abe:	b2c9      	uxtb	r1, r1
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ac8:	b112      	cbz	r2, 8006ad0 <strchr+0x12>
 8006aca:	428a      	cmp	r2, r1
 8006acc:	d1f9      	bne.n	8006ac2 <strchr+0x4>
 8006ace:	4770      	bx	lr
 8006ad0:	2900      	cmp	r1, #0
 8006ad2:	bf18      	it	ne
 8006ad4:	2000      	movne	r0, #0
 8006ad6:	4770      	bx	lr

08006ad8 <strncmp>:
 8006ad8:	b510      	push	{r4, lr}
 8006ada:	b16a      	cbz	r2, 8006af8 <strncmp+0x20>
 8006adc:	3901      	subs	r1, #1
 8006ade:	1884      	adds	r4, r0, r2
 8006ae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ae4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d103      	bne.n	8006af4 <strncmp+0x1c>
 8006aec:	42a0      	cmp	r0, r4
 8006aee:	d001      	beq.n	8006af4 <strncmp+0x1c>
 8006af0:	2a00      	cmp	r2, #0
 8006af2:	d1f5      	bne.n	8006ae0 <strncmp+0x8>
 8006af4:	1ad0      	subs	r0, r2, r3
 8006af6:	bd10      	pop	{r4, pc}
 8006af8:	4610      	mov	r0, r2
 8006afa:	e7fc      	b.n	8006af6 <strncmp+0x1e>

08006afc <strncpy>:
 8006afc:	b510      	push	{r4, lr}
 8006afe:	3901      	subs	r1, #1
 8006b00:	4603      	mov	r3, r0
 8006b02:	b132      	cbz	r2, 8006b12 <strncpy+0x16>
 8006b04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006b08:	f803 4b01 	strb.w	r4, [r3], #1
 8006b0c:	3a01      	subs	r2, #1
 8006b0e:	2c00      	cmp	r4, #0
 8006b10:	d1f7      	bne.n	8006b02 <strncpy+0x6>
 8006b12:	441a      	add	r2, r3
 8006b14:	2100      	movs	r1, #0
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d100      	bne.n	8006b1c <strncpy+0x20>
 8006b1a:	bd10      	pop	{r4, pc}
 8006b1c:	f803 1b01 	strb.w	r1, [r3], #1
 8006b20:	e7f9      	b.n	8006b16 <strncpy+0x1a>
	...

08006b24 <_localeconv_r>:
 8006b24:	4800      	ldr	r0, [pc, #0]	@ (8006b28 <_localeconv_r+0x4>)
 8006b26:	4770      	bx	lr
 8006b28:	20000114 	.word	0x20000114

08006b2c <_close_r>:
 8006b2c:	b538      	push	{r3, r4, r5, lr}
 8006b2e:	4d06      	ldr	r5, [pc, #24]	@ (8006b48 <_close_r+0x1c>)
 8006b30:	2300      	movs	r3, #0
 8006b32:	4604      	mov	r4, r0
 8006b34:	4608      	mov	r0, r1
 8006b36:	602b      	str	r3, [r5, #0]
 8006b38:	f7fb f93c 	bl	8001db4 <_close>
 8006b3c:	1c43      	adds	r3, r0, #1
 8006b3e:	d102      	bne.n	8006b46 <_close_r+0x1a>
 8006b40:	682b      	ldr	r3, [r5, #0]
 8006b42:	b103      	cbz	r3, 8006b46 <_close_r+0x1a>
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	bd38      	pop	{r3, r4, r5, pc}
 8006b48:	20000aa0 	.word	0x20000aa0

08006b4c <_lseek_r>:
 8006b4c:	b538      	push	{r3, r4, r5, lr}
 8006b4e:	4d07      	ldr	r5, [pc, #28]	@ (8006b6c <_lseek_r+0x20>)
 8006b50:	4604      	mov	r4, r0
 8006b52:	4608      	mov	r0, r1
 8006b54:	4611      	mov	r1, r2
 8006b56:	2200      	movs	r2, #0
 8006b58:	602a      	str	r2, [r5, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f7fb f951 	bl	8001e02 <_lseek>
 8006b60:	1c43      	adds	r3, r0, #1
 8006b62:	d102      	bne.n	8006b6a <_lseek_r+0x1e>
 8006b64:	682b      	ldr	r3, [r5, #0]
 8006b66:	b103      	cbz	r3, 8006b6a <_lseek_r+0x1e>
 8006b68:	6023      	str	r3, [r4, #0]
 8006b6a:	bd38      	pop	{r3, r4, r5, pc}
 8006b6c:	20000aa0 	.word	0x20000aa0

08006b70 <_read_r>:
 8006b70:	b538      	push	{r3, r4, r5, lr}
 8006b72:	4d07      	ldr	r5, [pc, #28]	@ (8006b90 <_read_r+0x20>)
 8006b74:	4604      	mov	r4, r0
 8006b76:	4608      	mov	r0, r1
 8006b78:	4611      	mov	r1, r2
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	602a      	str	r2, [r5, #0]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f7fb f8df 	bl	8001d42 <_read>
 8006b84:	1c43      	adds	r3, r0, #1
 8006b86:	d102      	bne.n	8006b8e <_read_r+0x1e>
 8006b88:	682b      	ldr	r3, [r5, #0]
 8006b8a:	b103      	cbz	r3, 8006b8e <_read_r+0x1e>
 8006b8c:	6023      	str	r3, [r4, #0]
 8006b8e:	bd38      	pop	{r3, r4, r5, pc}
 8006b90:	20000aa0 	.word	0x20000aa0

08006b94 <_write_r>:
 8006b94:	b538      	push	{r3, r4, r5, lr}
 8006b96:	4d07      	ldr	r5, [pc, #28]	@ (8006bb4 <_write_r+0x20>)
 8006b98:	4604      	mov	r4, r0
 8006b9a:	4608      	mov	r0, r1
 8006b9c:	4611      	mov	r1, r2
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	602a      	str	r2, [r5, #0]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	f7fb f8ea 	bl	8001d7c <_write>
 8006ba8:	1c43      	adds	r3, r0, #1
 8006baa:	d102      	bne.n	8006bb2 <_write_r+0x1e>
 8006bac:	682b      	ldr	r3, [r5, #0]
 8006bae:	b103      	cbz	r3, 8006bb2 <_write_r+0x1e>
 8006bb0:	6023      	str	r3, [r4, #0]
 8006bb2:	bd38      	pop	{r3, r4, r5, pc}
 8006bb4:	20000aa0 	.word	0x20000aa0

08006bb8 <__errno>:
 8006bb8:	4b01      	ldr	r3, [pc, #4]	@ (8006bc0 <__errno+0x8>)
 8006bba:	6818      	ldr	r0, [r3, #0]
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	20000190 	.word	0x20000190

08006bc4 <__libc_init_array>:
 8006bc4:	b570      	push	{r4, r5, r6, lr}
 8006bc6:	4d0d      	ldr	r5, [pc, #52]	@ (8006bfc <__libc_init_array+0x38>)
 8006bc8:	4c0d      	ldr	r4, [pc, #52]	@ (8006c00 <__libc_init_array+0x3c>)
 8006bca:	1b64      	subs	r4, r4, r5
 8006bcc:	10a4      	asrs	r4, r4, #2
 8006bce:	2600      	movs	r6, #0
 8006bd0:	42a6      	cmp	r6, r4
 8006bd2:	d109      	bne.n	8006be8 <__libc_init_array+0x24>
 8006bd4:	4d0b      	ldr	r5, [pc, #44]	@ (8006c04 <__libc_init_array+0x40>)
 8006bd6:	4c0c      	ldr	r4, [pc, #48]	@ (8006c08 <__libc_init_array+0x44>)
 8006bd8:	f003 f99c 	bl	8009f14 <_init>
 8006bdc:	1b64      	subs	r4, r4, r5
 8006bde:	10a4      	asrs	r4, r4, #2
 8006be0:	2600      	movs	r6, #0
 8006be2:	42a6      	cmp	r6, r4
 8006be4:	d105      	bne.n	8006bf2 <__libc_init_array+0x2e>
 8006be6:	bd70      	pop	{r4, r5, r6, pc}
 8006be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bec:	4798      	blx	r3
 8006bee:	3601      	adds	r6, #1
 8006bf0:	e7ee      	b.n	8006bd0 <__libc_init_array+0xc>
 8006bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bf6:	4798      	blx	r3
 8006bf8:	3601      	adds	r6, #1
 8006bfa:	e7f2      	b.n	8006be2 <__libc_init_array+0x1e>
 8006bfc:	0800a574 	.word	0x0800a574
 8006c00:	0800a574 	.word	0x0800a574
 8006c04:	0800a574 	.word	0x0800a574
 8006c08:	0800a578 	.word	0x0800a578

08006c0c <__retarget_lock_init_recursive>:
 8006c0c:	4770      	bx	lr

08006c0e <__retarget_lock_acquire_recursive>:
 8006c0e:	4770      	bx	lr

08006c10 <__retarget_lock_release_recursive>:
 8006c10:	4770      	bx	lr

08006c12 <memcpy>:
 8006c12:	440a      	add	r2, r1
 8006c14:	4291      	cmp	r1, r2
 8006c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c1a:	d100      	bne.n	8006c1e <memcpy+0xc>
 8006c1c:	4770      	bx	lr
 8006c1e:	b510      	push	{r4, lr}
 8006c20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c28:	4291      	cmp	r1, r2
 8006c2a:	d1f9      	bne.n	8006c20 <memcpy+0xe>
 8006c2c:	bd10      	pop	{r4, pc}
	...

08006c30 <nan>:
 8006c30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006c38 <nan+0x8>
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	00000000 	.word	0x00000000
 8006c3c:	7ff80000 	.word	0x7ff80000

08006c40 <nanf>:
 8006c40:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006c48 <nanf+0x8>
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	7fc00000 	.word	0x7fc00000

08006c4c <quorem>:
 8006c4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c50:	6903      	ldr	r3, [r0, #16]
 8006c52:	690c      	ldr	r4, [r1, #16]
 8006c54:	42a3      	cmp	r3, r4
 8006c56:	4607      	mov	r7, r0
 8006c58:	db7e      	blt.n	8006d58 <quorem+0x10c>
 8006c5a:	3c01      	subs	r4, #1
 8006c5c:	f101 0814 	add.w	r8, r1, #20
 8006c60:	00a3      	lsls	r3, r4, #2
 8006c62:	f100 0514 	add.w	r5, r0, #20
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c6c:	9301      	str	r3, [sp, #4]
 8006c6e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c76:	3301      	adds	r3, #1
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c7e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c82:	d32e      	bcc.n	8006ce2 <quorem+0x96>
 8006c84:	f04f 0a00 	mov.w	sl, #0
 8006c88:	46c4      	mov	ip, r8
 8006c8a:	46ae      	mov	lr, r5
 8006c8c:	46d3      	mov	fp, sl
 8006c8e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c92:	b298      	uxth	r0, r3
 8006c94:	fb06 a000 	mla	r0, r6, r0, sl
 8006c98:	0c02      	lsrs	r2, r0, #16
 8006c9a:	0c1b      	lsrs	r3, r3, #16
 8006c9c:	fb06 2303 	mla	r3, r6, r3, r2
 8006ca0:	f8de 2000 	ldr.w	r2, [lr]
 8006ca4:	b280      	uxth	r0, r0
 8006ca6:	b292      	uxth	r2, r2
 8006ca8:	1a12      	subs	r2, r2, r0
 8006caa:	445a      	add	r2, fp
 8006cac:	f8de 0000 	ldr.w	r0, [lr]
 8006cb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006cba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006cbe:	b292      	uxth	r2, r2
 8006cc0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006cc4:	45e1      	cmp	r9, ip
 8006cc6:	f84e 2b04 	str.w	r2, [lr], #4
 8006cca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006cce:	d2de      	bcs.n	8006c8e <quorem+0x42>
 8006cd0:	9b00      	ldr	r3, [sp, #0]
 8006cd2:	58eb      	ldr	r3, [r5, r3]
 8006cd4:	b92b      	cbnz	r3, 8006ce2 <quorem+0x96>
 8006cd6:	9b01      	ldr	r3, [sp, #4]
 8006cd8:	3b04      	subs	r3, #4
 8006cda:	429d      	cmp	r5, r3
 8006cdc:	461a      	mov	r2, r3
 8006cde:	d32f      	bcc.n	8006d40 <quorem+0xf4>
 8006ce0:	613c      	str	r4, [r7, #16]
 8006ce2:	4638      	mov	r0, r7
 8006ce4:	f001 fd14 	bl	8008710 <__mcmp>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	db25      	blt.n	8006d38 <quorem+0xec>
 8006cec:	4629      	mov	r1, r5
 8006cee:	2000      	movs	r0, #0
 8006cf0:	f858 2b04 	ldr.w	r2, [r8], #4
 8006cf4:	f8d1 c000 	ldr.w	ip, [r1]
 8006cf8:	fa1f fe82 	uxth.w	lr, r2
 8006cfc:	fa1f f38c 	uxth.w	r3, ip
 8006d00:	eba3 030e 	sub.w	r3, r3, lr
 8006d04:	4403      	add	r3, r0
 8006d06:	0c12      	lsrs	r2, r2, #16
 8006d08:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006d0c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d16:	45c1      	cmp	r9, r8
 8006d18:	f841 3b04 	str.w	r3, [r1], #4
 8006d1c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006d20:	d2e6      	bcs.n	8006cf0 <quorem+0xa4>
 8006d22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d2a:	b922      	cbnz	r2, 8006d36 <quorem+0xea>
 8006d2c:	3b04      	subs	r3, #4
 8006d2e:	429d      	cmp	r5, r3
 8006d30:	461a      	mov	r2, r3
 8006d32:	d30b      	bcc.n	8006d4c <quorem+0x100>
 8006d34:	613c      	str	r4, [r7, #16]
 8006d36:	3601      	adds	r6, #1
 8006d38:	4630      	mov	r0, r6
 8006d3a:	b003      	add	sp, #12
 8006d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d40:	6812      	ldr	r2, [r2, #0]
 8006d42:	3b04      	subs	r3, #4
 8006d44:	2a00      	cmp	r2, #0
 8006d46:	d1cb      	bne.n	8006ce0 <quorem+0x94>
 8006d48:	3c01      	subs	r4, #1
 8006d4a:	e7c6      	b.n	8006cda <quorem+0x8e>
 8006d4c:	6812      	ldr	r2, [r2, #0]
 8006d4e:	3b04      	subs	r3, #4
 8006d50:	2a00      	cmp	r2, #0
 8006d52:	d1ef      	bne.n	8006d34 <quorem+0xe8>
 8006d54:	3c01      	subs	r4, #1
 8006d56:	e7ea      	b.n	8006d2e <quorem+0xe2>
 8006d58:	2000      	movs	r0, #0
 8006d5a:	e7ee      	b.n	8006d3a <quorem+0xee>
 8006d5c:	0000      	movs	r0, r0
	...

08006d60 <_dtoa_r>:
 8006d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d64:	69c7      	ldr	r7, [r0, #28]
 8006d66:	b097      	sub	sp, #92	@ 0x5c
 8006d68:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006d6c:	ec55 4b10 	vmov	r4, r5, d0
 8006d70:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006d72:	9107      	str	r1, [sp, #28]
 8006d74:	4681      	mov	r9, r0
 8006d76:	920c      	str	r2, [sp, #48]	@ 0x30
 8006d78:	9311      	str	r3, [sp, #68]	@ 0x44
 8006d7a:	b97f      	cbnz	r7, 8006d9c <_dtoa_r+0x3c>
 8006d7c:	2010      	movs	r0, #16
 8006d7e:	f001 f943 	bl	8008008 <malloc>
 8006d82:	4602      	mov	r2, r0
 8006d84:	f8c9 001c 	str.w	r0, [r9, #28]
 8006d88:	b920      	cbnz	r0, 8006d94 <_dtoa_r+0x34>
 8006d8a:	4ba9      	ldr	r3, [pc, #676]	@ (8007030 <_dtoa_r+0x2d0>)
 8006d8c:	21ef      	movs	r1, #239	@ 0xef
 8006d8e:	48a9      	ldr	r0, [pc, #676]	@ (8007034 <_dtoa_r+0x2d4>)
 8006d90:	f002 fcf4 	bl	800977c <__assert_func>
 8006d94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006d98:	6007      	str	r7, [r0, #0]
 8006d9a:	60c7      	str	r7, [r0, #12]
 8006d9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006da0:	6819      	ldr	r1, [r3, #0]
 8006da2:	b159      	cbz	r1, 8006dbc <_dtoa_r+0x5c>
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	604a      	str	r2, [r1, #4]
 8006da8:	2301      	movs	r3, #1
 8006daa:	4093      	lsls	r3, r2
 8006dac:	608b      	str	r3, [r1, #8]
 8006dae:	4648      	mov	r0, r9
 8006db0:	f001 fa32 	bl	8008218 <_Bfree>
 8006db4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006db8:	2200      	movs	r2, #0
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	1e2b      	subs	r3, r5, #0
 8006dbe:	bfb9      	ittee	lt
 8006dc0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006dc4:	9305      	strlt	r3, [sp, #20]
 8006dc6:	2300      	movge	r3, #0
 8006dc8:	6033      	strge	r3, [r6, #0]
 8006dca:	9f05      	ldr	r7, [sp, #20]
 8006dcc:	4b9a      	ldr	r3, [pc, #616]	@ (8007038 <_dtoa_r+0x2d8>)
 8006dce:	bfbc      	itt	lt
 8006dd0:	2201      	movlt	r2, #1
 8006dd2:	6032      	strlt	r2, [r6, #0]
 8006dd4:	43bb      	bics	r3, r7
 8006dd6:	d112      	bne.n	8006dfe <_dtoa_r+0x9e>
 8006dd8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006dda:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006dde:	6013      	str	r3, [r2, #0]
 8006de0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006de4:	4323      	orrs	r3, r4
 8006de6:	f000 855a 	beq.w	800789e <_dtoa_r+0xb3e>
 8006dea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006dec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800704c <_dtoa_r+0x2ec>
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 855c 	beq.w	80078ae <_dtoa_r+0xb4e>
 8006df6:	f10a 0303 	add.w	r3, sl, #3
 8006dfa:	f000 bd56 	b.w	80078aa <_dtoa_r+0xb4a>
 8006dfe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006e02:	2200      	movs	r2, #0
 8006e04:	ec51 0b17 	vmov	r0, r1, d7
 8006e08:	2300      	movs	r3, #0
 8006e0a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006e0e:	f7f9 fe5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e12:	4680      	mov	r8, r0
 8006e14:	b158      	cbz	r0, 8006e2e <_dtoa_r+0xce>
 8006e16:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006e18:	2301      	movs	r3, #1
 8006e1a:	6013      	str	r3, [r2, #0]
 8006e1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e1e:	b113      	cbz	r3, 8006e26 <_dtoa_r+0xc6>
 8006e20:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006e22:	4b86      	ldr	r3, [pc, #536]	@ (800703c <_dtoa_r+0x2dc>)
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007050 <_dtoa_r+0x2f0>
 8006e2a:	f000 bd40 	b.w	80078ae <_dtoa_r+0xb4e>
 8006e2e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006e32:	aa14      	add	r2, sp, #80	@ 0x50
 8006e34:	a915      	add	r1, sp, #84	@ 0x54
 8006e36:	4648      	mov	r0, r9
 8006e38:	f001 fd8a 	bl	8008950 <__d2b>
 8006e3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006e40:	9002      	str	r0, [sp, #8]
 8006e42:	2e00      	cmp	r6, #0
 8006e44:	d078      	beq.n	8006f38 <_dtoa_r+0x1d8>
 8006e46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e48:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006e54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006e58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006e5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006e60:	4619      	mov	r1, r3
 8006e62:	2200      	movs	r2, #0
 8006e64:	4b76      	ldr	r3, [pc, #472]	@ (8007040 <_dtoa_r+0x2e0>)
 8006e66:	f7f9 fa0f 	bl	8000288 <__aeabi_dsub>
 8006e6a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007018 <_dtoa_r+0x2b8>)
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	f7f9 fbc2 	bl	80005f8 <__aeabi_dmul>
 8006e74:	a36a      	add	r3, pc, #424	@ (adr r3, 8007020 <_dtoa_r+0x2c0>)
 8006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7a:	f7f9 fa07 	bl	800028c <__adddf3>
 8006e7e:	4604      	mov	r4, r0
 8006e80:	4630      	mov	r0, r6
 8006e82:	460d      	mov	r5, r1
 8006e84:	f7f9 fb4e 	bl	8000524 <__aeabi_i2d>
 8006e88:	a367      	add	r3, pc, #412	@ (adr r3, 8007028 <_dtoa_r+0x2c8>)
 8006e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8e:	f7f9 fbb3 	bl	80005f8 <__aeabi_dmul>
 8006e92:	4602      	mov	r2, r0
 8006e94:	460b      	mov	r3, r1
 8006e96:	4620      	mov	r0, r4
 8006e98:	4629      	mov	r1, r5
 8006e9a:	f7f9 f9f7 	bl	800028c <__adddf3>
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	460d      	mov	r5, r1
 8006ea2:	f7f9 fe59 	bl	8000b58 <__aeabi_d2iz>
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	4607      	mov	r7, r0
 8006eaa:	2300      	movs	r3, #0
 8006eac:	4620      	mov	r0, r4
 8006eae:	4629      	mov	r1, r5
 8006eb0:	f7f9 fe14 	bl	8000adc <__aeabi_dcmplt>
 8006eb4:	b140      	cbz	r0, 8006ec8 <_dtoa_r+0x168>
 8006eb6:	4638      	mov	r0, r7
 8006eb8:	f7f9 fb34 	bl	8000524 <__aeabi_i2d>
 8006ebc:	4622      	mov	r2, r4
 8006ebe:	462b      	mov	r3, r5
 8006ec0:	f7f9 fe02 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ec4:	b900      	cbnz	r0, 8006ec8 <_dtoa_r+0x168>
 8006ec6:	3f01      	subs	r7, #1
 8006ec8:	2f16      	cmp	r7, #22
 8006eca:	d852      	bhi.n	8006f72 <_dtoa_r+0x212>
 8006ecc:	4b5d      	ldr	r3, [pc, #372]	@ (8007044 <_dtoa_r+0x2e4>)
 8006ece:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006eda:	f7f9 fdff 	bl	8000adc <__aeabi_dcmplt>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	d049      	beq.n	8006f76 <_dtoa_r+0x216>
 8006ee2:	3f01      	subs	r7, #1
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ee8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006eea:	1b9b      	subs	r3, r3, r6
 8006eec:	1e5a      	subs	r2, r3, #1
 8006eee:	bf45      	ittet	mi
 8006ef0:	f1c3 0301 	rsbmi	r3, r3, #1
 8006ef4:	9300      	strmi	r3, [sp, #0]
 8006ef6:	2300      	movpl	r3, #0
 8006ef8:	2300      	movmi	r3, #0
 8006efa:	9206      	str	r2, [sp, #24]
 8006efc:	bf54      	ite	pl
 8006efe:	9300      	strpl	r3, [sp, #0]
 8006f00:	9306      	strmi	r3, [sp, #24]
 8006f02:	2f00      	cmp	r7, #0
 8006f04:	db39      	blt.n	8006f7a <_dtoa_r+0x21a>
 8006f06:	9b06      	ldr	r3, [sp, #24]
 8006f08:	970d      	str	r7, [sp, #52]	@ 0x34
 8006f0a:	443b      	add	r3, r7
 8006f0c:	9306      	str	r3, [sp, #24]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	9308      	str	r3, [sp, #32]
 8006f12:	9b07      	ldr	r3, [sp, #28]
 8006f14:	2b09      	cmp	r3, #9
 8006f16:	d863      	bhi.n	8006fe0 <_dtoa_r+0x280>
 8006f18:	2b05      	cmp	r3, #5
 8006f1a:	bfc4      	itt	gt
 8006f1c:	3b04      	subgt	r3, #4
 8006f1e:	9307      	strgt	r3, [sp, #28]
 8006f20:	9b07      	ldr	r3, [sp, #28]
 8006f22:	f1a3 0302 	sub.w	r3, r3, #2
 8006f26:	bfcc      	ite	gt
 8006f28:	2400      	movgt	r4, #0
 8006f2a:	2401      	movle	r4, #1
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d863      	bhi.n	8006ff8 <_dtoa_r+0x298>
 8006f30:	e8df f003 	tbb	[pc, r3]
 8006f34:	2b375452 	.word	0x2b375452
 8006f38:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006f3c:	441e      	add	r6, r3
 8006f3e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006f42:	2b20      	cmp	r3, #32
 8006f44:	bfc1      	itttt	gt
 8006f46:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006f4a:	409f      	lslgt	r7, r3
 8006f4c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006f50:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006f54:	bfd6      	itet	le
 8006f56:	f1c3 0320 	rsble	r3, r3, #32
 8006f5a:	ea47 0003 	orrgt.w	r0, r7, r3
 8006f5e:	fa04 f003 	lslle.w	r0, r4, r3
 8006f62:	f7f9 facf 	bl	8000504 <__aeabi_ui2d>
 8006f66:	2201      	movs	r2, #1
 8006f68:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006f6c:	3e01      	subs	r6, #1
 8006f6e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006f70:	e776      	b.n	8006e60 <_dtoa_r+0x100>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e7b7      	b.n	8006ee6 <_dtoa_r+0x186>
 8006f76:	9010      	str	r0, [sp, #64]	@ 0x40
 8006f78:	e7b6      	b.n	8006ee8 <_dtoa_r+0x188>
 8006f7a:	9b00      	ldr	r3, [sp, #0]
 8006f7c:	1bdb      	subs	r3, r3, r7
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	427b      	negs	r3, r7
 8006f82:	9308      	str	r3, [sp, #32]
 8006f84:	2300      	movs	r3, #0
 8006f86:	930d      	str	r3, [sp, #52]	@ 0x34
 8006f88:	e7c3      	b.n	8006f12 <_dtoa_r+0x1b2>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f90:	eb07 0b03 	add.w	fp, r7, r3
 8006f94:	f10b 0301 	add.w	r3, fp, #1
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	9303      	str	r3, [sp, #12]
 8006f9c:	bfb8      	it	lt
 8006f9e:	2301      	movlt	r3, #1
 8006fa0:	e006      	b.n	8006fb0 <_dtoa_r+0x250>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fa6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	dd28      	ble.n	8006ffe <_dtoa_r+0x29e>
 8006fac:	469b      	mov	fp, r3
 8006fae:	9303      	str	r3, [sp, #12]
 8006fb0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	2204      	movs	r2, #4
 8006fb8:	f102 0514 	add.w	r5, r2, #20
 8006fbc:	429d      	cmp	r5, r3
 8006fbe:	d926      	bls.n	800700e <_dtoa_r+0x2ae>
 8006fc0:	6041      	str	r1, [r0, #4]
 8006fc2:	4648      	mov	r0, r9
 8006fc4:	f001 f8e8 	bl	8008198 <_Balloc>
 8006fc8:	4682      	mov	sl, r0
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	d142      	bne.n	8007054 <_dtoa_r+0x2f4>
 8006fce:	4b1e      	ldr	r3, [pc, #120]	@ (8007048 <_dtoa_r+0x2e8>)
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	f240 11af 	movw	r1, #431	@ 0x1af
 8006fd6:	e6da      	b.n	8006d8e <_dtoa_r+0x2e>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	e7e3      	b.n	8006fa4 <_dtoa_r+0x244>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	e7d5      	b.n	8006f8c <_dtoa_r+0x22c>
 8006fe0:	2401      	movs	r4, #1
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	9307      	str	r3, [sp, #28]
 8006fe6:	9409      	str	r4, [sp, #36]	@ 0x24
 8006fe8:	f04f 3bff 	mov.w	fp, #4294967295
 8006fec:	2200      	movs	r2, #0
 8006fee:	f8cd b00c 	str.w	fp, [sp, #12]
 8006ff2:	2312      	movs	r3, #18
 8006ff4:	920c      	str	r2, [sp, #48]	@ 0x30
 8006ff6:	e7db      	b.n	8006fb0 <_dtoa_r+0x250>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ffc:	e7f4      	b.n	8006fe8 <_dtoa_r+0x288>
 8006ffe:	f04f 0b01 	mov.w	fp, #1
 8007002:	f8cd b00c 	str.w	fp, [sp, #12]
 8007006:	465b      	mov	r3, fp
 8007008:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800700c:	e7d0      	b.n	8006fb0 <_dtoa_r+0x250>
 800700e:	3101      	adds	r1, #1
 8007010:	0052      	lsls	r2, r2, #1
 8007012:	e7d1      	b.n	8006fb8 <_dtoa_r+0x258>
 8007014:	f3af 8000 	nop.w
 8007018:	636f4361 	.word	0x636f4361
 800701c:	3fd287a7 	.word	0x3fd287a7
 8007020:	8b60c8b3 	.word	0x8b60c8b3
 8007024:	3fc68a28 	.word	0x3fc68a28
 8007028:	509f79fb 	.word	0x509f79fb
 800702c:	3fd34413 	.word	0x3fd34413
 8007030:	0800a172 	.word	0x0800a172
 8007034:	0800a189 	.word	0x0800a189
 8007038:	7ff00000 	.word	0x7ff00000
 800703c:	0800a2d3 	.word	0x0800a2d3
 8007040:	3ff80000 	.word	0x3ff80000
 8007044:	0800a3a0 	.word	0x0800a3a0
 8007048:	0800a1e1 	.word	0x0800a1e1
 800704c:	0800a16e 	.word	0x0800a16e
 8007050:	0800a2d2 	.word	0x0800a2d2
 8007054:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007058:	6018      	str	r0, [r3, #0]
 800705a:	9b03      	ldr	r3, [sp, #12]
 800705c:	2b0e      	cmp	r3, #14
 800705e:	f200 80a1 	bhi.w	80071a4 <_dtoa_r+0x444>
 8007062:	2c00      	cmp	r4, #0
 8007064:	f000 809e 	beq.w	80071a4 <_dtoa_r+0x444>
 8007068:	2f00      	cmp	r7, #0
 800706a:	dd33      	ble.n	80070d4 <_dtoa_r+0x374>
 800706c:	4b9c      	ldr	r3, [pc, #624]	@ (80072e0 <_dtoa_r+0x580>)
 800706e:	f007 020f 	and.w	r2, r7, #15
 8007072:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007076:	ed93 7b00 	vldr	d7, [r3]
 800707a:	05f8      	lsls	r0, r7, #23
 800707c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007080:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007084:	d516      	bpl.n	80070b4 <_dtoa_r+0x354>
 8007086:	4b97      	ldr	r3, [pc, #604]	@ (80072e4 <_dtoa_r+0x584>)
 8007088:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800708c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007090:	f7f9 fbdc 	bl	800084c <__aeabi_ddiv>
 8007094:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007098:	f004 040f 	and.w	r4, r4, #15
 800709c:	2603      	movs	r6, #3
 800709e:	4d91      	ldr	r5, [pc, #580]	@ (80072e4 <_dtoa_r+0x584>)
 80070a0:	b954      	cbnz	r4, 80070b8 <_dtoa_r+0x358>
 80070a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80070a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070aa:	f7f9 fbcf 	bl	800084c <__aeabi_ddiv>
 80070ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070b2:	e028      	b.n	8007106 <_dtoa_r+0x3a6>
 80070b4:	2602      	movs	r6, #2
 80070b6:	e7f2      	b.n	800709e <_dtoa_r+0x33e>
 80070b8:	07e1      	lsls	r1, r4, #31
 80070ba:	d508      	bpl.n	80070ce <_dtoa_r+0x36e>
 80070bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80070c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070c4:	f7f9 fa98 	bl	80005f8 <__aeabi_dmul>
 80070c8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80070cc:	3601      	adds	r6, #1
 80070ce:	1064      	asrs	r4, r4, #1
 80070d0:	3508      	adds	r5, #8
 80070d2:	e7e5      	b.n	80070a0 <_dtoa_r+0x340>
 80070d4:	f000 80af 	beq.w	8007236 <_dtoa_r+0x4d6>
 80070d8:	427c      	negs	r4, r7
 80070da:	4b81      	ldr	r3, [pc, #516]	@ (80072e0 <_dtoa_r+0x580>)
 80070dc:	4d81      	ldr	r5, [pc, #516]	@ (80072e4 <_dtoa_r+0x584>)
 80070de:	f004 020f 	and.w	r2, r4, #15
 80070e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80070ee:	f7f9 fa83 	bl	80005f8 <__aeabi_dmul>
 80070f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070f6:	1124      	asrs	r4, r4, #4
 80070f8:	2300      	movs	r3, #0
 80070fa:	2602      	movs	r6, #2
 80070fc:	2c00      	cmp	r4, #0
 80070fe:	f040 808f 	bne.w	8007220 <_dtoa_r+0x4c0>
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1d3      	bne.n	80070ae <_dtoa_r+0x34e>
 8007106:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007108:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	f000 8094 	beq.w	800723a <_dtoa_r+0x4da>
 8007112:	4b75      	ldr	r3, [pc, #468]	@ (80072e8 <_dtoa_r+0x588>)
 8007114:	2200      	movs	r2, #0
 8007116:	4620      	mov	r0, r4
 8007118:	4629      	mov	r1, r5
 800711a:	f7f9 fcdf 	bl	8000adc <__aeabi_dcmplt>
 800711e:	2800      	cmp	r0, #0
 8007120:	f000 808b 	beq.w	800723a <_dtoa_r+0x4da>
 8007124:	9b03      	ldr	r3, [sp, #12]
 8007126:	2b00      	cmp	r3, #0
 8007128:	f000 8087 	beq.w	800723a <_dtoa_r+0x4da>
 800712c:	f1bb 0f00 	cmp.w	fp, #0
 8007130:	dd34      	ble.n	800719c <_dtoa_r+0x43c>
 8007132:	4620      	mov	r0, r4
 8007134:	4b6d      	ldr	r3, [pc, #436]	@ (80072ec <_dtoa_r+0x58c>)
 8007136:	2200      	movs	r2, #0
 8007138:	4629      	mov	r1, r5
 800713a:	f7f9 fa5d 	bl	80005f8 <__aeabi_dmul>
 800713e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007142:	f107 38ff 	add.w	r8, r7, #4294967295
 8007146:	3601      	adds	r6, #1
 8007148:	465c      	mov	r4, fp
 800714a:	4630      	mov	r0, r6
 800714c:	f7f9 f9ea 	bl	8000524 <__aeabi_i2d>
 8007150:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007154:	f7f9 fa50 	bl	80005f8 <__aeabi_dmul>
 8007158:	4b65      	ldr	r3, [pc, #404]	@ (80072f0 <_dtoa_r+0x590>)
 800715a:	2200      	movs	r2, #0
 800715c:	f7f9 f896 	bl	800028c <__adddf3>
 8007160:	4605      	mov	r5, r0
 8007162:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007166:	2c00      	cmp	r4, #0
 8007168:	d16a      	bne.n	8007240 <_dtoa_r+0x4e0>
 800716a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800716e:	4b61      	ldr	r3, [pc, #388]	@ (80072f4 <_dtoa_r+0x594>)
 8007170:	2200      	movs	r2, #0
 8007172:	f7f9 f889 	bl	8000288 <__aeabi_dsub>
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800717e:	462a      	mov	r2, r5
 8007180:	4633      	mov	r3, r6
 8007182:	f7f9 fcc9 	bl	8000b18 <__aeabi_dcmpgt>
 8007186:	2800      	cmp	r0, #0
 8007188:	f040 8298 	bne.w	80076bc <_dtoa_r+0x95c>
 800718c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007190:	462a      	mov	r2, r5
 8007192:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007196:	f7f9 fca1 	bl	8000adc <__aeabi_dcmplt>
 800719a:	bb38      	cbnz	r0, 80071ec <_dtoa_r+0x48c>
 800719c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80071a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80071a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f2c0 8157 	blt.w	800745a <_dtoa_r+0x6fa>
 80071ac:	2f0e      	cmp	r7, #14
 80071ae:	f300 8154 	bgt.w	800745a <_dtoa_r+0x6fa>
 80071b2:	4b4b      	ldr	r3, [pc, #300]	@ (80072e0 <_dtoa_r+0x580>)
 80071b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80071b8:	ed93 7b00 	vldr	d7, [r3]
 80071bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80071be:	2b00      	cmp	r3, #0
 80071c0:	ed8d 7b00 	vstr	d7, [sp]
 80071c4:	f280 80e5 	bge.w	8007392 <_dtoa_r+0x632>
 80071c8:	9b03      	ldr	r3, [sp, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f300 80e1 	bgt.w	8007392 <_dtoa_r+0x632>
 80071d0:	d10c      	bne.n	80071ec <_dtoa_r+0x48c>
 80071d2:	4b48      	ldr	r3, [pc, #288]	@ (80072f4 <_dtoa_r+0x594>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	ec51 0b17 	vmov	r0, r1, d7
 80071da:	f7f9 fa0d 	bl	80005f8 <__aeabi_dmul>
 80071de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071e2:	f7f9 fc8f 	bl	8000b04 <__aeabi_dcmpge>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	f000 8266 	beq.w	80076b8 <_dtoa_r+0x958>
 80071ec:	2400      	movs	r4, #0
 80071ee:	4625      	mov	r5, r4
 80071f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80071f2:	4656      	mov	r6, sl
 80071f4:	ea6f 0803 	mvn.w	r8, r3
 80071f8:	2700      	movs	r7, #0
 80071fa:	4621      	mov	r1, r4
 80071fc:	4648      	mov	r0, r9
 80071fe:	f001 f80b 	bl	8008218 <_Bfree>
 8007202:	2d00      	cmp	r5, #0
 8007204:	f000 80bd 	beq.w	8007382 <_dtoa_r+0x622>
 8007208:	b12f      	cbz	r7, 8007216 <_dtoa_r+0x4b6>
 800720a:	42af      	cmp	r7, r5
 800720c:	d003      	beq.n	8007216 <_dtoa_r+0x4b6>
 800720e:	4639      	mov	r1, r7
 8007210:	4648      	mov	r0, r9
 8007212:	f001 f801 	bl	8008218 <_Bfree>
 8007216:	4629      	mov	r1, r5
 8007218:	4648      	mov	r0, r9
 800721a:	f000 fffd 	bl	8008218 <_Bfree>
 800721e:	e0b0      	b.n	8007382 <_dtoa_r+0x622>
 8007220:	07e2      	lsls	r2, r4, #31
 8007222:	d505      	bpl.n	8007230 <_dtoa_r+0x4d0>
 8007224:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007228:	f7f9 f9e6 	bl	80005f8 <__aeabi_dmul>
 800722c:	3601      	adds	r6, #1
 800722e:	2301      	movs	r3, #1
 8007230:	1064      	asrs	r4, r4, #1
 8007232:	3508      	adds	r5, #8
 8007234:	e762      	b.n	80070fc <_dtoa_r+0x39c>
 8007236:	2602      	movs	r6, #2
 8007238:	e765      	b.n	8007106 <_dtoa_r+0x3a6>
 800723a:	9c03      	ldr	r4, [sp, #12]
 800723c:	46b8      	mov	r8, r7
 800723e:	e784      	b.n	800714a <_dtoa_r+0x3ea>
 8007240:	4b27      	ldr	r3, [pc, #156]	@ (80072e0 <_dtoa_r+0x580>)
 8007242:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007244:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007248:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800724c:	4454      	add	r4, sl
 800724e:	2900      	cmp	r1, #0
 8007250:	d054      	beq.n	80072fc <_dtoa_r+0x59c>
 8007252:	4929      	ldr	r1, [pc, #164]	@ (80072f8 <_dtoa_r+0x598>)
 8007254:	2000      	movs	r0, #0
 8007256:	f7f9 faf9 	bl	800084c <__aeabi_ddiv>
 800725a:	4633      	mov	r3, r6
 800725c:	462a      	mov	r2, r5
 800725e:	f7f9 f813 	bl	8000288 <__aeabi_dsub>
 8007262:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007266:	4656      	mov	r6, sl
 8007268:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800726c:	f7f9 fc74 	bl	8000b58 <__aeabi_d2iz>
 8007270:	4605      	mov	r5, r0
 8007272:	f7f9 f957 	bl	8000524 <__aeabi_i2d>
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
 800727a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800727e:	f7f9 f803 	bl	8000288 <__aeabi_dsub>
 8007282:	3530      	adds	r5, #48	@ 0x30
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800728c:	f806 5b01 	strb.w	r5, [r6], #1
 8007290:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007294:	f7f9 fc22 	bl	8000adc <__aeabi_dcmplt>
 8007298:	2800      	cmp	r0, #0
 800729a:	d172      	bne.n	8007382 <_dtoa_r+0x622>
 800729c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072a0:	4911      	ldr	r1, [pc, #68]	@ (80072e8 <_dtoa_r+0x588>)
 80072a2:	2000      	movs	r0, #0
 80072a4:	f7f8 fff0 	bl	8000288 <__aeabi_dsub>
 80072a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80072ac:	f7f9 fc16 	bl	8000adc <__aeabi_dcmplt>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	f040 80b4 	bne.w	800741e <_dtoa_r+0x6be>
 80072b6:	42a6      	cmp	r6, r4
 80072b8:	f43f af70 	beq.w	800719c <_dtoa_r+0x43c>
 80072bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80072c0:	4b0a      	ldr	r3, [pc, #40]	@ (80072ec <_dtoa_r+0x58c>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	f7f9 f998 	bl	80005f8 <__aeabi_dmul>
 80072c8:	4b08      	ldr	r3, [pc, #32]	@ (80072ec <_dtoa_r+0x58c>)
 80072ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80072ce:	2200      	movs	r2, #0
 80072d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072d4:	f7f9 f990 	bl	80005f8 <__aeabi_dmul>
 80072d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072dc:	e7c4      	b.n	8007268 <_dtoa_r+0x508>
 80072de:	bf00      	nop
 80072e0:	0800a3a0 	.word	0x0800a3a0
 80072e4:	0800a378 	.word	0x0800a378
 80072e8:	3ff00000 	.word	0x3ff00000
 80072ec:	40240000 	.word	0x40240000
 80072f0:	401c0000 	.word	0x401c0000
 80072f4:	40140000 	.word	0x40140000
 80072f8:	3fe00000 	.word	0x3fe00000
 80072fc:	4631      	mov	r1, r6
 80072fe:	4628      	mov	r0, r5
 8007300:	f7f9 f97a 	bl	80005f8 <__aeabi_dmul>
 8007304:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007308:	9413      	str	r4, [sp, #76]	@ 0x4c
 800730a:	4656      	mov	r6, sl
 800730c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007310:	f7f9 fc22 	bl	8000b58 <__aeabi_d2iz>
 8007314:	4605      	mov	r5, r0
 8007316:	f7f9 f905 	bl	8000524 <__aeabi_i2d>
 800731a:	4602      	mov	r2, r0
 800731c:	460b      	mov	r3, r1
 800731e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007322:	f7f8 ffb1 	bl	8000288 <__aeabi_dsub>
 8007326:	3530      	adds	r5, #48	@ 0x30
 8007328:	f806 5b01 	strb.w	r5, [r6], #1
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	42a6      	cmp	r6, r4
 8007332:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007336:	f04f 0200 	mov.w	r2, #0
 800733a:	d124      	bne.n	8007386 <_dtoa_r+0x626>
 800733c:	4baf      	ldr	r3, [pc, #700]	@ (80075fc <_dtoa_r+0x89c>)
 800733e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007342:	f7f8 ffa3 	bl	800028c <__adddf3>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800734e:	f7f9 fbe3 	bl	8000b18 <__aeabi_dcmpgt>
 8007352:	2800      	cmp	r0, #0
 8007354:	d163      	bne.n	800741e <_dtoa_r+0x6be>
 8007356:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800735a:	49a8      	ldr	r1, [pc, #672]	@ (80075fc <_dtoa_r+0x89c>)
 800735c:	2000      	movs	r0, #0
 800735e:	f7f8 ff93 	bl	8000288 <__aeabi_dsub>
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800736a:	f7f9 fbb7 	bl	8000adc <__aeabi_dcmplt>
 800736e:	2800      	cmp	r0, #0
 8007370:	f43f af14 	beq.w	800719c <_dtoa_r+0x43c>
 8007374:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007376:	1e73      	subs	r3, r6, #1
 8007378:	9313      	str	r3, [sp, #76]	@ 0x4c
 800737a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800737e:	2b30      	cmp	r3, #48	@ 0x30
 8007380:	d0f8      	beq.n	8007374 <_dtoa_r+0x614>
 8007382:	4647      	mov	r7, r8
 8007384:	e03b      	b.n	80073fe <_dtoa_r+0x69e>
 8007386:	4b9e      	ldr	r3, [pc, #632]	@ (8007600 <_dtoa_r+0x8a0>)
 8007388:	f7f9 f936 	bl	80005f8 <__aeabi_dmul>
 800738c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007390:	e7bc      	b.n	800730c <_dtoa_r+0x5ac>
 8007392:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007396:	4656      	mov	r6, sl
 8007398:	e9dd 2300 	ldrd	r2, r3, [sp]
 800739c:	4620      	mov	r0, r4
 800739e:	4629      	mov	r1, r5
 80073a0:	f7f9 fa54 	bl	800084c <__aeabi_ddiv>
 80073a4:	f7f9 fbd8 	bl	8000b58 <__aeabi_d2iz>
 80073a8:	4680      	mov	r8, r0
 80073aa:	f7f9 f8bb 	bl	8000524 <__aeabi_i2d>
 80073ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073b2:	f7f9 f921 	bl	80005f8 <__aeabi_dmul>
 80073b6:	4602      	mov	r2, r0
 80073b8:	460b      	mov	r3, r1
 80073ba:	4620      	mov	r0, r4
 80073bc:	4629      	mov	r1, r5
 80073be:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80073c2:	f7f8 ff61 	bl	8000288 <__aeabi_dsub>
 80073c6:	f806 4b01 	strb.w	r4, [r6], #1
 80073ca:	9d03      	ldr	r5, [sp, #12]
 80073cc:	eba6 040a 	sub.w	r4, r6, sl
 80073d0:	42a5      	cmp	r5, r4
 80073d2:	4602      	mov	r2, r0
 80073d4:	460b      	mov	r3, r1
 80073d6:	d133      	bne.n	8007440 <_dtoa_r+0x6e0>
 80073d8:	f7f8 ff58 	bl	800028c <__adddf3>
 80073dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073e0:	4604      	mov	r4, r0
 80073e2:	460d      	mov	r5, r1
 80073e4:	f7f9 fb98 	bl	8000b18 <__aeabi_dcmpgt>
 80073e8:	b9c0      	cbnz	r0, 800741c <_dtoa_r+0x6bc>
 80073ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073ee:	4620      	mov	r0, r4
 80073f0:	4629      	mov	r1, r5
 80073f2:	f7f9 fb69 	bl	8000ac8 <__aeabi_dcmpeq>
 80073f6:	b110      	cbz	r0, 80073fe <_dtoa_r+0x69e>
 80073f8:	f018 0f01 	tst.w	r8, #1
 80073fc:	d10e      	bne.n	800741c <_dtoa_r+0x6bc>
 80073fe:	9902      	ldr	r1, [sp, #8]
 8007400:	4648      	mov	r0, r9
 8007402:	f000 ff09 	bl	8008218 <_Bfree>
 8007406:	2300      	movs	r3, #0
 8007408:	7033      	strb	r3, [r6, #0]
 800740a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800740c:	3701      	adds	r7, #1
 800740e:	601f      	str	r7, [r3, #0]
 8007410:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 824b 	beq.w	80078ae <_dtoa_r+0xb4e>
 8007418:	601e      	str	r6, [r3, #0]
 800741a:	e248      	b.n	80078ae <_dtoa_r+0xb4e>
 800741c:	46b8      	mov	r8, r7
 800741e:	4633      	mov	r3, r6
 8007420:	461e      	mov	r6, r3
 8007422:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007426:	2a39      	cmp	r2, #57	@ 0x39
 8007428:	d106      	bne.n	8007438 <_dtoa_r+0x6d8>
 800742a:	459a      	cmp	sl, r3
 800742c:	d1f8      	bne.n	8007420 <_dtoa_r+0x6c0>
 800742e:	2230      	movs	r2, #48	@ 0x30
 8007430:	f108 0801 	add.w	r8, r8, #1
 8007434:	f88a 2000 	strb.w	r2, [sl]
 8007438:	781a      	ldrb	r2, [r3, #0]
 800743a:	3201      	adds	r2, #1
 800743c:	701a      	strb	r2, [r3, #0]
 800743e:	e7a0      	b.n	8007382 <_dtoa_r+0x622>
 8007440:	4b6f      	ldr	r3, [pc, #444]	@ (8007600 <_dtoa_r+0x8a0>)
 8007442:	2200      	movs	r2, #0
 8007444:	f7f9 f8d8 	bl	80005f8 <__aeabi_dmul>
 8007448:	2200      	movs	r2, #0
 800744a:	2300      	movs	r3, #0
 800744c:	4604      	mov	r4, r0
 800744e:	460d      	mov	r5, r1
 8007450:	f7f9 fb3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007454:	2800      	cmp	r0, #0
 8007456:	d09f      	beq.n	8007398 <_dtoa_r+0x638>
 8007458:	e7d1      	b.n	80073fe <_dtoa_r+0x69e>
 800745a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800745c:	2a00      	cmp	r2, #0
 800745e:	f000 80ea 	beq.w	8007636 <_dtoa_r+0x8d6>
 8007462:	9a07      	ldr	r2, [sp, #28]
 8007464:	2a01      	cmp	r2, #1
 8007466:	f300 80cd 	bgt.w	8007604 <_dtoa_r+0x8a4>
 800746a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800746c:	2a00      	cmp	r2, #0
 800746e:	f000 80c1 	beq.w	80075f4 <_dtoa_r+0x894>
 8007472:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007476:	9c08      	ldr	r4, [sp, #32]
 8007478:	9e00      	ldr	r6, [sp, #0]
 800747a:	9a00      	ldr	r2, [sp, #0]
 800747c:	441a      	add	r2, r3
 800747e:	9200      	str	r2, [sp, #0]
 8007480:	9a06      	ldr	r2, [sp, #24]
 8007482:	2101      	movs	r1, #1
 8007484:	441a      	add	r2, r3
 8007486:	4648      	mov	r0, r9
 8007488:	9206      	str	r2, [sp, #24]
 800748a:	f000 ffc3 	bl	8008414 <__i2b>
 800748e:	4605      	mov	r5, r0
 8007490:	b166      	cbz	r6, 80074ac <_dtoa_r+0x74c>
 8007492:	9b06      	ldr	r3, [sp, #24]
 8007494:	2b00      	cmp	r3, #0
 8007496:	dd09      	ble.n	80074ac <_dtoa_r+0x74c>
 8007498:	42b3      	cmp	r3, r6
 800749a:	9a00      	ldr	r2, [sp, #0]
 800749c:	bfa8      	it	ge
 800749e:	4633      	movge	r3, r6
 80074a0:	1ad2      	subs	r2, r2, r3
 80074a2:	9200      	str	r2, [sp, #0]
 80074a4:	9a06      	ldr	r2, [sp, #24]
 80074a6:	1af6      	subs	r6, r6, r3
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	9306      	str	r3, [sp, #24]
 80074ac:	9b08      	ldr	r3, [sp, #32]
 80074ae:	b30b      	cbz	r3, 80074f4 <_dtoa_r+0x794>
 80074b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 80c6 	beq.w	8007644 <_dtoa_r+0x8e4>
 80074b8:	2c00      	cmp	r4, #0
 80074ba:	f000 80c0 	beq.w	800763e <_dtoa_r+0x8de>
 80074be:	4629      	mov	r1, r5
 80074c0:	4622      	mov	r2, r4
 80074c2:	4648      	mov	r0, r9
 80074c4:	f001 f85e 	bl	8008584 <__pow5mult>
 80074c8:	9a02      	ldr	r2, [sp, #8]
 80074ca:	4601      	mov	r1, r0
 80074cc:	4605      	mov	r5, r0
 80074ce:	4648      	mov	r0, r9
 80074d0:	f000 ffb6 	bl	8008440 <__multiply>
 80074d4:	9902      	ldr	r1, [sp, #8]
 80074d6:	4680      	mov	r8, r0
 80074d8:	4648      	mov	r0, r9
 80074da:	f000 fe9d 	bl	8008218 <_Bfree>
 80074de:	9b08      	ldr	r3, [sp, #32]
 80074e0:	1b1b      	subs	r3, r3, r4
 80074e2:	9308      	str	r3, [sp, #32]
 80074e4:	f000 80b1 	beq.w	800764a <_dtoa_r+0x8ea>
 80074e8:	9a08      	ldr	r2, [sp, #32]
 80074ea:	4641      	mov	r1, r8
 80074ec:	4648      	mov	r0, r9
 80074ee:	f001 f849 	bl	8008584 <__pow5mult>
 80074f2:	9002      	str	r0, [sp, #8]
 80074f4:	2101      	movs	r1, #1
 80074f6:	4648      	mov	r0, r9
 80074f8:	f000 ff8c 	bl	8008414 <__i2b>
 80074fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074fe:	4604      	mov	r4, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 81d8 	beq.w	80078b6 <_dtoa_r+0xb56>
 8007506:	461a      	mov	r2, r3
 8007508:	4601      	mov	r1, r0
 800750a:	4648      	mov	r0, r9
 800750c:	f001 f83a 	bl	8008584 <__pow5mult>
 8007510:	9b07      	ldr	r3, [sp, #28]
 8007512:	2b01      	cmp	r3, #1
 8007514:	4604      	mov	r4, r0
 8007516:	f300 809f 	bgt.w	8007658 <_dtoa_r+0x8f8>
 800751a:	9b04      	ldr	r3, [sp, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	f040 8097 	bne.w	8007650 <_dtoa_r+0x8f0>
 8007522:	9b05      	ldr	r3, [sp, #20]
 8007524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007528:	2b00      	cmp	r3, #0
 800752a:	f040 8093 	bne.w	8007654 <_dtoa_r+0x8f4>
 800752e:	9b05      	ldr	r3, [sp, #20]
 8007530:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007534:	0d1b      	lsrs	r3, r3, #20
 8007536:	051b      	lsls	r3, r3, #20
 8007538:	b133      	cbz	r3, 8007548 <_dtoa_r+0x7e8>
 800753a:	9b00      	ldr	r3, [sp, #0]
 800753c:	3301      	adds	r3, #1
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	9b06      	ldr	r3, [sp, #24]
 8007542:	3301      	adds	r3, #1
 8007544:	9306      	str	r3, [sp, #24]
 8007546:	2301      	movs	r3, #1
 8007548:	9308      	str	r3, [sp, #32]
 800754a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 81b8 	beq.w	80078c2 <_dtoa_r+0xb62>
 8007552:	6923      	ldr	r3, [r4, #16]
 8007554:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007558:	6918      	ldr	r0, [r3, #16]
 800755a:	f000 ff0f 	bl	800837c <__hi0bits>
 800755e:	f1c0 0020 	rsb	r0, r0, #32
 8007562:	9b06      	ldr	r3, [sp, #24]
 8007564:	4418      	add	r0, r3
 8007566:	f010 001f 	ands.w	r0, r0, #31
 800756a:	f000 8082 	beq.w	8007672 <_dtoa_r+0x912>
 800756e:	f1c0 0320 	rsb	r3, r0, #32
 8007572:	2b04      	cmp	r3, #4
 8007574:	dd73      	ble.n	800765e <_dtoa_r+0x8fe>
 8007576:	9b00      	ldr	r3, [sp, #0]
 8007578:	f1c0 001c 	rsb	r0, r0, #28
 800757c:	4403      	add	r3, r0
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	9b06      	ldr	r3, [sp, #24]
 8007582:	4403      	add	r3, r0
 8007584:	4406      	add	r6, r0
 8007586:	9306      	str	r3, [sp, #24]
 8007588:	9b00      	ldr	r3, [sp, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	dd05      	ble.n	800759a <_dtoa_r+0x83a>
 800758e:	9902      	ldr	r1, [sp, #8]
 8007590:	461a      	mov	r2, r3
 8007592:	4648      	mov	r0, r9
 8007594:	f001 f850 	bl	8008638 <__lshift>
 8007598:	9002      	str	r0, [sp, #8]
 800759a:	9b06      	ldr	r3, [sp, #24]
 800759c:	2b00      	cmp	r3, #0
 800759e:	dd05      	ble.n	80075ac <_dtoa_r+0x84c>
 80075a0:	4621      	mov	r1, r4
 80075a2:	461a      	mov	r2, r3
 80075a4:	4648      	mov	r0, r9
 80075a6:	f001 f847 	bl	8008638 <__lshift>
 80075aa:	4604      	mov	r4, r0
 80075ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d061      	beq.n	8007676 <_dtoa_r+0x916>
 80075b2:	9802      	ldr	r0, [sp, #8]
 80075b4:	4621      	mov	r1, r4
 80075b6:	f001 f8ab 	bl	8008710 <__mcmp>
 80075ba:	2800      	cmp	r0, #0
 80075bc:	da5b      	bge.n	8007676 <_dtoa_r+0x916>
 80075be:	2300      	movs	r3, #0
 80075c0:	9902      	ldr	r1, [sp, #8]
 80075c2:	220a      	movs	r2, #10
 80075c4:	4648      	mov	r0, r9
 80075c6:	f000 fe49 	bl	800825c <__multadd>
 80075ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075cc:	9002      	str	r0, [sp, #8]
 80075ce:	f107 38ff 	add.w	r8, r7, #4294967295
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 8177 	beq.w	80078c6 <_dtoa_r+0xb66>
 80075d8:	4629      	mov	r1, r5
 80075da:	2300      	movs	r3, #0
 80075dc:	220a      	movs	r2, #10
 80075de:	4648      	mov	r0, r9
 80075e0:	f000 fe3c 	bl	800825c <__multadd>
 80075e4:	f1bb 0f00 	cmp.w	fp, #0
 80075e8:	4605      	mov	r5, r0
 80075ea:	dc6f      	bgt.n	80076cc <_dtoa_r+0x96c>
 80075ec:	9b07      	ldr	r3, [sp, #28]
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	dc49      	bgt.n	8007686 <_dtoa_r+0x926>
 80075f2:	e06b      	b.n	80076cc <_dtoa_r+0x96c>
 80075f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80075f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80075fa:	e73c      	b.n	8007476 <_dtoa_r+0x716>
 80075fc:	3fe00000 	.word	0x3fe00000
 8007600:	40240000 	.word	0x40240000
 8007604:	9b03      	ldr	r3, [sp, #12]
 8007606:	1e5c      	subs	r4, r3, #1
 8007608:	9b08      	ldr	r3, [sp, #32]
 800760a:	42a3      	cmp	r3, r4
 800760c:	db09      	blt.n	8007622 <_dtoa_r+0x8c2>
 800760e:	1b1c      	subs	r4, r3, r4
 8007610:	9b03      	ldr	r3, [sp, #12]
 8007612:	2b00      	cmp	r3, #0
 8007614:	f6bf af30 	bge.w	8007478 <_dtoa_r+0x718>
 8007618:	9b00      	ldr	r3, [sp, #0]
 800761a:	9a03      	ldr	r2, [sp, #12]
 800761c:	1a9e      	subs	r6, r3, r2
 800761e:	2300      	movs	r3, #0
 8007620:	e72b      	b.n	800747a <_dtoa_r+0x71a>
 8007622:	9b08      	ldr	r3, [sp, #32]
 8007624:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007626:	9408      	str	r4, [sp, #32]
 8007628:	1ae3      	subs	r3, r4, r3
 800762a:	441a      	add	r2, r3
 800762c:	9e00      	ldr	r6, [sp, #0]
 800762e:	9b03      	ldr	r3, [sp, #12]
 8007630:	920d      	str	r2, [sp, #52]	@ 0x34
 8007632:	2400      	movs	r4, #0
 8007634:	e721      	b.n	800747a <_dtoa_r+0x71a>
 8007636:	9c08      	ldr	r4, [sp, #32]
 8007638:	9e00      	ldr	r6, [sp, #0]
 800763a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800763c:	e728      	b.n	8007490 <_dtoa_r+0x730>
 800763e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007642:	e751      	b.n	80074e8 <_dtoa_r+0x788>
 8007644:	9a08      	ldr	r2, [sp, #32]
 8007646:	9902      	ldr	r1, [sp, #8]
 8007648:	e750      	b.n	80074ec <_dtoa_r+0x78c>
 800764a:	f8cd 8008 	str.w	r8, [sp, #8]
 800764e:	e751      	b.n	80074f4 <_dtoa_r+0x794>
 8007650:	2300      	movs	r3, #0
 8007652:	e779      	b.n	8007548 <_dtoa_r+0x7e8>
 8007654:	9b04      	ldr	r3, [sp, #16]
 8007656:	e777      	b.n	8007548 <_dtoa_r+0x7e8>
 8007658:	2300      	movs	r3, #0
 800765a:	9308      	str	r3, [sp, #32]
 800765c:	e779      	b.n	8007552 <_dtoa_r+0x7f2>
 800765e:	d093      	beq.n	8007588 <_dtoa_r+0x828>
 8007660:	9a00      	ldr	r2, [sp, #0]
 8007662:	331c      	adds	r3, #28
 8007664:	441a      	add	r2, r3
 8007666:	9200      	str	r2, [sp, #0]
 8007668:	9a06      	ldr	r2, [sp, #24]
 800766a:	441a      	add	r2, r3
 800766c:	441e      	add	r6, r3
 800766e:	9206      	str	r2, [sp, #24]
 8007670:	e78a      	b.n	8007588 <_dtoa_r+0x828>
 8007672:	4603      	mov	r3, r0
 8007674:	e7f4      	b.n	8007660 <_dtoa_r+0x900>
 8007676:	9b03      	ldr	r3, [sp, #12]
 8007678:	2b00      	cmp	r3, #0
 800767a:	46b8      	mov	r8, r7
 800767c:	dc20      	bgt.n	80076c0 <_dtoa_r+0x960>
 800767e:	469b      	mov	fp, r3
 8007680:	9b07      	ldr	r3, [sp, #28]
 8007682:	2b02      	cmp	r3, #2
 8007684:	dd1e      	ble.n	80076c4 <_dtoa_r+0x964>
 8007686:	f1bb 0f00 	cmp.w	fp, #0
 800768a:	f47f adb1 	bne.w	80071f0 <_dtoa_r+0x490>
 800768e:	4621      	mov	r1, r4
 8007690:	465b      	mov	r3, fp
 8007692:	2205      	movs	r2, #5
 8007694:	4648      	mov	r0, r9
 8007696:	f000 fde1 	bl	800825c <__multadd>
 800769a:	4601      	mov	r1, r0
 800769c:	4604      	mov	r4, r0
 800769e:	9802      	ldr	r0, [sp, #8]
 80076a0:	f001 f836 	bl	8008710 <__mcmp>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	f77f ada3 	ble.w	80071f0 <_dtoa_r+0x490>
 80076aa:	4656      	mov	r6, sl
 80076ac:	2331      	movs	r3, #49	@ 0x31
 80076ae:	f806 3b01 	strb.w	r3, [r6], #1
 80076b2:	f108 0801 	add.w	r8, r8, #1
 80076b6:	e59f      	b.n	80071f8 <_dtoa_r+0x498>
 80076b8:	9c03      	ldr	r4, [sp, #12]
 80076ba:	46b8      	mov	r8, r7
 80076bc:	4625      	mov	r5, r4
 80076be:	e7f4      	b.n	80076aa <_dtoa_r+0x94a>
 80076c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80076c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f000 8101 	beq.w	80078ce <_dtoa_r+0xb6e>
 80076cc:	2e00      	cmp	r6, #0
 80076ce:	dd05      	ble.n	80076dc <_dtoa_r+0x97c>
 80076d0:	4629      	mov	r1, r5
 80076d2:	4632      	mov	r2, r6
 80076d4:	4648      	mov	r0, r9
 80076d6:	f000 ffaf 	bl	8008638 <__lshift>
 80076da:	4605      	mov	r5, r0
 80076dc:	9b08      	ldr	r3, [sp, #32]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d05c      	beq.n	800779c <_dtoa_r+0xa3c>
 80076e2:	6869      	ldr	r1, [r5, #4]
 80076e4:	4648      	mov	r0, r9
 80076e6:	f000 fd57 	bl	8008198 <_Balloc>
 80076ea:	4606      	mov	r6, r0
 80076ec:	b928      	cbnz	r0, 80076fa <_dtoa_r+0x99a>
 80076ee:	4b82      	ldr	r3, [pc, #520]	@ (80078f8 <_dtoa_r+0xb98>)
 80076f0:	4602      	mov	r2, r0
 80076f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80076f6:	f7ff bb4a 	b.w	8006d8e <_dtoa_r+0x2e>
 80076fa:	692a      	ldr	r2, [r5, #16]
 80076fc:	3202      	adds	r2, #2
 80076fe:	0092      	lsls	r2, r2, #2
 8007700:	f105 010c 	add.w	r1, r5, #12
 8007704:	300c      	adds	r0, #12
 8007706:	f7ff fa84 	bl	8006c12 <memcpy>
 800770a:	2201      	movs	r2, #1
 800770c:	4631      	mov	r1, r6
 800770e:	4648      	mov	r0, r9
 8007710:	f000 ff92 	bl	8008638 <__lshift>
 8007714:	f10a 0301 	add.w	r3, sl, #1
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	eb0a 030b 	add.w	r3, sl, fp
 800771e:	9308      	str	r3, [sp, #32]
 8007720:	9b04      	ldr	r3, [sp, #16]
 8007722:	f003 0301 	and.w	r3, r3, #1
 8007726:	462f      	mov	r7, r5
 8007728:	9306      	str	r3, [sp, #24]
 800772a:	4605      	mov	r5, r0
 800772c:	9b00      	ldr	r3, [sp, #0]
 800772e:	9802      	ldr	r0, [sp, #8]
 8007730:	4621      	mov	r1, r4
 8007732:	f103 3bff 	add.w	fp, r3, #4294967295
 8007736:	f7ff fa89 	bl	8006c4c <quorem>
 800773a:	4603      	mov	r3, r0
 800773c:	3330      	adds	r3, #48	@ 0x30
 800773e:	9003      	str	r0, [sp, #12]
 8007740:	4639      	mov	r1, r7
 8007742:	9802      	ldr	r0, [sp, #8]
 8007744:	9309      	str	r3, [sp, #36]	@ 0x24
 8007746:	f000 ffe3 	bl	8008710 <__mcmp>
 800774a:	462a      	mov	r2, r5
 800774c:	9004      	str	r0, [sp, #16]
 800774e:	4621      	mov	r1, r4
 8007750:	4648      	mov	r0, r9
 8007752:	f000 fff9 	bl	8008748 <__mdiff>
 8007756:	68c2      	ldr	r2, [r0, #12]
 8007758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800775a:	4606      	mov	r6, r0
 800775c:	bb02      	cbnz	r2, 80077a0 <_dtoa_r+0xa40>
 800775e:	4601      	mov	r1, r0
 8007760:	9802      	ldr	r0, [sp, #8]
 8007762:	f000 ffd5 	bl	8008710 <__mcmp>
 8007766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007768:	4602      	mov	r2, r0
 800776a:	4631      	mov	r1, r6
 800776c:	4648      	mov	r0, r9
 800776e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007770:	9309      	str	r3, [sp, #36]	@ 0x24
 8007772:	f000 fd51 	bl	8008218 <_Bfree>
 8007776:	9b07      	ldr	r3, [sp, #28]
 8007778:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800777a:	9e00      	ldr	r6, [sp, #0]
 800777c:	ea42 0103 	orr.w	r1, r2, r3
 8007780:	9b06      	ldr	r3, [sp, #24]
 8007782:	4319      	orrs	r1, r3
 8007784:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007786:	d10d      	bne.n	80077a4 <_dtoa_r+0xa44>
 8007788:	2b39      	cmp	r3, #57	@ 0x39
 800778a:	d027      	beq.n	80077dc <_dtoa_r+0xa7c>
 800778c:	9a04      	ldr	r2, [sp, #16]
 800778e:	2a00      	cmp	r2, #0
 8007790:	dd01      	ble.n	8007796 <_dtoa_r+0xa36>
 8007792:	9b03      	ldr	r3, [sp, #12]
 8007794:	3331      	adds	r3, #49	@ 0x31
 8007796:	f88b 3000 	strb.w	r3, [fp]
 800779a:	e52e      	b.n	80071fa <_dtoa_r+0x49a>
 800779c:	4628      	mov	r0, r5
 800779e:	e7b9      	b.n	8007714 <_dtoa_r+0x9b4>
 80077a0:	2201      	movs	r2, #1
 80077a2:	e7e2      	b.n	800776a <_dtoa_r+0xa0a>
 80077a4:	9904      	ldr	r1, [sp, #16]
 80077a6:	2900      	cmp	r1, #0
 80077a8:	db04      	blt.n	80077b4 <_dtoa_r+0xa54>
 80077aa:	9807      	ldr	r0, [sp, #28]
 80077ac:	4301      	orrs	r1, r0
 80077ae:	9806      	ldr	r0, [sp, #24]
 80077b0:	4301      	orrs	r1, r0
 80077b2:	d120      	bne.n	80077f6 <_dtoa_r+0xa96>
 80077b4:	2a00      	cmp	r2, #0
 80077b6:	ddee      	ble.n	8007796 <_dtoa_r+0xa36>
 80077b8:	9902      	ldr	r1, [sp, #8]
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	2201      	movs	r2, #1
 80077be:	4648      	mov	r0, r9
 80077c0:	f000 ff3a 	bl	8008638 <__lshift>
 80077c4:	4621      	mov	r1, r4
 80077c6:	9002      	str	r0, [sp, #8]
 80077c8:	f000 ffa2 	bl	8008710 <__mcmp>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	9b00      	ldr	r3, [sp, #0]
 80077d0:	dc02      	bgt.n	80077d8 <_dtoa_r+0xa78>
 80077d2:	d1e0      	bne.n	8007796 <_dtoa_r+0xa36>
 80077d4:	07da      	lsls	r2, r3, #31
 80077d6:	d5de      	bpl.n	8007796 <_dtoa_r+0xa36>
 80077d8:	2b39      	cmp	r3, #57	@ 0x39
 80077da:	d1da      	bne.n	8007792 <_dtoa_r+0xa32>
 80077dc:	2339      	movs	r3, #57	@ 0x39
 80077de:	f88b 3000 	strb.w	r3, [fp]
 80077e2:	4633      	mov	r3, r6
 80077e4:	461e      	mov	r6, r3
 80077e6:	3b01      	subs	r3, #1
 80077e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80077ec:	2a39      	cmp	r2, #57	@ 0x39
 80077ee:	d04e      	beq.n	800788e <_dtoa_r+0xb2e>
 80077f0:	3201      	adds	r2, #1
 80077f2:	701a      	strb	r2, [r3, #0]
 80077f4:	e501      	b.n	80071fa <_dtoa_r+0x49a>
 80077f6:	2a00      	cmp	r2, #0
 80077f8:	dd03      	ble.n	8007802 <_dtoa_r+0xaa2>
 80077fa:	2b39      	cmp	r3, #57	@ 0x39
 80077fc:	d0ee      	beq.n	80077dc <_dtoa_r+0xa7c>
 80077fe:	3301      	adds	r3, #1
 8007800:	e7c9      	b.n	8007796 <_dtoa_r+0xa36>
 8007802:	9a00      	ldr	r2, [sp, #0]
 8007804:	9908      	ldr	r1, [sp, #32]
 8007806:	f802 3c01 	strb.w	r3, [r2, #-1]
 800780a:	428a      	cmp	r2, r1
 800780c:	d028      	beq.n	8007860 <_dtoa_r+0xb00>
 800780e:	9902      	ldr	r1, [sp, #8]
 8007810:	2300      	movs	r3, #0
 8007812:	220a      	movs	r2, #10
 8007814:	4648      	mov	r0, r9
 8007816:	f000 fd21 	bl	800825c <__multadd>
 800781a:	42af      	cmp	r7, r5
 800781c:	9002      	str	r0, [sp, #8]
 800781e:	f04f 0300 	mov.w	r3, #0
 8007822:	f04f 020a 	mov.w	r2, #10
 8007826:	4639      	mov	r1, r7
 8007828:	4648      	mov	r0, r9
 800782a:	d107      	bne.n	800783c <_dtoa_r+0xadc>
 800782c:	f000 fd16 	bl	800825c <__multadd>
 8007830:	4607      	mov	r7, r0
 8007832:	4605      	mov	r5, r0
 8007834:	9b00      	ldr	r3, [sp, #0]
 8007836:	3301      	adds	r3, #1
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	e777      	b.n	800772c <_dtoa_r+0x9cc>
 800783c:	f000 fd0e 	bl	800825c <__multadd>
 8007840:	4629      	mov	r1, r5
 8007842:	4607      	mov	r7, r0
 8007844:	2300      	movs	r3, #0
 8007846:	220a      	movs	r2, #10
 8007848:	4648      	mov	r0, r9
 800784a:	f000 fd07 	bl	800825c <__multadd>
 800784e:	4605      	mov	r5, r0
 8007850:	e7f0      	b.n	8007834 <_dtoa_r+0xad4>
 8007852:	f1bb 0f00 	cmp.w	fp, #0
 8007856:	bfcc      	ite	gt
 8007858:	465e      	movgt	r6, fp
 800785a:	2601      	movle	r6, #1
 800785c:	4456      	add	r6, sl
 800785e:	2700      	movs	r7, #0
 8007860:	9902      	ldr	r1, [sp, #8]
 8007862:	9300      	str	r3, [sp, #0]
 8007864:	2201      	movs	r2, #1
 8007866:	4648      	mov	r0, r9
 8007868:	f000 fee6 	bl	8008638 <__lshift>
 800786c:	4621      	mov	r1, r4
 800786e:	9002      	str	r0, [sp, #8]
 8007870:	f000 ff4e 	bl	8008710 <__mcmp>
 8007874:	2800      	cmp	r0, #0
 8007876:	dcb4      	bgt.n	80077e2 <_dtoa_r+0xa82>
 8007878:	d102      	bne.n	8007880 <_dtoa_r+0xb20>
 800787a:	9b00      	ldr	r3, [sp, #0]
 800787c:	07db      	lsls	r3, r3, #31
 800787e:	d4b0      	bmi.n	80077e2 <_dtoa_r+0xa82>
 8007880:	4633      	mov	r3, r6
 8007882:	461e      	mov	r6, r3
 8007884:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007888:	2a30      	cmp	r2, #48	@ 0x30
 800788a:	d0fa      	beq.n	8007882 <_dtoa_r+0xb22>
 800788c:	e4b5      	b.n	80071fa <_dtoa_r+0x49a>
 800788e:	459a      	cmp	sl, r3
 8007890:	d1a8      	bne.n	80077e4 <_dtoa_r+0xa84>
 8007892:	2331      	movs	r3, #49	@ 0x31
 8007894:	f108 0801 	add.w	r8, r8, #1
 8007898:	f88a 3000 	strb.w	r3, [sl]
 800789c:	e4ad      	b.n	80071fa <_dtoa_r+0x49a>
 800789e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80078a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80078fc <_dtoa_r+0xb9c>
 80078a4:	b11b      	cbz	r3, 80078ae <_dtoa_r+0xb4e>
 80078a6:	f10a 0308 	add.w	r3, sl, #8
 80078aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80078ac:	6013      	str	r3, [r2, #0]
 80078ae:	4650      	mov	r0, sl
 80078b0:	b017      	add	sp, #92	@ 0x5c
 80078b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b6:	9b07      	ldr	r3, [sp, #28]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	f77f ae2e 	ble.w	800751a <_dtoa_r+0x7ba>
 80078be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078c0:	9308      	str	r3, [sp, #32]
 80078c2:	2001      	movs	r0, #1
 80078c4:	e64d      	b.n	8007562 <_dtoa_r+0x802>
 80078c6:	f1bb 0f00 	cmp.w	fp, #0
 80078ca:	f77f aed9 	ble.w	8007680 <_dtoa_r+0x920>
 80078ce:	4656      	mov	r6, sl
 80078d0:	9802      	ldr	r0, [sp, #8]
 80078d2:	4621      	mov	r1, r4
 80078d4:	f7ff f9ba 	bl	8006c4c <quorem>
 80078d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80078dc:	f806 3b01 	strb.w	r3, [r6], #1
 80078e0:	eba6 020a 	sub.w	r2, r6, sl
 80078e4:	4593      	cmp	fp, r2
 80078e6:	ddb4      	ble.n	8007852 <_dtoa_r+0xaf2>
 80078e8:	9902      	ldr	r1, [sp, #8]
 80078ea:	2300      	movs	r3, #0
 80078ec:	220a      	movs	r2, #10
 80078ee:	4648      	mov	r0, r9
 80078f0:	f000 fcb4 	bl	800825c <__multadd>
 80078f4:	9002      	str	r0, [sp, #8]
 80078f6:	e7eb      	b.n	80078d0 <_dtoa_r+0xb70>
 80078f8:	0800a1e1 	.word	0x0800a1e1
 80078fc:	0800a165 	.word	0x0800a165

08007900 <_free_r>:
 8007900:	b538      	push	{r3, r4, r5, lr}
 8007902:	4605      	mov	r5, r0
 8007904:	2900      	cmp	r1, #0
 8007906:	d041      	beq.n	800798c <_free_r+0x8c>
 8007908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800790c:	1f0c      	subs	r4, r1, #4
 800790e:	2b00      	cmp	r3, #0
 8007910:	bfb8      	it	lt
 8007912:	18e4      	addlt	r4, r4, r3
 8007914:	f000 fc34 	bl	8008180 <__malloc_lock>
 8007918:	4a1d      	ldr	r2, [pc, #116]	@ (8007990 <_free_r+0x90>)
 800791a:	6813      	ldr	r3, [r2, #0]
 800791c:	b933      	cbnz	r3, 800792c <_free_r+0x2c>
 800791e:	6063      	str	r3, [r4, #4]
 8007920:	6014      	str	r4, [r2, #0]
 8007922:	4628      	mov	r0, r5
 8007924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007928:	f000 bc30 	b.w	800818c <__malloc_unlock>
 800792c:	42a3      	cmp	r3, r4
 800792e:	d908      	bls.n	8007942 <_free_r+0x42>
 8007930:	6820      	ldr	r0, [r4, #0]
 8007932:	1821      	adds	r1, r4, r0
 8007934:	428b      	cmp	r3, r1
 8007936:	bf01      	itttt	eq
 8007938:	6819      	ldreq	r1, [r3, #0]
 800793a:	685b      	ldreq	r3, [r3, #4]
 800793c:	1809      	addeq	r1, r1, r0
 800793e:	6021      	streq	r1, [r4, #0]
 8007940:	e7ed      	b.n	800791e <_free_r+0x1e>
 8007942:	461a      	mov	r2, r3
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	b10b      	cbz	r3, 800794c <_free_r+0x4c>
 8007948:	42a3      	cmp	r3, r4
 800794a:	d9fa      	bls.n	8007942 <_free_r+0x42>
 800794c:	6811      	ldr	r1, [r2, #0]
 800794e:	1850      	adds	r0, r2, r1
 8007950:	42a0      	cmp	r0, r4
 8007952:	d10b      	bne.n	800796c <_free_r+0x6c>
 8007954:	6820      	ldr	r0, [r4, #0]
 8007956:	4401      	add	r1, r0
 8007958:	1850      	adds	r0, r2, r1
 800795a:	4283      	cmp	r3, r0
 800795c:	6011      	str	r1, [r2, #0]
 800795e:	d1e0      	bne.n	8007922 <_free_r+0x22>
 8007960:	6818      	ldr	r0, [r3, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	6053      	str	r3, [r2, #4]
 8007966:	4408      	add	r0, r1
 8007968:	6010      	str	r0, [r2, #0]
 800796a:	e7da      	b.n	8007922 <_free_r+0x22>
 800796c:	d902      	bls.n	8007974 <_free_r+0x74>
 800796e:	230c      	movs	r3, #12
 8007970:	602b      	str	r3, [r5, #0]
 8007972:	e7d6      	b.n	8007922 <_free_r+0x22>
 8007974:	6820      	ldr	r0, [r4, #0]
 8007976:	1821      	adds	r1, r4, r0
 8007978:	428b      	cmp	r3, r1
 800797a:	bf04      	itt	eq
 800797c:	6819      	ldreq	r1, [r3, #0]
 800797e:	685b      	ldreq	r3, [r3, #4]
 8007980:	6063      	str	r3, [r4, #4]
 8007982:	bf04      	itt	eq
 8007984:	1809      	addeq	r1, r1, r0
 8007986:	6021      	streq	r1, [r4, #0]
 8007988:	6054      	str	r4, [r2, #4]
 800798a:	e7ca      	b.n	8007922 <_free_r+0x22>
 800798c:	bd38      	pop	{r3, r4, r5, pc}
 800798e:	bf00      	nop
 8007990:	20000aac 	.word	0x20000aac

08007994 <rshift>:
 8007994:	6903      	ldr	r3, [r0, #16]
 8007996:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800799a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800799e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80079a2:	f100 0414 	add.w	r4, r0, #20
 80079a6:	dd45      	ble.n	8007a34 <rshift+0xa0>
 80079a8:	f011 011f 	ands.w	r1, r1, #31
 80079ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80079b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80079b4:	d10c      	bne.n	80079d0 <rshift+0x3c>
 80079b6:	f100 0710 	add.w	r7, r0, #16
 80079ba:	4629      	mov	r1, r5
 80079bc:	42b1      	cmp	r1, r6
 80079be:	d334      	bcc.n	8007a2a <rshift+0x96>
 80079c0:	1a9b      	subs	r3, r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	1eea      	subs	r2, r5, #3
 80079c6:	4296      	cmp	r6, r2
 80079c8:	bf38      	it	cc
 80079ca:	2300      	movcc	r3, #0
 80079cc:	4423      	add	r3, r4
 80079ce:	e015      	b.n	80079fc <rshift+0x68>
 80079d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80079d4:	f1c1 0820 	rsb	r8, r1, #32
 80079d8:	40cf      	lsrs	r7, r1
 80079da:	f105 0e04 	add.w	lr, r5, #4
 80079de:	46a1      	mov	r9, r4
 80079e0:	4576      	cmp	r6, lr
 80079e2:	46f4      	mov	ip, lr
 80079e4:	d815      	bhi.n	8007a12 <rshift+0x7e>
 80079e6:	1a9a      	subs	r2, r3, r2
 80079e8:	0092      	lsls	r2, r2, #2
 80079ea:	3a04      	subs	r2, #4
 80079ec:	3501      	adds	r5, #1
 80079ee:	42ae      	cmp	r6, r5
 80079f0:	bf38      	it	cc
 80079f2:	2200      	movcc	r2, #0
 80079f4:	18a3      	adds	r3, r4, r2
 80079f6:	50a7      	str	r7, [r4, r2]
 80079f8:	b107      	cbz	r7, 80079fc <rshift+0x68>
 80079fa:	3304      	adds	r3, #4
 80079fc:	1b1a      	subs	r2, r3, r4
 80079fe:	42a3      	cmp	r3, r4
 8007a00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007a04:	bf08      	it	eq
 8007a06:	2300      	moveq	r3, #0
 8007a08:	6102      	str	r2, [r0, #16]
 8007a0a:	bf08      	it	eq
 8007a0c:	6143      	streq	r3, [r0, #20]
 8007a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a12:	f8dc c000 	ldr.w	ip, [ip]
 8007a16:	fa0c fc08 	lsl.w	ip, ip, r8
 8007a1a:	ea4c 0707 	orr.w	r7, ip, r7
 8007a1e:	f849 7b04 	str.w	r7, [r9], #4
 8007a22:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a26:	40cf      	lsrs	r7, r1
 8007a28:	e7da      	b.n	80079e0 <rshift+0x4c>
 8007a2a:	f851 cb04 	ldr.w	ip, [r1], #4
 8007a2e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007a32:	e7c3      	b.n	80079bc <rshift+0x28>
 8007a34:	4623      	mov	r3, r4
 8007a36:	e7e1      	b.n	80079fc <rshift+0x68>

08007a38 <__hexdig_fun>:
 8007a38:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007a3c:	2b09      	cmp	r3, #9
 8007a3e:	d802      	bhi.n	8007a46 <__hexdig_fun+0xe>
 8007a40:	3820      	subs	r0, #32
 8007a42:	b2c0      	uxtb	r0, r0
 8007a44:	4770      	bx	lr
 8007a46:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007a4a:	2b05      	cmp	r3, #5
 8007a4c:	d801      	bhi.n	8007a52 <__hexdig_fun+0x1a>
 8007a4e:	3847      	subs	r0, #71	@ 0x47
 8007a50:	e7f7      	b.n	8007a42 <__hexdig_fun+0xa>
 8007a52:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007a56:	2b05      	cmp	r3, #5
 8007a58:	d801      	bhi.n	8007a5e <__hexdig_fun+0x26>
 8007a5a:	3827      	subs	r0, #39	@ 0x27
 8007a5c:	e7f1      	b.n	8007a42 <__hexdig_fun+0xa>
 8007a5e:	2000      	movs	r0, #0
 8007a60:	4770      	bx	lr
	...

08007a64 <__gethex>:
 8007a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a68:	b085      	sub	sp, #20
 8007a6a:	468a      	mov	sl, r1
 8007a6c:	9302      	str	r3, [sp, #8]
 8007a6e:	680b      	ldr	r3, [r1, #0]
 8007a70:	9001      	str	r0, [sp, #4]
 8007a72:	4690      	mov	r8, r2
 8007a74:	1c9c      	adds	r4, r3, #2
 8007a76:	46a1      	mov	r9, r4
 8007a78:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007a7c:	2830      	cmp	r0, #48	@ 0x30
 8007a7e:	d0fa      	beq.n	8007a76 <__gethex+0x12>
 8007a80:	eba9 0303 	sub.w	r3, r9, r3
 8007a84:	f1a3 0b02 	sub.w	fp, r3, #2
 8007a88:	f7ff ffd6 	bl	8007a38 <__hexdig_fun>
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d168      	bne.n	8007b64 <__gethex+0x100>
 8007a92:	49a0      	ldr	r1, [pc, #640]	@ (8007d14 <__gethex+0x2b0>)
 8007a94:	2201      	movs	r2, #1
 8007a96:	4648      	mov	r0, r9
 8007a98:	f7ff f81e 	bl	8006ad8 <strncmp>
 8007a9c:	4607      	mov	r7, r0
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	d167      	bne.n	8007b72 <__gethex+0x10e>
 8007aa2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007aa6:	4626      	mov	r6, r4
 8007aa8:	f7ff ffc6 	bl	8007a38 <__hexdig_fun>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d062      	beq.n	8007b76 <__gethex+0x112>
 8007ab0:	4623      	mov	r3, r4
 8007ab2:	7818      	ldrb	r0, [r3, #0]
 8007ab4:	2830      	cmp	r0, #48	@ 0x30
 8007ab6:	4699      	mov	r9, r3
 8007ab8:	f103 0301 	add.w	r3, r3, #1
 8007abc:	d0f9      	beq.n	8007ab2 <__gethex+0x4e>
 8007abe:	f7ff ffbb 	bl	8007a38 <__hexdig_fun>
 8007ac2:	fab0 f580 	clz	r5, r0
 8007ac6:	096d      	lsrs	r5, r5, #5
 8007ac8:	f04f 0b01 	mov.w	fp, #1
 8007acc:	464a      	mov	r2, r9
 8007ace:	4616      	mov	r6, r2
 8007ad0:	3201      	adds	r2, #1
 8007ad2:	7830      	ldrb	r0, [r6, #0]
 8007ad4:	f7ff ffb0 	bl	8007a38 <__hexdig_fun>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d1f8      	bne.n	8007ace <__gethex+0x6a>
 8007adc:	498d      	ldr	r1, [pc, #564]	@ (8007d14 <__gethex+0x2b0>)
 8007ade:	2201      	movs	r2, #1
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	f7fe fff9 	bl	8006ad8 <strncmp>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d13f      	bne.n	8007b6a <__gethex+0x106>
 8007aea:	b944      	cbnz	r4, 8007afe <__gethex+0x9a>
 8007aec:	1c74      	adds	r4, r6, #1
 8007aee:	4622      	mov	r2, r4
 8007af0:	4616      	mov	r6, r2
 8007af2:	3201      	adds	r2, #1
 8007af4:	7830      	ldrb	r0, [r6, #0]
 8007af6:	f7ff ff9f 	bl	8007a38 <__hexdig_fun>
 8007afa:	2800      	cmp	r0, #0
 8007afc:	d1f8      	bne.n	8007af0 <__gethex+0x8c>
 8007afe:	1ba4      	subs	r4, r4, r6
 8007b00:	00a7      	lsls	r7, r4, #2
 8007b02:	7833      	ldrb	r3, [r6, #0]
 8007b04:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007b08:	2b50      	cmp	r3, #80	@ 0x50
 8007b0a:	d13e      	bne.n	8007b8a <__gethex+0x126>
 8007b0c:	7873      	ldrb	r3, [r6, #1]
 8007b0e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007b10:	d033      	beq.n	8007b7a <__gethex+0x116>
 8007b12:	2b2d      	cmp	r3, #45	@ 0x2d
 8007b14:	d034      	beq.n	8007b80 <__gethex+0x11c>
 8007b16:	1c71      	adds	r1, r6, #1
 8007b18:	2400      	movs	r4, #0
 8007b1a:	7808      	ldrb	r0, [r1, #0]
 8007b1c:	f7ff ff8c 	bl	8007a38 <__hexdig_fun>
 8007b20:	1e43      	subs	r3, r0, #1
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b18      	cmp	r3, #24
 8007b26:	d830      	bhi.n	8007b8a <__gethex+0x126>
 8007b28:	f1a0 0210 	sub.w	r2, r0, #16
 8007b2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007b30:	f7ff ff82 	bl	8007a38 <__hexdig_fun>
 8007b34:	f100 3cff 	add.w	ip, r0, #4294967295
 8007b38:	fa5f fc8c 	uxtb.w	ip, ip
 8007b3c:	f1bc 0f18 	cmp.w	ip, #24
 8007b40:	f04f 030a 	mov.w	r3, #10
 8007b44:	d91e      	bls.n	8007b84 <__gethex+0x120>
 8007b46:	b104      	cbz	r4, 8007b4a <__gethex+0xe6>
 8007b48:	4252      	negs	r2, r2
 8007b4a:	4417      	add	r7, r2
 8007b4c:	f8ca 1000 	str.w	r1, [sl]
 8007b50:	b1ed      	cbz	r5, 8007b8e <__gethex+0x12a>
 8007b52:	f1bb 0f00 	cmp.w	fp, #0
 8007b56:	bf0c      	ite	eq
 8007b58:	2506      	moveq	r5, #6
 8007b5a:	2500      	movne	r5, #0
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	b005      	add	sp, #20
 8007b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b64:	2500      	movs	r5, #0
 8007b66:	462c      	mov	r4, r5
 8007b68:	e7b0      	b.n	8007acc <__gethex+0x68>
 8007b6a:	2c00      	cmp	r4, #0
 8007b6c:	d1c7      	bne.n	8007afe <__gethex+0x9a>
 8007b6e:	4627      	mov	r7, r4
 8007b70:	e7c7      	b.n	8007b02 <__gethex+0x9e>
 8007b72:	464e      	mov	r6, r9
 8007b74:	462f      	mov	r7, r5
 8007b76:	2501      	movs	r5, #1
 8007b78:	e7c3      	b.n	8007b02 <__gethex+0x9e>
 8007b7a:	2400      	movs	r4, #0
 8007b7c:	1cb1      	adds	r1, r6, #2
 8007b7e:	e7cc      	b.n	8007b1a <__gethex+0xb6>
 8007b80:	2401      	movs	r4, #1
 8007b82:	e7fb      	b.n	8007b7c <__gethex+0x118>
 8007b84:	fb03 0002 	mla	r0, r3, r2, r0
 8007b88:	e7ce      	b.n	8007b28 <__gethex+0xc4>
 8007b8a:	4631      	mov	r1, r6
 8007b8c:	e7de      	b.n	8007b4c <__gethex+0xe8>
 8007b8e:	eba6 0309 	sub.w	r3, r6, r9
 8007b92:	3b01      	subs	r3, #1
 8007b94:	4629      	mov	r1, r5
 8007b96:	2b07      	cmp	r3, #7
 8007b98:	dc0a      	bgt.n	8007bb0 <__gethex+0x14c>
 8007b9a:	9801      	ldr	r0, [sp, #4]
 8007b9c:	f000 fafc 	bl	8008198 <_Balloc>
 8007ba0:	4604      	mov	r4, r0
 8007ba2:	b940      	cbnz	r0, 8007bb6 <__gethex+0x152>
 8007ba4:	4b5c      	ldr	r3, [pc, #368]	@ (8007d18 <__gethex+0x2b4>)
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	21e4      	movs	r1, #228	@ 0xe4
 8007baa:	485c      	ldr	r0, [pc, #368]	@ (8007d1c <__gethex+0x2b8>)
 8007bac:	f001 fde6 	bl	800977c <__assert_func>
 8007bb0:	3101      	adds	r1, #1
 8007bb2:	105b      	asrs	r3, r3, #1
 8007bb4:	e7ef      	b.n	8007b96 <__gethex+0x132>
 8007bb6:	f100 0a14 	add.w	sl, r0, #20
 8007bba:	2300      	movs	r3, #0
 8007bbc:	4655      	mov	r5, sl
 8007bbe:	469b      	mov	fp, r3
 8007bc0:	45b1      	cmp	r9, r6
 8007bc2:	d337      	bcc.n	8007c34 <__gethex+0x1d0>
 8007bc4:	f845 bb04 	str.w	fp, [r5], #4
 8007bc8:	eba5 050a 	sub.w	r5, r5, sl
 8007bcc:	10ad      	asrs	r5, r5, #2
 8007bce:	6125      	str	r5, [r4, #16]
 8007bd0:	4658      	mov	r0, fp
 8007bd2:	f000 fbd3 	bl	800837c <__hi0bits>
 8007bd6:	016d      	lsls	r5, r5, #5
 8007bd8:	f8d8 6000 	ldr.w	r6, [r8]
 8007bdc:	1a2d      	subs	r5, r5, r0
 8007bde:	42b5      	cmp	r5, r6
 8007be0:	dd54      	ble.n	8007c8c <__gethex+0x228>
 8007be2:	1bad      	subs	r5, r5, r6
 8007be4:	4629      	mov	r1, r5
 8007be6:	4620      	mov	r0, r4
 8007be8:	f000 ff5f 	bl	8008aaa <__any_on>
 8007bec:	4681      	mov	r9, r0
 8007bee:	b178      	cbz	r0, 8007c10 <__gethex+0x1ac>
 8007bf0:	1e6b      	subs	r3, r5, #1
 8007bf2:	1159      	asrs	r1, r3, #5
 8007bf4:	f003 021f 	and.w	r2, r3, #31
 8007bf8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007bfc:	f04f 0901 	mov.w	r9, #1
 8007c00:	fa09 f202 	lsl.w	r2, r9, r2
 8007c04:	420a      	tst	r2, r1
 8007c06:	d003      	beq.n	8007c10 <__gethex+0x1ac>
 8007c08:	454b      	cmp	r3, r9
 8007c0a:	dc36      	bgt.n	8007c7a <__gethex+0x216>
 8007c0c:	f04f 0902 	mov.w	r9, #2
 8007c10:	4629      	mov	r1, r5
 8007c12:	4620      	mov	r0, r4
 8007c14:	f7ff febe 	bl	8007994 <rshift>
 8007c18:	442f      	add	r7, r5
 8007c1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c1e:	42bb      	cmp	r3, r7
 8007c20:	da42      	bge.n	8007ca8 <__gethex+0x244>
 8007c22:	9801      	ldr	r0, [sp, #4]
 8007c24:	4621      	mov	r1, r4
 8007c26:	f000 faf7 	bl	8008218 <_Bfree>
 8007c2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	6013      	str	r3, [r2, #0]
 8007c30:	25a3      	movs	r5, #163	@ 0xa3
 8007c32:	e793      	b.n	8007b5c <__gethex+0xf8>
 8007c34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007c38:	2a2e      	cmp	r2, #46	@ 0x2e
 8007c3a:	d012      	beq.n	8007c62 <__gethex+0x1fe>
 8007c3c:	2b20      	cmp	r3, #32
 8007c3e:	d104      	bne.n	8007c4a <__gethex+0x1e6>
 8007c40:	f845 bb04 	str.w	fp, [r5], #4
 8007c44:	f04f 0b00 	mov.w	fp, #0
 8007c48:	465b      	mov	r3, fp
 8007c4a:	7830      	ldrb	r0, [r6, #0]
 8007c4c:	9303      	str	r3, [sp, #12]
 8007c4e:	f7ff fef3 	bl	8007a38 <__hexdig_fun>
 8007c52:	9b03      	ldr	r3, [sp, #12]
 8007c54:	f000 000f 	and.w	r0, r0, #15
 8007c58:	4098      	lsls	r0, r3
 8007c5a:	ea4b 0b00 	orr.w	fp, fp, r0
 8007c5e:	3304      	adds	r3, #4
 8007c60:	e7ae      	b.n	8007bc0 <__gethex+0x15c>
 8007c62:	45b1      	cmp	r9, r6
 8007c64:	d8ea      	bhi.n	8007c3c <__gethex+0x1d8>
 8007c66:	492b      	ldr	r1, [pc, #172]	@ (8007d14 <__gethex+0x2b0>)
 8007c68:	9303      	str	r3, [sp, #12]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	f7fe ff33 	bl	8006ad8 <strncmp>
 8007c72:	9b03      	ldr	r3, [sp, #12]
 8007c74:	2800      	cmp	r0, #0
 8007c76:	d1e1      	bne.n	8007c3c <__gethex+0x1d8>
 8007c78:	e7a2      	b.n	8007bc0 <__gethex+0x15c>
 8007c7a:	1ea9      	subs	r1, r5, #2
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	f000 ff14 	bl	8008aaa <__any_on>
 8007c82:	2800      	cmp	r0, #0
 8007c84:	d0c2      	beq.n	8007c0c <__gethex+0x1a8>
 8007c86:	f04f 0903 	mov.w	r9, #3
 8007c8a:	e7c1      	b.n	8007c10 <__gethex+0x1ac>
 8007c8c:	da09      	bge.n	8007ca2 <__gethex+0x23e>
 8007c8e:	1b75      	subs	r5, r6, r5
 8007c90:	4621      	mov	r1, r4
 8007c92:	9801      	ldr	r0, [sp, #4]
 8007c94:	462a      	mov	r2, r5
 8007c96:	f000 fccf 	bl	8008638 <__lshift>
 8007c9a:	1b7f      	subs	r7, r7, r5
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	f100 0a14 	add.w	sl, r0, #20
 8007ca2:	f04f 0900 	mov.w	r9, #0
 8007ca6:	e7b8      	b.n	8007c1a <__gethex+0x1b6>
 8007ca8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007cac:	42bd      	cmp	r5, r7
 8007cae:	dd6f      	ble.n	8007d90 <__gethex+0x32c>
 8007cb0:	1bed      	subs	r5, r5, r7
 8007cb2:	42ae      	cmp	r6, r5
 8007cb4:	dc34      	bgt.n	8007d20 <__gethex+0x2bc>
 8007cb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d022      	beq.n	8007d04 <__gethex+0x2a0>
 8007cbe:	2b03      	cmp	r3, #3
 8007cc0:	d024      	beq.n	8007d0c <__gethex+0x2a8>
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d115      	bne.n	8007cf2 <__gethex+0x28e>
 8007cc6:	42ae      	cmp	r6, r5
 8007cc8:	d113      	bne.n	8007cf2 <__gethex+0x28e>
 8007cca:	2e01      	cmp	r6, #1
 8007ccc:	d10b      	bne.n	8007ce6 <__gethex+0x282>
 8007cce:	9a02      	ldr	r2, [sp, #8]
 8007cd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007cd4:	6013      	str	r3, [r2, #0]
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	6123      	str	r3, [r4, #16]
 8007cda:	f8ca 3000 	str.w	r3, [sl]
 8007cde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ce0:	2562      	movs	r5, #98	@ 0x62
 8007ce2:	601c      	str	r4, [r3, #0]
 8007ce4:	e73a      	b.n	8007b5c <__gethex+0xf8>
 8007ce6:	1e71      	subs	r1, r6, #1
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f000 fede 	bl	8008aaa <__any_on>
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d1ed      	bne.n	8007cce <__gethex+0x26a>
 8007cf2:	9801      	ldr	r0, [sp, #4]
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	f000 fa8f 	bl	8008218 <_Bfree>
 8007cfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	2550      	movs	r5, #80	@ 0x50
 8007d02:	e72b      	b.n	8007b5c <__gethex+0xf8>
 8007d04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1f3      	bne.n	8007cf2 <__gethex+0x28e>
 8007d0a:	e7e0      	b.n	8007cce <__gethex+0x26a>
 8007d0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1dd      	bne.n	8007cce <__gethex+0x26a>
 8007d12:	e7ee      	b.n	8007cf2 <__gethex+0x28e>
 8007d14:	0800a124 	.word	0x0800a124
 8007d18:	0800a1e1 	.word	0x0800a1e1
 8007d1c:	0800a1f2 	.word	0x0800a1f2
 8007d20:	1e6f      	subs	r7, r5, #1
 8007d22:	f1b9 0f00 	cmp.w	r9, #0
 8007d26:	d130      	bne.n	8007d8a <__gethex+0x326>
 8007d28:	b127      	cbz	r7, 8007d34 <__gethex+0x2d0>
 8007d2a:	4639      	mov	r1, r7
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f000 febc 	bl	8008aaa <__any_on>
 8007d32:	4681      	mov	r9, r0
 8007d34:	117a      	asrs	r2, r7, #5
 8007d36:	2301      	movs	r3, #1
 8007d38:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007d3c:	f007 071f 	and.w	r7, r7, #31
 8007d40:	40bb      	lsls	r3, r7
 8007d42:	4213      	tst	r3, r2
 8007d44:	4629      	mov	r1, r5
 8007d46:	4620      	mov	r0, r4
 8007d48:	bf18      	it	ne
 8007d4a:	f049 0902 	orrne.w	r9, r9, #2
 8007d4e:	f7ff fe21 	bl	8007994 <rshift>
 8007d52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007d56:	1b76      	subs	r6, r6, r5
 8007d58:	2502      	movs	r5, #2
 8007d5a:	f1b9 0f00 	cmp.w	r9, #0
 8007d5e:	d047      	beq.n	8007df0 <__gethex+0x38c>
 8007d60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d015      	beq.n	8007d94 <__gethex+0x330>
 8007d68:	2b03      	cmp	r3, #3
 8007d6a:	d017      	beq.n	8007d9c <__gethex+0x338>
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d109      	bne.n	8007d84 <__gethex+0x320>
 8007d70:	f019 0f02 	tst.w	r9, #2
 8007d74:	d006      	beq.n	8007d84 <__gethex+0x320>
 8007d76:	f8da 3000 	ldr.w	r3, [sl]
 8007d7a:	ea49 0903 	orr.w	r9, r9, r3
 8007d7e:	f019 0f01 	tst.w	r9, #1
 8007d82:	d10e      	bne.n	8007da2 <__gethex+0x33e>
 8007d84:	f045 0510 	orr.w	r5, r5, #16
 8007d88:	e032      	b.n	8007df0 <__gethex+0x38c>
 8007d8a:	f04f 0901 	mov.w	r9, #1
 8007d8e:	e7d1      	b.n	8007d34 <__gethex+0x2d0>
 8007d90:	2501      	movs	r5, #1
 8007d92:	e7e2      	b.n	8007d5a <__gethex+0x2f6>
 8007d94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d96:	f1c3 0301 	rsb	r3, r3, #1
 8007d9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d0f0      	beq.n	8007d84 <__gethex+0x320>
 8007da2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007da6:	f104 0314 	add.w	r3, r4, #20
 8007daa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007dae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007db2:	f04f 0c00 	mov.w	ip, #0
 8007db6:	4618      	mov	r0, r3
 8007db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dbc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007dc0:	d01b      	beq.n	8007dfa <__gethex+0x396>
 8007dc2:	3201      	adds	r2, #1
 8007dc4:	6002      	str	r2, [r0, #0]
 8007dc6:	2d02      	cmp	r5, #2
 8007dc8:	f104 0314 	add.w	r3, r4, #20
 8007dcc:	d13c      	bne.n	8007e48 <__gethex+0x3e4>
 8007dce:	f8d8 2000 	ldr.w	r2, [r8]
 8007dd2:	3a01      	subs	r2, #1
 8007dd4:	42b2      	cmp	r2, r6
 8007dd6:	d109      	bne.n	8007dec <__gethex+0x388>
 8007dd8:	1171      	asrs	r1, r6, #5
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007de0:	f006 061f 	and.w	r6, r6, #31
 8007de4:	fa02 f606 	lsl.w	r6, r2, r6
 8007de8:	421e      	tst	r6, r3
 8007dea:	d13a      	bne.n	8007e62 <__gethex+0x3fe>
 8007dec:	f045 0520 	orr.w	r5, r5, #32
 8007df0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007df2:	601c      	str	r4, [r3, #0]
 8007df4:	9b02      	ldr	r3, [sp, #8]
 8007df6:	601f      	str	r7, [r3, #0]
 8007df8:	e6b0      	b.n	8007b5c <__gethex+0xf8>
 8007dfa:	4299      	cmp	r1, r3
 8007dfc:	f843 cc04 	str.w	ip, [r3, #-4]
 8007e00:	d8d9      	bhi.n	8007db6 <__gethex+0x352>
 8007e02:	68a3      	ldr	r3, [r4, #8]
 8007e04:	459b      	cmp	fp, r3
 8007e06:	db17      	blt.n	8007e38 <__gethex+0x3d4>
 8007e08:	6861      	ldr	r1, [r4, #4]
 8007e0a:	9801      	ldr	r0, [sp, #4]
 8007e0c:	3101      	adds	r1, #1
 8007e0e:	f000 f9c3 	bl	8008198 <_Balloc>
 8007e12:	4681      	mov	r9, r0
 8007e14:	b918      	cbnz	r0, 8007e1e <__gethex+0x3ba>
 8007e16:	4b1a      	ldr	r3, [pc, #104]	@ (8007e80 <__gethex+0x41c>)
 8007e18:	4602      	mov	r2, r0
 8007e1a:	2184      	movs	r1, #132	@ 0x84
 8007e1c:	e6c5      	b.n	8007baa <__gethex+0x146>
 8007e1e:	6922      	ldr	r2, [r4, #16]
 8007e20:	3202      	adds	r2, #2
 8007e22:	f104 010c 	add.w	r1, r4, #12
 8007e26:	0092      	lsls	r2, r2, #2
 8007e28:	300c      	adds	r0, #12
 8007e2a:	f7fe fef2 	bl	8006c12 <memcpy>
 8007e2e:	4621      	mov	r1, r4
 8007e30:	9801      	ldr	r0, [sp, #4]
 8007e32:	f000 f9f1 	bl	8008218 <_Bfree>
 8007e36:	464c      	mov	r4, r9
 8007e38:	6923      	ldr	r3, [r4, #16]
 8007e3a:	1c5a      	adds	r2, r3, #1
 8007e3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e40:	6122      	str	r2, [r4, #16]
 8007e42:	2201      	movs	r2, #1
 8007e44:	615a      	str	r2, [r3, #20]
 8007e46:	e7be      	b.n	8007dc6 <__gethex+0x362>
 8007e48:	6922      	ldr	r2, [r4, #16]
 8007e4a:	455a      	cmp	r2, fp
 8007e4c:	dd0b      	ble.n	8007e66 <__gethex+0x402>
 8007e4e:	2101      	movs	r1, #1
 8007e50:	4620      	mov	r0, r4
 8007e52:	f7ff fd9f 	bl	8007994 <rshift>
 8007e56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e5a:	3701      	adds	r7, #1
 8007e5c:	42bb      	cmp	r3, r7
 8007e5e:	f6ff aee0 	blt.w	8007c22 <__gethex+0x1be>
 8007e62:	2501      	movs	r5, #1
 8007e64:	e7c2      	b.n	8007dec <__gethex+0x388>
 8007e66:	f016 061f 	ands.w	r6, r6, #31
 8007e6a:	d0fa      	beq.n	8007e62 <__gethex+0x3fe>
 8007e6c:	4453      	add	r3, sl
 8007e6e:	f1c6 0620 	rsb	r6, r6, #32
 8007e72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007e76:	f000 fa81 	bl	800837c <__hi0bits>
 8007e7a:	42b0      	cmp	r0, r6
 8007e7c:	dbe7      	blt.n	8007e4e <__gethex+0x3ea>
 8007e7e:	e7f0      	b.n	8007e62 <__gethex+0x3fe>
 8007e80:	0800a1e1 	.word	0x0800a1e1

08007e84 <L_shift>:
 8007e84:	f1c2 0208 	rsb	r2, r2, #8
 8007e88:	0092      	lsls	r2, r2, #2
 8007e8a:	b570      	push	{r4, r5, r6, lr}
 8007e8c:	f1c2 0620 	rsb	r6, r2, #32
 8007e90:	6843      	ldr	r3, [r0, #4]
 8007e92:	6804      	ldr	r4, [r0, #0]
 8007e94:	fa03 f506 	lsl.w	r5, r3, r6
 8007e98:	432c      	orrs	r4, r5
 8007e9a:	40d3      	lsrs	r3, r2
 8007e9c:	6004      	str	r4, [r0, #0]
 8007e9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007ea2:	4288      	cmp	r0, r1
 8007ea4:	d3f4      	bcc.n	8007e90 <L_shift+0xc>
 8007ea6:	bd70      	pop	{r4, r5, r6, pc}

08007ea8 <__match>:
 8007ea8:	b530      	push	{r4, r5, lr}
 8007eaa:	6803      	ldr	r3, [r0, #0]
 8007eac:	3301      	adds	r3, #1
 8007eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007eb2:	b914      	cbnz	r4, 8007eba <__match+0x12>
 8007eb4:	6003      	str	r3, [r0, #0]
 8007eb6:	2001      	movs	r0, #1
 8007eb8:	bd30      	pop	{r4, r5, pc}
 8007eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ebe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007ec2:	2d19      	cmp	r5, #25
 8007ec4:	bf98      	it	ls
 8007ec6:	3220      	addls	r2, #32
 8007ec8:	42a2      	cmp	r2, r4
 8007eca:	d0f0      	beq.n	8007eae <__match+0x6>
 8007ecc:	2000      	movs	r0, #0
 8007ece:	e7f3      	b.n	8007eb8 <__match+0x10>

08007ed0 <__hexnan>:
 8007ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed4:	680b      	ldr	r3, [r1, #0]
 8007ed6:	6801      	ldr	r1, [r0, #0]
 8007ed8:	115e      	asrs	r6, r3, #5
 8007eda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007ede:	f013 031f 	ands.w	r3, r3, #31
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	bf18      	it	ne
 8007ee6:	3604      	addne	r6, #4
 8007ee8:	2500      	movs	r5, #0
 8007eea:	1f37      	subs	r7, r6, #4
 8007eec:	4682      	mov	sl, r0
 8007eee:	4690      	mov	r8, r2
 8007ef0:	9301      	str	r3, [sp, #4]
 8007ef2:	f846 5c04 	str.w	r5, [r6, #-4]
 8007ef6:	46b9      	mov	r9, r7
 8007ef8:	463c      	mov	r4, r7
 8007efa:	9502      	str	r5, [sp, #8]
 8007efc:	46ab      	mov	fp, r5
 8007efe:	784a      	ldrb	r2, [r1, #1]
 8007f00:	1c4b      	adds	r3, r1, #1
 8007f02:	9303      	str	r3, [sp, #12]
 8007f04:	b342      	cbz	r2, 8007f58 <__hexnan+0x88>
 8007f06:	4610      	mov	r0, r2
 8007f08:	9105      	str	r1, [sp, #20]
 8007f0a:	9204      	str	r2, [sp, #16]
 8007f0c:	f7ff fd94 	bl	8007a38 <__hexdig_fun>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d151      	bne.n	8007fb8 <__hexnan+0xe8>
 8007f14:	9a04      	ldr	r2, [sp, #16]
 8007f16:	9905      	ldr	r1, [sp, #20]
 8007f18:	2a20      	cmp	r2, #32
 8007f1a:	d818      	bhi.n	8007f4e <__hexnan+0x7e>
 8007f1c:	9b02      	ldr	r3, [sp, #8]
 8007f1e:	459b      	cmp	fp, r3
 8007f20:	dd13      	ble.n	8007f4a <__hexnan+0x7a>
 8007f22:	454c      	cmp	r4, r9
 8007f24:	d206      	bcs.n	8007f34 <__hexnan+0x64>
 8007f26:	2d07      	cmp	r5, #7
 8007f28:	dc04      	bgt.n	8007f34 <__hexnan+0x64>
 8007f2a:	462a      	mov	r2, r5
 8007f2c:	4649      	mov	r1, r9
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f7ff ffa8 	bl	8007e84 <L_shift>
 8007f34:	4544      	cmp	r4, r8
 8007f36:	d952      	bls.n	8007fde <__hexnan+0x10e>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	f1a4 0904 	sub.w	r9, r4, #4
 8007f3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f42:	f8cd b008 	str.w	fp, [sp, #8]
 8007f46:	464c      	mov	r4, r9
 8007f48:	461d      	mov	r5, r3
 8007f4a:	9903      	ldr	r1, [sp, #12]
 8007f4c:	e7d7      	b.n	8007efe <__hexnan+0x2e>
 8007f4e:	2a29      	cmp	r2, #41	@ 0x29
 8007f50:	d157      	bne.n	8008002 <__hexnan+0x132>
 8007f52:	3102      	adds	r1, #2
 8007f54:	f8ca 1000 	str.w	r1, [sl]
 8007f58:	f1bb 0f00 	cmp.w	fp, #0
 8007f5c:	d051      	beq.n	8008002 <__hexnan+0x132>
 8007f5e:	454c      	cmp	r4, r9
 8007f60:	d206      	bcs.n	8007f70 <__hexnan+0xa0>
 8007f62:	2d07      	cmp	r5, #7
 8007f64:	dc04      	bgt.n	8007f70 <__hexnan+0xa0>
 8007f66:	462a      	mov	r2, r5
 8007f68:	4649      	mov	r1, r9
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f7ff ff8a 	bl	8007e84 <L_shift>
 8007f70:	4544      	cmp	r4, r8
 8007f72:	d936      	bls.n	8007fe2 <__hexnan+0x112>
 8007f74:	f1a8 0204 	sub.w	r2, r8, #4
 8007f78:	4623      	mov	r3, r4
 8007f7a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007f7e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007f82:	429f      	cmp	r7, r3
 8007f84:	d2f9      	bcs.n	8007f7a <__hexnan+0xaa>
 8007f86:	1b3b      	subs	r3, r7, r4
 8007f88:	f023 0303 	bic.w	r3, r3, #3
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	3401      	adds	r4, #1
 8007f90:	3e03      	subs	r6, #3
 8007f92:	42b4      	cmp	r4, r6
 8007f94:	bf88      	it	hi
 8007f96:	2304      	movhi	r3, #4
 8007f98:	4443      	add	r3, r8
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f843 2b04 	str.w	r2, [r3], #4
 8007fa0:	429f      	cmp	r7, r3
 8007fa2:	d2fb      	bcs.n	8007f9c <__hexnan+0xcc>
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	b91b      	cbnz	r3, 8007fb0 <__hexnan+0xe0>
 8007fa8:	4547      	cmp	r7, r8
 8007faa:	d128      	bne.n	8007ffe <__hexnan+0x12e>
 8007fac:	2301      	movs	r3, #1
 8007fae:	603b      	str	r3, [r7, #0]
 8007fb0:	2005      	movs	r0, #5
 8007fb2:	b007      	add	sp, #28
 8007fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb8:	3501      	adds	r5, #1
 8007fba:	2d08      	cmp	r5, #8
 8007fbc:	f10b 0b01 	add.w	fp, fp, #1
 8007fc0:	dd06      	ble.n	8007fd0 <__hexnan+0x100>
 8007fc2:	4544      	cmp	r4, r8
 8007fc4:	d9c1      	bls.n	8007f4a <__hexnan+0x7a>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f844 3c04 	str.w	r3, [r4, #-4]
 8007fcc:	2501      	movs	r5, #1
 8007fce:	3c04      	subs	r4, #4
 8007fd0:	6822      	ldr	r2, [r4, #0]
 8007fd2:	f000 000f 	and.w	r0, r0, #15
 8007fd6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007fda:	6020      	str	r0, [r4, #0]
 8007fdc:	e7b5      	b.n	8007f4a <__hexnan+0x7a>
 8007fde:	2508      	movs	r5, #8
 8007fe0:	e7b3      	b.n	8007f4a <__hexnan+0x7a>
 8007fe2:	9b01      	ldr	r3, [sp, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d0dd      	beq.n	8007fa4 <__hexnan+0xd4>
 8007fe8:	f1c3 0320 	rsb	r3, r3, #32
 8007fec:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff0:	40da      	lsrs	r2, r3
 8007ff2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	f846 3c04 	str.w	r3, [r6, #-4]
 8007ffc:	e7d2      	b.n	8007fa4 <__hexnan+0xd4>
 8007ffe:	3f04      	subs	r7, #4
 8008000:	e7d0      	b.n	8007fa4 <__hexnan+0xd4>
 8008002:	2004      	movs	r0, #4
 8008004:	e7d5      	b.n	8007fb2 <__hexnan+0xe2>
	...

08008008 <malloc>:
 8008008:	4b02      	ldr	r3, [pc, #8]	@ (8008014 <malloc+0xc>)
 800800a:	4601      	mov	r1, r0
 800800c:	6818      	ldr	r0, [r3, #0]
 800800e:	f000 b825 	b.w	800805c <_malloc_r>
 8008012:	bf00      	nop
 8008014:	20000190 	.word	0x20000190

08008018 <sbrk_aligned>:
 8008018:	b570      	push	{r4, r5, r6, lr}
 800801a:	4e0f      	ldr	r6, [pc, #60]	@ (8008058 <sbrk_aligned+0x40>)
 800801c:	460c      	mov	r4, r1
 800801e:	6831      	ldr	r1, [r6, #0]
 8008020:	4605      	mov	r5, r0
 8008022:	b911      	cbnz	r1, 800802a <sbrk_aligned+0x12>
 8008024:	f001 fb9a 	bl	800975c <_sbrk_r>
 8008028:	6030      	str	r0, [r6, #0]
 800802a:	4621      	mov	r1, r4
 800802c:	4628      	mov	r0, r5
 800802e:	f001 fb95 	bl	800975c <_sbrk_r>
 8008032:	1c43      	adds	r3, r0, #1
 8008034:	d103      	bne.n	800803e <sbrk_aligned+0x26>
 8008036:	f04f 34ff 	mov.w	r4, #4294967295
 800803a:	4620      	mov	r0, r4
 800803c:	bd70      	pop	{r4, r5, r6, pc}
 800803e:	1cc4      	adds	r4, r0, #3
 8008040:	f024 0403 	bic.w	r4, r4, #3
 8008044:	42a0      	cmp	r0, r4
 8008046:	d0f8      	beq.n	800803a <sbrk_aligned+0x22>
 8008048:	1a21      	subs	r1, r4, r0
 800804a:	4628      	mov	r0, r5
 800804c:	f001 fb86 	bl	800975c <_sbrk_r>
 8008050:	3001      	adds	r0, #1
 8008052:	d1f2      	bne.n	800803a <sbrk_aligned+0x22>
 8008054:	e7ef      	b.n	8008036 <sbrk_aligned+0x1e>
 8008056:	bf00      	nop
 8008058:	20000aa8 	.word	0x20000aa8

0800805c <_malloc_r>:
 800805c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008060:	1ccd      	adds	r5, r1, #3
 8008062:	f025 0503 	bic.w	r5, r5, #3
 8008066:	3508      	adds	r5, #8
 8008068:	2d0c      	cmp	r5, #12
 800806a:	bf38      	it	cc
 800806c:	250c      	movcc	r5, #12
 800806e:	2d00      	cmp	r5, #0
 8008070:	4606      	mov	r6, r0
 8008072:	db01      	blt.n	8008078 <_malloc_r+0x1c>
 8008074:	42a9      	cmp	r1, r5
 8008076:	d904      	bls.n	8008082 <_malloc_r+0x26>
 8008078:	230c      	movs	r3, #12
 800807a:	6033      	str	r3, [r6, #0]
 800807c:	2000      	movs	r0, #0
 800807e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008082:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008158 <_malloc_r+0xfc>
 8008086:	f000 f87b 	bl	8008180 <__malloc_lock>
 800808a:	f8d8 3000 	ldr.w	r3, [r8]
 800808e:	461c      	mov	r4, r3
 8008090:	bb44      	cbnz	r4, 80080e4 <_malloc_r+0x88>
 8008092:	4629      	mov	r1, r5
 8008094:	4630      	mov	r0, r6
 8008096:	f7ff ffbf 	bl	8008018 <sbrk_aligned>
 800809a:	1c43      	adds	r3, r0, #1
 800809c:	4604      	mov	r4, r0
 800809e:	d158      	bne.n	8008152 <_malloc_r+0xf6>
 80080a0:	f8d8 4000 	ldr.w	r4, [r8]
 80080a4:	4627      	mov	r7, r4
 80080a6:	2f00      	cmp	r7, #0
 80080a8:	d143      	bne.n	8008132 <_malloc_r+0xd6>
 80080aa:	2c00      	cmp	r4, #0
 80080ac:	d04b      	beq.n	8008146 <_malloc_r+0xea>
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	4639      	mov	r1, r7
 80080b2:	4630      	mov	r0, r6
 80080b4:	eb04 0903 	add.w	r9, r4, r3
 80080b8:	f001 fb50 	bl	800975c <_sbrk_r>
 80080bc:	4581      	cmp	r9, r0
 80080be:	d142      	bne.n	8008146 <_malloc_r+0xea>
 80080c0:	6821      	ldr	r1, [r4, #0]
 80080c2:	1a6d      	subs	r5, r5, r1
 80080c4:	4629      	mov	r1, r5
 80080c6:	4630      	mov	r0, r6
 80080c8:	f7ff ffa6 	bl	8008018 <sbrk_aligned>
 80080cc:	3001      	adds	r0, #1
 80080ce:	d03a      	beq.n	8008146 <_malloc_r+0xea>
 80080d0:	6823      	ldr	r3, [r4, #0]
 80080d2:	442b      	add	r3, r5
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	f8d8 3000 	ldr.w	r3, [r8]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	bb62      	cbnz	r2, 8008138 <_malloc_r+0xdc>
 80080de:	f8c8 7000 	str.w	r7, [r8]
 80080e2:	e00f      	b.n	8008104 <_malloc_r+0xa8>
 80080e4:	6822      	ldr	r2, [r4, #0]
 80080e6:	1b52      	subs	r2, r2, r5
 80080e8:	d420      	bmi.n	800812c <_malloc_r+0xd0>
 80080ea:	2a0b      	cmp	r2, #11
 80080ec:	d917      	bls.n	800811e <_malloc_r+0xc2>
 80080ee:	1961      	adds	r1, r4, r5
 80080f0:	42a3      	cmp	r3, r4
 80080f2:	6025      	str	r5, [r4, #0]
 80080f4:	bf18      	it	ne
 80080f6:	6059      	strne	r1, [r3, #4]
 80080f8:	6863      	ldr	r3, [r4, #4]
 80080fa:	bf08      	it	eq
 80080fc:	f8c8 1000 	streq.w	r1, [r8]
 8008100:	5162      	str	r2, [r4, r5]
 8008102:	604b      	str	r3, [r1, #4]
 8008104:	4630      	mov	r0, r6
 8008106:	f000 f841 	bl	800818c <__malloc_unlock>
 800810a:	f104 000b 	add.w	r0, r4, #11
 800810e:	1d23      	adds	r3, r4, #4
 8008110:	f020 0007 	bic.w	r0, r0, #7
 8008114:	1ac2      	subs	r2, r0, r3
 8008116:	bf1c      	itt	ne
 8008118:	1a1b      	subne	r3, r3, r0
 800811a:	50a3      	strne	r3, [r4, r2]
 800811c:	e7af      	b.n	800807e <_malloc_r+0x22>
 800811e:	6862      	ldr	r2, [r4, #4]
 8008120:	42a3      	cmp	r3, r4
 8008122:	bf0c      	ite	eq
 8008124:	f8c8 2000 	streq.w	r2, [r8]
 8008128:	605a      	strne	r2, [r3, #4]
 800812a:	e7eb      	b.n	8008104 <_malloc_r+0xa8>
 800812c:	4623      	mov	r3, r4
 800812e:	6864      	ldr	r4, [r4, #4]
 8008130:	e7ae      	b.n	8008090 <_malloc_r+0x34>
 8008132:	463c      	mov	r4, r7
 8008134:	687f      	ldr	r7, [r7, #4]
 8008136:	e7b6      	b.n	80080a6 <_malloc_r+0x4a>
 8008138:	461a      	mov	r2, r3
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	42a3      	cmp	r3, r4
 800813e:	d1fb      	bne.n	8008138 <_malloc_r+0xdc>
 8008140:	2300      	movs	r3, #0
 8008142:	6053      	str	r3, [r2, #4]
 8008144:	e7de      	b.n	8008104 <_malloc_r+0xa8>
 8008146:	230c      	movs	r3, #12
 8008148:	6033      	str	r3, [r6, #0]
 800814a:	4630      	mov	r0, r6
 800814c:	f000 f81e 	bl	800818c <__malloc_unlock>
 8008150:	e794      	b.n	800807c <_malloc_r+0x20>
 8008152:	6005      	str	r5, [r0, #0]
 8008154:	e7d6      	b.n	8008104 <_malloc_r+0xa8>
 8008156:	bf00      	nop
 8008158:	20000aac 	.word	0x20000aac

0800815c <__ascii_mbtowc>:
 800815c:	b082      	sub	sp, #8
 800815e:	b901      	cbnz	r1, 8008162 <__ascii_mbtowc+0x6>
 8008160:	a901      	add	r1, sp, #4
 8008162:	b142      	cbz	r2, 8008176 <__ascii_mbtowc+0x1a>
 8008164:	b14b      	cbz	r3, 800817a <__ascii_mbtowc+0x1e>
 8008166:	7813      	ldrb	r3, [r2, #0]
 8008168:	600b      	str	r3, [r1, #0]
 800816a:	7812      	ldrb	r2, [r2, #0]
 800816c:	1e10      	subs	r0, r2, #0
 800816e:	bf18      	it	ne
 8008170:	2001      	movne	r0, #1
 8008172:	b002      	add	sp, #8
 8008174:	4770      	bx	lr
 8008176:	4610      	mov	r0, r2
 8008178:	e7fb      	b.n	8008172 <__ascii_mbtowc+0x16>
 800817a:	f06f 0001 	mvn.w	r0, #1
 800817e:	e7f8      	b.n	8008172 <__ascii_mbtowc+0x16>

08008180 <__malloc_lock>:
 8008180:	4801      	ldr	r0, [pc, #4]	@ (8008188 <__malloc_lock+0x8>)
 8008182:	f7fe bd44 	b.w	8006c0e <__retarget_lock_acquire_recursive>
 8008186:	bf00      	nop
 8008188:	20000aa4 	.word	0x20000aa4

0800818c <__malloc_unlock>:
 800818c:	4801      	ldr	r0, [pc, #4]	@ (8008194 <__malloc_unlock+0x8>)
 800818e:	f7fe bd3f 	b.w	8006c10 <__retarget_lock_release_recursive>
 8008192:	bf00      	nop
 8008194:	20000aa4 	.word	0x20000aa4

08008198 <_Balloc>:
 8008198:	b570      	push	{r4, r5, r6, lr}
 800819a:	69c6      	ldr	r6, [r0, #28]
 800819c:	4604      	mov	r4, r0
 800819e:	460d      	mov	r5, r1
 80081a0:	b976      	cbnz	r6, 80081c0 <_Balloc+0x28>
 80081a2:	2010      	movs	r0, #16
 80081a4:	f7ff ff30 	bl	8008008 <malloc>
 80081a8:	4602      	mov	r2, r0
 80081aa:	61e0      	str	r0, [r4, #28]
 80081ac:	b920      	cbnz	r0, 80081b8 <_Balloc+0x20>
 80081ae:	4b18      	ldr	r3, [pc, #96]	@ (8008210 <_Balloc+0x78>)
 80081b0:	4818      	ldr	r0, [pc, #96]	@ (8008214 <_Balloc+0x7c>)
 80081b2:	216b      	movs	r1, #107	@ 0x6b
 80081b4:	f001 fae2 	bl	800977c <__assert_func>
 80081b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081bc:	6006      	str	r6, [r0, #0]
 80081be:	60c6      	str	r6, [r0, #12]
 80081c0:	69e6      	ldr	r6, [r4, #28]
 80081c2:	68f3      	ldr	r3, [r6, #12]
 80081c4:	b183      	cbz	r3, 80081e8 <_Balloc+0x50>
 80081c6:	69e3      	ldr	r3, [r4, #28]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081ce:	b9b8      	cbnz	r0, 8008200 <_Balloc+0x68>
 80081d0:	2101      	movs	r1, #1
 80081d2:	fa01 f605 	lsl.w	r6, r1, r5
 80081d6:	1d72      	adds	r2, r6, #5
 80081d8:	0092      	lsls	r2, r2, #2
 80081da:	4620      	mov	r0, r4
 80081dc:	f001 faec 	bl	80097b8 <_calloc_r>
 80081e0:	b160      	cbz	r0, 80081fc <_Balloc+0x64>
 80081e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80081e6:	e00e      	b.n	8008206 <_Balloc+0x6e>
 80081e8:	2221      	movs	r2, #33	@ 0x21
 80081ea:	2104      	movs	r1, #4
 80081ec:	4620      	mov	r0, r4
 80081ee:	f001 fae3 	bl	80097b8 <_calloc_r>
 80081f2:	69e3      	ldr	r3, [r4, #28]
 80081f4:	60f0      	str	r0, [r6, #12]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1e4      	bne.n	80081c6 <_Balloc+0x2e>
 80081fc:	2000      	movs	r0, #0
 80081fe:	bd70      	pop	{r4, r5, r6, pc}
 8008200:	6802      	ldr	r2, [r0, #0]
 8008202:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008206:	2300      	movs	r3, #0
 8008208:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800820c:	e7f7      	b.n	80081fe <_Balloc+0x66>
 800820e:	bf00      	nop
 8008210:	0800a172 	.word	0x0800a172
 8008214:	0800a252 	.word	0x0800a252

08008218 <_Bfree>:
 8008218:	b570      	push	{r4, r5, r6, lr}
 800821a:	69c6      	ldr	r6, [r0, #28]
 800821c:	4605      	mov	r5, r0
 800821e:	460c      	mov	r4, r1
 8008220:	b976      	cbnz	r6, 8008240 <_Bfree+0x28>
 8008222:	2010      	movs	r0, #16
 8008224:	f7ff fef0 	bl	8008008 <malloc>
 8008228:	4602      	mov	r2, r0
 800822a:	61e8      	str	r0, [r5, #28]
 800822c:	b920      	cbnz	r0, 8008238 <_Bfree+0x20>
 800822e:	4b09      	ldr	r3, [pc, #36]	@ (8008254 <_Bfree+0x3c>)
 8008230:	4809      	ldr	r0, [pc, #36]	@ (8008258 <_Bfree+0x40>)
 8008232:	218f      	movs	r1, #143	@ 0x8f
 8008234:	f001 faa2 	bl	800977c <__assert_func>
 8008238:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800823c:	6006      	str	r6, [r0, #0]
 800823e:	60c6      	str	r6, [r0, #12]
 8008240:	b13c      	cbz	r4, 8008252 <_Bfree+0x3a>
 8008242:	69eb      	ldr	r3, [r5, #28]
 8008244:	6862      	ldr	r2, [r4, #4]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800824c:	6021      	str	r1, [r4, #0]
 800824e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008252:	bd70      	pop	{r4, r5, r6, pc}
 8008254:	0800a172 	.word	0x0800a172
 8008258:	0800a252 	.word	0x0800a252

0800825c <__multadd>:
 800825c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008260:	690d      	ldr	r5, [r1, #16]
 8008262:	4607      	mov	r7, r0
 8008264:	460c      	mov	r4, r1
 8008266:	461e      	mov	r6, r3
 8008268:	f101 0c14 	add.w	ip, r1, #20
 800826c:	2000      	movs	r0, #0
 800826e:	f8dc 3000 	ldr.w	r3, [ip]
 8008272:	b299      	uxth	r1, r3
 8008274:	fb02 6101 	mla	r1, r2, r1, r6
 8008278:	0c1e      	lsrs	r6, r3, #16
 800827a:	0c0b      	lsrs	r3, r1, #16
 800827c:	fb02 3306 	mla	r3, r2, r6, r3
 8008280:	b289      	uxth	r1, r1
 8008282:	3001      	adds	r0, #1
 8008284:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008288:	4285      	cmp	r5, r0
 800828a:	f84c 1b04 	str.w	r1, [ip], #4
 800828e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008292:	dcec      	bgt.n	800826e <__multadd+0x12>
 8008294:	b30e      	cbz	r6, 80082da <__multadd+0x7e>
 8008296:	68a3      	ldr	r3, [r4, #8]
 8008298:	42ab      	cmp	r3, r5
 800829a:	dc19      	bgt.n	80082d0 <__multadd+0x74>
 800829c:	6861      	ldr	r1, [r4, #4]
 800829e:	4638      	mov	r0, r7
 80082a0:	3101      	adds	r1, #1
 80082a2:	f7ff ff79 	bl	8008198 <_Balloc>
 80082a6:	4680      	mov	r8, r0
 80082a8:	b928      	cbnz	r0, 80082b6 <__multadd+0x5a>
 80082aa:	4602      	mov	r2, r0
 80082ac:	4b0c      	ldr	r3, [pc, #48]	@ (80082e0 <__multadd+0x84>)
 80082ae:	480d      	ldr	r0, [pc, #52]	@ (80082e4 <__multadd+0x88>)
 80082b0:	21ba      	movs	r1, #186	@ 0xba
 80082b2:	f001 fa63 	bl	800977c <__assert_func>
 80082b6:	6922      	ldr	r2, [r4, #16]
 80082b8:	3202      	adds	r2, #2
 80082ba:	f104 010c 	add.w	r1, r4, #12
 80082be:	0092      	lsls	r2, r2, #2
 80082c0:	300c      	adds	r0, #12
 80082c2:	f7fe fca6 	bl	8006c12 <memcpy>
 80082c6:	4621      	mov	r1, r4
 80082c8:	4638      	mov	r0, r7
 80082ca:	f7ff ffa5 	bl	8008218 <_Bfree>
 80082ce:	4644      	mov	r4, r8
 80082d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082d4:	3501      	adds	r5, #1
 80082d6:	615e      	str	r6, [r3, #20]
 80082d8:	6125      	str	r5, [r4, #16]
 80082da:	4620      	mov	r0, r4
 80082dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082e0:	0800a1e1 	.word	0x0800a1e1
 80082e4:	0800a252 	.word	0x0800a252

080082e8 <__s2b>:
 80082e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082ec:	460c      	mov	r4, r1
 80082ee:	4615      	mov	r5, r2
 80082f0:	461f      	mov	r7, r3
 80082f2:	2209      	movs	r2, #9
 80082f4:	3308      	adds	r3, #8
 80082f6:	4606      	mov	r6, r0
 80082f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80082fc:	2100      	movs	r1, #0
 80082fe:	2201      	movs	r2, #1
 8008300:	429a      	cmp	r2, r3
 8008302:	db09      	blt.n	8008318 <__s2b+0x30>
 8008304:	4630      	mov	r0, r6
 8008306:	f7ff ff47 	bl	8008198 <_Balloc>
 800830a:	b940      	cbnz	r0, 800831e <__s2b+0x36>
 800830c:	4602      	mov	r2, r0
 800830e:	4b19      	ldr	r3, [pc, #100]	@ (8008374 <__s2b+0x8c>)
 8008310:	4819      	ldr	r0, [pc, #100]	@ (8008378 <__s2b+0x90>)
 8008312:	21d3      	movs	r1, #211	@ 0xd3
 8008314:	f001 fa32 	bl	800977c <__assert_func>
 8008318:	0052      	lsls	r2, r2, #1
 800831a:	3101      	adds	r1, #1
 800831c:	e7f0      	b.n	8008300 <__s2b+0x18>
 800831e:	9b08      	ldr	r3, [sp, #32]
 8008320:	6143      	str	r3, [r0, #20]
 8008322:	2d09      	cmp	r5, #9
 8008324:	f04f 0301 	mov.w	r3, #1
 8008328:	6103      	str	r3, [r0, #16]
 800832a:	dd16      	ble.n	800835a <__s2b+0x72>
 800832c:	f104 0909 	add.w	r9, r4, #9
 8008330:	46c8      	mov	r8, r9
 8008332:	442c      	add	r4, r5
 8008334:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008338:	4601      	mov	r1, r0
 800833a:	3b30      	subs	r3, #48	@ 0x30
 800833c:	220a      	movs	r2, #10
 800833e:	4630      	mov	r0, r6
 8008340:	f7ff ff8c 	bl	800825c <__multadd>
 8008344:	45a0      	cmp	r8, r4
 8008346:	d1f5      	bne.n	8008334 <__s2b+0x4c>
 8008348:	f1a5 0408 	sub.w	r4, r5, #8
 800834c:	444c      	add	r4, r9
 800834e:	1b2d      	subs	r5, r5, r4
 8008350:	1963      	adds	r3, r4, r5
 8008352:	42bb      	cmp	r3, r7
 8008354:	db04      	blt.n	8008360 <__s2b+0x78>
 8008356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800835a:	340a      	adds	r4, #10
 800835c:	2509      	movs	r5, #9
 800835e:	e7f6      	b.n	800834e <__s2b+0x66>
 8008360:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008364:	4601      	mov	r1, r0
 8008366:	3b30      	subs	r3, #48	@ 0x30
 8008368:	220a      	movs	r2, #10
 800836a:	4630      	mov	r0, r6
 800836c:	f7ff ff76 	bl	800825c <__multadd>
 8008370:	e7ee      	b.n	8008350 <__s2b+0x68>
 8008372:	bf00      	nop
 8008374:	0800a1e1 	.word	0x0800a1e1
 8008378:	0800a252 	.word	0x0800a252

0800837c <__hi0bits>:
 800837c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008380:	4603      	mov	r3, r0
 8008382:	bf36      	itet	cc
 8008384:	0403      	lslcc	r3, r0, #16
 8008386:	2000      	movcs	r0, #0
 8008388:	2010      	movcc	r0, #16
 800838a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800838e:	bf3c      	itt	cc
 8008390:	021b      	lslcc	r3, r3, #8
 8008392:	3008      	addcc	r0, #8
 8008394:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008398:	bf3c      	itt	cc
 800839a:	011b      	lslcc	r3, r3, #4
 800839c:	3004      	addcc	r0, #4
 800839e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083a2:	bf3c      	itt	cc
 80083a4:	009b      	lslcc	r3, r3, #2
 80083a6:	3002      	addcc	r0, #2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	db05      	blt.n	80083b8 <__hi0bits+0x3c>
 80083ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80083b0:	f100 0001 	add.w	r0, r0, #1
 80083b4:	bf08      	it	eq
 80083b6:	2020      	moveq	r0, #32
 80083b8:	4770      	bx	lr

080083ba <__lo0bits>:
 80083ba:	6803      	ldr	r3, [r0, #0]
 80083bc:	4602      	mov	r2, r0
 80083be:	f013 0007 	ands.w	r0, r3, #7
 80083c2:	d00b      	beq.n	80083dc <__lo0bits+0x22>
 80083c4:	07d9      	lsls	r1, r3, #31
 80083c6:	d421      	bmi.n	800840c <__lo0bits+0x52>
 80083c8:	0798      	lsls	r0, r3, #30
 80083ca:	bf49      	itett	mi
 80083cc:	085b      	lsrmi	r3, r3, #1
 80083ce:	089b      	lsrpl	r3, r3, #2
 80083d0:	2001      	movmi	r0, #1
 80083d2:	6013      	strmi	r3, [r2, #0]
 80083d4:	bf5c      	itt	pl
 80083d6:	6013      	strpl	r3, [r2, #0]
 80083d8:	2002      	movpl	r0, #2
 80083da:	4770      	bx	lr
 80083dc:	b299      	uxth	r1, r3
 80083de:	b909      	cbnz	r1, 80083e4 <__lo0bits+0x2a>
 80083e0:	0c1b      	lsrs	r3, r3, #16
 80083e2:	2010      	movs	r0, #16
 80083e4:	b2d9      	uxtb	r1, r3
 80083e6:	b909      	cbnz	r1, 80083ec <__lo0bits+0x32>
 80083e8:	3008      	adds	r0, #8
 80083ea:	0a1b      	lsrs	r3, r3, #8
 80083ec:	0719      	lsls	r1, r3, #28
 80083ee:	bf04      	itt	eq
 80083f0:	091b      	lsreq	r3, r3, #4
 80083f2:	3004      	addeq	r0, #4
 80083f4:	0799      	lsls	r1, r3, #30
 80083f6:	bf04      	itt	eq
 80083f8:	089b      	lsreq	r3, r3, #2
 80083fa:	3002      	addeq	r0, #2
 80083fc:	07d9      	lsls	r1, r3, #31
 80083fe:	d403      	bmi.n	8008408 <__lo0bits+0x4e>
 8008400:	085b      	lsrs	r3, r3, #1
 8008402:	f100 0001 	add.w	r0, r0, #1
 8008406:	d003      	beq.n	8008410 <__lo0bits+0x56>
 8008408:	6013      	str	r3, [r2, #0]
 800840a:	4770      	bx	lr
 800840c:	2000      	movs	r0, #0
 800840e:	4770      	bx	lr
 8008410:	2020      	movs	r0, #32
 8008412:	4770      	bx	lr

08008414 <__i2b>:
 8008414:	b510      	push	{r4, lr}
 8008416:	460c      	mov	r4, r1
 8008418:	2101      	movs	r1, #1
 800841a:	f7ff febd 	bl	8008198 <_Balloc>
 800841e:	4602      	mov	r2, r0
 8008420:	b928      	cbnz	r0, 800842e <__i2b+0x1a>
 8008422:	4b05      	ldr	r3, [pc, #20]	@ (8008438 <__i2b+0x24>)
 8008424:	4805      	ldr	r0, [pc, #20]	@ (800843c <__i2b+0x28>)
 8008426:	f240 1145 	movw	r1, #325	@ 0x145
 800842a:	f001 f9a7 	bl	800977c <__assert_func>
 800842e:	2301      	movs	r3, #1
 8008430:	6144      	str	r4, [r0, #20]
 8008432:	6103      	str	r3, [r0, #16]
 8008434:	bd10      	pop	{r4, pc}
 8008436:	bf00      	nop
 8008438:	0800a1e1 	.word	0x0800a1e1
 800843c:	0800a252 	.word	0x0800a252

08008440 <__multiply>:
 8008440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	4617      	mov	r7, r2
 8008446:	690a      	ldr	r2, [r1, #16]
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	429a      	cmp	r2, r3
 800844c:	bfa8      	it	ge
 800844e:	463b      	movge	r3, r7
 8008450:	4689      	mov	r9, r1
 8008452:	bfa4      	itt	ge
 8008454:	460f      	movge	r7, r1
 8008456:	4699      	movge	r9, r3
 8008458:	693d      	ldr	r5, [r7, #16]
 800845a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	6879      	ldr	r1, [r7, #4]
 8008462:	eb05 060a 	add.w	r6, r5, sl
 8008466:	42b3      	cmp	r3, r6
 8008468:	b085      	sub	sp, #20
 800846a:	bfb8      	it	lt
 800846c:	3101      	addlt	r1, #1
 800846e:	f7ff fe93 	bl	8008198 <_Balloc>
 8008472:	b930      	cbnz	r0, 8008482 <__multiply+0x42>
 8008474:	4602      	mov	r2, r0
 8008476:	4b41      	ldr	r3, [pc, #260]	@ (800857c <__multiply+0x13c>)
 8008478:	4841      	ldr	r0, [pc, #260]	@ (8008580 <__multiply+0x140>)
 800847a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800847e:	f001 f97d 	bl	800977c <__assert_func>
 8008482:	f100 0414 	add.w	r4, r0, #20
 8008486:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800848a:	4623      	mov	r3, r4
 800848c:	2200      	movs	r2, #0
 800848e:	4573      	cmp	r3, lr
 8008490:	d320      	bcc.n	80084d4 <__multiply+0x94>
 8008492:	f107 0814 	add.w	r8, r7, #20
 8008496:	f109 0114 	add.w	r1, r9, #20
 800849a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800849e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80084a2:	9302      	str	r3, [sp, #8]
 80084a4:	1beb      	subs	r3, r5, r7
 80084a6:	3b15      	subs	r3, #21
 80084a8:	f023 0303 	bic.w	r3, r3, #3
 80084ac:	3304      	adds	r3, #4
 80084ae:	3715      	adds	r7, #21
 80084b0:	42bd      	cmp	r5, r7
 80084b2:	bf38      	it	cc
 80084b4:	2304      	movcc	r3, #4
 80084b6:	9301      	str	r3, [sp, #4]
 80084b8:	9b02      	ldr	r3, [sp, #8]
 80084ba:	9103      	str	r1, [sp, #12]
 80084bc:	428b      	cmp	r3, r1
 80084be:	d80c      	bhi.n	80084da <__multiply+0x9a>
 80084c0:	2e00      	cmp	r6, #0
 80084c2:	dd03      	ble.n	80084cc <__multiply+0x8c>
 80084c4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d055      	beq.n	8008578 <__multiply+0x138>
 80084cc:	6106      	str	r6, [r0, #16]
 80084ce:	b005      	add	sp, #20
 80084d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d4:	f843 2b04 	str.w	r2, [r3], #4
 80084d8:	e7d9      	b.n	800848e <__multiply+0x4e>
 80084da:	f8b1 a000 	ldrh.w	sl, [r1]
 80084de:	f1ba 0f00 	cmp.w	sl, #0
 80084e2:	d01f      	beq.n	8008524 <__multiply+0xe4>
 80084e4:	46c4      	mov	ip, r8
 80084e6:	46a1      	mov	r9, r4
 80084e8:	2700      	movs	r7, #0
 80084ea:	f85c 2b04 	ldr.w	r2, [ip], #4
 80084ee:	f8d9 3000 	ldr.w	r3, [r9]
 80084f2:	fa1f fb82 	uxth.w	fp, r2
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	fb0a 330b 	mla	r3, sl, fp, r3
 80084fc:	443b      	add	r3, r7
 80084fe:	f8d9 7000 	ldr.w	r7, [r9]
 8008502:	0c12      	lsrs	r2, r2, #16
 8008504:	0c3f      	lsrs	r7, r7, #16
 8008506:	fb0a 7202 	mla	r2, sl, r2, r7
 800850a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800850e:	b29b      	uxth	r3, r3
 8008510:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008514:	4565      	cmp	r5, ip
 8008516:	f849 3b04 	str.w	r3, [r9], #4
 800851a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800851e:	d8e4      	bhi.n	80084ea <__multiply+0xaa>
 8008520:	9b01      	ldr	r3, [sp, #4]
 8008522:	50e7      	str	r7, [r4, r3]
 8008524:	9b03      	ldr	r3, [sp, #12]
 8008526:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800852a:	3104      	adds	r1, #4
 800852c:	f1b9 0f00 	cmp.w	r9, #0
 8008530:	d020      	beq.n	8008574 <__multiply+0x134>
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	4647      	mov	r7, r8
 8008536:	46a4      	mov	ip, r4
 8008538:	f04f 0a00 	mov.w	sl, #0
 800853c:	f8b7 b000 	ldrh.w	fp, [r7]
 8008540:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008544:	fb09 220b 	mla	r2, r9, fp, r2
 8008548:	4452      	add	r2, sl
 800854a:	b29b      	uxth	r3, r3
 800854c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008550:	f84c 3b04 	str.w	r3, [ip], #4
 8008554:	f857 3b04 	ldr.w	r3, [r7], #4
 8008558:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800855c:	f8bc 3000 	ldrh.w	r3, [ip]
 8008560:	fb09 330a 	mla	r3, r9, sl, r3
 8008564:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008568:	42bd      	cmp	r5, r7
 800856a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800856e:	d8e5      	bhi.n	800853c <__multiply+0xfc>
 8008570:	9a01      	ldr	r2, [sp, #4]
 8008572:	50a3      	str	r3, [r4, r2]
 8008574:	3404      	adds	r4, #4
 8008576:	e79f      	b.n	80084b8 <__multiply+0x78>
 8008578:	3e01      	subs	r6, #1
 800857a:	e7a1      	b.n	80084c0 <__multiply+0x80>
 800857c:	0800a1e1 	.word	0x0800a1e1
 8008580:	0800a252 	.word	0x0800a252

08008584 <__pow5mult>:
 8008584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008588:	4615      	mov	r5, r2
 800858a:	f012 0203 	ands.w	r2, r2, #3
 800858e:	4607      	mov	r7, r0
 8008590:	460e      	mov	r6, r1
 8008592:	d007      	beq.n	80085a4 <__pow5mult+0x20>
 8008594:	4c25      	ldr	r4, [pc, #148]	@ (800862c <__pow5mult+0xa8>)
 8008596:	3a01      	subs	r2, #1
 8008598:	2300      	movs	r3, #0
 800859a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800859e:	f7ff fe5d 	bl	800825c <__multadd>
 80085a2:	4606      	mov	r6, r0
 80085a4:	10ad      	asrs	r5, r5, #2
 80085a6:	d03d      	beq.n	8008624 <__pow5mult+0xa0>
 80085a8:	69fc      	ldr	r4, [r7, #28]
 80085aa:	b97c      	cbnz	r4, 80085cc <__pow5mult+0x48>
 80085ac:	2010      	movs	r0, #16
 80085ae:	f7ff fd2b 	bl	8008008 <malloc>
 80085b2:	4602      	mov	r2, r0
 80085b4:	61f8      	str	r0, [r7, #28]
 80085b6:	b928      	cbnz	r0, 80085c4 <__pow5mult+0x40>
 80085b8:	4b1d      	ldr	r3, [pc, #116]	@ (8008630 <__pow5mult+0xac>)
 80085ba:	481e      	ldr	r0, [pc, #120]	@ (8008634 <__pow5mult+0xb0>)
 80085bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80085c0:	f001 f8dc 	bl	800977c <__assert_func>
 80085c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085c8:	6004      	str	r4, [r0, #0]
 80085ca:	60c4      	str	r4, [r0, #12]
 80085cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80085d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085d4:	b94c      	cbnz	r4, 80085ea <__pow5mult+0x66>
 80085d6:	f240 2171 	movw	r1, #625	@ 0x271
 80085da:	4638      	mov	r0, r7
 80085dc:	f7ff ff1a 	bl	8008414 <__i2b>
 80085e0:	2300      	movs	r3, #0
 80085e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80085e6:	4604      	mov	r4, r0
 80085e8:	6003      	str	r3, [r0, #0]
 80085ea:	f04f 0900 	mov.w	r9, #0
 80085ee:	07eb      	lsls	r3, r5, #31
 80085f0:	d50a      	bpl.n	8008608 <__pow5mult+0x84>
 80085f2:	4631      	mov	r1, r6
 80085f4:	4622      	mov	r2, r4
 80085f6:	4638      	mov	r0, r7
 80085f8:	f7ff ff22 	bl	8008440 <__multiply>
 80085fc:	4631      	mov	r1, r6
 80085fe:	4680      	mov	r8, r0
 8008600:	4638      	mov	r0, r7
 8008602:	f7ff fe09 	bl	8008218 <_Bfree>
 8008606:	4646      	mov	r6, r8
 8008608:	106d      	asrs	r5, r5, #1
 800860a:	d00b      	beq.n	8008624 <__pow5mult+0xa0>
 800860c:	6820      	ldr	r0, [r4, #0]
 800860e:	b938      	cbnz	r0, 8008620 <__pow5mult+0x9c>
 8008610:	4622      	mov	r2, r4
 8008612:	4621      	mov	r1, r4
 8008614:	4638      	mov	r0, r7
 8008616:	f7ff ff13 	bl	8008440 <__multiply>
 800861a:	6020      	str	r0, [r4, #0]
 800861c:	f8c0 9000 	str.w	r9, [r0]
 8008620:	4604      	mov	r4, r0
 8008622:	e7e4      	b.n	80085ee <__pow5mult+0x6a>
 8008624:	4630      	mov	r0, r6
 8008626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800862a:	bf00      	nop
 800862c:	0800a368 	.word	0x0800a368
 8008630:	0800a172 	.word	0x0800a172
 8008634:	0800a252 	.word	0x0800a252

08008638 <__lshift>:
 8008638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800863c:	460c      	mov	r4, r1
 800863e:	6849      	ldr	r1, [r1, #4]
 8008640:	6923      	ldr	r3, [r4, #16]
 8008642:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008646:	68a3      	ldr	r3, [r4, #8]
 8008648:	4607      	mov	r7, r0
 800864a:	4691      	mov	r9, r2
 800864c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008650:	f108 0601 	add.w	r6, r8, #1
 8008654:	42b3      	cmp	r3, r6
 8008656:	db0b      	blt.n	8008670 <__lshift+0x38>
 8008658:	4638      	mov	r0, r7
 800865a:	f7ff fd9d 	bl	8008198 <_Balloc>
 800865e:	4605      	mov	r5, r0
 8008660:	b948      	cbnz	r0, 8008676 <__lshift+0x3e>
 8008662:	4602      	mov	r2, r0
 8008664:	4b28      	ldr	r3, [pc, #160]	@ (8008708 <__lshift+0xd0>)
 8008666:	4829      	ldr	r0, [pc, #164]	@ (800870c <__lshift+0xd4>)
 8008668:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800866c:	f001 f886 	bl	800977c <__assert_func>
 8008670:	3101      	adds	r1, #1
 8008672:	005b      	lsls	r3, r3, #1
 8008674:	e7ee      	b.n	8008654 <__lshift+0x1c>
 8008676:	2300      	movs	r3, #0
 8008678:	f100 0114 	add.w	r1, r0, #20
 800867c:	f100 0210 	add.w	r2, r0, #16
 8008680:	4618      	mov	r0, r3
 8008682:	4553      	cmp	r3, sl
 8008684:	db33      	blt.n	80086ee <__lshift+0xb6>
 8008686:	6920      	ldr	r0, [r4, #16]
 8008688:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800868c:	f104 0314 	add.w	r3, r4, #20
 8008690:	f019 091f 	ands.w	r9, r9, #31
 8008694:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008698:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800869c:	d02b      	beq.n	80086f6 <__lshift+0xbe>
 800869e:	f1c9 0e20 	rsb	lr, r9, #32
 80086a2:	468a      	mov	sl, r1
 80086a4:	2200      	movs	r2, #0
 80086a6:	6818      	ldr	r0, [r3, #0]
 80086a8:	fa00 f009 	lsl.w	r0, r0, r9
 80086ac:	4310      	orrs	r0, r2
 80086ae:	f84a 0b04 	str.w	r0, [sl], #4
 80086b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80086b6:	459c      	cmp	ip, r3
 80086b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80086bc:	d8f3      	bhi.n	80086a6 <__lshift+0x6e>
 80086be:	ebac 0304 	sub.w	r3, ip, r4
 80086c2:	3b15      	subs	r3, #21
 80086c4:	f023 0303 	bic.w	r3, r3, #3
 80086c8:	3304      	adds	r3, #4
 80086ca:	f104 0015 	add.w	r0, r4, #21
 80086ce:	4560      	cmp	r0, ip
 80086d0:	bf88      	it	hi
 80086d2:	2304      	movhi	r3, #4
 80086d4:	50ca      	str	r2, [r1, r3]
 80086d6:	b10a      	cbz	r2, 80086dc <__lshift+0xa4>
 80086d8:	f108 0602 	add.w	r6, r8, #2
 80086dc:	3e01      	subs	r6, #1
 80086de:	4638      	mov	r0, r7
 80086e0:	612e      	str	r6, [r5, #16]
 80086e2:	4621      	mov	r1, r4
 80086e4:	f7ff fd98 	bl	8008218 <_Bfree>
 80086e8:	4628      	mov	r0, r5
 80086ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80086f2:	3301      	adds	r3, #1
 80086f4:	e7c5      	b.n	8008682 <__lshift+0x4a>
 80086f6:	3904      	subs	r1, #4
 80086f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80086fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008700:	459c      	cmp	ip, r3
 8008702:	d8f9      	bhi.n	80086f8 <__lshift+0xc0>
 8008704:	e7ea      	b.n	80086dc <__lshift+0xa4>
 8008706:	bf00      	nop
 8008708:	0800a1e1 	.word	0x0800a1e1
 800870c:	0800a252 	.word	0x0800a252

08008710 <__mcmp>:
 8008710:	690a      	ldr	r2, [r1, #16]
 8008712:	4603      	mov	r3, r0
 8008714:	6900      	ldr	r0, [r0, #16]
 8008716:	1a80      	subs	r0, r0, r2
 8008718:	b530      	push	{r4, r5, lr}
 800871a:	d10e      	bne.n	800873a <__mcmp+0x2a>
 800871c:	3314      	adds	r3, #20
 800871e:	3114      	adds	r1, #20
 8008720:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008724:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008728:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800872c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008730:	4295      	cmp	r5, r2
 8008732:	d003      	beq.n	800873c <__mcmp+0x2c>
 8008734:	d205      	bcs.n	8008742 <__mcmp+0x32>
 8008736:	f04f 30ff 	mov.w	r0, #4294967295
 800873a:	bd30      	pop	{r4, r5, pc}
 800873c:	42a3      	cmp	r3, r4
 800873e:	d3f3      	bcc.n	8008728 <__mcmp+0x18>
 8008740:	e7fb      	b.n	800873a <__mcmp+0x2a>
 8008742:	2001      	movs	r0, #1
 8008744:	e7f9      	b.n	800873a <__mcmp+0x2a>
	...

08008748 <__mdiff>:
 8008748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800874c:	4689      	mov	r9, r1
 800874e:	4606      	mov	r6, r0
 8008750:	4611      	mov	r1, r2
 8008752:	4648      	mov	r0, r9
 8008754:	4614      	mov	r4, r2
 8008756:	f7ff ffdb 	bl	8008710 <__mcmp>
 800875a:	1e05      	subs	r5, r0, #0
 800875c:	d112      	bne.n	8008784 <__mdiff+0x3c>
 800875e:	4629      	mov	r1, r5
 8008760:	4630      	mov	r0, r6
 8008762:	f7ff fd19 	bl	8008198 <_Balloc>
 8008766:	4602      	mov	r2, r0
 8008768:	b928      	cbnz	r0, 8008776 <__mdiff+0x2e>
 800876a:	4b3f      	ldr	r3, [pc, #252]	@ (8008868 <__mdiff+0x120>)
 800876c:	f240 2137 	movw	r1, #567	@ 0x237
 8008770:	483e      	ldr	r0, [pc, #248]	@ (800886c <__mdiff+0x124>)
 8008772:	f001 f803 	bl	800977c <__assert_func>
 8008776:	2301      	movs	r3, #1
 8008778:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800877c:	4610      	mov	r0, r2
 800877e:	b003      	add	sp, #12
 8008780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008784:	bfbc      	itt	lt
 8008786:	464b      	movlt	r3, r9
 8008788:	46a1      	movlt	r9, r4
 800878a:	4630      	mov	r0, r6
 800878c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008790:	bfba      	itte	lt
 8008792:	461c      	movlt	r4, r3
 8008794:	2501      	movlt	r5, #1
 8008796:	2500      	movge	r5, #0
 8008798:	f7ff fcfe 	bl	8008198 <_Balloc>
 800879c:	4602      	mov	r2, r0
 800879e:	b918      	cbnz	r0, 80087a8 <__mdiff+0x60>
 80087a0:	4b31      	ldr	r3, [pc, #196]	@ (8008868 <__mdiff+0x120>)
 80087a2:	f240 2145 	movw	r1, #581	@ 0x245
 80087a6:	e7e3      	b.n	8008770 <__mdiff+0x28>
 80087a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80087ac:	6926      	ldr	r6, [r4, #16]
 80087ae:	60c5      	str	r5, [r0, #12]
 80087b0:	f109 0310 	add.w	r3, r9, #16
 80087b4:	f109 0514 	add.w	r5, r9, #20
 80087b8:	f104 0e14 	add.w	lr, r4, #20
 80087bc:	f100 0b14 	add.w	fp, r0, #20
 80087c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80087c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80087c8:	9301      	str	r3, [sp, #4]
 80087ca:	46d9      	mov	r9, fp
 80087cc:	f04f 0c00 	mov.w	ip, #0
 80087d0:	9b01      	ldr	r3, [sp, #4]
 80087d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80087d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80087da:	9301      	str	r3, [sp, #4]
 80087dc:	fa1f f38a 	uxth.w	r3, sl
 80087e0:	4619      	mov	r1, r3
 80087e2:	b283      	uxth	r3, r0
 80087e4:	1acb      	subs	r3, r1, r3
 80087e6:	0c00      	lsrs	r0, r0, #16
 80087e8:	4463      	add	r3, ip
 80087ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80087ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80087f8:	4576      	cmp	r6, lr
 80087fa:	f849 3b04 	str.w	r3, [r9], #4
 80087fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008802:	d8e5      	bhi.n	80087d0 <__mdiff+0x88>
 8008804:	1b33      	subs	r3, r6, r4
 8008806:	3b15      	subs	r3, #21
 8008808:	f023 0303 	bic.w	r3, r3, #3
 800880c:	3415      	adds	r4, #21
 800880e:	3304      	adds	r3, #4
 8008810:	42a6      	cmp	r6, r4
 8008812:	bf38      	it	cc
 8008814:	2304      	movcc	r3, #4
 8008816:	441d      	add	r5, r3
 8008818:	445b      	add	r3, fp
 800881a:	461e      	mov	r6, r3
 800881c:	462c      	mov	r4, r5
 800881e:	4544      	cmp	r4, r8
 8008820:	d30e      	bcc.n	8008840 <__mdiff+0xf8>
 8008822:	f108 0103 	add.w	r1, r8, #3
 8008826:	1b49      	subs	r1, r1, r5
 8008828:	f021 0103 	bic.w	r1, r1, #3
 800882c:	3d03      	subs	r5, #3
 800882e:	45a8      	cmp	r8, r5
 8008830:	bf38      	it	cc
 8008832:	2100      	movcc	r1, #0
 8008834:	440b      	add	r3, r1
 8008836:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800883a:	b191      	cbz	r1, 8008862 <__mdiff+0x11a>
 800883c:	6117      	str	r7, [r2, #16]
 800883e:	e79d      	b.n	800877c <__mdiff+0x34>
 8008840:	f854 1b04 	ldr.w	r1, [r4], #4
 8008844:	46e6      	mov	lr, ip
 8008846:	0c08      	lsrs	r0, r1, #16
 8008848:	fa1c fc81 	uxtah	ip, ip, r1
 800884c:	4471      	add	r1, lr
 800884e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008852:	b289      	uxth	r1, r1
 8008854:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008858:	f846 1b04 	str.w	r1, [r6], #4
 800885c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008860:	e7dd      	b.n	800881e <__mdiff+0xd6>
 8008862:	3f01      	subs	r7, #1
 8008864:	e7e7      	b.n	8008836 <__mdiff+0xee>
 8008866:	bf00      	nop
 8008868:	0800a1e1 	.word	0x0800a1e1
 800886c:	0800a252 	.word	0x0800a252

08008870 <__ulp>:
 8008870:	b082      	sub	sp, #8
 8008872:	ed8d 0b00 	vstr	d0, [sp]
 8008876:	9a01      	ldr	r2, [sp, #4]
 8008878:	4b0f      	ldr	r3, [pc, #60]	@ (80088b8 <__ulp+0x48>)
 800887a:	4013      	ands	r3, r2
 800887c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008880:	2b00      	cmp	r3, #0
 8008882:	dc08      	bgt.n	8008896 <__ulp+0x26>
 8008884:	425b      	negs	r3, r3
 8008886:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800888a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800888e:	da04      	bge.n	800889a <__ulp+0x2a>
 8008890:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008894:	4113      	asrs	r3, r2
 8008896:	2200      	movs	r2, #0
 8008898:	e008      	b.n	80088ac <__ulp+0x3c>
 800889a:	f1a2 0314 	sub.w	r3, r2, #20
 800889e:	2b1e      	cmp	r3, #30
 80088a0:	bfda      	itte	le
 80088a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80088a6:	40da      	lsrle	r2, r3
 80088a8:	2201      	movgt	r2, #1
 80088aa:	2300      	movs	r3, #0
 80088ac:	4619      	mov	r1, r3
 80088ae:	4610      	mov	r0, r2
 80088b0:	ec41 0b10 	vmov	d0, r0, r1
 80088b4:	b002      	add	sp, #8
 80088b6:	4770      	bx	lr
 80088b8:	7ff00000 	.word	0x7ff00000

080088bc <__b2d>:
 80088bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c0:	6906      	ldr	r6, [r0, #16]
 80088c2:	f100 0814 	add.w	r8, r0, #20
 80088c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80088ca:	1f37      	subs	r7, r6, #4
 80088cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80088d0:	4610      	mov	r0, r2
 80088d2:	f7ff fd53 	bl	800837c <__hi0bits>
 80088d6:	f1c0 0320 	rsb	r3, r0, #32
 80088da:	280a      	cmp	r0, #10
 80088dc:	600b      	str	r3, [r1, #0]
 80088de:	491b      	ldr	r1, [pc, #108]	@ (800894c <__b2d+0x90>)
 80088e0:	dc15      	bgt.n	800890e <__b2d+0x52>
 80088e2:	f1c0 0c0b 	rsb	ip, r0, #11
 80088e6:	fa22 f30c 	lsr.w	r3, r2, ip
 80088ea:	45b8      	cmp	r8, r7
 80088ec:	ea43 0501 	orr.w	r5, r3, r1
 80088f0:	bf34      	ite	cc
 80088f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80088f6:	2300      	movcs	r3, #0
 80088f8:	3015      	adds	r0, #21
 80088fa:	fa02 f000 	lsl.w	r0, r2, r0
 80088fe:	fa23 f30c 	lsr.w	r3, r3, ip
 8008902:	4303      	orrs	r3, r0
 8008904:	461c      	mov	r4, r3
 8008906:	ec45 4b10 	vmov	d0, r4, r5
 800890a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800890e:	45b8      	cmp	r8, r7
 8008910:	bf3a      	itte	cc
 8008912:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008916:	f1a6 0708 	subcc.w	r7, r6, #8
 800891a:	2300      	movcs	r3, #0
 800891c:	380b      	subs	r0, #11
 800891e:	d012      	beq.n	8008946 <__b2d+0x8a>
 8008920:	f1c0 0120 	rsb	r1, r0, #32
 8008924:	fa23 f401 	lsr.w	r4, r3, r1
 8008928:	4082      	lsls	r2, r0
 800892a:	4322      	orrs	r2, r4
 800892c:	4547      	cmp	r7, r8
 800892e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008932:	bf8c      	ite	hi
 8008934:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008938:	2200      	movls	r2, #0
 800893a:	4083      	lsls	r3, r0
 800893c:	40ca      	lsrs	r2, r1
 800893e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008942:	4313      	orrs	r3, r2
 8008944:	e7de      	b.n	8008904 <__b2d+0x48>
 8008946:	ea42 0501 	orr.w	r5, r2, r1
 800894a:	e7db      	b.n	8008904 <__b2d+0x48>
 800894c:	3ff00000 	.word	0x3ff00000

08008950 <__d2b>:
 8008950:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008954:	460f      	mov	r7, r1
 8008956:	2101      	movs	r1, #1
 8008958:	ec59 8b10 	vmov	r8, r9, d0
 800895c:	4616      	mov	r6, r2
 800895e:	f7ff fc1b 	bl	8008198 <_Balloc>
 8008962:	4604      	mov	r4, r0
 8008964:	b930      	cbnz	r0, 8008974 <__d2b+0x24>
 8008966:	4602      	mov	r2, r0
 8008968:	4b23      	ldr	r3, [pc, #140]	@ (80089f8 <__d2b+0xa8>)
 800896a:	4824      	ldr	r0, [pc, #144]	@ (80089fc <__d2b+0xac>)
 800896c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008970:	f000 ff04 	bl	800977c <__assert_func>
 8008974:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008978:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800897c:	b10d      	cbz	r5, 8008982 <__d2b+0x32>
 800897e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008982:	9301      	str	r3, [sp, #4]
 8008984:	f1b8 0300 	subs.w	r3, r8, #0
 8008988:	d023      	beq.n	80089d2 <__d2b+0x82>
 800898a:	4668      	mov	r0, sp
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	f7ff fd14 	bl	80083ba <__lo0bits>
 8008992:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008996:	b1d0      	cbz	r0, 80089ce <__d2b+0x7e>
 8008998:	f1c0 0320 	rsb	r3, r0, #32
 800899c:	fa02 f303 	lsl.w	r3, r2, r3
 80089a0:	430b      	orrs	r3, r1
 80089a2:	40c2      	lsrs	r2, r0
 80089a4:	6163      	str	r3, [r4, #20]
 80089a6:	9201      	str	r2, [sp, #4]
 80089a8:	9b01      	ldr	r3, [sp, #4]
 80089aa:	61a3      	str	r3, [r4, #24]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	bf0c      	ite	eq
 80089b0:	2201      	moveq	r2, #1
 80089b2:	2202      	movne	r2, #2
 80089b4:	6122      	str	r2, [r4, #16]
 80089b6:	b1a5      	cbz	r5, 80089e2 <__d2b+0x92>
 80089b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80089bc:	4405      	add	r5, r0
 80089be:	603d      	str	r5, [r7, #0]
 80089c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80089c4:	6030      	str	r0, [r6, #0]
 80089c6:	4620      	mov	r0, r4
 80089c8:	b003      	add	sp, #12
 80089ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089ce:	6161      	str	r1, [r4, #20]
 80089d0:	e7ea      	b.n	80089a8 <__d2b+0x58>
 80089d2:	a801      	add	r0, sp, #4
 80089d4:	f7ff fcf1 	bl	80083ba <__lo0bits>
 80089d8:	9b01      	ldr	r3, [sp, #4]
 80089da:	6163      	str	r3, [r4, #20]
 80089dc:	3020      	adds	r0, #32
 80089de:	2201      	movs	r2, #1
 80089e0:	e7e8      	b.n	80089b4 <__d2b+0x64>
 80089e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80089e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80089ea:	6038      	str	r0, [r7, #0]
 80089ec:	6918      	ldr	r0, [r3, #16]
 80089ee:	f7ff fcc5 	bl	800837c <__hi0bits>
 80089f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089f6:	e7e5      	b.n	80089c4 <__d2b+0x74>
 80089f8:	0800a1e1 	.word	0x0800a1e1
 80089fc:	0800a252 	.word	0x0800a252

08008a00 <__ratio>:
 8008a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a04:	b085      	sub	sp, #20
 8008a06:	e9cd 1000 	strd	r1, r0, [sp]
 8008a0a:	a902      	add	r1, sp, #8
 8008a0c:	f7ff ff56 	bl	80088bc <__b2d>
 8008a10:	9800      	ldr	r0, [sp, #0]
 8008a12:	a903      	add	r1, sp, #12
 8008a14:	ec55 4b10 	vmov	r4, r5, d0
 8008a18:	f7ff ff50 	bl	80088bc <__b2d>
 8008a1c:	9b01      	ldr	r3, [sp, #4]
 8008a1e:	6919      	ldr	r1, [r3, #16]
 8008a20:	9b00      	ldr	r3, [sp, #0]
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	1ac9      	subs	r1, r1, r3
 8008a26:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008a2a:	1a9b      	subs	r3, r3, r2
 8008a2c:	ec5b ab10 	vmov	sl, fp, d0
 8008a30:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	bfce      	itee	gt
 8008a38:	462a      	movgt	r2, r5
 8008a3a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008a3e:	465a      	movle	r2, fp
 8008a40:	462f      	mov	r7, r5
 8008a42:	46d9      	mov	r9, fp
 8008a44:	bfcc      	ite	gt
 8008a46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008a4a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008a4e:	464b      	mov	r3, r9
 8008a50:	4652      	mov	r2, sl
 8008a52:	4620      	mov	r0, r4
 8008a54:	4639      	mov	r1, r7
 8008a56:	f7f7 fef9 	bl	800084c <__aeabi_ddiv>
 8008a5a:	ec41 0b10 	vmov	d0, r0, r1
 8008a5e:	b005      	add	sp, #20
 8008a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a64 <__copybits>:
 8008a64:	3901      	subs	r1, #1
 8008a66:	b570      	push	{r4, r5, r6, lr}
 8008a68:	1149      	asrs	r1, r1, #5
 8008a6a:	6914      	ldr	r4, [r2, #16]
 8008a6c:	3101      	adds	r1, #1
 8008a6e:	f102 0314 	add.w	r3, r2, #20
 8008a72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008a76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a7a:	1f05      	subs	r5, r0, #4
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	d30c      	bcc.n	8008a9a <__copybits+0x36>
 8008a80:	1aa3      	subs	r3, r4, r2
 8008a82:	3b11      	subs	r3, #17
 8008a84:	f023 0303 	bic.w	r3, r3, #3
 8008a88:	3211      	adds	r2, #17
 8008a8a:	42a2      	cmp	r2, r4
 8008a8c:	bf88      	it	hi
 8008a8e:	2300      	movhi	r3, #0
 8008a90:	4418      	add	r0, r3
 8008a92:	2300      	movs	r3, #0
 8008a94:	4288      	cmp	r0, r1
 8008a96:	d305      	bcc.n	8008aa4 <__copybits+0x40>
 8008a98:	bd70      	pop	{r4, r5, r6, pc}
 8008a9a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008a9e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008aa2:	e7eb      	b.n	8008a7c <__copybits+0x18>
 8008aa4:	f840 3b04 	str.w	r3, [r0], #4
 8008aa8:	e7f4      	b.n	8008a94 <__copybits+0x30>

08008aaa <__any_on>:
 8008aaa:	f100 0214 	add.w	r2, r0, #20
 8008aae:	6900      	ldr	r0, [r0, #16]
 8008ab0:	114b      	asrs	r3, r1, #5
 8008ab2:	4298      	cmp	r0, r3
 8008ab4:	b510      	push	{r4, lr}
 8008ab6:	db11      	blt.n	8008adc <__any_on+0x32>
 8008ab8:	dd0a      	ble.n	8008ad0 <__any_on+0x26>
 8008aba:	f011 011f 	ands.w	r1, r1, #31
 8008abe:	d007      	beq.n	8008ad0 <__any_on+0x26>
 8008ac0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008ac4:	fa24 f001 	lsr.w	r0, r4, r1
 8008ac8:	fa00 f101 	lsl.w	r1, r0, r1
 8008acc:	428c      	cmp	r4, r1
 8008ace:	d10b      	bne.n	8008ae8 <__any_on+0x3e>
 8008ad0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d803      	bhi.n	8008ae0 <__any_on+0x36>
 8008ad8:	2000      	movs	r0, #0
 8008ada:	bd10      	pop	{r4, pc}
 8008adc:	4603      	mov	r3, r0
 8008ade:	e7f7      	b.n	8008ad0 <__any_on+0x26>
 8008ae0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ae4:	2900      	cmp	r1, #0
 8008ae6:	d0f5      	beq.n	8008ad4 <__any_on+0x2a>
 8008ae8:	2001      	movs	r0, #1
 8008aea:	e7f6      	b.n	8008ada <__any_on+0x30>

08008aec <_strtol_l.isra.0>:
 8008aec:	2b24      	cmp	r3, #36	@ 0x24
 8008aee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008af2:	4686      	mov	lr, r0
 8008af4:	4690      	mov	r8, r2
 8008af6:	d801      	bhi.n	8008afc <_strtol_l.isra.0+0x10>
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d106      	bne.n	8008b0a <_strtol_l.isra.0+0x1e>
 8008afc:	f7fe f85c 	bl	8006bb8 <__errno>
 8008b00:	2316      	movs	r3, #22
 8008b02:	6003      	str	r3, [r0, #0]
 8008b04:	2000      	movs	r0, #0
 8008b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b0a:	4834      	ldr	r0, [pc, #208]	@ (8008bdc <_strtol_l.isra.0+0xf0>)
 8008b0c:	460d      	mov	r5, r1
 8008b0e:	462a      	mov	r2, r5
 8008b10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b14:	5d06      	ldrb	r6, [r0, r4]
 8008b16:	f016 0608 	ands.w	r6, r6, #8
 8008b1a:	d1f8      	bne.n	8008b0e <_strtol_l.isra.0+0x22>
 8008b1c:	2c2d      	cmp	r4, #45	@ 0x2d
 8008b1e:	d110      	bne.n	8008b42 <_strtol_l.isra.0+0x56>
 8008b20:	782c      	ldrb	r4, [r5, #0]
 8008b22:	2601      	movs	r6, #1
 8008b24:	1c95      	adds	r5, r2, #2
 8008b26:	f033 0210 	bics.w	r2, r3, #16
 8008b2a:	d115      	bne.n	8008b58 <_strtol_l.isra.0+0x6c>
 8008b2c:	2c30      	cmp	r4, #48	@ 0x30
 8008b2e:	d10d      	bne.n	8008b4c <_strtol_l.isra.0+0x60>
 8008b30:	782a      	ldrb	r2, [r5, #0]
 8008b32:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008b36:	2a58      	cmp	r2, #88	@ 0x58
 8008b38:	d108      	bne.n	8008b4c <_strtol_l.isra.0+0x60>
 8008b3a:	786c      	ldrb	r4, [r5, #1]
 8008b3c:	3502      	adds	r5, #2
 8008b3e:	2310      	movs	r3, #16
 8008b40:	e00a      	b.n	8008b58 <_strtol_l.isra.0+0x6c>
 8008b42:	2c2b      	cmp	r4, #43	@ 0x2b
 8008b44:	bf04      	itt	eq
 8008b46:	782c      	ldrbeq	r4, [r5, #0]
 8008b48:	1c95      	addeq	r5, r2, #2
 8008b4a:	e7ec      	b.n	8008b26 <_strtol_l.isra.0+0x3a>
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1f6      	bne.n	8008b3e <_strtol_l.isra.0+0x52>
 8008b50:	2c30      	cmp	r4, #48	@ 0x30
 8008b52:	bf14      	ite	ne
 8008b54:	230a      	movne	r3, #10
 8008b56:	2308      	moveq	r3, #8
 8008b58:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008b5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008b60:	2200      	movs	r2, #0
 8008b62:	fbbc f9f3 	udiv	r9, ip, r3
 8008b66:	4610      	mov	r0, r2
 8008b68:	fb03 ca19 	mls	sl, r3, r9, ip
 8008b6c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008b70:	2f09      	cmp	r7, #9
 8008b72:	d80f      	bhi.n	8008b94 <_strtol_l.isra.0+0xa8>
 8008b74:	463c      	mov	r4, r7
 8008b76:	42a3      	cmp	r3, r4
 8008b78:	dd1b      	ble.n	8008bb2 <_strtol_l.isra.0+0xc6>
 8008b7a:	1c57      	adds	r7, r2, #1
 8008b7c:	d007      	beq.n	8008b8e <_strtol_l.isra.0+0xa2>
 8008b7e:	4581      	cmp	r9, r0
 8008b80:	d314      	bcc.n	8008bac <_strtol_l.isra.0+0xc0>
 8008b82:	d101      	bne.n	8008b88 <_strtol_l.isra.0+0x9c>
 8008b84:	45a2      	cmp	sl, r4
 8008b86:	db11      	blt.n	8008bac <_strtol_l.isra.0+0xc0>
 8008b88:	fb00 4003 	mla	r0, r0, r3, r4
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b92:	e7eb      	b.n	8008b6c <_strtol_l.isra.0+0x80>
 8008b94:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008b98:	2f19      	cmp	r7, #25
 8008b9a:	d801      	bhi.n	8008ba0 <_strtol_l.isra.0+0xb4>
 8008b9c:	3c37      	subs	r4, #55	@ 0x37
 8008b9e:	e7ea      	b.n	8008b76 <_strtol_l.isra.0+0x8a>
 8008ba0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008ba4:	2f19      	cmp	r7, #25
 8008ba6:	d804      	bhi.n	8008bb2 <_strtol_l.isra.0+0xc6>
 8008ba8:	3c57      	subs	r4, #87	@ 0x57
 8008baa:	e7e4      	b.n	8008b76 <_strtol_l.isra.0+0x8a>
 8008bac:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb0:	e7ed      	b.n	8008b8e <_strtol_l.isra.0+0xa2>
 8008bb2:	1c53      	adds	r3, r2, #1
 8008bb4:	d108      	bne.n	8008bc8 <_strtol_l.isra.0+0xdc>
 8008bb6:	2322      	movs	r3, #34	@ 0x22
 8008bb8:	f8ce 3000 	str.w	r3, [lr]
 8008bbc:	4660      	mov	r0, ip
 8008bbe:	f1b8 0f00 	cmp.w	r8, #0
 8008bc2:	d0a0      	beq.n	8008b06 <_strtol_l.isra.0+0x1a>
 8008bc4:	1e69      	subs	r1, r5, #1
 8008bc6:	e006      	b.n	8008bd6 <_strtol_l.isra.0+0xea>
 8008bc8:	b106      	cbz	r6, 8008bcc <_strtol_l.isra.0+0xe0>
 8008bca:	4240      	negs	r0, r0
 8008bcc:	f1b8 0f00 	cmp.w	r8, #0
 8008bd0:	d099      	beq.n	8008b06 <_strtol_l.isra.0+0x1a>
 8008bd2:	2a00      	cmp	r2, #0
 8008bd4:	d1f6      	bne.n	8008bc4 <_strtol_l.isra.0+0xd8>
 8008bd6:	f8c8 1000 	str.w	r1, [r8]
 8008bda:	e794      	b.n	8008b06 <_strtol_l.isra.0+0x1a>
 8008bdc:	0800a469 	.word	0x0800a469

08008be0 <_strtol_r>:
 8008be0:	f7ff bf84 	b.w	8008aec <_strtol_l.isra.0>

08008be4 <__ascii_wctomb>:
 8008be4:	4603      	mov	r3, r0
 8008be6:	4608      	mov	r0, r1
 8008be8:	b141      	cbz	r1, 8008bfc <__ascii_wctomb+0x18>
 8008bea:	2aff      	cmp	r2, #255	@ 0xff
 8008bec:	d904      	bls.n	8008bf8 <__ascii_wctomb+0x14>
 8008bee:	228a      	movs	r2, #138	@ 0x8a
 8008bf0:	601a      	str	r2, [r3, #0]
 8008bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf6:	4770      	bx	lr
 8008bf8:	700a      	strb	r2, [r1, #0]
 8008bfa:	2001      	movs	r0, #1
 8008bfc:	4770      	bx	lr

08008bfe <__ssputs_r>:
 8008bfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c02:	688e      	ldr	r6, [r1, #8]
 8008c04:	461f      	mov	r7, r3
 8008c06:	42be      	cmp	r6, r7
 8008c08:	680b      	ldr	r3, [r1, #0]
 8008c0a:	4682      	mov	sl, r0
 8008c0c:	460c      	mov	r4, r1
 8008c0e:	4690      	mov	r8, r2
 8008c10:	d82d      	bhi.n	8008c6e <__ssputs_r+0x70>
 8008c12:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c16:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c1a:	d026      	beq.n	8008c6a <__ssputs_r+0x6c>
 8008c1c:	6965      	ldr	r5, [r4, #20]
 8008c1e:	6909      	ldr	r1, [r1, #16]
 8008c20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c24:	eba3 0901 	sub.w	r9, r3, r1
 8008c28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c2c:	1c7b      	adds	r3, r7, #1
 8008c2e:	444b      	add	r3, r9
 8008c30:	106d      	asrs	r5, r5, #1
 8008c32:	429d      	cmp	r5, r3
 8008c34:	bf38      	it	cc
 8008c36:	461d      	movcc	r5, r3
 8008c38:	0553      	lsls	r3, r2, #21
 8008c3a:	d527      	bpl.n	8008c8c <__ssputs_r+0x8e>
 8008c3c:	4629      	mov	r1, r5
 8008c3e:	f7ff fa0d 	bl	800805c <_malloc_r>
 8008c42:	4606      	mov	r6, r0
 8008c44:	b360      	cbz	r0, 8008ca0 <__ssputs_r+0xa2>
 8008c46:	6921      	ldr	r1, [r4, #16]
 8008c48:	464a      	mov	r2, r9
 8008c4a:	f7fd ffe2 	bl	8006c12 <memcpy>
 8008c4e:	89a3      	ldrh	r3, [r4, #12]
 8008c50:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c58:	81a3      	strh	r3, [r4, #12]
 8008c5a:	6126      	str	r6, [r4, #16]
 8008c5c:	6165      	str	r5, [r4, #20]
 8008c5e:	444e      	add	r6, r9
 8008c60:	eba5 0509 	sub.w	r5, r5, r9
 8008c64:	6026      	str	r6, [r4, #0]
 8008c66:	60a5      	str	r5, [r4, #8]
 8008c68:	463e      	mov	r6, r7
 8008c6a:	42be      	cmp	r6, r7
 8008c6c:	d900      	bls.n	8008c70 <__ssputs_r+0x72>
 8008c6e:	463e      	mov	r6, r7
 8008c70:	6820      	ldr	r0, [r4, #0]
 8008c72:	4632      	mov	r2, r6
 8008c74:	4641      	mov	r1, r8
 8008c76:	f000 fd56 	bl	8009726 <memmove>
 8008c7a:	68a3      	ldr	r3, [r4, #8]
 8008c7c:	1b9b      	subs	r3, r3, r6
 8008c7e:	60a3      	str	r3, [r4, #8]
 8008c80:	6823      	ldr	r3, [r4, #0]
 8008c82:	4433      	add	r3, r6
 8008c84:	6023      	str	r3, [r4, #0]
 8008c86:	2000      	movs	r0, #0
 8008c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c8c:	462a      	mov	r2, r5
 8008c8e:	f000 fda7 	bl	80097e0 <_realloc_r>
 8008c92:	4606      	mov	r6, r0
 8008c94:	2800      	cmp	r0, #0
 8008c96:	d1e0      	bne.n	8008c5a <__ssputs_r+0x5c>
 8008c98:	6921      	ldr	r1, [r4, #16]
 8008c9a:	4650      	mov	r0, sl
 8008c9c:	f7fe fe30 	bl	8007900 <_free_r>
 8008ca0:	230c      	movs	r3, #12
 8008ca2:	f8ca 3000 	str.w	r3, [sl]
 8008ca6:	89a3      	ldrh	r3, [r4, #12]
 8008ca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cac:	81a3      	strh	r3, [r4, #12]
 8008cae:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb2:	e7e9      	b.n	8008c88 <__ssputs_r+0x8a>

08008cb4 <_svfiprintf_r>:
 8008cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb8:	4698      	mov	r8, r3
 8008cba:	898b      	ldrh	r3, [r1, #12]
 8008cbc:	061b      	lsls	r3, r3, #24
 8008cbe:	b09d      	sub	sp, #116	@ 0x74
 8008cc0:	4607      	mov	r7, r0
 8008cc2:	460d      	mov	r5, r1
 8008cc4:	4614      	mov	r4, r2
 8008cc6:	d510      	bpl.n	8008cea <_svfiprintf_r+0x36>
 8008cc8:	690b      	ldr	r3, [r1, #16]
 8008cca:	b973      	cbnz	r3, 8008cea <_svfiprintf_r+0x36>
 8008ccc:	2140      	movs	r1, #64	@ 0x40
 8008cce:	f7ff f9c5 	bl	800805c <_malloc_r>
 8008cd2:	6028      	str	r0, [r5, #0]
 8008cd4:	6128      	str	r0, [r5, #16]
 8008cd6:	b930      	cbnz	r0, 8008ce6 <_svfiprintf_r+0x32>
 8008cd8:	230c      	movs	r3, #12
 8008cda:	603b      	str	r3, [r7, #0]
 8008cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce0:	b01d      	add	sp, #116	@ 0x74
 8008ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce6:	2340      	movs	r3, #64	@ 0x40
 8008ce8:	616b      	str	r3, [r5, #20]
 8008cea:	2300      	movs	r3, #0
 8008cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cee:	2320      	movs	r3, #32
 8008cf0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cf4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cf8:	2330      	movs	r3, #48	@ 0x30
 8008cfa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008e98 <_svfiprintf_r+0x1e4>
 8008cfe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d02:	f04f 0901 	mov.w	r9, #1
 8008d06:	4623      	mov	r3, r4
 8008d08:	469a      	mov	sl, r3
 8008d0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d0e:	b10a      	cbz	r2, 8008d14 <_svfiprintf_r+0x60>
 8008d10:	2a25      	cmp	r2, #37	@ 0x25
 8008d12:	d1f9      	bne.n	8008d08 <_svfiprintf_r+0x54>
 8008d14:	ebba 0b04 	subs.w	fp, sl, r4
 8008d18:	d00b      	beq.n	8008d32 <_svfiprintf_r+0x7e>
 8008d1a:	465b      	mov	r3, fp
 8008d1c:	4622      	mov	r2, r4
 8008d1e:	4629      	mov	r1, r5
 8008d20:	4638      	mov	r0, r7
 8008d22:	f7ff ff6c 	bl	8008bfe <__ssputs_r>
 8008d26:	3001      	adds	r0, #1
 8008d28:	f000 80a7 	beq.w	8008e7a <_svfiprintf_r+0x1c6>
 8008d2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d2e:	445a      	add	r2, fp
 8008d30:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d32:	f89a 3000 	ldrb.w	r3, [sl]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f000 809f 	beq.w	8008e7a <_svfiprintf_r+0x1c6>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d46:	f10a 0a01 	add.w	sl, sl, #1
 8008d4a:	9304      	str	r3, [sp, #16]
 8008d4c:	9307      	str	r3, [sp, #28]
 8008d4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d52:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d54:	4654      	mov	r4, sl
 8008d56:	2205      	movs	r2, #5
 8008d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d5c:	484e      	ldr	r0, [pc, #312]	@ (8008e98 <_svfiprintf_r+0x1e4>)
 8008d5e:	f7f7 fa37 	bl	80001d0 <memchr>
 8008d62:	9a04      	ldr	r2, [sp, #16]
 8008d64:	b9d8      	cbnz	r0, 8008d9e <_svfiprintf_r+0xea>
 8008d66:	06d0      	lsls	r0, r2, #27
 8008d68:	bf44      	itt	mi
 8008d6a:	2320      	movmi	r3, #32
 8008d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d70:	0711      	lsls	r1, r2, #28
 8008d72:	bf44      	itt	mi
 8008d74:	232b      	movmi	r3, #43	@ 0x2b
 8008d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d80:	d015      	beq.n	8008dae <_svfiprintf_r+0xfa>
 8008d82:	9a07      	ldr	r2, [sp, #28]
 8008d84:	4654      	mov	r4, sl
 8008d86:	2000      	movs	r0, #0
 8008d88:	f04f 0c0a 	mov.w	ip, #10
 8008d8c:	4621      	mov	r1, r4
 8008d8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d92:	3b30      	subs	r3, #48	@ 0x30
 8008d94:	2b09      	cmp	r3, #9
 8008d96:	d94b      	bls.n	8008e30 <_svfiprintf_r+0x17c>
 8008d98:	b1b0      	cbz	r0, 8008dc8 <_svfiprintf_r+0x114>
 8008d9a:	9207      	str	r2, [sp, #28]
 8008d9c:	e014      	b.n	8008dc8 <_svfiprintf_r+0x114>
 8008d9e:	eba0 0308 	sub.w	r3, r0, r8
 8008da2:	fa09 f303 	lsl.w	r3, r9, r3
 8008da6:	4313      	orrs	r3, r2
 8008da8:	9304      	str	r3, [sp, #16]
 8008daa:	46a2      	mov	sl, r4
 8008dac:	e7d2      	b.n	8008d54 <_svfiprintf_r+0xa0>
 8008dae:	9b03      	ldr	r3, [sp, #12]
 8008db0:	1d19      	adds	r1, r3, #4
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	9103      	str	r1, [sp, #12]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	bfbb      	ittet	lt
 8008dba:	425b      	neglt	r3, r3
 8008dbc:	f042 0202 	orrlt.w	r2, r2, #2
 8008dc0:	9307      	strge	r3, [sp, #28]
 8008dc2:	9307      	strlt	r3, [sp, #28]
 8008dc4:	bfb8      	it	lt
 8008dc6:	9204      	strlt	r2, [sp, #16]
 8008dc8:	7823      	ldrb	r3, [r4, #0]
 8008dca:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dcc:	d10a      	bne.n	8008de4 <_svfiprintf_r+0x130>
 8008dce:	7863      	ldrb	r3, [r4, #1]
 8008dd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dd2:	d132      	bne.n	8008e3a <_svfiprintf_r+0x186>
 8008dd4:	9b03      	ldr	r3, [sp, #12]
 8008dd6:	1d1a      	adds	r2, r3, #4
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	9203      	str	r2, [sp, #12]
 8008ddc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008de0:	3402      	adds	r4, #2
 8008de2:	9305      	str	r3, [sp, #20]
 8008de4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ea8 <_svfiprintf_r+0x1f4>
 8008de8:	7821      	ldrb	r1, [r4, #0]
 8008dea:	2203      	movs	r2, #3
 8008dec:	4650      	mov	r0, sl
 8008dee:	f7f7 f9ef 	bl	80001d0 <memchr>
 8008df2:	b138      	cbz	r0, 8008e04 <_svfiprintf_r+0x150>
 8008df4:	9b04      	ldr	r3, [sp, #16]
 8008df6:	eba0 000a 	sub.w	r0, r0, sl
 8008dfa:	2240      	movs	r2, #64	@ 0x40
 8008dfc:	4082      	lsls	r2, r0
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	3401      	adds	r4, #1
 8008e02:	9304      	str	r3, [sp, #16]
 8008e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e08:	4824      	ldr	r0, [pc, #144]	@ (8008e9c <_svfiprintf_r+0x1e8>)
 8008e0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e0e:	2206      	movs	r2, #6
 8008e10:	f7f7 f9de 	bl	80001d0 <memchr>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d036      	beq.n	8008e86 <_svfiprintf_r+0x1d2>
 8008e18:	4b21      	ldr	r3, [pc, #132]	@ (8008ea0 <_svfiprintf_r+0x1ec>)
 8008e1a:	bb1b      	cbnz	r3, 8008e64 <_svfiprintf_r+0x1b0>
 8008e1c:	9b03      	ldr	r3, [sp, #12]
 8008e1e:	3307      	adds	r3, #7
 8008e20:	f023 0307 	bic.w	r3, r3, #7
 8008e24:	3308      	adds	r3, #8
 8008e26:	9303      	str	r3, [sp, #12]
 8008e28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e2a:	4433      	add	r3, r6
 8008e2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e2e:	e76a      	b.n	8008d06 <_svfiprintf_r+0x52>
 8008e30:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e34:	460c      	mov	r4, r1
 8008e36:	2001      	movs	r0, #1
 8008e38:	e7a8      	b.n	8008d8c <_svfiprintf_r+0xd8>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	3401      	adds	r4, #1
 8008e3e:	9305      	str	r3, [sp, #20]
 8008e40:	4619      	mov	r1, r3
 8008e42:	f04f 0c0a 	mov.w	ip, #10
 8008e46:	4620      	mov	r0, r4
 8008e48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e4c:	3a30      	subs	r2, #48	@ 0x30
 8008e4e:	2a09      	cmp	r2, #9
 8008e50:	d903      	bls.n	8008e5a <_svfiprintf_r+0x1a6>
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d0c6      	beq.n	8008de4 <_svfiprintf_r+0x130>
 8008e56:	9105      	str	r1, [sp, #20]
 8008e58:	e7c4      	b.n	8008de4 <_svfiprintf_r+0x130>
 8008e5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e5e:	4604      	mov	r4, r0
 8008e60:	2301      	movs	r3, #1
 8008e62:	e7f0      	b.n	8008e46 <_svfiprintf_r+0x192>
 8008e64:	ab03      	add	r3, sp, #12
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	462a      	mov	r2, r5
 8008e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8008ea4 <_svfiprintf_r+0x1f0>)
 8008e6c:	a904      	add	r1, sp, #16
 8008e6e:	4638      	mov	r0, r7
 8008e70:	f7fc ff04 	bl	8005c7c <_printf_float>
 8008e74:	1c42      	adds	r2, r0, #1
 8008e76:	4606      	mov	r6, r0
 8008e78:	d1d6      	bne.n	8008e28 <_svfiprintf_r+0x174>
 8008e7a:	89ab      	ldrh	r3, [r5, #12]
 8008e7c:	065b      	lsls	r3, r3, #25
 8008e7e:	f53f af2d 	bmi.w	8008cdc <_svfiprintf_r+0x28>
 8008e82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e84:	e72c      	b.n	8008ce0 <_svfiprintf_r+0x2c>
 8008e86:	ab03      	add	r3, sp, #12
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	462a      	mov	r2, r5
 8008e8c:	4b05      	ldr	r3, [pc, #20]	@ (8008ea4 <_svfiprintf_r+0x1f0>)
 8008e8e:	a904      	add	r1, sp, #16
 8008e90:	4638      	mov	r0, r7
 8008e92:	f7fd f98b 	bl	80061ac <_printf_i>
 8008e96:	e7ed      	b.n	8008e74 <_svfiprintf_r+0x1c0>
 8008e98:	0800a2ab 	.word	0x0800a2ab
 8008e9c:	0800a2b5 	.word	0x0800a2b5
 8008ea0:	08005c7d 	.word	0x08005c7d
 8008ea4:	08008bff 	.word	0x08008bff
 8008ea8:	0800a2b1 	.word	0x0800a2b1

08008eac <_sungetc_r>:
 8008eac:	b538      	push	{r3, r4, r5, lr}
 8008eae:	1c4b      	adds	r3, r1, #1
 8008eb0:	4614      	mov	r4, r2
 8008eb2:	d103      	bne.n	8008ebc <_sungetc_r+0x10>
 8008eb4:	f04f 35ff 	mov.w	r5, #4294967295
 8008eb8:	4628      	mov	r0, r5
 8008eba:	bd38      	pop	{r3, r4, r5, pc}
 8008ebc:	8993      	ldrh	r3, [r2, #12]
 8008ebe:	f023 0320 	bic.w	r3, r3, #32
 8008ec2:	8193      	strh	r3, [r2, #12]
 8008ec4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008ec6:	6852      	ldr	r2, [r2, #4]
 8008ec8:	b2cd      	uxtb	r5, r1
 8008eca:	b18b      	cbz	r3, 8008ef0 <_sungetc_r+0x44>
 8008ecc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	dd08      	ble.n	8008ee4 <_sungetc_r+0x38>
 8008ed2:	6823      	ldr	r3, [r4, #0]
 8008ed4:	1e5a      	subs	r2, r3, #1
 8008ed6:	6022      	str	r2, [r4, #0]
 8008ed8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008edc:	6863      	ldr	r3, [r4, #4]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	6063      	str	r3, [r4, #4]
 8008ee2:	e7e9      	b.n	8008eb8 <_sungetc_r+0xc>
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	f000 fbe4 	bl	80096b2 <__submore>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	d0f1      	beq.n	8008ed2 <_sungetc_r+0x26>
 8008eee:	e7e1      	b.n	8008eb4 <_sungetc_r+0x8>
 8008ef0:	6921      	ldr	r1, [r4, #16]
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	b151      	cbz	r1, 8008f0c <_sungetc_r+0x60>
 8008ef6:	4299      	cmp	r1, r3
 8008ef8:	d208      	bcs.n	8008f0c <_sungetc_r+0x60>
 8008efa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008efe:	42a9      	cmp	r1, r5
 8008f00:	d104      	bne.n	8008f0c <_sungetc_r+0x60>
 8008f02:	3b01      	subs	r3, #1
 8008f04:	3201      	adds	r2, #1
 8008f06:	6023      	str	r3, [r4, #0]
 8008f08:	6062      	str	r2, [r4, #4]
 8008f0a:	e7d5      	b.n	8008eb8 <_sungetc_r+0xc>
 8008f0c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8008f10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f14:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f16:	2303      	movs	r3, #3
 8008f18:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008f1a:	4623      	mov	r3, r4
 8008f1c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008f20:	6023      	str	r3, [r4, #0]
 8008f22:	2301      	movs	r3, #1
 8008f24:	e7dc      	b.n	8008ee0 <_sungetc_r+0x34>

08008f26 <__ssrefill_r>:
 8008f26:	b510      	push	{r4, lr}
 8008f28:	460c      	mov	r4, r1
 8008f2a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008f2c:	b169      	cbz	r1, 8008f4a <__ssrefill_r+0x24>
 8008f2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f32:	4299      	cmp	r1, r3
 8008f34:	d001      	beq.n	8008f3a <__ssrefill_r+0x14>
 8008f36:	f7fe fce3 	bl	8007900 <_free_r>
 8008f3a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f3c:	6063      	str	r3, [r4, #4]
 8008f3e:	2000      	movs	r0, #0
 8008f40:	6360      	str	r0, [r4, #52]	@ 0x34
 8008f42:	b113      	cbz	r3, 8008f4a <__ssrefill_r+0x24>
 8008f44:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008f46:	6023      	str	r3, [r4, #0]
 8008f48:	bd10      	pop	{r4, pc}
 8008f4a:	6923      	ldr	r3, [r4, #16]
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	2300      	movs	r3, #0
 8008f50:	6063      	str	r3, [r4, #4]
 8008f52:	89a3      	ldrh	r3, [r4, #12]
 8008f54:	f043 0320 	orr.w	r3, r3, #32
 8008f58:	81a3      	strh	r3, [r4, #12]
 8008f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f5e:	e7f3      	b.n	8008f48 <__ssrefill_r+0x22>

08008f60 <__ssvfiscanf_r>:
 8008f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f64:	460c      	mov	r4, r1
 8008f66:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8008f70:	49a6      	ldr	r1, [pc, #664]	@ (800920c <__ssvfiscanf_r+0x2ac>)
 8008f72:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008f74:	f10d 0804 	add.w	r8, sp, #4
 8008f78:	49a5      	ldr	r1, [pc, #660]	@ (8009210 <__ssvfiscanf_r+0x2b0>)
 8008f7a:	4fa6      	ldr	r7, [pc, #664]	@ (8009214 <__ssvfiscanf_r+0x2b4>)
 8008f7c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008f80:	4606      	mov	r6, r0
 8008f82:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	f892 9000 	ldrb.w	r9, [r2]
 8008f8a:	f1b9 0f00 	cmp.w	r9, #0
 8008f8e:	f000 8158 	beq.w	8009242 <__ssvfiscanf_r+0x2e2>
 8008f92:	f817 3009 	ldrb.w	r3, [r7, r9]
 8008f96:	f013 0308 	ands.w	r3, r3, #8
 8008f9a:	f102 0501 	add.w	r5, r2, #1
 8008f9e:	d019      	beq.n	8008fd4 <__ssvfiscanf_r+0x74>
 8008fa0:	6863      	ldr	r3, [r4, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	dd0f      	ble.n	8008fc6 <__ssvfiscanf_r+0x66>
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	781a      	ldrb	r2, [r3, #0]
 8008faa:	5cba      	ldrb	r2, [r7, r2]
 8008fac:	0712      	lsls	r2, r2, #28
 8008fae:	d401      	bmi.n	8008fb4 <__ssvfiscanf_r+0x54>
 8008fb0:	462a      	mov	r2, r5
 8008fb2:	e7e8      	b.n	8008f86 <__ssvfiscanf_r+0x26>
 8008fb4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008fb6:	3201      	adds	r2, #1
 8008fb8:	9245      	str	r2, [sp, #276]	@ 0x114
 8008fba:	6862      	ldr	r2, [r4, #4]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	3a01      	subs	r2, #1
 8008fc0:	6062      	str	r2, [r4, #4]
 8008fc2:	6023      	str	r3, [r4, #0]
 8008fc4:	e7ec      	b.n	8008fa0 <__ssvfiscanf_r+0x40>
 8008fc6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008fc8:	4621      	mov	r1, r4
 8008fca:	4630      	mov	r0, r6
 8008fcc:	4798      	blx	r3
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	d0e9      	beq.n	8008fa6 <__ssvfiscanf_r+0x46>
 8008fd2:	e7ed      	b.n	8008fb0 <__ssvfiscanf_r+0x50>
 8008fd4:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8008fd8:	f040 8085 	bne.w	80090e6 <__ssvfiscanf_r+0x186>
 8008fdc:	9341      	str	r3, [sp, #260]	@ 0x104
 8008fde:	9343      	str	r3, [sp, #268]	@ 0x10c
 8008fe0:	7853      	ldrb	r3, [r2, #1]
 8008fe2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fe4:	bf02      	ittt	eq
 8008fe6:	2310      	moveq	r3, #16
 8008fe8:	1c95      	addeq	r5, r2, #2
 8008fea:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008fec:	220a      	movs	r2, #10
 8008fee:	46aa      	mov	sl, r5
 8008ff0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008ff4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008ff8:	2b09      	cmp	r3, #9
 8008ffa:	d91e      	bls.n	800903a <__ssvfiscanf_r+0xda>
 8008ffc:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8009218 <__ssvfiscanf_r+0x2b8>
 8009000:	2203      	movs	r2, #3
 8009002:	4658      	mov	r0, fp
 8009004:	f7f7 f8e4 	bl	80001d0 <memchr>
 8009008:	b138      	cbz	r0, 800901a <__ssvfiscanf_r+0xba>
 800900a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800900c:	eba0 000b 	sub.w	r0, r0, fp
 8009010:	2301      	movs	r3, #1
 8009012:	4083      	lsls	r3, r0
 8009014:	4313      	orrs	r3, r2
 8009016:	9341      	str	r3, [sp, #260]	@ 0x104
 8009018:	4655      	mov	r5, sl
 800901a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800901e:	2b78      	cmp	r3, #120	@ 0x78
 8009020:	d806      	bhi.n	8009030 <__ssvfiscanf_r+0xd0>
 8009022:	2b57      	cmp	r3, #87	@ 0x57
 8009024:	d810      	bhi.n	8009048 <__ssvfiscanf_r+0xe8>
 8009026:	2b25      	cmp	r3, #37	@ 0x25
 8009028:	d05d      	beq.n	80090e6 <__ssvfiscanf_r+0x186>
 800902a:	d857      	bhi.n	80090dc <__ssvfiscanf_r+0x17c>
 800902c:	2b00      	cmp	r3, #0
 800902e:	d075      	beq.n	800911c <__ssvfiscanf_r+0x1bc>
 8009030:	2303      	movs	r3, #3
 8009032:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009034:	230a      	movs	r3, #10
 8009036:	9342      	str	r3, [sp, #264]	@ 0x108
 8009038:	e088      	b.n	800914c <__ssvfiscanf_r+0x1ec>
 800903a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800903c:	fb02 1103 	mla	r1, r2, r3, r1
 8009040:	3930      	subs	r1, #48	@ 0x30
 8009042:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009044:	4655      	mov	r5, sl
 8009046:	e7d2      	b.n	8008fee <__ssvfiscanf_r+0x8e>
 8009048:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800904c:	2a20      	cmp	r2, #32
 800904e:	d8ef      	bhi.n	8009030 <__ssvfiscanf_r+0xd0>
 8009050:	a101      	add	r1, pc, #4	@ (adr r1, 8009058 <__ssvfiscanf_r+0xf8>)
 8009052:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009056:	bf00      	nop
 8009058:	0800912b 	.word	0x0800912b
 800905c:	08009031 	.word	0x08009031
 8009060:	08009031 	.word	0x08009031
 8009064:	08009185 	.word	0x08009185
 8009068:	08009031 	.word	0x08009031
 800906c:	08009031 	.word	0x08009031
 8009070:	08009031 	.word	0x08009031
 8009074:	08009031 	.word	0x08009031
 8009078:	08009031 	.word	0x08009031
 800907c:	08009031 	.word	0x08009031
 8009080:	08009031 	.word	0x08009031
 8009084:	0800919b 	.word	0x0800919b
 8009088:	08009181 	.word	0x08009181
 800908c:	080090e3 	.word	0x080090e3
 8009090:	080090e3 	.word	0x080090e3
 8009094:	080090e3 	.word	0x080090e3
 8009098:	08009031 	.word	0x08009031
 800909c:	0800913d 	.word	0x0800913d
 80090a0:	08009031 	.word	0x08009031
 80090a4:	08009031 	.word	0x08009031
 80090a8:	08009031 	.word	0x08009031
 80090ac:	08009031 	.word	0x08009031
 80090b0:	080091ab 	.word	0x080091ab
 80090b4:	08009145 	.word	0x08009145
 80090b8:	08009123 	.word	0x08009123
 80090bc:	08009031 	.word	0x08009031
 80090c0:	08009031 	.word	0x08009031
 80090c4:	080091a7 	.word	0x080091a7
 80090c8:	08009031 	.word	0x08009031
 80090cc:	08009181 	.word	0x08009181
 80090d0:	08009031 	.word	0x08009031
 80090d4:	08009031 	.word	0x08009031
 80090d8:	0800912b 	.word	0x0800912b
 80090dc:	3b45      	subs	r3, #69	@ 0x45
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d8a6      	bhi.n	8009030 <__ssvfiscanf_r+0xd0>
 80090e2:	2305      	movs	r3, #5
 80090e4:	e031      	b.n	800914a <__ssvfiscanf_r+0x1ea>
 80090e6:	6863      	ldr	r3, [r4, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	dd0d      	ble.n	8009108 <__ssvfiscanf_r+0x1a8>
 80090ec:	6823      	ldr	r3, [r4, #0]
 80090ee:	781a      	ldrb	r2, [r3, #0]
 80090f0:	454a      	cmp	r2, r9
 80090f2:	f040 80a6 	bne.w	8009242 <__ssvfiscanf_r+0x2e2>
 80090f6:	3301      	adds	r3, #1
 80090f8:	6862      	ldr	r2, [r4, #4]
 80090fa:	6023      	str	r3, [r4, #0]
 80090fc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80090fe:	3a01      	subs	r2, #1
 8009100:	3301      	adds	r3, #1
 8009102:	6062      	str	r2, [r4, #4]
 8009104:	9345      	str	r3, [sp, #276]	@ 0x114
 8009106:	e753      	b.n	8008fb0 <__ssvfiscanf_r+0x50>
 8009108:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800910a:	4621      	mov	r1, r4
 800910c:	4630      	mov	r0, r6
 800910e:	4798      	blx	r3
 8009110:	2800      	cmp	r0, #0
 8009112:	d0eb      	beq.n	80090ec <__ssvfiscanf_r+0x18c>
 8009114:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009116:	2800      	cmp	r0, #0
 8009118:	f040 808b 	bne.w	8009232 <__ssvfiscanf_r+0x2d2>
 800911c:	f04f 30ff 	mov.w	r0, #4294967295
 8009120:	e08b      	b.n	800923a <__ssvfiscanf_r+0x2da>
 8009122:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009124:	f042 0220 	orr.w	r2, r2, #32
 8009128:	9241      	str	r2, [sp, #260]	@ 0x104
 800912a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800912c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009130:	9241      	str	r2, [sp, #260]	@ 0x104
 8009132:	2210      	movs	r2, #16
 8009134:	2b6e      	cmp	r3, #110	@ 0x6e
 8009136:	9242      	str	r2, [sp, #264]	@ 0x108
 8009138:	d902      	bls.n	8009140 <__ssvfiscanf_r+0x1e0>
 800913a:	e005      	b.n	8009148 <__ssvfiscanf_r+0x1e8>
 800913c:	2300      	movs	r3, #0
 800913e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009140:	2303      	movs	r3, #3
 8009142:	e002      	b.n	800914a <__ssvfiscanf_r+0x1ea>
 8009144:	2308      	movs	r3, #8
 8009146:	9342      	str	r3, [sp, #264]	@ 0x108
 8009148:	2304      	movs	r3, #4
 800914a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800914c:	6863      	ldr	r3, [r4, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	dd39      	ble.n	80091c6 <__ssvfiscanf_r+0x266>
 8009152:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009154:	0659      	lsls	r1, r3, #25
 8009156:	d404      	bmi.n	8009162 <__ssvfiscanf_r+0x202>
 8009158:	6823      	ldr	r3, [r4, #0]
 800915a:	781a      	ldrb	r2, [r3, #0]
 800915c:	5cba      	ldrb	r2, [r7, r2]
 800915e:	0712      	lsls	r2, r2, #28
 8009160:	d438      	bmi.n	80091d4 <__ssvfiscanf_r+0x274>
 8009162:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009164:	2b02      	cmp	r3, #2
 8009166:	dc47      	bgt.n	80091f8 <__ssvfiscanf_r+0x298>
 8009168:	466b      	mov	r3, sp
 800916a:	4622      	mov	r2, r4
 800916c:	a941      	add	r1, sp, #260	@ 0x104
 800916e:	4630      	mov	r0, r6
 8009170:	f000 f86c 	bl	800924c <_scanf_chars>
 8009174:	2801      	cmp	r0, #1
 8009176:	d064      	beq.n	8009242 <__ssvfiscanf_r+0x2e2>
 8009178:	2802      	cmp	r0, #2
 800917a:	f47f af19 	bne.w	8008fb0 <__ssvfiscanf_r+0x50>
 800917e:	e7c9      	b.n	8009114 <__ssvfiscanf_r+0x1b4>
 8009180:	220a      	movs	r2, #10
 8009182:	e7d7      	b.n	8009134 <__ssvfiscanf_r+0x1d4>
 8009184:	4629      	mov	r1, r5
 8009186:	4640      	mov	r0, r8
 8009188:	f000 fa5a 	bl	8009640 <__sccl>
 800918c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800918e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009192:	9341      	str	r3, [sp, #260]	@ 0x104
 8009194:	4605      	mov	r5, r0
 8009196:	2301      	movs	r3, #1
 8009198:	e7d7      	b.n	800914a <__ssvfiscanf_r+0x1ea>
 800919a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800919c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091a0:	9341      	str	r3, [sp, #260]	@ 0x104
 80091a2:	2300      	movs	r3, #0
 80091a4:	e7d1      	b.n	800914a <__ssvfiscanf_r+0x1ea>
 80091a6:	2302      	movs	r3, #2
 80091a8:	e7cf      	b.n	800914a <__ssvfiscanf_r+0x1ea>
 80091aa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80091ac:	06c3      	lsls	r3, r0, #27
 80091ae:	f53f aeff 	bmi.w	8008fb0 <__ssvfiscanf_r+0x50>
 80091b2:	9b00      	ldr	r3, [sp, #0]
 80091b4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80091b6:	1d19      	adds	r1, r3, #4
 80091b8:	9100      	str	r1, [sp, #0]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	07c0      	lsls	r0, r0, #31
 80091be:	bf4c      	ite	mi
 80091c0:	801a      	strhmi	r2, [r3, #0]
 80091c2:	601a      	strpl	r2, [r3, #0]
 80091c4:	e6f4      	b.n	8008fb0 <__ssvfiscanf_r+0x50>
 80091c6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80091c8:	4621      	mov	r1, r4
 80091ca:	4630      	mov	r0, r6
 80091cc:	4798      	blx	r3
 80091ce:	2800      	cmp	r0, #0
 80091d0:	d0bf      	beq.n	8009152 <__ssvfiscanf_r+0x1f2>
 80091d2:	e79f      	b.n	8009114 <__ssvfiscanf_r+0x1b4>
 80091d4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80091d6:	3201      	adds	r2, #1
 80091d8:	9245      	str	r2, [sp, #276]	@ 0x114
 80091da:	6862      	ldr	r2, [r4, #4]
 80091dc:	3a01      	subs	r2, #1
 80091de:	2a00      	cmp	r2, #0
 80091e0:	6062      	str	r2, [r4, #4]
 80091e2:	dd02      	ble.n	80091ea <__ssvfiscanf_r+0x28a>
 80091e4:	3301      	adds	r3, #1
 80091e6:	6023      	str	r3, [r4, #0]
 80091e8:	e7b6      	b.n	8009158 <__ssvfiscanf_r+0x1f8>
 80091ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80091ec:	4621      	mov	r1, r4
 80091ee:	4630      	mov	r0, r6
 80091f0:	4798      	blx	r3
 80091f2:	2800      	cmp	r0, #0
 80091f4:	d0b0      	beq.n	8009158 <__ssvfiscanf_r+0x1f8>
 80091f6:	e78d      	b.n	8009114 <__ssvfiscanf_r+0x1b4>
 80091f8:	2b04      	cmp	r3, #4
 80091fa:	dc0f      	bgt.n	800921c <__ssvfiscanf_r+0x2bc>
 80091fc:	466b      	mov	r3, sp
 80091fe:	4622      	mov	r2, r4
 8009200:	a941      	add	r1, sp, #260	@ 0x104
 8009202:	4630      	mov	r0, r6
 8009204:	f000 f87c 	bl	8009300 <_scanf_i>
 8009208:	e7b4      	b.n	8009174 <__ssvfiscanf_r+0x214>
 800920a:	bf00      	nop
 800920c:	08008ead 	.word	0x08008ead
 8009210:	08008f27 	.word	0x08008f27
 8009214:	0800a469 	.word	0x0800a469
 8009218:	0800a2b1 	.word	0x0800a2b1
 800921c:	4b0a      	ldr	r3, [pc, #40]	@ (8009248 <__ssvfiscanf_r+0x2e8>)
 800921e:	2b00      	cmp	r3, #0
 8009220:	f43f aec6 	beq.w	8008fb0 <__ssvfiscanf_r+0x50>
 8009224:	466b      	mov	r3, sp
 8009226:	4622      	mov	r2, r4
 8009228:	a941      	add	r1, sp, #260	@ 0x104
 800922a:	4630      	mov	r0, r6
 800922c:	f7fd f8dc 	bl	80063e8 <_scanf_float>
 8009230:	e7a0      	b.n	8009174 <__ssvfiscanf_r+0x214>
 8009232:	89a3      	ldrh	r3, [r4, #12]
 8009234:	065b      	lsls	r3, r3, #25
 8009236:	f53f af71 	bmi.w	800911c <__ssvfiscanf_r+0x1bc>
 800923a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800923e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009242:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009244:	e7f9      	b.n	800923a <__ssvfiscanf_r+0x2da>
 8009246:	bf00      	nop
 8009248:	080063e9 	.word	0x080063e9

0800924c <_scanf_chars>:
 800924c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009250:	4615      	mov	r5, r2
 8009252:	688a      	ldr	r2, [r1, #8]
 8009254:	4680      	mov	r8, r0
 8009256:	460c      	mov	r4, r1
 8009258:	b932      	cbnz	r2, 8009268 <_scanf_chars+0x1c>
 800925a:	698a      	ldr	r2, [r1, #24]
 800925c:	2a00      	cmp	r2, #0
 800925e:	bf14      	ite	ne
 8009260:	f04f 32ff 	movne.w	r2, #4294967295
 8009264:	2201      	moveq	r2, #1
 8009266:	608a      	str	r2, [r1, #8]
 8009268:	6822      	ldr	r2, [r4, #0]
 800926a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80092fc <_scanf_chars+0xb0>
 800926e:	06d1      	lsls	r1, r2, #27
 8009270:	bf5f      	itttt	pl
 8009272:	681a      	ldrpl	r2, [r3, #0]
 8009274:	1d11      	addpl	r1, r2, #4
 8009276:	6019      	strpl	r1, [r3, #0]
 8009278:	6816      	ldrpl	r6, [r2, #0]
 800927a:	2700      	movs	r7, #0
 800927c:	69a0      	ldr	r0, [r4, #24]
 800927e:	b188      	cbz	r0, 80092a4 <_scanf_chars+0x58>
 8009280:	2801      	cmp	r0, #1
 8009282:	d107      	bne.n	8009294 <_scanf_chars+0x48>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	781a      	ldrb	r2, [r3, #0]
 8009288:	6963      	ldr	r3, [r4, #20]
 800928a:	5c9b      	ldrb	r3, [r3, r2]
 800928c:	b953      	cbnz	r3, 80092a4 <_scanf_chars+0x58>
 800928e:	2f00      	cmp	r7, #0
 8009290:	d031      	beq.n	80092f6 <_scanf_chars+0xaa>
 8009292:	e022      	b.n	80092da <_scanf_chars+0x8e>
 8009294:	2802      	cmp	r0, #2
 8009296:	d120      	bne.n	80092da <_scanf_chars+0x8e>
 8009298:	682b      	ldr	r3, [r5, #0]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	f819 3003 	ldrb.w	r3, [r9, r3]
 80092a0:	071b      	lsls	r3, r3, #28
 80092a2:	d41a      	bmi.n	80092da <_scanf_chars+0x8e>
 80092a4:	6823      	ldr	r3, [r4, #0]
 80092a6:	06da      	lsls	r2, r3, #27
 80092a8:	bf5e      	ittt	pl
 80092aa:	682b      	ldrpl	r3, [r5, #0]
 80092ac:	781b      	ldrbpl	r3, [r3, #0]
 80092ae:	f806 3b01 	strbpl.w	r3, [r6], #1
 80092b2:	682a      	ldr	r2, [r5, #0]
 80092b4:	686b      	ldr	r3, [r5, #4]
 80092b6:	3201      	adds	r2, #1
 80092b8:	602a      	str	r2, [r5, #0]
 80092ba:	68a2      	ldr	r2, [r4, #8]
 80092bc:	3b01      	subs	r3, #1
 80092be:	3a01      	subs	r2, #1
 80092c0:	606b      	str	r3, [r5, #4]
 80092c2:	3701      	adds	r7, #1
 80092c4:	60a2      	str	r2, [r4, #8]
 80092c6:	b142      	cbz	r2, 80092da <_scanf_chars+0x8e>
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	dcd7      	bgt.n	800927c <_scanf_chars+0x30>
 80092cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80092d0:	4629      	mov	r1, r5
 80092d2:	4640      	mov	r0, r8
 80092d4:	4798      	blx	r3
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d0d0      	beq.n	800927c <_scanf_chars+0x30>
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	f013 0310 	ands.w	r3, r3, #16
 80092e0:	d105      	bne.n	80092ee <_scanf_chars+0xa2>
 80092e2:	68e2      	ldr	r2, [r4, #12]
 80092e4:	3201      	adds	r2, #1
 80092e6:	60e2      	str	r2, [r4, #12]
 80092e8:	69a2      	ldr	r2, [r4, #24]
 80092ea:	b102      	cbz	r2, 80092ee <_scanf_chars+0xa2>
 80092ec:	7033      	strb	r3, [r6, #0]
 80092ee:	6923      	ldr	r3, [r4, #16]
 80092f0:	443b      	add	r3, r7
 80092f2:	6123      	str	r3, [r4, #16]
 80092f4:	2000      	movs	r0, #0
 80092f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092fa:	bf00      	nop
 80092fc:	0800a469 	.word	0x0800a469

08009300 <_scanf_i>:
 8009300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009304:	4698      	mov	r8, r3
 8009306:	4b74      	ldr	r3, [pc, #464]	@ (80094d8 <_scanf_i+0x1d8>)
 8009308:	460c      	mov	r4, r1
 800930a:	4682      	mov	sl, r0
 800930c:	4616      	mov	r6, r2
 800930e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009312:	b087      	sub	sp, #28
 8009314:	ab03      	add	r3, sp, #12
 8009316:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800931a:	4b70      	ldr	r3, [pc, #448]	@ (80094dc <_scanf_i+0x1dc>)
 800931c:	69a1      	ldr	r1, [r4, #24]
 800931e:	4a70      	ldr	r2, [pc, #448]	@ (80094e0 <_scanf_i+0x1e0>)
 8009320:	2903      	cmp	r1, #3
 8009322:	bf08      	it	eq
 8009324:	461a      	moveq	r2, r3
 8009326:	68a3      	ldr	r3, [r4, #8]
 8009328:	9201      	str	r2, [sp, #4]
 800932a:	1e5a      	subs	r2, r3, #1
 800932c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009330:	bf88      	it	hi
 8009332:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009336:	4627      	mov	r7, r4
 8009338:	bf82      	ittt	hi
 800933a:	eb03 0905 	addhi.w	r9, r3, r5
 800933e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009342:	60a3      	strhi	r3, [r4, #8]
 8009344:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009348:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800934c:	bf98      	it	ls
 800934e:	f04f 0900 	movls.w	r9, #0
 8009352:	6023      	str	r3, [r4, #0]
 8009354:	463d      	mov	r5, r7
 8009356:	f04f 0b00 	mov.w	fp, #0
 800935a:	6831      	ldr	r1, [r6, #0]
 800935c:	ab03      	add	r3, sp, #12
 800935e:	7809      	ldrb	r1, [r1, #0]
 8009360:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009364:	2202      	movs	r2, #2
 8009366:	f7f6 ff33 	bl	80001d0 <memchr>
 800936a:	b328      	cbz	r0, 80093b8 <_scanf_i+0xb8>
 800936c:	f1bb 0f01 	cmp.w	fp, #1
 8009370:	d159      	bne.n	8009426 <_scanf_i+0x126>
 8009372:	6862      	ldr	r2, [r4, #4]
 8009374:	b92a      	cbnz	r2, 8009382 <_scanf_i+0x82>
 8009376:	6822      	ldr	r2, [r4, #0]
 8009378:	2108      	movs	r1, #8
 800937a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800937e:	6061      	str	r1, [r4, #4]
 8009380:	6022      	str	r2, [r4, #0]
 8009382:	6822      	ldr	r2, [r4, #0]
 8009384:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009388:	6022      	str	r2, [r4, #0]
 800938a:	68a2      	ldr	r2, [r4, #8]
 800938c:	1e51      	subs	r1, r2, #1
 800938e:	60a1      	str	r1, [r4, #8]
 8009390:	b192      	cbz	r2, 80093b8 <_scanf_i+0xb8>
 8009392:	6832      	ldr	r2, [r6, #0]
 8009394:	1c51      	adds	r1, r2, #1
 8009396:	6031      	str	r1, [r6, #0]
 8009398:	7812      	ldrb	r2, [r2, #0]
 800939a:	f805 2b01 	strb.w	r2, [r5], #1
 800939e:	6872      	ldr	r2, [r6, #4]
 80093a0:	3a01      	subs	r2, #1
 80093a2:	2a00      	cmp	r2, #0
 80093a4:	6072      	str	r2, [r6, #4]
 80093a6:	dc07      	bgt.n	80093b8 <_scanf_i+0xb8>
 80093a8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80093ac:	4631      	mov	r1, r6
 80093ae:	4650      	mov	r0, sl
 80093b0:	4790      	blx	r2
 80093b2:	2800      	cmp	r0, #0
 80093b4:	f040 8085 	bne.w	80094c2 <_scanf_i+0x1c2>
 80093b8:	f10b 0b01 	add.w	fp, fp, #1
 80093bc:	f1bb 0f03 	cmp.w	fp, #3
 80093c0:	d1cb      	bne.n	800935a <_scanf_i+0x5a>
 80093c2:	6863      	ldr	r3, [r4, #4]
 80093c4:	b90b      	cbnz	r3, 80093ca <_scanf_i+0xca>
 80093c6:	230a      	movs	r3, #10
 80093c8:	6063      	str	r3, [r4, #4]
 80093ca:	6863      	ldr	r3, [r4, #4]
 80093cc:	4945      	ldr	r1, [pc, #276]	@ (80094e4 <_scanf_i+0x1e4>)
 80093ce:	6960      	ldr	r0, [r4, #20]
 80093d0:	1ac9      	subs	r1, r1, r3
 80093d2:	f000 f935 	bl	8009640 <__sccl>
 80093d6:	f04f 0b00 	mov.w	fp, #0
 80093da:	68a3      	ldr	r3, [r4, #8]
 80093dc:	6822      	ldr	r2, [r4, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d03d      	beq.n	800945e <_scanf_i+0x15e>
 80093e2:	6831      	ldr	r1, [r6, #0]
 80093e4:	6960      	ldr	r0, [r4, #20]
 80093e6:	f891 c000 	ldrb.w	ip, [r1]
 80093ea:	f810 000c 	ldrb.w	r0, [r0, ip]
 80093ee:	2800      	cmp	r0, #0
 80093f0:	d035      	beq.n	800945e <_scanf_i+0x15e>
 80093f2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80093f6:	d124      	bne.n	8009442 <_scanf_i+0x142>
 80093f8:	0510      	lsls	r0, r2, #20
 80093fa:	d522      	bpl.n	8009442 <_scanf_i+0x142>
 80093fc:	f10b 0b01 	add.w	fp, fp, #1
 8009400:	f1b9 0f00 	cmp.w	r9, #0
 8009404:	d003      	beq.n	800940e <_scanf_i+0x10e>
 8009406:	3301      	adds	r3, #1
 8009408:	f109 39ff 	add.w	r9, r9, #4294967295
 800940c:	60a3      	str	r3, [r4, #8]
 800940e:	6873      	ldr	r3, [r6, #4]
 8009410:	3b01      	subs	r3, #1
 8009412:	2b00      	cmp	r3, #0
 8009414:	6073      	str	r3, [r6, #4]
 8009416:	dd1b      	ble.n	8009450 <_scanf_i+0x150>
 8009418:	6833      	ldr	r3, [r6, #0]
 800941a:	3301      	adds	r3, #1
 800941c:	6033      	str	r3, [r6, #0]
 800941e:	68a3      	ldr	r3, [r4, #8]
 8009420:	3b01      	subs	r3, #1
 8009422:	60a3      	str	r3, [r4, #8]
 8009424:	e7d9      	b.n	80093da <_scanf_i+0xda>
 8009426:	f1bb 0f02 	cmp.w	fp, #2
 800942a:	d1ae      	bne.n	800938a <_scanf_i+0x8a>
 800942c:	6822      	ldr	r2, [r4, #0]
 800942e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8009432:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009436:	d1c4      	bne.n	80093c2 <_scanf_i+0xc2>
 8009438:	2110      	movs	r1, #16
 800943a:	6061      	str	r1, [r4, #4]
 800943c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009440:	e7a2      	b.n	8009388 <_scanf_i+0x88>
 8009442:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009446:	6022      	str	r2, [r4, #0]
 8009448:	780b      	ldrb	r3, [r1, #0]
 800944a:	f805 3b01 	strb.w	r3, [r5], #1
 800944e:	e7de      	b.n	800940e <_scanf_i+0x10e>
 8009450:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009454:	4631      	mov	r1, r6
 8009456:	4650      	mov	r0, sl
 8009458:	4798      	blx	r3
 800945a:	2800      	cmp	r0, #0
 800945c:	d0df      	beq.n	800941e <_scanf_i+0x11e>
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	05d9      	lsls	r1, r3, #23
 8009462:	d50d      	bpl.n	8009480 <_scanf_i+0x180>
 8009464:	42bd      	cmp	r5, r7
 8009466:	d909      	bls.n	800947c <_scanf_i+0x17c>
 8009468:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800946c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009470:	4632      	mov	r2, r6
 8009472:	4650      	mov	r0, sl
 8009474:	4798      	blx	r3
 8009476:	f105 39ff 	add.w	r9, r5, #4294967295
 800947a:	464d      	mov	r5, r9
 800947c:	42bd      	cmp	r5, r7
 800947e:	d028      	beq.n	80094d2 <_scanf_i+0x1d2>
 8009480:	6822      	ldr	r2, [r4, #0]
 8009482:	f012 0210 	ands.w	r2, r2, #16
 8009486:	d113      	bne.n	80094b0 <_scanf_i+0x1b0>
 8009488:	702a      	strb	r2, [r5, #0]
 800948a:	6863      	ldr	r3, [r4, #4]
 800948c:	9e01      	ldr	r6, [sp, #4]
 800948e:	4639      	mov	r1, r7
 8009490:	4650      	mov	r0, sl
 8009492:	47b0      	blx	r6
 8009494:	f8d8 3000 	ldr.w	r3, [r8]
 8009498:	6821      	ldr	r1, [r4, #0]
 800949a:	1d1a      	adds	r2, r3, #4
 800949c:	f8c8 2000 	str.w	r2, [r8]
 80094a0:	f011 0f20 	tst.w	r1, #32
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	d00f      	beq.n	80094c8 <_scanf_i+0x1c8>
 80094a8:	6018      	str	r0, [r3, #0]
 80094aa:	68e3      	ldr	r3, [r4, #12]
 80094ac:	3301      	adds	r3, #1
 80094ae:	60e3      	str	r3, [r4, #12]
 80094b0:	6923      	ldr	r3, [r4, #16]
 80094b2:	1bed      	subs	r5, r5, r7
 80094b4:	445d      	add	r5, fp
 80094b6:	442b      	add	r3, r5
 80094b8:	6123      	str	r3, [r4, #16]
 80094ba:	2000      	movs	r0, #0
 80094bc:	b007      	add	sp, #28
 80094be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c2:	f04f 0b00 	mov.w	fp, #0
 80094c6:	e7ca      	b.n	800945e <_scanf_i+0x15e>
 80094c8:	07ca      	lsls	r2, r1, #31
 80094ca:	bf4c      	ite	mi
 80094cc:	8018      	strhmi	r0, [r3, #0]
 80094ce:	6018      	strpl	r0, [r3, #0]
 80094d0:	e7eb      	b.n	80094aa <_scanf_i+0x1aa>
 80094d2:	2001      	movs	r0, #1
 80094d4:	e7f2      	b.n	80094bc <_scanf_i+0x1bc>
 80094d6:	bf00      	nop
 80094d8:	0800a0e0 	.word	0x0800a0e0
 80094dc:	08008be1 	.word	0x08008be1
 80094e0:	08009919 	.word	0x08009919
 80094e4:	0800a2cc 	.word	0x0800a2cc

080094e8 <__sflush_r>:
 80094e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f0:	0716      	lsls	r6, r2, #28
 80094f2:	4605      	mov	r5, r0
 80094f4:	460c      	mov	r4, r1
 80094f6:	d454      	bmi.n	80095a2 <__sflush_r+0xba>
 80094f8:	684b      	ldr	r3, [r1, #4]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	dc02      	bgt.n	8009504 <__sflush_r+0x1c>
 80094fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009500:	2b00      	cmp	r3, #0
 8009502:	dd48      	ble.n	8009596 <__sflush_r+0xae>
 8009504:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009506:	2e00      	cmp	r6, #0
 8009508:	d045      	beq.n	8009596 <__sflush_r+0xae>
 800950a:	2300      	movs	r3, #0
 800950c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009510:	682f      	ldr	r7, [r5, #0]
 8009512:	6a21      	ldr	r1, [r4, #32]
 8009514:	602b      	str	r3, [r5, #0]
 8009516:	d030      	beq.n	800957a <__sflush_r+0x92>
 8009518:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800951a:	89a3      	ldrh	r3, [r4, #12]
 800951c:	0759      	lsls	r1, r3, #29
 800951e:	d505      	bpl.n	800952c <__sflush_r+0x44>
 8009520:	6863      	ldr	r3, [r4, #4]
 8009522:	1ad2      	subs	r2, r2, r3
 8009524:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009526:	b10b      	cbz	r3, 800952c <__sflush_r+0x44>
 8009528:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800952a:	1ad2      	subs	r2, r2, r3
 800952c:	2300      	movs	r3, #0
 800952e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009530:	6a21      	ldr	r1, [r4, #32]
 8009532:	4628      	mov	r0, r5
 8009534:	47b0      	blx	r6
 8009536:	1c43      	adds	r3, r0, #1
 8009538:	89a3      	ldrh	r3, [r4, #12]
 800953a:	d106      	bne.n	800954a <__sflush_r+0x62>
 800953c:	6829      	ldr	r1, [r5, #0]
 800953e:	291d      	cmp	r1, #29
 8009540:	d82b      	bhi.n	800959a <__sflush_r+0xb2>
 8009542:	4a2a      	ldr	r2, [pc, #168]	@ (80095ec <__sflush_r+0x104>)
 8009544:	40ca      	lsrs	r2, r1
 8009546:	07d6      	lsls	r6, r2, #31
 8009548:	d527      	bpl.n	800959a <__sflush_r+0xb2>
 800954a:	2200      	movs	r2, #0
 800954c:	6062      	str	r2, [r4, #4]
 800954e:	04d9      	lsls	r1, r3, #19
 8009550:	6922      	ldr	r2, [r4, #16]
 8009552:	6022      	str	r2, [r4, #0]
 8009554:	d504      	bpl.n	8009560 <__sflush_r+0x78>
 8009556:	1c42      	adds	r2, r0, #1
 8009558:	d101      	bne.n	800955e <__sflush_r+0x76>
 800955a:	682b      	ldr	r3, [r5, #0]
 800955c:	b903      	cbnz	r3, 8009560 <__sflush_r+0x78>
 800955e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009562:	602f      	str	r7, [r5, #0]
 8009564:	b1b9      	cbz	r1, 8009596 <__sflush_r+0xae>
 8009566:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800956a:	4299      	cmp	r1, r3
 800956c:	d002      	beq.n	8009574 <__sflush_r+0x8c>
 800956e:	4628      	mov	r0, r5
 8009570:	f7fe f9c6 	bl	8007900 <_free_r>
 8009574:	2300      	movs	r3, #0
 8009576:	6363      	str	r3, [r4, #52]	@ 0x34
 8009578:	e00d      	b.n	8009596 <__sflush_r+0xae>
 800957a:	2301      	movs	r3, #1
 800957c:	4628      	mov	r0, r5
 800957e:	47b0      	blx	r6
 8009580:	4602      	mov	r2, r0
 8009582:	1c50      	adds	r0, r2, #1
 8009584:	d1c9      	bne.n	800951a <__sflush_r+0x32>
 8009586:	682b      	ldr	r3, [r5, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d0c6      	beq.n	800951a <__sflush_r+0x32>
 800958c:	2b1d      	cmp	r3, #29
 800958e:	d001      	beq.n	8009594 <__sflush_r+0xac>
 8009590:	2b16      	cmp	r3, #22
 8009592:	d11e      	bne.n	80095d2 <__sflush_r+0xea>
 8009594:	602f      	str	r7, [r5, #0]
 8009596:	2000      	movs	r0, #0
 8009598:	e022      	b.n	80095e0 <__sflush_r+0xf8>
 800959a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800959e:	b21b      	sxth	r3, r3
 80095a0:	e01b      	b.n	80095da <__sflush_r+0xf2>
 80095a2:	690f      	ldr	r7, [r1, #16]
 80095a4:	2f00      	cmp	r7, #0
 80095a6:	d0f6      	beq.n	8009596 <__sflush_r+0xae>
 80095a8:	0793      	lsls	r3, r2, #30
 80095aa:	680e      	ldr	r6, [r1, #0]
 80095ac:	bf08      	it	eq
 80095ae:	694b      	ldreq	r3, [r1, #20]
 80095b0:	600f      	str	r7, [r1, #0]
 80095b2:	bf18      	it	ne
 80095b4:	2300      	movne	r3, #0
 80095b6:	eba6 0807 	sub.w	r8, r6, r7
 80095ba:	608b      	str	r3, [r1, #8]
 80095bc:	f1b8 0f00 	cmp.w	r8, #0
 80095c0:	dde9      	ble.n	8009596 <__sflush_r+0xae>
 80095c2:	6a21      	ldr	r1, [r4, #32]
 80095c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80095c6:	4643      	mov	r3, r8
 80095c8:	463a      	mov	r2, r7
 80095ca:	4628      	mov	r0, r5
 80095cc:	47b0      	blx	r6
 80095ce:	2800      	cmp	r0, #0
 80095d0:	dc08      	bgt.n	80095e4 <__sflush_r+0xfc>
 80095d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095da:	81a3      	strh	r3, [r4, #12]
 80095dc:	f04f 30ff 	mov.w	r0, #4294967295
 80095e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095e4:	4407      	add	r7, r0
 80095e6:	eba8 0800 	sub.w	r8, r8, r0
 80095ea:	e7e7      	b.n	80095bc <__sflush_r+0xd4>
 80095ec:	20400001 	.word	0x20400001

080095f0 <_fflush_r>:
 80095f0:	b538      	push	{r3, r4, r5, lr}
 80095f2:	690b      	ldr	r3, [r1, #16]
 80095f4:	4605      	mov	r5, r0
 80095f6:	460c      	mov	r4, r1
 80095f8:	b913      	cbnz	r3, 8009600 <_fflush_r+0x10>
 80095fa:	2500      	movs	r5, #0
 80095fc:	4628      	mov	r0, r5
 80095fe:	bd38      	pop	{r3, r4, r5, pc}
 8009600:	b118      	cbz	r0, 800960a <_fflush_r+0x1a>
 8009602:	6a03      	ldr	r3, [r0, #32]
 8009604:	b90b      	cbnz	r3, 800960a <_fflush_r+0x1a>
 8009606:	f7fd f989 	bl	800691c <__sinit>
 800960a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d0f3      	beq.n	80095fa <_fflush_r+0xa>
 8009612:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009614:	07d0      	lsls	r0, r2, #31
 8009616:	d404      	bmi.n	8009622 <_fflush_r+0x32>
 8009618:	0599      	lsls	r1, r3, #22
 800961a:	d402      	bmi.n	8009622 <_fflush_r+0x32>
 800961c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800961e:	f7fd faf6 	bl	8006c0e <__retarget_lock_acquire_recursive>
 8009622:	4628      	mov	r0, r5
 8009624:	4621      	mov	r1, r4
 8009626:	f7ff ff5f 	bl	80094e8 <__sflush_r>
 800962a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800962c:	07da      	lsls	r2, r3, #31
 800962e:	4605      	mov	r5, r0
 8009630:	d4e4      	bmi.n	80095fc <_fflush_r+0xc>
 8009632:	89a3      	ldrh	r3, [r4, #12]
 8009634:	059b      	lsls	r3, r3, #22
 8009636:	d4e1      	bmi.n	80095fc <_fflush_r+0xc>
 8009638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800963a:	f7fd fae9 	bl	8006c10 <__retarget_lock_release_recursive>
 800963e:	e7dd      	b.n	80095fc <_fflush_r+0xc>

08009640 <__sccl>:
 8009640:	b570      	push	{r4, r5, r6, lr}
 8009642:	780b      	ldrb	r3, [r1, #0]
 8009644:	4604      	mov	r4, r0
 8009646:	2b5e      	cmp	r3, #94	@ 0x5e
 8009648:	bf0b      	itete	eq
 800964a:	784b      	ldrbeq	r3, [r1, #1]
 800964c:	1c4a      	addne	r2, r1, #1
 800964e:	1c8a      	addeq	r2, r1, #2
 8009650:	2100      	movne	r1, #0
 8009652:	bf08      	it	eq
 8009654:	2101      	moveq	r1, #1
 8009656:	3801      	subs	r0, #1
 8009658:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800965c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009660:	42a8      	cmp	r0, r5
 8009662:	d1fb      	bne.n	800965c <__sccl+0x1c>
 8009664:	b90b      	cbnz	r3, 800966a <__sccl+0x2a>
 8009666:	1e50      	subs	r0, r2, #1
 8009668:	bd70      	pop	{r4, r5, r6, pc}
 800966a:	f081 0101 	eor.w	r1, r1, #1
 800966e:	54e1      	strb	r1, [r4, r3]
 8009670:	4610      	mov	r0, r2
 8009672:	4602      	mov	r2, r0
 8009674:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009678:	2d2d      	cmp	r5, #45	@ 0x2d
 800967a:	d005      	beq.n	8009688 <__sccl+0x48>
 800967c:	2d5d      	cmp	r5, #93	@ 0x5d
 800967e:	d016      	beq.n	80096ae <__sccl+0x6e>
 8009680:	2d00      	cmp	r5, #0
 8009682:	d0f1      	beq.n	8009668 <__sccl+0x28>
 8009684:	462b      	mov	r3, r5
 8009686:	e7f2      	b.n	800966e <__sccl+0x2e>
 8009688:	7846      	ldrb	r6, [r0, #1]
 800968a:	2e5d      	cmp	r6, #93	@ 0x5d
 800968c:	d0fa      	beq.n	8009684 <__sccl+0x44>
 800968e:	42b3      	cmp	r3, r6
 8009690:	dcf8      	bgt.n	8009684 <__sccl+0x44>
 8009692:	3002      	adds	r0, #2
 8009694:	461a      	mov	r2, r3
 8009696:	3201      	adds	r2, #1
 8009698:	4296      	cmp	r6, r2
 800969a:	54a1      	strb	r1, [r4, r2]
 800969c:	dcfb      	bgt.n	8009696 <__sccl+0x56>
 800969e:	1af2      	subs	r2, r6, r3
 80096a0:	3a01      	subs	r2, #1
 80096a2:	1c5d      	adds	r5, r3, #1
 80096a4:	42b3      	cmp	r3, r6
 80096a6:	bfa8      	it	ge
 80096a8:	2200      	movge	r2, #0
 80096aa:	18ab      	adds	r3, r5, r2
 80096ac:	e7e1      	b.n	8009672 <__sccl+0x32>
 80096ae:	4610      	mov	r0, r2
 80096b0:	e7da      	b.n	8009668 <__sccl+0x28>

080096b2 <__submore>:
 80096b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b6:	460c      	mov	r4, r1
 80096b8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80096ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096be:	4299      	cmp	r1, r3
 80096c0:	d11d      	bne.n	80096fe <__submore+0x4c>
 80096c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80096c6:	f7fe fcc9 	bl	800805c <_malloc_r>
 80096ca:	b918      	cbnz	r0, 80096d4 <__submore+0x22>
 80096cc:	f04f 30ff 	mov.w	r0, #4294967295
 80096d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096d8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80096da:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80096de:	6360      	str	r0, [r4, #52]	@ 0x34
 80096e0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80096e4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80096e8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80096ec:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80096f0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80096f4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80096f8:	6020      	str	r0, [r4, #0]
 80096fa:	2000      	movs	r0, #0
 80096fc:	e7e8      	b.n	80096d0 <__submore+0x1e>
 80096fe:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009700:	0077      	lsls	r7, r6, #1
 8009702:	463a      	mov	r2, r7
 8009704:	f000 f86c 	bl	80097e0 <_realloc_r>
 8009708:	4605      	mov	r5, r0
 800970a:	2800      	cmp	r0, #0
 800970c:	d0de      	beq.n	80096cc <__submore+0x1a>
 800970e:	eb00 0806 	add.w	r8, r0, r6
 8009712:	4601      	mov	r1, r0
 8009714:	4632      	mov	r2, r6
 8009716:	4640      	mov	r0, r8
 8009718:	f7fd fa7b 	bl	8006c12 <memcpy>
 800971c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009720:	f8c4 8000 	str.w	r8, [r4]
 8009724:	e7e9      	b.n	80096fa <__submore+0x48>

08009726 <memmove>:
 8009726:	4288      	cmp	r0, r1
 8009728:	b510      	push	{r4, lr}
 800972a:	eb01 0402 	add.w	r4, r1, r2
 800972e:	d902      	bls.n	8009736 <memmove+0x10>
 8009730:	4284      	cmp	r4, r0
 8009732:	4623      	mov	r3, r4
 8009734:	d807      	bhi.n	8009746 <memmove+0x20>
 8009736:	1e43      	subs	r3, r0, #1
 8009738:	42a1      	cmp	r1, r4
 800973a:	d008      	beq.n	800974e <memmove+0x28>
 800973c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009740:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009744:	e7f8      	b.n	8009738 <memmove+0x12>
 8009746:	4402      	add	r2, r0
 8009748:	4601      	mov	r1, r0
 800974a:	428a      	cmp	r2, r1
 800974c:	d100      	bne.n	8009750 <memmove+0x2a>
 800974e:	bd10      	pop	{r4, pc}
 8009750:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009754:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009758:	e7f7      	b.n	800974a <memmove+0x24>
	...

0800975c <_sbrk_r>:
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	4d06      	ldr	r5, [pc, #24]	@ (8009778 <_sbrk_r+0x1c>)
 8009760:	2300      	movs	r3, #0
 8009762:	4604      	mov	r4, r0
 8009764:	4608      	mov	r0, r1
 8009766:	602b      	str	r3, [r5, #0]
 8009768:	f7f8 fb58 	bl	8001e1c <_sbrk>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d102      	bne.n	8009776 <_sbrk_r+0x1a>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	b103      	cbz	r3, 8009776 <_sbrk_r+0x1a>
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	20000aa0 	.word	0x20000aa0

0800977c <__assert_func>:
 800977c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800977e:	4614      	mov	r4, r2
 8009780:	461a      	mov	r2, r3
 8009782:	4b09      	ldr	r3, [pc, #36]	@ (80097a8 <__assert_func+0x2c>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4605      	mov	r5, r0
 8009788:	68d8      	ldr	r0, [r3, #12]
 800978a:	b14c      	cbz	r4, 80097a0 <__assert_func+0x24>
 800978c:	4b07      	ldr	r3, [pc, #28]	@ (80097ac <__assert_func+0x30>)
 800978e:	9100      	str	r1, [sp, #0]
 8009790:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009794:	4906      	ldr	r1, [pc, #24]	@ (80097b0 <__assert_func+0x34>)
 8009796:	462b      	mov	r3, r5
 8009798:	f000 f8c0 	bl	800991c <fiprintf>
 800979c:	f000 f8d0 	bl	8009940 <abort>
 80097a0:	4b04      	ldr	r3, [pc, #16]	@ (80097b4 <__assert_func+0x38>)
 80097a2:	461c      	mov	r4, r3
 80097a4:	e7f3      	b.n	800978e <__assert_func+0x12>
 80097a6:	bf00      	nop
 80097a8:	20000190 	.word	0x20000190
 80097ac:	0800a2d7 	.word	0x0800a2d7
 80097b0:	0800a2e4 	.word	0x0800a2e4
 80097b4:	0800a312 	.word	0x0800a312

080097b8 <_calloc_r>:
 80097b8:	b570      	push	{r4, r5, r6, lr}
 80097ba:	fba1 5402 	umull	r5, r4, r1, r2
 80097be:	b934      	cbnz	r4, 80097ce <_calloc_r+0x16>
 80097c0:	4629      	mov	r1, r5
 80097c2:	f7fe fc4b 	bl	800805c <_malloc_r>
 80097c6:	4606      	mov	r6, r0
 80097c8:	b928      	cbnz	r0, 80097d6 <_calloc_r+0x1e>
 80097ca:	4630      	mov	r0, r6
 80097cc:	bd70      	pop	{r4, r5, r6, pc}
 80097ce:	220c      	movs	r2, #12
 80097d0:	6002      	str	r2, [r0, #0]
 80097d2:	2600      	movs	r6, #0
 80097d4:	e7f9      	b.n	80097ca <_calloc_r+0x12>
 80097d6:	462a      	mov	r2, r5
 80097d8:	4621      	mov	r1, r4
 80097da:	f7fd f968 	bl	8006aae <memset>
 80097de:	e7f4      	b.n	80097ca <_calloc_r+0x12>

080097e0 <_realloc_r>:
 80097e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e4:	4607      	mov	r7, r0
 80097e6:	4614      	mov	r4, r2
 80097e8:	460d      	mov	r5, r1
 80097ea:	b921      	cbnz	r1, 80097f6 <_realloc_r+0x16>
 80097ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097f0:	4611      	mov	r1, r2
 80097f2:	f7fe bc33 	b.w	800805c <_malloc_r>
 80097f6:	b92a      	cbnz	r2, 8009804 <_realloc_r+0x24>
 80097f8:	f7fe f882 	bl	8007900 <_free_r>
 80097fc:	4625      	mov	r5, r4
 80097fe:	4628      	mov	r0, r5
 8009800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009804:	f000 f8a3 	bl	800994e <_malloc_usable_size_r>
 8009808:	4284      	cmp	r4, r0
 800980a:	4606      	mov	r6, r0
 800980c:	d802      	bhi.n	8009814 <_realloc_r+0x34>
 800980e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009812:	d8f4      	bhi.n	80097fe <_realloc_r+0x1e>
 8009814:	4621      	mov	r1, r4
 8009816:	4638      	mov	r0, r7
 8009818:	f7fe fc20 	bl	800805c <_malloc_r>
 800981c:	4680      	mov	r8, r0
 800981e:	b908      	cbnz	r0, 8009824 <_realloc_r+0x44>
 8009820:	4645      	mov	r5, r8
 8009822:	e7ec      	b.n	80097fe <_realloc_r+0x1e>
 8009824:	42b4      	cmp	r4, r6
 8009826:	4622      	mov	r2, r4
 8009828:	4629      	mov	r1, r5
 800982a:	bf28      	it	cs
 800982c:	4632      	movcs	r2, r6
 800982e:	f7fd f9f0 	bl	8006c12 <memcpy>
 8009832:	4629      	mov	r1, r5
 8009834:	4638      	mov	r0, r7
 8009836:	f7fe f863 	bl	8007900 <_free_r>
 800983a:	e7f1      	b.n	8009820 <_realloc_r+0x40>

0800983c <_strtoul_l.isra.0>:
 800983c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009840:	4e34      	ldr	r6, [pc, #208]	@ (8009914 <_strtoul_l.isra.0+0xd8>)
 8009842:	4686      	mov	lr, r0
 8009844:	460d      	mov	r5, r1
 8009846:	4628      	mov	r0, r5
 8009848:	f815 4b01 	ldrb.w	r4, [r5], #1
 800984c:	5d37      	ldrb	r7, [r6, r4]
 800984e:	f017 0708 	ands.w	r7, r7, #8
 8009852:	d1f8      	bne.n	8009846 <_strtoul_l.isra.0+0xa>
 8009854:	2c2d      	cmp	r4, #45	@ 0x2d
 8009856:	d110      	bne.n	800987a <_strtoul_l.isra.0+0x3e>
 8009858:	782c      	ldrb	r4, [r5, #0]
 800985a:	2701      	movs	r7, #1
 800985c:	1c85      	adds	r5, r0, #2
 800985e:	f033 0010 	bics.w	r0, r3, #16
 8009862:	d115      	bne.n	8009890 <_strtoul_l.isra.0+0x54>
 8009864:	2c30      	cmp	r4, #48	@ 0x30
 8009866:	d10d      	bne.n	8009884 <_strtoul_l.isra.0+0x48>
 8009868:	7828      	ldrb	r0, [r5, #0]
 800986a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800986e:	2858      	cmp	r0, #88	@ 0x58
 8009870:	d108      	bne.n	8009884 <_strtoul_l.isra.0+0x48>
 8009872:	786c      	ldrb	r4, [r5, #1]
 8009874:	3502      	adds	r5, #2
 8009876:	2310      	movs	r3, #16
 8009878:	e00a      	b.n	8009890 <_strtoul_l.isra.0+0x54>
 800987a:	2c2b      	cmp	r4, #43	@ 0x2b
 800987c:	bf04      	itt	eq
 800987e:	782c      	ldrbeq	r4, [r5, #0]
 8009880:	1c85      	addeq	r5, r0, #2
 8009882:	e7ec      	b.n	800985e <_strtoul_l.isra.0+0x22>
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1f6      	bne.n	8009876 <_strtoul_l.isra.0+0x3a>
 8009888:	2c30      	cmp	r4, #48	@ 0x30
 800988a:	bf14      	ite	ne
 800988c:	230a      	movne	r3, #10
 800988e:	2308      	moveq	r3, #8
 8009890:	f04f 38ff 	mov.w	r8, #4294967295
 8009894:	2600      	movs	r6, #0
 8009896:	fbb8 f8f3 	udiv	r8, r8, r3
 800989a:	fb03 f908 	mul.w	r9, r3, r8
 800989e:	ea6f 0909 	mvn.w	r9, r9
 80098a2:	4630      	mov	r0, r6
 80098a4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80098a8:	f1bc 0f09 	cmp.w	ip, #9
 80098ac:	d810      	bhi.n	80098d0 <_strtoul_l.isra.0+0x94>
 80098ae:	4664      	mov	r4, ip
 80098b0:	42a3      	cmp	r3, r4
 80098b2:	dd1e      	ble.n	80098f2 <_strtoul_l.isra.0+0xb6>
 80098b4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80098b8:	d007      	beq.n	80098ca <_strtoul_l.isra.0+0x8e>
 80098ba:	4580      	cmp	r8, r0
 80098bc:	d316      	bcc.n	80098ec <_strtoul_l.isra.0+0xb0>
 80098be:	d101      	bne.n	80098c4 <_strtoul_l.isra.0+0x88>
 80098c0:	45a1      	cmp	r9, r4
 80098c2:	db13      	blt.n	80098ec <_strtoul_l.isra.0+0xb0>
 80098c4:	fb00 4003 	mla	r0, r0, r3, r4
 80098c8:	2601      	movs	r6, #1
 80098ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098ce:	e7e9      	b.n	80098a4 <_strtoul_l.isra.0+0x68>
 80098d0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80098d4:	f1bc 0f19 	cmp.w	ip, #25
 80098d8:	d801      	bhi.n	80098de <_strtoul_l.isra.0+0xa2>
 80098da:	3c37      	subs	r4, #55	@ 0x37
 80098dc:	e7e8      	b.n	80098b0 <_strtoul_l.isra.0+0x74>
 80098de:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80098e2:	f1bc 0f19 	cmp.w	ip, #25
 80098e6:	d804      	bhi.n	80098f2 <_strtoul_l.isra.0+0xb6>
 80098e8:	3c57      	subs	r4, #87	@ 0x57
 80098ea:	e7e1      	b.n	80098b0 <_strtoul_l.isra.0+0x74>
 80098ec:	f04f 36ff 	mov.w	r6, #4294967295
 80098f0:	e7eb      	b.n	80098ca <_strtoul_l.isra.0+0x8e>
 80098f2:	1c73      	adds	r3, r6, #1
 80098f4:	d106      	bne.n	8009904 <_strtoul_l.isra.0+0xc8>
 80098f6:	2322      	movs	r3, #34	@ 0x22
 80098f8:	f8ce 3000 	str.w	r3, [lr]
 80098fc:	4630      	mov	r0, r6
 80098fe:	b932      	cbnz	r2, 800990e <_strtoul_l.isra.0+0xd2>
 8009900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009904:	b107      	cbz	r7, 8009908 <_strtoul_l.isra.0+0xcc>
 8009906:	4240      	negs	r0, r0
 8009908:	2a00      	cmp	r2, #0
 800990a:	d0f9      	beq.n	8009900 <_strtoul_l.isra.0+0xc4>
 800990c:	b106      	cbz	r6, 8009910 <_strtoul_l.isra.0+0xd4>
 800990e:	1e69      	subs	r1, r5, #1
 8009910:	6011      	str	r1, [r2, #0]
 8009912:	e7f5      	b.n	8009900 <_strtoul_l.isra.0+0xc4>
 8009914:	0800a469 	.word	0x0800a469

08009918 <_strtoul_r>:
 8009918:	f7ff bf90 	b.w	800983c <_strtoul_l.isra.0>

0800991c <fiprintf>:
 800991c:	b40e      	push	{r1, r2, r3}
 800991e:	b503      	push	{r0, r1, lr}
 8009920:	4601      	mov	r1, r0
 8009922:	ab03      	add	r3, sp, #12
 8009924:	4805      	ldr	r0, [pc, #20]	@ (800993c <fiprintf+0x20>)
 8009926:	f853 2b04 	ldr.w	r2, [r3], #4
 800992a:	6800      	ldr	r0, [r0, #0]
 800992c:	9301      	str	r3, [sp, #4]
 800992e:	f000 f83f 	bl	80099b0 <_vfiprintf_r>
 8009932:	b002      	add	sp, #8
 8009934:	f85d eb04 	ldr.w	lr, [sp], #4
 8009938:	b003      	add	sp, #12
 800993a:	4770      	bx	lr
 800993c:	20000190 	.word	0x20000190

08009940 <abort>:
 8009940:	b508      	push	{r3, lr}
 8009942:	2006      	movs	r0, #6
 8009944:	f000 fa08 	bl	8009d58 <raise>
 8009948:	2001      	movs	r0, #1
 800994a:	f7f8 f9ef 	bl	8001d2c <_exit>

0800994e <_malloc_usable_size_r>:
 800994e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009952:	1f18      	subs	r0, r3, #4
 8009954:	2b00      	cmp	r3, #0
 8009956:	bfbc      	itt	lt
 8009958:	580b      	ldrlt	r3, [r1, r0]
 800995a:	18c0      	addlt	r0, r0, r3
 800995c:	4770      	bx	lr

0800995e <__sfputc_r>:
 800995e:	6893      	ldr	r3, [r2, #8]
 8009960:	3b01      	subs	r3, #1
 8009962:	2b00      	cmp	r3, #0
 8009964:	b410      	push	{r4}
 8009966:	6093      	str	r3, [r2, #8]
 8009968:	da08      	bge.n	800997c <__sfputc_r+0x1e>
 800996a:	6994      	ldr	r4, [r2, #24]
 800996c:	42a3      	cmp	r3, r4
 800996e:	db01      	blt.n	8009974 <__sfputc_r+0x16>
 8009970:	290a      	cmp	r1, #10
 8009972:	d103      	bne.n	800997c <__sfputc_r+0x1e>
 8009974:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009978:	f000 b932 	b.w	8009be0 <__swbuf_r>
 800997c:	6813      	ldr	r3, [r2, #0]
 800997e:	1c58      	adds	r0, r3, #1
 8009980:	6010      	str	r0, [r2, #0]
 8009982:	7019      	strb	r1, [r3, #0]
 8009984:	4608      	mov	r0, r1
 8009986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800998a:	4770      	bx	lr

0800998c <__sfputs_r>:
 800998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998e:	4606      	mov	r6, r0
 8009990:	460f      	mov	r7, r1
 8009992:	4614      	mov	r4, r2
 8009994:	18d5      	adds	r5, r2, r3
 8009996:	42ac      	cmp	r4, r5
 8009998:	d101      	bne.n	800999e <__sfputs_r+0x12>
 800999a:	2000      	movs	r0, #0
 800999c:	e007      	b.n	80099ae <__sfputs_r+0x22>
 800999e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099a2:	463a      	mov	r2, r7
 80099a4:	4630      	mov	r0, r6
 80099a6:	f7ff ffda 	bl	800995e <__sfputc_r>
 80099aa:	1c43      	adds	r3, r0, #1
 80099ac:	d1f3      	bne.n	8009996 <__sfputs_r+0xa>
 80099ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099b0 <_vfiprintf_r>:
 80099b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b4:	460d      	mov	r5, r1
 80099b6:	b09d      	sub	sp, #116	@ 0x74
 80099b8:	4614      	mov	r4, r2
 80099ba:	4698      	mov	r8, r3
 80099bc:	4606      	mov	r6, r0
 80099be:	b118      	cbz	r0, 80099c8 <_vfiprintf_r+0x18>
 80099c0:	6a03      	ldr	r3, [r0, #32]
 80099c2:	b90b      	cbnz	r3, 80099c8 <_vfiprintf_r+0x18>
 80099c4:	f7fc ffaa 	bl	800691c <__sinit>
 80099c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099ca:	07d9      	lsls	r1, r3, #31
 80099cc:	d405      	bmi.n	80099da <_vfiprintf_r+0x2a>
 80099ce:	89ab      	ldrh	r3, [r5, #12]
 80099d0:	059a      	lsls	r2, r3, #22
 80099d2:	d402      	bmi.n	80099da <_vfiprintf_r+0x2a>
 80099d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099d6:	f7fd f91a 	bl	8006c0e <__retarget_lock_acquire_recursive>
 80099da:	89ab      	ldrh	r3, [r5, #12]
 80099dc:	071b      	lsls	r3, r3, #28
 80099de:	d501      	bpl.n	80099e4 <_vfiprintf_r+0x34>
 80099e0:	692b      	ldr	r3, [r5, #16]
 80099e2:	b99b      	cbnz	r3, 8009a0c <_vfiprintf_r+0x5c>
 80099e4:	4629      	mov	r1, r5
 80099e6:	4630      	mov	r0, r6
 80099e8:	f000 f938 	bl	8009c5c <__swsetup_r>
 80099ec:	b170      	cbz	r0, 8009a0c <_vfiprintf_r+0x5c>
 80099ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099f0:	07dc      	lsls	r4, r3, #31
 80099f2:	d504      	bpl.n	80099fe <_vfiprintf_r+0x4e>
 80099f4:	f04f 30ff 	mov.w	r0, #4294967295
 80099f8:	b01d      	add	sp, #116	@ 0x74
 80099fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099fe:	89ab      	ldrh	r3, [r5, #12]
 8009a00:	0598      	lsls	r0, r3, #22
 8009a02:	d4f7      	bmi.n	80099f4 <_vfiprintf_r+0x44>
 8009a04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a06:	f7fd f903 	bl	8006c10 <__retarget_lock_release_recursive>
 8009a0a:	e7f3      	b.n	80099f4 <_vfiprintf_r+0x44>
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a10:	2320      	movs	r3, #32
 8009a12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a16:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a1a:	2330      	movs	r3, #48	@ 0x30
 8009a1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009bcc <_vfiprintf_r+0x21c>
 8009a20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a24:	f04f 0901 	mov.w	r9, #1
 8009a28:	4623      	mov	r3, r4
 8009a2a:	469a      	mov	sl, r3
 8009a2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a30:	b10a      	cbz	r2, 8009a36 <_vfiprintf_r+0x86>
 8009a32:	2a25      	cmp	r2, #37	@ 0x25
 8009a34:	d1f9      	bne.n	8009a2a <_vfiprintf_r+0x7a>
 8009a36:	ebba 0b04 	subs.w	fp, sl, r4
 8009a3a:	d00b      	beq.n	8009a54 <_vfiprintf_r+0xa4>
 8009a3c:	465b      	mov	r3, fp
 8009a3e:	4622      	mov	r2, r4
 8009a40:	4629      	mov	r1, r5
 8009a42:	4630      	mov	r0, r6
 8009a44:	f7ff ffa2 	bl	800998c <__sfputs_r>
 8009a48:	3001      	adds	r0, #1
 8009a4a:	f000 80a7 	beq.w	8009b9c <_vfiprintf_r+0x1ec>
 8009a4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a50:	445a      	add	r2, fp
 8009a52:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a54:	f89a 3000 	ldrb.w	r3, [sl]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f000 809f 	beq.w	8009b9c <_vfiprintf_r+0x1ec>
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f04f 32ff 	mov.w	r2, #4294967295
 8009a64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a68:	f10a 0a01 	add.w	sl, sl, #1
 8009a6c:	9304      	str	r3, [sp, #16]
 8009a6e:	9307      	str	r3, [sp, #28]
 8009a70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a74:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a76:	4654      	mov	r4, sl
 8009a78:	2205      	movs	r2, #5
 8009a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a7e:	4853      	ldr	r0, [pc, #332]	@ (8009bcc <_vfiprintf_r+0x21c>)
 8009a80:	f7f6 fba6 	bl	80001d0 <memchr>
 8009a84:	9a04      	ldr	r2, [sp, #16]
 8009a86:	b9d8      	cbnz	r0, 8009ac0 <_vfiprintf_r+0x110>
 8009a88:	06d1      	lsls	r1, r2, #27
 8009a8a:	bf44      	itt	mi
 8009a8c:	2320      	movmi	r3, #32
 8009a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a92:	0713      	lsls	r3, r2, #28
 8009a94:	bf44      	itt	mi
 8009a96:	232b      	movmi	r3, #43	@ 0x2b
 8009a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8009aa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009aa2:	d015      	beq.n	8009ad0 <_vfiprintf_r+0x120>
 8009aa4:	9a07      	ldr	r2, [sp, #28]
 8009aa6:	4654      	mov	r4, sl
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	f04f 0c0a 	mov.w	ip, #10
 8009aae:	4621      	mov	r1, r4
 8009ab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ab4:	3b30      	subs	r3, #48	@ 0x30
 8009ab6:	2b09      	cmp	r3, #9
 8009ab8:	d94b      	bls.n	8009b52 <_vfiprintf_r+0x1a2>
 8009aba:	b1b0      	cbz	r0, 8009aea <_vfiprintf_r+0x13a>
 8009abc:	9207      	str	r2, [sp, #28]
 8009abe:	e014      	b.n	8009aea <_vfiprintf_r+0x13a>
 8009ac0:	eba0 0308 	sub.w	r3, r0, r8
 8009ac4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	9304      	str	r3, [sp, #16]
 8009acc:	46a2      	mov	sl, r4
 8009ace:	e7d2      	b.n	8009a76 <_vfiprintf_r+0xc6>
 8009ad0:	9b03      	ldr	r3, [sp, #12]
 8009ad2:	1d19      	adds	r1, r3, #4
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	9103      	str	r1, [sp, #12]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	bfbb      	ittet	lt
 8009adc:	425b      	neglt	r3, r3
 8009ade:	f042 0202 	orrlt.w	r2, r2, #2
 8009ae2:	9307      	strge	r3, [sp, #28]
 8009ae4:	9307      	strlt	r3, [sp, #28]
 8009ae6:	bfb8      	it	lt
 8009ae8:	9204      	strlt	r2, [sp, #16]
 8009aea:	7823      	ldrb	r3, [r4, #0]
 8009aec:	2b2e      	cmp	r3, #46	@ 0x2e
 8009aee:	d10a      	bne.n	8009b06 <_vfiprintf_r+0x156>
 8009af0:	7863      	ldrb	r3, [r4, #1]
 8009af2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009af4:	d132      	bne.n	8009b5c <_vfiprintf_r+0x1ac>
 8009af6:	9b03      	ldr	r3, [sp, #12]
 8009af8:	1d1a      	adds	r2, r3, #4
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	9203      	str	r2, [sp, #12]
 8009afe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b02:	3402      	adds	r4, #2
 8009b04:	9305      	str	r3, [sp, #20]
 8009b06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009bdc <_vfiprintf_r+0x22c>
 8009b0a:	7821      	ldrb	r1, [r4, #0]
 8009b0c:	2203      	movs	r2, #3
 8009b0e:	4650      	mov	r0, sl
 8009b10:	f7f6 fb5e 	bl	80001d0 <memchr>
 8009b14:	b138      	cbz	r0, 8009b26 <_vfiprintf_r+0x176>
 8009b16:	9b04      	ldr	r3, [sp, #16]
 8009b18:	eba0 000a 	sub.w	r0, r0, sl
 8009b1c:	2240      	movs	r2, #64	@ 0x40
 8009b1e:	4082      	lsls	r2, r0
 8009b20:	4313      	orrs	r3, r2
 8009b22:	3401      	adds	r4, #1
 8009b24:	9304      	str	r3, [sp, #16]
 8009b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b2a:	4829      	ldr	r0, [pc, #164]	@ (8009bd0 <_vfiprintf_r+0x220>)
 8009b2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b30:	2206      	movs	r2, #6
 8009b32:	f7f6 fb4d 	bl	80001d0 <memchr>
 8009b36:	2800      	cmp	r0, #0
 8009b38:	d03f      	beq.n	8009bba <_vfiprintf_r+0x20a>
 8009b3a:	4b26      	ldr	r3, [pc, #152]	@ (8009bd4 <_vfiprintf_r+0x224>)
 8009b3c:	bb1b      	cbnz	r3, 8009b86 <_vfiprintf_r+0x1d6>
 8009b3e:	9b03      	ldr	r3, [sp, #12]
 8009b40:	3307      	adds	r3, #7
 8009b42:	f023 0307 	bic.w	r3, r3, #7
 8009b46:	3308      	adds	r3, #8
 8009b48:	9303      	str	r3, [sp, #12]
 8009b4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b4c:	443b      	add	r3, r7
 8009b4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b50:	e76a      	b.n	8009a28 <_vfiprintf_r+0x78>
 8009b52:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b56:	460c      	mov	r4, r1
 8009b58:	2001      	movs	r0, #1
 8009b5a:	e7a8      	b.n	8009aae <_vfiprintf_r+0xfe>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	3401      	adds	r4, #1
 8009b60:	9305      	str	r3, [sp, #20]
 8009b62:	4619      	mov	r1, r3
 8009b64:	f04f 0c0a 	mov.w	ip, #10
 8009b68:	4620      	mov	r0, r4
 8009b6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b6e:	3a30      	subs	r2, #48	@ 0x30
 8009b70:	2a09      	cmp	r2, #9
 8009b72:	d903      	bls.n	8009b7c <_vfiprintf_r+0x1cc>
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d0c6      	beq.n	8009b06 <_vfiprintf_r+0x156>
 8009b78:	9105      	str	r1, [sp, #20]
 8009b7a:	e7c4      	b.n	8009b06 <_vfiprintf_r+0x156>
 8009b7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b80:	4604      	mov	r4, r0
 8009b82:	2301      	movs	r3, #1
 8009b84:	e7f0      	b.n	8009b68 <_vfiprintf_r+0x1b8>
 8009b86:	ab03      	add	r3, sp, #12
 8009b88:	9300      	str	r3, [sp, #0]
 8009b8a:	462a      	mov	r2, r5
 8009b8c:	4b12      	ldr	r3, [pc, #72]	@ (8009bd8 <_vfiprintf_r+0x228>)
 8009b8e:	a904      	add	r1, sp, #16
 8009b90:	4630      	mov	r0, r6
 8009b92:	f7fc f873 	bl	8005c7c <_printf_float>
 8009b96:	4607      	mov	r7, r0
 8009b98:	1c78      	adds	r0, r7, #1
 8009b9a:	d1d6      	bne.n	8009b4a <_vfiprintf_r+0x19a>
 8009b9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b9e:	07d9      	lsls	r1, r3, #31
 8009ba0:	d405      	bmi.n	8009bae <_vfiprintf_r+0x1fe>
 8009ba2:	89ab      	ldrh	r3, [r5, #12]
 8009ba4:	059a      	lsls	r2, r3, #22
 8009ba6:	d402      	bmi.n	8009bae <_vfiprintf_r+0x1fe>
 8009ba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009baa:	f7fd f831 	bl	8006c10 <__retarget_lock_release_recursive>
 8009bae:	89ab      	ldrh	r3, [r5, #12]
 8009bb0:	065b      	lsls	r3, r3, #25
 8009bb2:	f53f af1f 	bmi.w	80099f4 <_vfiprintf_r+0x44>
 8009bb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bb8:	e71e      	b.n	80099f8 <_vfiprintf_r+0x48>
 8009bba:	ab03      	add	r3, sp, #12
 8009bbc:	9300      	str	r3, [sp, #0]
 8009bbe:	462a      	mov	r2, r5
 8009bc0:	4b05      	ldr	r3, [pc, #20]	@ (8009bd8 <_vfiprintf_r+0x228>)
 8009bc2:	a904      	add	r1, sp, #16
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f7fc faf1 	bl	80061ac <_printf_i>
 8009bca:	e7e4      	b.n	8009b96 <_vfiprintf_r+0x1e6>
 8009bcc:	0800a2ab 	.word	0x0800a2ab
 8009bd0:	0800a2b5 	.word	0x0800a2b5
 8009bd4:	08005c7d 	.word	0x08005c7d
 8009bd8:	0800998d 	.word	0x0800998d
 8009bdc:	0800a2b1 	.word	0x0800a2b1

08009be0 <__swbuf_r>:
 8009be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be2:	460e      	mov	r6, r1
 8009be4:	4614      	mov	r4, r2
 8009be6:	4605      	mov	r5, r0
 8009be8:	b118      	cbz	r0, 8009bf2 <__swbuf_r+0x12>
 8009bea:	6a03      	ldr	r3, [r0, #32]
 8009bec:	b90b      	cbnz	r3, 8009bf2 <__swbuf_r+0x12>
 8009bee:	f7fc fe95 	bl	800691c <__sinit>
 8009bf2:	69a3      	ldr	r3, [r4, #24]
 8009bf4:	60a3      	str	r3, [r4, #8]
 8009bf6:	89a3      	ldrh	r3, [r4, #12]
 8009bf8:	071a      	lsls	r2, r3, #28
 8009bfa:	d501      	bpl.n	8009c00 <__swbuf_r+0x20>
 8009bfc:	6923      	ldr	r3, [r4, #16]
 8009bfe:	b943      	cbnz	r3, 8009c12 <__swbuf_r+0x32>
 8009c00:	4621      	mov	r1, r4
 8009c02:	4628      	mov	r0, r5
 8009c04:	f000 f82a 	bl	8009c5c <__swsetup_r>
 8009c08:	b118      	cbz	r0, 8009c12 <__swbuf_r+0x32>
 8009c0a:	f04f 37ff 	mov.w	r7, #4294967295
 8009c0e:	4638      	mov	r0, r7
 8009c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c12:	6823      	ldr	r3, [r4, #0]
 8009c14:	6922      	ldr	r2, [r4, #16]
 8009c16:	1a98      	subs	r0, r3, r2
 8009c18:	6963      	ldr	r3, [r4, #20]
 8009c1a:	b2f6      	uxtb	r6, r6
 8009c1c:	4283      	cmp	r3, r0
 8009c1e:	4637      	mov	r7, r6
 8009c20:	dc05      	bgt.n	8009c2e <__swbuf_r+0x4e>
 8009c22:	4621      	mov	r1, r4
 8009c24:	4628      	mov	r0, r5
 8009c26:	f7ff fce3 	bl	80095f0 <_fflush_r>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d1ed      	bne.n	8009c0a <__swbuf_r+0x2a>
 8009c2e:	68a3      	ldr	r3, [r4, #8]
 8009c30:	3b01      	subs	r3, #1
 8009c32:	60a3      	str	r3, [r4, #8]
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	1c5a      	adds	r2, r3, #1
 8009c38:	6022      	str	r2, [r4, #0]
 8009c3a:	701e      	strb	r6, [r3, #0]
 8009c3c:	6962      	ldr	r2, [r4, #20]
 8009c3e:	1c43      	adds	r3, r0, #1
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d004      	beq.n	8009c4e <__swbuf_r+0x6e>
 8009c44:	89a3      	ldrh	r3, [r4, #12]
 8009c46:	07db      	lsls	r3, r3, #31
 8009c48:	d5e1      	bpl.n	8009c0e <__swbuf_r+0x2e>
 8009c4a:	2e0a      	cmp	r6, #10
 8009c4c:	d1df      	bne.n	8009c0e <__swbuf_r+0x2e>
 8009c4e:	4621      	mov	r1, r4
 8009c50:	4628      	mov	r0, r5
 8009c52:	f7ff fccd 	bl	80095f0 <_fflush_r>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d0d9      	beq.n	8009c0e <__swbuf_r+0x2e>
 8009c5a:	e7d6      	b.n	8009c0a <__swbuf_r+0x2a>

08009c5c <__swsetup_r>:
 8009c5c:	b538      	push	{r3, r4, r5, lr}
 8009c5e:	4b29      	ldr	r3, [pc, #164]	@ (8009d04 <__swsetup_r+0xa8>)
 8009c60:	4605      	mov	r5, r0
 8009c62:	6818      	ldr	r0, [r3, #0]
 8009c64:	460c      	mov	r4, r1
 8009c66:	b118      	cbz	r0, 8009c70 <__swsetup_r+0x14>
 8009c68:	6a03      	ldr	r3, [r0, #32]
 8009c6a:	b90b      	cbnz	r3, 8009c70 <__swsetup_r+0x14>
 8009c6c:	f7fc fe56 	bl	800691c <__sinit>
 8009c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c74:	0719      	lsls	r1, r3, #28
 8009c76:	d422      	bmi.n	8009cbe <__swsetup_r+0x62>
 8009c78:	06da      	lsls	r2, r3, #27
 8009c7a:	d407      	bmi.n	8009c8c <__swsetup_r+0x30>
 8009c7c:	2209      	movs	r2, #9
 8009c7e:	602a      	str	r2, [r5, #0]
 8009c80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c84:	81a3      	strh	r3, [r4, #12]
 8009c86:	f04f 30ff 	mov.w	r0, #4294967295
 8009c8a:	e033      	b.n	8009cf4 <__swsetup_r+0x98>
 8009c8c:	0758      	lsls	r0, r3, #29
 8009c8e:	d512      	bpl.n	8009cb6 <__swsetup_r+0x5a>
 8009c90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c92:	b141      	cbz	r1, 8009ca6 <__swsetup_r+0x4a>
 8009c94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c98:	4299      	cmp	r1, r3
 8009c9a:	d002      	beq.n	8009ca2 <__swsetup_r+0x46>
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	f7fd fe2f 	bl	8007900 <_free_r>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ca6:	89a3      	ldrh	r3, [r4, #12]
 8009ca8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009cac:	81a3      	strh	r3, [r4, #12]
 8009cae:	2300      	movs	r3, #0
 8009cb0:	6063      	str	r3, [r4, #4]
 8009cb2:	6923      	ldr	r3, [r4, #16]
 8009cb4:	6023      	str	r3, [r4, #0]
 8009cb6:	89a3      	ldrh	r3, [r4, #12]
 8009cb8:	f043 0308 	orr.w	r3, r3, #8
 8009cbc:	81a3      	strh	r3, [r4, #12]
 8009cbe:	6923      	ldr	r3, [r4, #16]
 8009cc0:	b94b      	cbnz	r3, 8009cd6 <__swsetup_r+0x7a>
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009cc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ccc:	d003      	beq.n	8009cd6 <__swsetup_r+0x7a>
 8009cce:	4621      	mov	r1, r4
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	f000 f883 	bl	8009ddc <__smakebuf_r>
 8009cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cda:	f013 0201 	ands.w	r2, r3, #1
 8009cde:	d00a      	beq.n	8009cf6 <__swsetup_r+0x9a>
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	60a2      	str	r2, [r4, #8]
 8009ce4:	6962      	ldr	r2, [r4, #20]
 8009ce6:	4252      	negs	r2, r2
 8009ce8:	61a2      	str	r2, [r4, #24]
 8009cea:	6922      	ldr	r2, [r4, #16]
 8009cec:	b942      	cbnz	r2, 8009d00 <__swsetup_r+0xa4>
 8009cee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009cf2:	d1c5      	bne.n	8009c80 <__swsetup_r+0x24>
 8009cf4:	bd38      	pop	{r3, r4, r5, pc}
 8009cf6:	0799      	lsls	r1, r3, #30
 8009cf8:	bf58      	it	pl
 8009cfa:	6962      	ldrpl	r2, [r4, #20]
 8009cfc:	60a2      	str	r2, [r4, #8]
 8009cfe:	e7f4      	b.n	8009cea <__swsetup_r+0x8e>
 8009d00:	2000      	movs	r0, #0
 8009d02:	e7f7      	b.n	8009cf4 <__swsetup_r+0x98>
 8009d04:	20000190 	.word	0x20000190

08009d08 <_raise_r>:
 8009d08:	291f      	cmp	r1, #31
 8009d0a:	b538      	push	{r3, r4, r5, lr}
 8009d0c:	4605      	mov	r5, r0
 8009d0e:	460c      	mov	r4, r1
 8009d10:	d904      	bls.n	8009d1c <_raise_r+0x14>
 8009d12:	2316      	movs	r3, #22
 8009d14:	6003      	str	r3, [r0, #0]
 8009d16:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1a:	bd38      	pop	{r3, r4, r5, pc}
 8009d1c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009d1e:	b112      	cbz	r2, 8009d26 <_raise_r+0x1e>
 8009d20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d24:	b94b      	cbnz	r3, 8009d3a <_raise_r+0x32>
 8009d26:	4628      	mov	r0, r5
 8009d28:	f000 f830 	bl	8009d8c <_getpid_r>
 8009d2c:	4622      	mov	r2, r4
 8009d2e:	4601      	mov	r1, r0
 8009d30:	4628      	mov	r0, r5
 8009d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d36:	f000 b817 	b.w	8009d68 <_kill_r>
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d00a      	beq.n	8009d54 <_raise_r+0x4c>
 8009d3e:	1c59      	adds	r1, r3, #1
 8009d40:	d103      	bne.n	8009d4a <_raise_r+0x42>
 8009d42:	2316      	movs	r3, #22
 8009d44:	6003      	str	r3, [r0, #0]
 8009d46:	2001      	movs	r0, #1
 8009d48:	e7e7      	b.n	8009d1a <_raise_r+0x12>
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009d50:	4620      	mov	r0, r4
 8009d52:	4798      	blx	r3
 8009d54:	2000      	movs	r0, #0
 8009d56:	e7e0      	b.n	8009d1a <_raise_r+0x12>

08009d58 <raise>:
 8009d58:	4b02      	ldr	r3, [pc, #8]	@ (8009d64 <raise+0xc>)
 8009d5a:	4601      	mov	r1, r0
 8009d5c:	6818      	ldr	r0, [r3, #0]
 8009d5e:	f7ff bfd3 	b.w	8009d08 <_raise_r>
 8009d62:	bf00      	nop
 8009d64:	20000190 	.word	0x20000190

08009d68 <_kill_r>:
 8009d68:	b538      	push	{r3, r4, r5, lr}
 8009d6a:	4d07      	ldr	r5, [pc, #28]	@ (8009d88 <_kill_r+0x20>)
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	4604      	mov	r4, r0
 8009d70:	4608      	mov	r0, r1
 8009d72:	4611      	mov	r1, r2
 8009d74:	602b      	str	r3, [r5, #0]
 8009d76:	f7f7 ffc9 	bl	8001d0c <_kill>
 8009d7a:	1c43      	adds	r3, r0, #1
 8009d7c:	d102      	bne.n	8009d84 <_kill_r+0x1c>
 8009d7e:	682b      	ldr	r3, [r5, #0]
 8009d80:	b103      	cbz	r3, 8009d84 <_kill_r+0x1c>
 8009d82:	6023      	str	r3, [r4, #0]
 8009d84:	bd38      	pop	{r3, r4, r5, pc}
 8009d86:	bf00      	nop
 8009d88:	20000aa0 	.word	0x20000aa0

08009d8c <_getpid_r>:
 8009d8c:	f7f7 bfb6 	b.w	8001cfc <_getpid>

08009d90 <__swhatbuf_r>:
 8009d90:	b570      	push	{r4, r5, r6, lr}
 8009d92:	460c      	mov	r4, r1
 8009d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d98:	2900      	cmp	r1, #0
 8009d9a:	b096      	sub	sp, #88	@ 0x58
 8009d9c:	4615      	mov	r5, r2
 8009d9e:	461e      	mov	r6, r3
 8009da0:	da0d      	bge.n	8009dbe <__swhatbuf_r+0x2e>
 8009da2:	89a3      	ldrh	r3, [r4, #12]
 8009da4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009da8:	f04f 0100 	mov.w	r1, #0
 8009dac:	bf14      	ite	ne
 8009dae:	2340      	movne	r3, #64	@ 0x40
 8009db0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009db4:	2000      	movs	r0, #0
 8009db6:	6031      	str	r1, [r6, #0]
 8009db8:	602b      	str	r3, [r5, #0]
 8009dba:	b016      	add	sp, #88	@ 0x58
 8009dbc:	bd70      	pop	{r4, r5, r6, pc}
 8009dbe:	466a      	mov	r2, sp
 8009dc0:	f000 f848 	bl	8009e54 <_fstat_r>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	dbec      	blt.n	8009da2 <__swhatbuf_r+0x12>
 8009dc8:	9901      	ldr	r1, [sp, #4]
 8009dca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009dce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009dd2:	4259      	negs	r1, r3
 8009dd4:	4159      	adcs	r1, r3
 8009dd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009dda:	e7eb      	b.n	8009db4 <__swhatbuf_r+0x24>

08009ddc <__smakebuf_r>:
 8009ddc:	898b      	ldrh	r3, [r1, #12]
 8009dde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009de0:	079d      	lsls	r5, r3, #30
 8009de2:	4606      	mov	r6, r0
 8009de4:	460c      	mov	r4, r1
 8009de6:	d507      	bpl.n	8009df8 <__smakebuf_r+0x1c>
 8009de8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009dec:	6023      	str	r3, [r4, #0]
 8009dee:	6123      	str	r3, [r4, #16]
 8009df0:	2301      	movs	r3, #1
 8009df2:	6163      	str	r3, [r4, #20]
 8009df4:	b003      	add	sp, #12
 8009df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009df8:	ab01      	add	r3, sp, #4
 8009dfa:	466a      	mov	r2, sp
 8009dfc:	f7ff ffc8 	bl	8009d90 <__swhatbuf_r>
 8009e00:	9f00      	ldr	r7, [sp, #0]
 8009e02:	4605      	mov	r5, r0
 8009e04:	4639      	mov	r1, r7
 8009e06:	4630      	mov	r0, r6
 8009e08:	f7fe f928 	bl	800805c <_malloc_r>
 8009e0c:	b948      	cbnz	r0, 8009e22 <__smakebuf_r+0x46>
 8009e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e12:	059a      	lsls	r2, r3, #22
 8009e14:	d4ee      	bmi.n	8009df4 <__smakebuf_r+0x18>
 8009e16:	f023 0303 	bic.w	r3, r3, #3
 8009e1a:	f043 0302 	orr.w	r3, r3, #2
 8009e1e:	81a3      	strh	r3, [r4, #12]
 8009e20:	e7e2      	b.n	8009de8 <__smakebuf_r+0xc>
 8009e22:	89a3      	ldrh	r3, [r4, #12]
 8009e24:	6020      	str	r0, [r4, #0]
 8009e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e2a:	81a3      	strh	r3, [r4, #12]
 8009e2c:	9b01      	ldr	r3, [sp, #4]
 8009e2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009e32:	b15b      	cbz	r3, 8009e4c <__smakebuf_r+0x70>
 8009e34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e38:	4630      	mov	r0, r6
 8009e3a:	f000 f81d 	bl	8009e78 <_isatty_r>
 8009e3e:	b128      	cbz	r0, 8009e4c <__smakebuf_r+0x70>
 8009e40:	89a3      	ldrh	r3, [r4, #12]
 8009e42:	f023 0303 	bic.w	r3, r3, #3
 8009e46:	f043 0301 	orr.w	r3, r3, #1
 8009e4a:	81a3      	strh	r3, [r4, #12]
 8009e4c:	89a3      	ldrh	r3, [r4, #12]
 8009e4e:	431d      	orrs	r5, r3
 8009e50:	81a5      	strh	r5, [r4, #12]
 8009e52:	e7cf      	b.n	8009df4 <__smakebuf_r+0x18>

08009e54 <_fstat_r>:
 8009e54:	b538      	push	{r3, r4, r5, lr}
 8009e56:	4d07      	ldr	r5, [pc, #28]	@ (8009e74 <_fstat_r+0x20>)
 8009e58:	2300      	movs	r3, #0
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	4608      	mov	r0, r1
 8009e5e:	4611      	mov	r1, r2
 8009e60:	602b      	str	r3, [r5, #0]
 8009e62:	f7f7 ffb3 	bl	8001dcc <_fstat>
 8009e66:	1c43      	adds	r3, r0, #1
 8009e68:	d102      	bne.n	8009e70 <_fstat_r+0x1c>
 8009e6a:	682b      	ldr	r3, [r5, #0]
 8009e6c:	b103      	cbz	r3, 8009e70 <_fstat_r+0x1c>
 8009e6e:	6023      	str	r3, [r4, #0]
 8009e70:	bd38      	pop	{r3, r4, r5, pc}
 8009e72:	bf00      	nop
 8009e74:	20000aa0 	.word	0x20000aa0

08009e78 <_isatty_r>:
 8009e78:	b538      	push	{r3, r4, r5, lr}
 8009e7a:	4d06      	ldr	r5, [pc, #24]	@ (8009e94 <_isatty_r+0x1c>)
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	4604      	mov	r4, r0
 8009e80:	4608      	mov	r0, r1
 8009e82:	602b      	str	r3, [r5, #0]
 8009e84:	f7f7 ffb2 	bl	8001dec <_isatty>
 8009e88:	1c43      	adds	r3, r0, #1
 8009e8a:	d102      	bne.n	8009e92 <_isatty_r+0x1a>
 8009e8c:	682b      	ldr	r3, [r5, #0]
 8009e8e:	b103      	cbz	r3, 8009e92 <_isatty_r+0x1a>
 8009e90:	6023      	str	r3, [r4, #0]
 8009e92:	bd38      	pop	{r3, r4, r5, pc}
 8009e94:	20000aa0 	.word	0x20000aa0

08009e98 <llroundf>:
 8009e98:	ee10 0a10 	vmov	r0, s0
 8009e9c:	b538      	push	{r3, r4, r5, lr}
 8009e9e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	f1a5 047f 	sub.w	r4, r5, #127	@ 0x7f
 8009ea8:	bfac      	ite	ge
 8009eaa:	2301      	movge	r3, #1
 8009eac:	f04f 33ff 	movlt.w	r3, #4294967295
 8009eb0:	2c3e      	cmp	r4, #62	@ 0x3e
 8009eb2:	dc2b      	bgt.n	8009f0c <llroundf+0x74>
 8009eb4:	2c00      	cmp	r4, #0
 8009eb6:	da05      	bge.n	8009ec4 <llroundf+0x2c>
 8009eb8:	3401      	adds	r4, #1
 8009eba:	bf18      	it	ne
 8009ebc:	2300      	movne	r3, #0
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	17d9      	asrs	r1, r3, #31
 8009ec2:	bd38      	pop	{r3, r4, r5, pc}
 8009ec4:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8009ec8:	2c16      	cmp	r4, #22
 8009eca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8009ece:	dd14      	ble.n	8009efa <llroundf+0x62>
 8009ed0:	f1a5 0196 	sub.w	r1, r5, #150	@ 0x96
 8009ed4:	f1a5 02b6 	sub.w	r2, r5, #182	@ 0xb6
 8009ed8:	f1c5 05b6 	rsb	r5, r5, #182	@ 0xb6
 8009edc:	fa00 f202 	lsl.w	r2, r0, r2
 8009ee0:	fa20 f505 	lsr.w	r5, r0, r5
 8009ee4:	432a      	orrs	r2, r5
 8009ee6:	fa00 f101 	lsl.w	r1, r0, r1
 8009eea:	17d8      	asrs	r0, r3, #31
 8009eec:	435a      	muls	r2, r3
 8009eee:	fb01 2200 	mla	r2, r1, r0, r2
 8009ef2:	fba3 0101 	umull	r0, r1, r3, r1
 8009ef6:	4411      	add	r1, r2
 8009ef8:	e7e3      	b.n	8009ec2 <llroundf+0x2a>
 8009efa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009efe:	4121      	asrs	r1, r4
 8009f00:	4401      	add	r1, r0
 8009f02:	f1c4 0417 	rsb	r4, r4, #23
 8009f06:	40e1      	lsrs	r1, r4
 8009f08:	2200      	movs	r2, #0
 8009f0a:	e7ee      	b.n	8009eea <llroundf+0x52>
 8009f0c:	f7f6 febc 	bl	8000c88 <__aeabi_f2lz>
 8009f10:	e7d7      	b.n	8009ec2 <llroundf+0x2a>
	...

08009f14 <_init>:
 8009f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f16:	bf00      	nop
 8009f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f1a:	bc08      	pop	{r3}
 8009f1c:	469e      	mov	lr, r3
 8009f1e:	4770      	bx	lr

08009f20 <_fini>:
 8009f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f22:	bf00      	nop
 8009f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f26:	bc08      	pop	{r3}
 8009f28:	469e      	mov	lr, r3
 8009f2a:	4770      	bx	lr
