
capstone_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002704  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800288c  0800288c  0000388c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028c4  080028c4  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080028c4  080028c4  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080028c4  080028c4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028c4  080028c4  000038c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028c8  080028c8  000038c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080028cc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  080028d8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080028d8  000040ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005e49  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001258  00000000  00000000  00009e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000600  00000000  00000000  0000b0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000474  00000000  00000000  0000b6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fb7  00000000  00000000  0000bb54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000070c7  00000000  00000000  00022b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826b1  00000000  00000000  00029bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac283  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001744  00000000  00000000  000ac2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000ada0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002874 	.word	0x08002874

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002874 	.word	0x08002874

080001c8 <DWT_Init>:
/* USER CODE BEGIN 0 */
/**
  * @brief  Initialize the DWT cycle counter for microsecond delays.
  */
void DWT_Init(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  /* Enable TRC */
  if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 80001cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000200 <DWT_Init+0x38>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d105      	bne.n	80001e4 <DWT_Init+0x1c>
  {
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80001d8:	4b09      	ldr	r3, [pc, #36]	@ (8000200 <DWT_Init+0x38>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	4a08      	ldr	r2, [pc, #32]	@ (8000200 <DWT_Init+0x38>)
 80001de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80001e2:	60d3      	str	r3, [r2, #12]
  }
  DWT->CYCCNT = 0;
 80001e4:	4b07      	ldr	r3, [pc, #28]	@ (8000204 <DWT_Init+0x3c>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	605a      	str	r2, [r3, #4]
  /* Enable the cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80001ea:	4b06      	ldr	r3, [pc, #24]	@ (8000204 <DWT_Init+0x3c>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a05      	ldr	r2, [pc, #20]	@ (8000204 <DWT_Init+0x3c>)
 80001f0:	f043 0301 	orr.w	r3, r3, #1
 80001f4:	6013      	str	r3, [r2, #0]
}
 80001f6:	bf00      	nop
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr
 8000200:	e000edf0 	.word	0xe000edf0
 8000204:	e0001000 	.word	0xe0001000

08000208 <delay_us>:
/**
  * @brief  Provides a delay (in microseconds) using the DWT cycle counter.
  * @param  us: Delay in microseconds.
  */
__STATIC_INLINE void delay_us(uint32_t us)
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
  uint32_t startTick = DWT->CYCCNT;
 8000210:	4b0d      	ldr	r3, [pc, #52]	@ (8000248 <delay_us+0x40>)
 8000212:	685b      	ldr	r3, [r3, #4]
 8000214:	60fb      	str	r3, [r7, #12]
  uint32_t ticks = us * (SystemCoreClock / 1000000);
 8000216:	4b0d      	ldr	r3, [pc, #52]	@ (800024c <delay_us+0x44>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a0d      	ldr	r2, [pc, #52]	@ (8000250 <delay_us+0x48>)
 800021c:	fba2 2303 	umull	r2, r3, r2, r3
 8000220:	0c9a      	lsrs	r2, r3, #18
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	fb02 f303 	mul.w	r3, r2, r3
 8000228:	60bb      	str	r3, [r7, #8]
  while ((DWT->CYCCNT - startTick) < ticks);
 800022a:	bf00      	nop
 800022c:	4b06      	ldr	r3, [pc, #24]	@ (8000248 <delay_us+0x40>)
 800022e:	685a      	ldr	r2, [r3, #4]
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	1ad3      	subs	r3, r2, r3
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	429a      	cmp	r2, r3
 8000238:	d8f8      	bhi.n	800022c <delay_us+0x24>
}
 800023a:	bf00      	nop
 800023c:	bf00      	nop
 800023e:	3714      	adds	r7, #20
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr
 8000248:	e0001000 	.word	0xe0001000
 800024c:	20000000 	.word	0x20000000
 8000250:	431bde83 	.word	0x431bde83

08000254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 800025a:	f000 fa63 	bl	8000724 <HAL_Init>

  /* Initialize DWT for microsecond delay */
  DWT_Init();
 800025e:	f7ff ffb3 	bl	80001c8 <DWT_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000262:	f000 f87d 	bl	8000360 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000266:	f000 f8ed 	bl	8000444 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800026a:	f000 f8bb 	bl	80003e4 <MX_USART2_UART_Init>
  while (1)
  {
    /* --- Enable the Driver ---
       Assuming the driver is enabled when ENA is HIGH.
       If your driver requires an active LOW signal, change GPIO_PIN_SET to GPIO_PIN_RESET. */
    HAL_GPIO_WritePin(ENA_Pin_GPIO_Port, ENA_Pin_Pin, GPIO_PIN_SET);
 800026e:	2201      	movs	r2, #1
 8000270:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000274:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000278:	f000 fd36 	bl	8000ce8 <HAL_GPIO_WritePin>

    /* --- Rotate Clockwise --- */
    HAL_GPIO_WritePin(DIR_Pin_GPIO_Port, DIR_Pin_Pin, GPIO_PIN_SET); // Set direction high
 800027c:	2201      	movs	r2, #1
 800027e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000282:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000286:	f000 fd2f 	bl	8000ce8 <HAL_GPIO_WritePin>
    for (uint16_t i = 0; i < 1600; i++)  // 1600 steps for extended movement
 800028a:	2300      	movs	r3, #0
 800028c:	80fb      	strh	r3, [r7, #6]
 800028e:	e012      	b.n	80002b6 <main+0x62>
    {
      HAL_GPIO_WritePin(PUL_Pin_GPIO_Port, PUL_Pin_Pin, GPIO_PIN_SET);
 8000290:	2201      	movs	r2, #1
 8000292:	2180      	movs	r1, #128	@ 0x80
 8000294:	4830      	ldr	r0, [pc, #192]	@ (8000358 <main+0x104>)
 8000296:	f000 fd27 	bl	8000ce8 <HAL_GPIO_WritePin>
      delay_us(100); // 100 µs high pulse
 800029a:	2064      	movs	r0, #100	@ 0x64
 800029c:	f7ff ffb4 	bl	8000208 <delay_us>
      HAL_GPIO_WritePin(PUL_Pin_GPIO_Port, PUL_Pin_Pin, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2180      	movs	r1, #128	@ 0x80
 80002a4:	482c      	ldr	r0, [pc, #176]	@ (8000358 <main+0x104>)
 80002a6:	f000 fd1f 	bl	8000ce8 <HAL_GPIO_WritePin>
      delay_us(100); // 100 µs low pulse
 80002aa:	2064      	movs	r0, #100	@ 0x64
 80002ac:	f7ff ffac 	bl	8000208 <delay_us>
    for (uint16_t i = 0; i < 1600; i++)  // 1600 steps for extended movement
 80002b0:	88fb      	ldrh	r3, [r7, #6]
 80002b2:	3301      	adds	r3, #1
 80002b4:	80fb      	strh	r3, [r7, #6]
 80002b6:	88fb      	ldrh	r3, [r7, #6]
 80002b8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80002bc:	d3e8      	bcc.n	8000290 <main+0x3c>
    }

    /* Optional: Blink onboard LED briefly after rotation */
    for (uint8_t j = 0; j < 2; j++)
 80002be:	2300      	movs	r3, #0
 80002c0:	717b      	strb	r3, [r7, #5]
 80002c2:	e00a      	b.n	80002da <main+0x86>
    {
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80002c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002c8:	4824      	ldr	r0, [pc, #144]	@ (800035c <main+0x108>)
 80002ca:	f000 fd25 	bl	8000d18 <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 80002ce:	2064      	movs	r0, #100	@ 0x64
 80002d0:	f000 fa8e 	bl	80007f0 <HAL_Delay>
    for (uint8_t j = 0; j < 2; j++)
 80002d4:	797b      	ldrb	r3, [r7, #5]
 80002d6:	3301      	adds	r3, #1
 80002d8:	717b      	strb	r3, [r7, #5]
 80002da:	797b      	ldrb	r3, [r7, #5]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d9f1      	bls.n	80002c4 <main+0x70>
    }
    HAL_Delay(500); // Pause between directions
 80002e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002e4:	f000 fa84 	bl	80007f0 <HAL_Delay>

    /* --- Rotate Counterclockwise --- */
    HAL_GPIO_WritePin(DIR_Pin_GPIO_Port, DIR_Pin_Pin, GPIO_PIN_RESET); // Set direction low
 80002e8:	2200      	movs	r2, #0
 80002ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f2:	f000 fcf9 	bl	8000ce8 <HAL_GPIO_WritePin>
    for (uint16_t i = 0; i < 1600; i++)
 80002f6:	2300      	movs	r3, #0
 80002f8:	807b      	strh	r3, [r7, #2]
 80002fa:	e012      	b.n	8000322 <main+0xce>
    {
      HAL_GPIO_WritePin(PUL_Pin_GPIO_Port, PUL_Pin_Pin, GPIO_PIN_SET);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2180      	movs	r1, #128	@ 0x80
 8000300:	4815      	ldr	r0, [pc, #84]	@ (8000358 <main+0x104>)
 8000302:	f000 fcf1 	bl	8000ce8 <HAL_GPIO_WritePin>
      delay_us(100);
 8000306:	2064      	movs	r0, #100	@ 0x64
 8000308:	f7ff ff7e 	bl	8000208 <delay_us>
      HAL_GPIO_WritePin(PUL_Pin_GPIO_Port, PUL_Pin_Pin, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	2180      	movs	r1, #128	@ 0x80
 8000310:	4811      	ldr	r0, [pc, #68]	@ (8000358 <main+0x104>)
 8000312:	f000 fce9 	bl	8000ce8 <HAL_GPIO_WritePin>
      delay_us(100);
 8000316:	2064      	movs	r0, #100	@ 0x64
 8000318:	f7ff ff76 	bl	8000208 <delay_us>
    for (uint16_t i = 0; i < 1600; i++)
 800031c:	887b      	ldrh	r3, [r7, #2]
 800031e:	3301      	adds	r3, #1
 8000320:	807b      	strh	r3, [r7, #2]
 8000322:	887b      	ldrh	r3, [r7, #2]
 8000324:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8000328:	d3e8      	bcc.n	80002fc <main+0xa8>
    }

    /* Optional: Blink onboard LED briefly after rotation */
    for (uint8_t j = 0; j < 2; j++)
 800032a:	2300      	movs	r3, #0
 800032c:	707b      	strb	r3, [r7, #1]
 800032e:	e00a      	b.n	8000346 <main+0xf2>
    {
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000330:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000334:	4809      	ldr	r0, [pc, #36]	@ (800035c <main+0x108>)
 8000336:	f000 fcef 	bl	8000d18 <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 800033a:	2064      	movs	r0, #100	@ 0x64
 800033c:	f000 fa58 	bl	80007f0 <HAL_Delay>
    for (uint8_t j = 0; j < 2; j++)
 8000340:	787b      	ldrb	r3, [r7, #1]
 8000342:	3301      	adds	r3, #1
 8000344:	707b      	strb	r3, [r7, #1]
 8000346:	787b      	ldrb	r3, [r7, #1]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d9f1      	bls.n	8000330 <main+0xdc>
    }
    HAL_Delay(500);
 800034c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000350:	f000 fa4e 	bl	80007f0 <HAL_Delay>
    HAL_GPIO_WritePin(ENA_Pin_GPIO_Port, ENA_Pin_Pin, GPIO_PIN_SET);
 8000354:	e78b      	b.n	800026e <main+0x1a>
 8000356:	bf00      	nop
 8000358:	48000800 	.word	0x48000800
 800035c:	48000400 	.word	0x48000400

08000360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b090      	sub	sp, #64	@ 0x40
 8000364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000366:	f107 0318 	add.w	r3, r7, #24
 800036a:	2228      	movs	r2, #40	@ 0x28
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f002 fa54 	bl	800281c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000382:	2302      	movs	r3, #2
 8000384:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000386:	2301      	movs	r3, #1
 8000388:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800038a:	2310      	movs	r3, #16
 800038c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038e:	2302      	movs	r3, #2
 8000390:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000392:	2300      	movs	r3, #0
 8000394:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000396:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800039a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039c:	f107 0318 	add.w	r3, r7, #24
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 fcd3 	bl	8000d4c <HAL_RCC_OscConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003ac:	f000 f8de 	bl	800056c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003b0:	230f      	movs	r3, #15
 80003b2:	607b      	str	r3, [r7, #4]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b4:	2302      	movs	r3, #2
 80003b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2102      	movs	r1, #2
 80003ca:	4618      	mov	r0, r3
 80003cc:	f001 fccc 	bl	8001d68 <HAL_RCC_ClockConfig>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003d6:	f000 f8c9 	bl	800056c <Error_Handler>
  }
}
 80003da:	bf00      	nop
 80003dc:	3740      	adds	r7, #64	@ 0x40
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
	...

080003e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80003e8:	4b14      	ldr	r3, [pc, #80]	@ (800043c <MX_USART2_UART_Init+0x58>)
 80003ea:	4a15      	ldr	r2, [pc, #84]	@ (8000440 <MX_USART2_UART_Init+0x5c>)
 80003ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003ee:	4b13      	ldr	r3, [pc, #76]	@ (800043c <MX_USART2_UART_Init+0x58>)
 80003f0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80003f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003f6:	4b11      	ldr	r3, [pc, #68]	@ (800043c <MX_USART2_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003fc:	4b0f      	ldr	r3, [pc, #60]	@ (800043c <MX_USART2_UART_Init+0x58>)
 80003fe:	2200      	movs	r2, #0
 8000400:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000402:	4b0e      	ldr	r3, [pc, #56]	@ (800043c <MX_USART2_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000408:	4b0c      	ldr	r3, [pc, #48]	@ (800043c <MX_USART2_UART_Init+0x58>)
 800040a:	220c      	movs	r2, #12
 800040c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800040e:	4b0b      	ldr	r3, [pc, #44]	@ (800043c <MX_USART2_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000414:	4b09      	ldr	r3, [pc, #36]	@ (800043c <MX_USART2_UART_Init+0x58>)
 8000416:	2200      	movs	r2, #0
 8000418:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800041a:	4b08      	ldr	r3, [pc, #32]	@ (800043c <MX_USART2_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000420:	4b06      	ldr	r3, [pc, #24]	@ (800043c <MX_USART2_UART_Init+0x58>)
 8000422:	2200      	movs	r2, #0
 8000424:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000426:	4805      	ldr	r0, [pc, #20]	@ (800043c <MX_USART2_UART_Init+0x58>)
 8000428:	f001 fec6 	bl	80021b8 <HAL_UART_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000432:	f000 f89b 	bl	800056c <Error_Handler>
  }
}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000028 	.word	0x20000028
 8000440:	40004400 	.word	0x40004400

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	@ 0x28
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
 8000458:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045a:	4b40      	ldr	r3, [pc, #256]	@ (800055c <MX_GPIO_Init+0x118>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a3f      	ldr	r2, [pc, #252]	@ (800055c <MX_GPIO_Init+0x118>)
 8000460:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000464:	6153      	str	r3, [r2, #20]
 8000466:	4b3d      	ldr	r3, [pc, #244]	@ (800055c <MX_GPIO_Init+0x118>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800046e:	613b      	str	r3, [r7, #16]
 8000470:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000472:	4b3a      	ldr	r3, [pc, #232]	@ (800055c <MX_GPIO_Init+0x118>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a39      	ldr	r2, [pc, #228]	@ (800055c <MX_GPIO_Init+0x118>)
 8000478:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b37      	ldr	r3, [pc, #220]	@ (800055c <MX_GPIO_Init+0x118>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048a:	4b34      	ldr	r3, [pc, #208]	@ (800055c <MX_GPIO_Init+0x118>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a33      	ldr	r2, [pc, #204]	@ (800055c <MX_GPIO_Init+0x118>)
 8000490:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b31      	ldr	r3, [pc, #196]	@ (800055c <MX_GPIO_Init+0x118>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a2:	4b2e      	ldr	r3, [pc, #184]	@ (800055c <MX_GPIO_Init+0x118>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a2d      	ldr	r2, [pc, #180]	@ (800055c <MX_GPIO_Init+0x118>)
 80004a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b2b      	ldr	r3, [pc, #172]	@ (800055c <MX_GPIO_Init+0x118>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level for onboard LED */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004c0:	4827      	ldr	r0, [pc, #156]	@ (8000560 <MX_GPIO_Init+0x11c>)
 80004c2:	f000 fc11 	bl	8000ce8 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level for PUL */
  HAL_GPIO_WritePin(PUL_Pin_GPIO_Port, PUL_Pin_Pin, GPIO_PIN_RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2180      	movs	r1, #128	@ 0x80
 80004ca:	4826      	ldr	r0, [pc, #152]	@ (8000564 <MX_GPIO_Init+0x120>)
 80004cc:	f000 fc0c 	bl	8000ce8 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level for ENA and DIR */
  HAL_GPIO_WritePin(GPIOA, ENA_Pin_Pin | DIR_Pin_Pin, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004da:	f000 fc05 	bl	8000ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin (User Button) */
  GPIO_InitStruct.Pin = B1_Pin;
 80004de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004e4:	4b20      	ldr	r3, [pc, #128]	@ (8000568 <MX_GPIO_Init+0x124>)
 80004e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	4619      	mov	r1, r3
 80004f2:	481c      	ldr	r0, [pc, #112]	@ (8000564 <MX_GPIO_Init+0x120>)
 80004f4:	f000 fa86 	bl	8000a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin (Onboard LED) */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	2301      	movs	r3, #1
 8000500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	2300      	movs	r3, #0
 8000508:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	4619      	mov	r1, r3
 8000510:	4813      	ldr	r0, [pc, #76]	@ (8000560 <MX_GPIO_Init+0x11c>)
 8000512:	f000 fa77 	bl	8000a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUL_Pin_Pin */
  GPIO_InitStruct.Pin = PUL_Pin_Pin;
 8000516:	2380      	movs	r3, #128	@ 0x80
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051a:	2301      	movs	r3, #1
 800051c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000522:	2300      	movs	r3, #0
 8000524:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PUL_Pin_GPIO_Port, &GPIO_InitStruct);
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	4619      	mov	r1, r3
 800052c:	480d      	ldr	r0, [pc, #52]	@ (8000564 <MX_GPIO_Init+0x120>)
 800052e:	f000 fa69 	bl	8000a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENA_Pin_Pin and DIR_Pin_Pin */
  GPIO_InitStruct.Pin = ENA_Pin_Pin | DIR_Pin_Pin;
 8000532:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000538:	2301      	movs	r3, #1
 800053a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000540:	2300      	movs	r3, #0
 8000542:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	4619      	mov	r1, r3
 800054a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800054e:	f000 fa59 	bl	8000a04 <HAL_GPIO_Init>
}
 8000552:	bf00      	nop
 8000554:	3728      	adds	r7, #40	@ 0x28
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000
 8000560:	48000400 	.word	0x48000400
 8000564:	48000800 	.word	0x48000800
 8000568:	10210000 	.word	0x10210000

0800056c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000570:	b672      	cpsid	i
}
 8000572:	bf00      	nop
  __disable_irq();
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <Error_Handler+0x8>

08000578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057e:	4b0f      	ldr	r3, [pc, #60]	@ (80005bc <HAL_MspInit+0x44>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	4a0e      	ldr	r2, [pc, #56]	@ (80005bc <HAL_MspInit+0x44>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6193      	str	r3, [r2, #24]
 800058a:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <HAL_MspInit+0x44>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000596:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <HAL_MspInit+0x44>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	4a08      	ldr	r2, [pc, #32]	@ (80005bc <HAL_MspInit+0x44>)
 800059c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a0:	61d3      	str	r3, [r2, #28]
 80005a2:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <HAL_MspInit+0x44>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005ae:	2007      	movs	r0, #7
 80005b0:	f000 f9f4 	bl	800099c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40021000 	.word	0x40021000

080005c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	@ 0x28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a17      	ldr	r2, [pc, #92]	@ (800063c <HAL_UART_MspInit+0x7c>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d128      	bne.n	8000634 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005e2:	4b17      	ldr	r3, [pc, #92]	@ (8000640 <HAL_UART_MspInit+0x80>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a16      	ldr	r2, [pc, #88]	@ (8000640 <HAL_UART_MspInit+0x80>)
 80005e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b14      	ldr	r3, [pc, #80]	@ (8000640 <HAL_UART_MspInit+0x80>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <HAL_UART_MspInit+0x80>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	4a10      	ldr	r2, [pc, #64]	@ (8000640 <HAL_UART_MspInit+0x80>)
 8000600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000604:	6153      	str	r3, [r2, #20]
 8000606:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <HAL_UART_MspInit+0x80>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000612:	230c      	movs	r3, #12
 8000614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000616:	2302      	movs	r3, #2
 8000618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000622:	2307      	movs	r3, #7
 8000624:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000630:	f000 f9e8 	bl	8000a04 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000634:	bf00      	nop
 8000636:	3728      	adds	r7, #40	@ 0x28
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40004400 	.word	0x40004400
 8000640:	40021000 	.word	0x40021000

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <NMI_Handler+0x4>

0800064c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <HardFault_Handler+0x4>

08000654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <MemManage_Handler+0x4>

0800065c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <BusFault_Handler+0x4>

08000664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <UsageFault_Handler+0x4>

0800066c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr

0800067a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069a:	f000 f889 	bl	80007b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006a8:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <SystemInit+0x28>)
 80006aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ae:	4a07      	ldr	r2, [pc, #28]	@ (80006cc <SystemInit+0x28>)
 80006b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006b8:	4b04      	ldr	r3, [pc, #16]	@ (80006cc <SystemInit+0x28>)
 80006ba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80006be:	609a      	str	r2, [r3, #8]
#endif
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000708 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80006d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80006d6:	e003      	b.n	80006e0 <LoopCopyDataInit>

080006d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80006da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80006dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80006de:	3104      	adds	r1, #4

080006e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80006e0:	480b      	ldr	r0, [pc, #44]	@ (8000710 <LoopForever+0xa>)
	ldr	r3, =_edata
 80006e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <LoopForever+0xe>)
	adds	r2, r0, r1
 80006e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80006e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006e8:	d3f6      	bcc.n	80006d8 <CopyDataInit>
	ldr	r2, =_sbss
 80006ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000718 <LoopForever+0x12>)
	b	LoopFillZerobss
 80006ec:	e002      	b.n	80006f4 <LoopFillZerobss>

080006ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006f0:	f842 3b04 	str.w	r3, [r2], #4

080006f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006f4:	4b09      	ldr	r3, [pc, #36]	@ (800071c <LoopForever+0x16>)
	cmp	r2, r3
 80006f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80006f8:	d3f9      	bcc.n	80006ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006fa:	f7ff ffd3 	bl	80006a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006fe:	f002 f895 	bl	800282c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000702:	f7ff fda7 	bl	8000254 <main>

08000706 <LoopForever>:

LoopForever:
    b LoopForever
 8000706:	e7fe      	b.n	8000706 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000708:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 800070c:	080028cc 	.word	0x080028cc
	ldr	r0, =_sdata
 8000710:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000714:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000718:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800071c:	200000ac 	.word	0x200000ac

08000720 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000720:	e7fe      	b.n	8000720 <ADC1_IRQHandler>
	...

08000724 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000728:	4b08      	ldr	r3, [pc, #32]	@ (800074c <HAL_Init+0x28>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a07      	ldr	r2, [pc, #28]	@ (800074c <HAL_Init+0x28>)
 800072e:	f043 0310 	orr.w	r3, r3, #16
 8000732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000734:	2003      	movs	r0, #3
 8000736:	f000 f931 	bl	800099c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800073a:	2000      	movs	r0, #0
 800073c:	f000 f808 	bl	8000750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000740:	f7ff ff1a 	bl	8000578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40022000 	.word	0x40022000

08000750 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <HAL_InitTick+0x54>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <HAL_InitTick+0x58>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	4619      	mov	r1, r3
 8000762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000766:	fbb3 f3f1 	udiv	r3, r3, r1
 800076a:	fbb2 f3f3 	udiv	r3, r2, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f000 f93b 	bl	80009ea <HAL_SYSTICK_Config>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800077a:	2301      	movs	r3, #1
 800077c:	e00e      	b.n	800079c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2b0f      	cmp	r3, #15
 8000782:	d80a      	bhi.n	800079a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000784:	2200      	movs	r2, #0
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	f04f 30ff 	mov.w	r0, #4294967295
 800078c:	f000 f911 	bl	80009b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000790:	4a06      	ldr	r2, [pc, #24]	@ (80007ac <HAL_InitTick+0x5c>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000796:	2300      	movs	r3, #0
 8000798:	e000      	b.n	800079c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
}
 800079c:	4618      	mov	r0, r3
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000000 	.word	0x20000000
 80007a8:	20000008 	.word	0x20000008
 80007ac:	20000004 	.word	0x20000004

080007b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <HAL_IncTick+0x20>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <HAL_IncTick+0x24>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4413      	add	r3, r2
 80007c0:	4a04      	ldr	r2, [pc, #16]	@ (80007d4 <HAL_IncTick+0x24>)
 80007c2:	6013      	str	r3, [r2, #0]
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	20000008 	.word	0x20000008
 80007d4:	200000a8 	.word	0x200000a8

080007d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  return uwTick;  
 80007dc:	4b03      	ldr	r3, [pc, #12]	@ (80007ec <HAL_GetTick+0x14>)
 80007de:	681b      	ldr	r3, [r3, #0]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	200000a8 	.word	0x200000a8

080007f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007f8:	f7ff ffee 	bl	80007d8 <HAL_GetTick>
 80007fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000808:	d005      	beq.n	8000816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800080a:	4b0a      	ldr	r3, [pc, #40]	@ (8000834 <HAL_Delay+0x44>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	461a      	mov	r2, r3
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	4413      	add	r3, r2
 8000814:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000816:	bf00      	nop
 8000818:	f7ff ffde 	bl	80007d8 <HAL_GetTick>
 800081c:	4602      	mov	r2, r0
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	429a      	cmp	r2, r3
 8000826:	d8f7      	bhi.n	8000818 <HAL_Delay+0x28>
  {
  }
}
 8000828:	bf00      	nop
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000008 	.word	0x20000008

08000838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <__NVIC_SetPriorityGrouping+0x44>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084e:	68ba      	ldr	r2, [r7, #8]
 8000850:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000854:	4013      	ands	r3, r2
 8000856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000860:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800086a:	4a04      	ldr	r2, [pc, #16]	@ (800087c <__NVIC_SetPriorityGrouping+0x44>)
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	60d3      	str	r3, [r2, #12]
}
 8000870:	bf00      	nop
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000884:	4b04      	ldr	r3, [pc, #16]	@ (8000898 <__NVIC_GetPriorityGrouping+0x18>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	0a1b      	lsrs	r3, r3, #8
 800088a:	f003 0307 	and.w	r3, r3, #7
}
 800088e:	4618      	mov	r0, r3
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	db0a      	blt.n	80008c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	490c      	ldr	r1, [pc, #48]	@ (80008e8 <__NVIC_SetPriority+0x4c>)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	0112      	lsls	r2, r2, #4
 80008bc:	b2d2      	uxtb	r2, r2
 80008be:	440b      	add	r3, r1
 80008c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c4:	e00a      	b.n	80008dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4908      	ldr	r1, [pc, #32]	@ (80008ec <__NVIC_SetPriority+0x50>)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	f003 030f 	and.w	r3, r3, #15
 80008d2:	3b04      	subs	r3, #4
 80008d4:	0112      	lsls	r2, r2, #4
 80008d6:	b2d2      	uxtb	r2, r2
 80008d8:	440b      	add	r3, r1
 80008da:	761a      	strb	r2, [r3, #24]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000e100 	.word	0xe000e100
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b089      	sub	sp, #36	@ 0x24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	f1c3 0307 	rsb	r3, r3, #7
 800090a:	2b04      	cmp	r3, #4
 800090c:	bf28      	it	cs
 800090e:	2304      	movcs	r3, #4
 8000910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3304      	adds	r3, #4
 8000916:	2b06      	cmp	r3, #6
 8000918:	d902      	bls.n	8000920 <NVIC_EncodePriority+0x30>
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3b03      	subs	r3, #3
 800091e:	e000      	b.n	8000922 <NVIC_EncodePriority+0x32>
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	f04f 32ff 	mov.w	r2, #4294967295
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43da      	mvns	r2, r3
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	401a      	ands	r2, r3
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000938:	f04f 31ff 	mov.w	r1, #4294967295
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	43d9      	mvns	r1, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	4313      	orrs	r3, r2
         );
}
 800094a:	4618      	mov	r0, r3
 800094c:	3724      	adds	r7, #36	@ 0x24
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3b01      	subs	r3, #1
 8000964:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000968:	d301      	bcc.n	800096e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096a:	2301      	movs	r3, #1
 800096c:	e00f      	b.n	800098e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096e:	4a0a      	ldr	r2, [pc, #40]	@ (8000998 <SysTick_Config+0x40>)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3b01      	subs	r3, #1
 8000974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000976:	210f      	movs	r1, #15
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	f7ff ff8e 	bl	800089c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000980:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <SysTick_Config+0x40>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000986:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <SysTick_Config+0x40>)
 8000988:	2207      	movs	r2, #7
 800098a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	e000e010 	.word	0xe000e010

0800099c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ff47 	bl	8000838 <__NVIC_SetPriorityGrouping>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b086      	sub	sp, #24
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4603      	mov	r3, r0
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c4:	f7ff ff5c 	bl	8000880 <__NVIC_GetPriorityGrouping>
 80009c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	6978      	ldr	r0, [r7, #20]
 80009d0:	f7ff ff8e 	bl	80008f0 <NVIC_EncodePriority>
 80009d4:	4602      	mov	r2, r0
 80009d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff5d 	bl	800089c <__NVIC_SetPriority>
}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff ffb0 	bl	8000958 <SysTick_Config>
 80009f8:	4603      	mov	r3, r0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b087      	sub	sp, #28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a12:	e14e      	b.n	8000cb2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	2101      	movs	r1, #1
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a20:	4013      	ands	r3, r2
 8000a22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f000 8140 	beq.w	8000cac <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d003      	beq.n	8000a3c <HAL_GPIO_Init+0x38>
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	2b12      	cmp	r3, #18
 8000a3a:	d123      	bne.n	8000a84 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	08da      	lsrs	r2, r3, #3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3208      	adds	r2, #8
 8000a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	f003 0307 	and.w	r3, r3, #7
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	220f      	movs	r2, #15
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	691a      	ldr	r2, [r3, #16]
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	08da      	lsrs	r2, r3, #3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3208      	adds	r2, #8
 8000a7e:	6939      	ldr	r1, [r7, #16]
 8000a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	2203      	movs	r2, #3
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 0203 	and.w	r2, r3, #3
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d00b      	beq.n	8000ad8 <HAL_GPIO_Init+0xd4>
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d007      	beq.n	8000ad8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000acc:	2b11      	cmp	r3, #17
 8000ace:	d003      	beq.n	8000ad8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	2b12      	cmp	r3, #18
 8000ad6:	d130      	bne.n	8000b3a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4013      	ands	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	68da      	ldr	r2, [r3, #12]
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b0e:	2201      	movs	r2, #1
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	091b      	lsrs	r3, r3, #4
 8000b24:	f003 0201 	and.w	r2, r3, #1
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	2203      	movs	r2, #3
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	689a      	ldr	r2, [r3, #8]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f000 809a 	beq.w	8000cac <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b78:	4b55      	ldr	r3, [pc, #340]	@ (8000cd0 <HAL_GPIO_Init+0x2cc>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a54      	ldr	r2, [pc, #336]	@ (8000cd0 <HAL_GPIO_Init+0x2cc>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b52      	ldr	r3, [pc, #328]	@ (8000cd0 <HAL_GPIO_Init+0x2cc>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b90:	4a50      	ldr	r2, [pc, #320]	@ (8000cd4 <HAL_GPIO_Init+0x2d0>)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	089b      	lsrs	r3, r3, #2
 8000b96:	3302      	adds	r3, #2
 8000b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	f003 0303 	and.w	r3, r3, #3
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	220f      	movs	r2, #15
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	43db      	mvns	r3, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000bba:	d013      	beq.n	8000be4 <HAL_GPIO_Init+0x1e0>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a46      	ldr	r2, [pc, #280]	@ (8000cd8 <HAL_GPIO_Init+0x2d4>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d00d      	beq.n	8000be0 <HAL_GPIO_Init+0x1dc>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a45      	ldr	r2, [pc, #276]	@ (8000cdc <HAL_GPIO_Init+0x2d8>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d007      	beq.n	8000bdc <HAL_GPIO_Init+0x1d8>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a44      	ldr	r2, [pc, #272]	@ (8000ce0 <HAL_GPIO_Init+0x2dc>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d101      	bne.n	8000bd8 <HAL_GPIO_Init+0x1d4>
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	e006      	b.n	8000be6 <HAL_GPIO_Init+0x1e2>
 8000bd8:	2305      	movs	r3, #5
 8000bda:	e004      	b.n	8000be6 <HAL_GPIO_Init+0x1e2>
 8000bdc:	2302      	movs	r3, #2
 8000bde:	e002      	b.n	8000be6 <HAL_GPIO_Init+0x1e2>
 8000be0:	2301      	movs	r3, #1
 8000be2:	e000      	b.n	8000be6 <HAL_GPIO_Init+0x1e2>
 8000be4:	2300      	movs	r3, #0
 8000be6:	697a      	ldr	r2, [r7, #20]
 8000be8:	f002 0203 	and.w	r2, r2, #3
 8000bec:	0092      	lsls	r2, r2, #2
 8000bee:	4093      	lsls	r3, r2
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bf6:	4937      	ldr	r1, [pc, #220]	@ (8000cd4 <HAL_GPIO_Init+0x2d0>)
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	089b      	lsrs	r3, r3, #2
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c04:	4b37      	ldr	r3, [pc, #220]	@ (8000ce4 <HAL_GPIO_Init+0x2e0>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d003      	beq.n	8000c28 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c28:	4a2e      	ldr	r2, [pc, #184]	@ (8000ce4 <HAL_GPIO_Init+0x2e0>)
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ce4 <HAL_GPIO_Init+0x2e0>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	43db      	mvns	r3, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c52:	4a24      	ldr	r2, [pc, #144]	@ (8000ce4 <HAL_GPIO_Init+0x2e0>)
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c58:	4b22      	ldr	r3, [pc, #136]	@ (8000ce4 <HAL_GPIO_Init+0x2e0>)
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	43db      	mvns	r3, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c7c:	4a19      	ldr	r2, [pc, #100]	@ (8000ce4 <HAL_GPIO_Init+0x2e0>)
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c82:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <HAL_GPIO_Init+0x2e0>)
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ca6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce4 <HAL_GPIO_Init+0x2e0>)
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f47f aea9 	bne.w	8000a14 <HAL_GPIO_Init+0x10>
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	bf00      	nop
 8000cc6:	371c      	adds	r7, #28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	40010000 	.word	0x40010000
 8000cd8:	48000400 	.word	0x48000400
 8000cdc:	48000800 	.word	0x48000800
 8000ce0:	48000c00 	.word	0x48000c00
 8000ce4:	40010400 	.word	0x40010400

08000ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	807b      	strh	r3, [r7, #2]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cf8:	787b      	ldrb	r3, [r7, #1]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cfe:	887a      	ldrh	r2, [r7, #2]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d04:	e002      	b.n	8000d0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d06:	887a      	ldrh	r2, [r7, #2]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	695a      	ldr	r2, [r3, #20]
 8000d28:	887b      	ldrh	r3, [r7, #2]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d004      	beq.n	8000d3a <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	041a      	lsls	r2, r3, #16
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000d38:	e002      	b.n	8000d40 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d3a:	887a      	ldrh	r2, [r7, #2]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	619a      	str	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d5c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	f000 bff4 	b.w	8001d5a <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 816d 	beq.w	8001062 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d88:	4bb4      	ldr	r3, [pc, #720]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 030c 	and.w	r3, r3, #12
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	d00c      	beq.n	8000dae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d94:	4bb1      	ldr	r3, [pc, #708]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 030c 	and.w	r3, r3, #12
 8000d9c:	2b08      	cmp	r3, #8
 8000d9e:	d157      	bne.n	8000e50 <HAL_RCC_OscConfig+0x104>
 8000da0:	4bae      	ldr	r3, [pc, #696]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dac:	d150      	bne.n	8000e50 <HAL_RCC_OscConfig+0x104>
 8000dae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000db2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000dba:	fa93 f3a3 	rbit	r3, r3
 8000dbe:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dc2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc6:	fab3 f383 	clz	r3, r3
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b3f      	cmp	r3, #63	@ 0x3f
 8000dce:	d802      	bhi.n	8000dd6 <HAL_RCC_OscConfig+0x8a>
 8000dd0:	4ba2      	ldr	r3, [pc, #648]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	e015      	b.n	8000e02 <HAL_RCC_OscConfig+0xb6>
 8000dd6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dda:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dde:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000de2:	fa93 f3a3 	rbit	r3, r3
 8000de6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000dea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dee:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000df2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000df6:	fa93 f3a3 	rbit	r3, r3
 8000dfa:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000dfe:	4b97      	ldr	r3, [pc, #604]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e02:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e06:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000e0a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000e0e:	fa92 f2a2 	rbit	r2, r2
 8000e12:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000e16:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	f042 0220 	orr.w	r2, r2, #32
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	f002 021f 	and.w	r2, r2, #31
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e30:	4013      	ands	r3, r2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f000 8114 	beq.w	8001060 <HAL_RCC_OscConfig+0x314>
 8000e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f040 810b 	bne.w	8001060 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	f000 bf85 	b.w	8001d5a <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e60:	d106      	bne.n	8000e70 <HAL_RCC_OscConfig+0x124>
 8000e62:	4b7e      	ldr	r3, [pc, #504]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a7d      	ldr	r2, [pc, #500]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	e036      	b.n	8000ede <HAL_RCC_OscConfig+0x192>
 8000e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10c      	bne.n	8000e9a <HAL_RCC_OscConfig+0x14e>
 8000e80:	4b76      	ldr	r3, [pc, #472]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a75      	ldr	r2, [pc, #468]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000e86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	4b73      	ldr	r3, [pc, #460]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a72      	ldr	r2, [pc, #456]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000e92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	e021      	b.n	8000ede <HAL_RCC_OscConfig+0x192>
 8000e9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000eaa:	d10c      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x17a>
 8000eac:	4b6b      	ldr	r3, [pc, #428]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a6a      	ldr	r2, [pc, #424]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000eb2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	4b68      	ldr	r3, [pc, #416]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a67      	ldr	r2, [pc, #412]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000ebe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	e00b      	b.n	8000ede <HAL_RCC_OscConfig+0x192>
 8000ec6:	4b65      	ldr	r3, [pc, #404]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a64      	ldr	r2, [pc, #400]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000ecc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	4b62      	ldr	r3, [pc, #392]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a61      	ldr	r2, [pc, #388]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000ed8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000edc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ede:	4b5f      	ldr	r3, [pc, #380]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ee2:	f023 020f 	bic.w	r2, r3, #15
 8000ee6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000eea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	495a      	ldr	r1, [pc, #360]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000efc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d054      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f08:	f7ff fc66 	bl	80007d8 <HAL_GetTick>
 8000f0c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f10:	e00a      	b.n	8000f28 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f12:	f7ff fc61 	bl	80007d8 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b64      	cmp	r3, #100	@ 0x64
 8000f20:	d902      	bls.n	8000f28 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	f000 bf19 	b.w	8001d5a <HAL_RCC_OscConfig+0x100e>
 8000f28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f2c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f30:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000f34:	fa93 f3a3 	rbit	r3, r3
 8000f38:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000f3c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f40:	fab3 f383 	clz	r3, r3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f48:	d802      	bhi.n	8000f50 <HAL_RCC_OscConfig+0x204>
 8000f4a:	4b44      	ldr	r3, [pc, #272]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	e015      	b.n	8000f7c <HAL_RCC_OscConfig+0x230>
 8000f50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f54:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f58:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000f5c:	fa93 f3a3 	rbit	r3, r3
 8000f60:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000f64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f68:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000f6c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000f70:	fa93 f3a3 	rbit	r3, r3
 8000f74:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000f78:	4b38      	ldr	r3, [pc, #224]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f80:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000f84:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000f88:	fa92 f2a2 	rbit	r2, r2
 8000f8c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000f90:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000f94:	fab2 f282 	clz	r2, r2
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	f042 0220 	orr.w	r2, r2, #32
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	f002 021f 	and.w	r2, r2, #31
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8000faa:	4013      	ands	r3, r2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0b0      	beq.n	8000f12 <HAL_RCC_OscConfig+0x1c6>
 8000fb0:	e057      	b.n	8001062 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fc11 	bl	80007d8 <HAL_GetTick>
 8000fb6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fba:	e00a      	b.n	8000fd2 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fbc:	f7ff fc0c 	bl	80007d8 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b64      	cmp	r3, #100	@ 0x64
 8000fca:	d902      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	f000 bec4 	b.w	8001d5a <HAL_RCC_OscConfig+0x100e>
 8000fd2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fd6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fda:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000fde:	fa93 f3a3 	rbit	r3, r3
 8000fe2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8000fe6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fea:	fab3 f383 	clz	r3, r3
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ff2:	d802      	bhi.n	8000ffa <HAL_RCC_OscConfig+0x2ae>
 8000ff4:	4b19      	ldr	r3, [pc, #100]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	e015      	b.n	8001026 <HAL_RCC_OscConfig+0x2da>
 8000ffa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ffe:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001002:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001006:	fa93 f3a3 	rbit	r3, r3
 800100a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800100e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001012:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001016:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800101a:	fa93 f3a3 	rbit	r3, r3
 800101e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001022:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <HAL_RCC_OscConfig+0x310>)
 8001024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001026:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800102a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800102e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001032:	fa92 f2a2 	rbit	r2, r2
 8001036:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800103a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800103e:	fab2 f282 	clz	r2, r2
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	f042 0220 	orr.w	r2, r2, #32
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	f002 021f 	and.w	r2, r2, #31
 800104e:	2101      	movs	r1, #1
 8001050:	fa01 f202 	lsl.w	r2, r1, r2
 8001054:	4013      	ands	r3, r2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1b0      	bne.n	8000fbc <HAL_RCC_OscConfig+0x270>
 800105a:	e002      	b.n	8001062 <HAL_RCC_OscConfig+0x316>
 800105c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001066:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 816c 	beq.w	8001350 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001078:	4bcc      	ldr	r3, [pc, #816]	@ (80013ac <HAL_RCC_OscConfig+0x660>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 030c 	and.w	r3, r3, #12
 8001080:	2b00      	cmp	r3, #0
 8001082:	d00b      	beq.n	800109c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001084:	4bc9      	ldr	r3, [pc, #804]	@ (80013ac <HAL_RCC_OscConfig+0x660>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 030c 	and.w	r3, r3, #12
 800108c:	2b08      	cmp	r3, #8
 800108e:	d16d      	bne.n	800116c <HAL_RCC_OscConfig+0x420>
 8001090:	4bc6      	ldr	r3, [pc, #792]	@ (80013ac <HAL_RCC_OscConfig+0x660>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d167      	bne.n	800116c <HAL_RCC_OscConfig+0x420>
 800109c:	2302      	movs	r3, #2
 800109e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010a6:	fa93 f3a3 	rbit	r3, r3
 80010aa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80010ae:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b2:	fab3 f383 	clz	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80010ba:	d802      	bhi.n	80010c2 <HAL_RCC_OscConfig+0x376>
 80010bc:	4bbb      	ldr	r3, [pc, #748]	@ (80013ac <HAL_RCC_OscConfig+0x660>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	e013      	b.n	80010ea <HAL_RCC_OscConfig+0x39e>
 80010c2:	2302      	movs	r3, #2
 80010c4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80010cc:	fa93 f3a3 	rbit	r3, r3
 80010d0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80010d4:	2302      	movs	r3, #2
 80010d6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80010da:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80010de:	fa93 f3a3 	rbit	r3, r3
 80010e2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80010e6:	4bb1      	ldr	r3, [pc, #708]	@ (80013ac <HAL_RCC_OscConfig+0x660>)
 80010e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ea:	2202      	movs	r2, #2
 80010ec:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80010f0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80010f4:	fa92 f2a2 	rbit	r2, r2
 80010f8:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80010fc:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001100:	fab2 f282 	clz	r2, r2
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	f042 0220 	orr.w	r2, r2, #32
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	f002 021f 	and.w	r2, r2, #31
 8001110:	2101      	movs	r1, #1
 8001112:	fa01 f202 	lsl.w	r2, r1, r2
 8001116:	4013      	ands	r3, r2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00a      	beq.n	8001132 <HAL_RCC_OscConfig+0x3e6>
 800111c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001120:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d002      	beq.n	8001132 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	f000 be14 	b.w	8001d5a <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001132:	4b9e      	ldr	r3, [pc, #632]	@ (80013ac <HAL_RCC_OscConfig+0x660>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800113a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800113e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	21f8      	movs	r1, #248	@ 0xf8
 8001148:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001150:	fa91 f1a1 	rbit	r1, r1
 8001154:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001158:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800115c:	fab1 f181 	clz	r1, r1
 8001160:	b2c9      	uxtb	r1, r1
 8001162:	408b      	lsls	r3, r1
 8001164:	4991      	ldr	r1, [pc, #580]	@ (80013ac <HAL_RCC_OscConfig+0x660>)
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116a:	e0f1      	b.n	8001350 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800116c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001170:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 8083 	beq.w	8001284 <HAL_RCC_OscConfig+0x538>
 800117e:	2301      	movs	r3, #1
 8001180:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001184:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001188:	fa93 f3a3 	rbit	r3, r3
 800118c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001190:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001194:	fab3 f383 	clz	r3, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800119e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	461a      	mov	r2, r3
 80011a6:	2301      	movs	r3, #1
 80011a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011aa:	f7ff fb15 	bl	80007d8 <HAL_GetTick>
 80011ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b2:	e00a      	b.n	80011ca <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b4:	f7ff fb10 	bl	80007d8 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d902      	bls.n	80011ca <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	f000 bdc8 	b.w	8001d5a <HAL_RCC_OscConfig+0x100e>
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80011d4:	fa93 f3a3 	rbit	r3, r3
 80011d8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80011dc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e0:	fab3 f383 	clz	r3, r3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80011e8:	d802      	bhi.n	80011f0 <HAL_RCC_OscConfig+0x4a4>
 80011ea:	4b70      	ldr	r3, [pc, #448]	@ (80013ac <HAL_RCC_OscConfig+0x660>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	e013      	b.n	8001218 <HAL_RCC_OscConfig+0x4cc>
 80011f0:	2302      	movs	r3, #2
 80011f2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80011fa:	fa93 f3a3 	rbit	r3, r3
 80011fe:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001202:	2302      	movs	r3, #2
 8001204:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001208:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800120c:	fa93 f3a3 	rbit	r3, r3
 8001210:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001214:	4b65      	ldr	r3, [pc, #404]	@ (80013ac <HAL_RCC_OscConfig+0x660>)
 8001216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001218:	2202      	movs	r2, #2
 800121a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800121e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001222:	fa92 f2a2 	rbit	r2, r2
 8001226:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800122a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800122e:	fab2 f282 	clz	r2, r2
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	f042 0220 	orr.w	r2, r2, #32
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	f002 021f 	and.w	r2, r2, #31
 800123e:	2101      	movs	r1, #1
 8001240:	fa01 f202 	lsl.w	r2, r1, r2
 8001244:	4013      	ands	r3, r2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0b4      	beq.n	80011b4 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124a:	4b58      	ldr	r3, [pc, #352]	@ (80013ac <HAL_RCC_OscConfig+0x660>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001256:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	21f8      	movs	r1, #248	@ 0xf8
 8001260:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001264:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001268:	fa91 f1a1 	rbit	r1, r1
 800126c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001270:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001274:	fab1 f181 	clz	r1, r1
 8001278:	b2c9      	uxtb	r1, r1
 800127a:	408b      	lsls	r3, r1
 800127c:	494b      	ldr	r1, [pc, #300]	@ (80013ac <HAL_RCC_OscConfig+0x660>)
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]
 8001282:	e065      	b.n	8001350 <HAL_RCC_OscConfig+0x604>
 8001284:	2301      	movs	r3, #1
 8001286:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001296:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129a:	fab3 f383 	clz	r3, r3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80012a4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	461a      	mov	r2, r3
 80012ac:	2300      	movs	r3, #0
 80012ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b0:	f7ff fa92 	bl	80007d8 <HAL_GetTick>
 80012b4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b8:	e00a      	b.n	80012d0 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ba:	f7ff fa8d 	bl	80007d8 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d902      	bls.n	80012d0 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	f000 bd45 	b.w	8001d5a <HAL_RCC_OscConfig+0x100e>
 80012d0:	2302      	movs	r3, #2
 80012d2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80012da:	fa93 f3a3 	rbit	r3, r3
 80012de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80012e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e6:	fab3 f383 	clz	r3, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80012ee:	d802      	bhi.n	80012f6 <HAL_RCC_OscConfig+0x5aa>
 80012f0:	4b2e      	ldr	r3, [pc, #184]	@ (80013ac <HAL_RCC_OscConfig+0x660>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	e013      	b.n	800131e <HAL_RCC_OscConfig+0x5d2>
 80012f6:	2302      	movs	r3, #2
 80012f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001300:	fa93 f3a3 	rbit	r3, r3
 8001304:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001308:	2302      	movs	r3, #2
 800130a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800130e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001312:	fa93 f3a3 	rbit	r3, r3
 8001316:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800131a:	4b24      	ldr	r3, [pc, #144]	@ (80013ac <HAL_RCC_OscConfig+0x660>)
 800131c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131e:	2202      	movs	r2, #2
 8001320:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001324:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001328:	fa92 f2a2 	rbit	r2, r2
 800132c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001330:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001334:	fab2 f282 	clz	r2, r2
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	f042 0220 	orr.w	r2, r2, #32
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	f002 021f 	and.w	r2, r2, #31
 8001344:	2101      	movs	r1, #1
 8001346:	fa01 f202 	lsl.w	r2, r1, r2
 800134a:	4013      	ands	r3, r2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1b4      	bne.n	80012ba <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001354:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 8115 	beq.w	8001590 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800136a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d07e      	beq.n	8001474 <HAL_RCC_OscConfig+0x728>
 8001376:	2301      	movs	r3, #1
 8001378:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001380:	fa93 f3a3 	rbit	r3, r3
 8001384:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001388:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138c:	fab3 f383 	clz	r3, r3
 8001390:	b2db      	uxtb	r3, r3
 8001392:	461a      	mov	r2, r3
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_RCC_OscConfig+0x664>)
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	461a      	mov	r2, r3
 800139c:	2301      	movs	r3, #1
 800139e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a0:	f7ff fa1a 	bl	80007d8 <HAL_GetTick>
 80013a4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a8:	e00f      	b.n	80013ca <HAL_RCC_OscConfig+0x67e>
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000
 80013b0:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b4:	f7ff fa10 	bl	80007d8 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d902      	bls.n	80013ca <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	f000 bcc8 	b.w	8001d5a <HAL_RCC_OscConfig+0x100e>
 80013ca:	2302      	movs	r3, #2
 80013cc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80013d4:	fa93 f3a3 	rbit	r3, r3
 80013d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80013dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013e0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013e4:	2202      	movs	r2, #2
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013ec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	fa93 f2a3 	rbit	r2, r3
 80013f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001408:	2202      	movs	r2, #2
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	fa93 f2a3 	rbit	r2, r3
 800141a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800141e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001422:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001424:	4bb0      	ldr	r3, [pc, #704]	@ (80016e8 <HAL_RCC_OscConfig+0x99c>)
 8001426:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800142c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001430:	2102      	movs	r1, #2
 8001432:	6019      	str	r1, [r3, #0]
 8001434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001438:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	fa93 f1a3 	rbit	r1, r3
 8001442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001446:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800144a:	6019      	str	r1, [r3, #0]
  return result;
 800144c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001450:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	fab3 f383 	clz	r3, r3
 800145a:	b2db      	uxtb	r3, r3
 800145c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001460:	b2db      	uxtb	r3, r3
 8001462:	f003 031f 	and.w	r3, r3, #31
 8001466:	2101      	movs	r1, #1
 8001468:	fa01 f303 	lsl.w	r3, r1, r3
 800146c:	4013      	ands	r3, r2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0a0      	beq.n	80013b4 <HAL_RCC_OscConfig+0x668>
 8001472:	e08d      	b.n	8001590 <HAL_RCC_OscConfig+0x844>
 8001474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001478:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001484:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	fa93 f2a3 	rbit	r2, r3
 800148e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001492:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001496:	601a      	str	r2, [r3, #0]
  return result;
 8001498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800149c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80014a0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a2:	fab3 f383 	clz	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b90      	ldr	r3, [pc, #576]	@ (80016ec <HAL_RCC_OscConfig+0x9a0>)
 80014ac:	4413      	add	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	461a      	mov	r2, r3
 80014b2:	2300      	movs	r3, #0
 80014b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b6:	f7ff f98f 	bl	80007d8 <HAL_GetTick>
 80014ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014be:	e00a      	b.n	80014d6 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c0:	f7ff f98a 	bl	80007d8 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d902      	bls.n	80014d6 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	f000 bc42 	b.w	8001d5a <HAL_RCC_OscConfig+0x100e>
 80014d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014da:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014de:	2202      	movs	r2, #2
 80014e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	fa93 f2a3 	rbit	r2, r3
 80014f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001502:	2202      	movs	r2, #2
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800150a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	fa93 f2a3 	rbit	r2, r3
 8001514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001518:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001522:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001526:	2202      	movs	r2, #2
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800152e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	fa93 f2a3 	rbit	r2, r3
 8001538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800153c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001540:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001542:	4b69      	ldr	r3, [pc, #420]	@ (80016e8 <HAL_RCC_OscConfig+0x99c>)
 8001544:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800154a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800154e:	2102      	movs	r1, #2
 8001550:	6019      	str	r1, [r3, #0]
 8001552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001556:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	fa93 f1a3 	rbit	r1, r3
 8001560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001564:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001568:	6019      	str	r1, [r3, #0]
  return result;
 800156a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800156e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	fab3 f383 	clz	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f003 031f 	and.w	r3, r3, #31
 8001584:	2101      	movs	r1, #1
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	4013      	ands	r3, r2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d197      	bne.n	80014c0 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001594:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 819e 	beq.w	80018e2 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ac:	4b4e      	ldr	r3, [pc, #312]	@ (80016e8 <HAL_RCC_OscConfig+0x99c>)
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d116      	bne.n	80015e6 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b8:	4b4b      	ldr	r3, [pc, #300]	@ (80016e8 <HAL_RCC_OscConfig+0x99c>)
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	4a4a      	ldr	r2, [pc, #296]	@ (80016e8 <HAL_RCC_OscConfig+0x99c>)
 80015be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c2:	61d3      	str	r3, [r2, #28]
 80015c4:	4b48      	ldr	r3, [pc, #288]	@ (80016e8 <HAL_RCC_OscConfig+0x99c>)
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80015cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015d0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015da:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80015de:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015e0:	2301      	movs	r3, #1
 80015e2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e6:	4b42      	ldr	r3, [pc, #264]	@ (80016f0 <HAL_RCC_OscConfig+0x9a4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d11a      	bne.n	8001628 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f2:	4b3f      	ldr	r3, [pc, #252]	@ (80016f0 <HAL_RCC_OscConfig+0x9a4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a3e      	ldr	r2, [pc, #248]	@ (80016f0 <HAL_RCC_OscConfig+0x9a4>)
 80015f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fe:	f7ff f8eb 	bl	80007d8 <HAL_GetTick>
 8001602:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001606:	e009      	b.n	800161c <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001608:	f7ff f8e6 	bl	80007d8 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b64      	cmp	r3, #100	@ 0x64
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e39e      	b.n	8001d5a <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161c:	4b34      	ldr	r3, [pc, #208]	@ (80016f0 <HAL_RCC_OscConfig+0x9a4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0ef      	beq.n	8001608 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800162c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d106      	bne.n	8001646 <HAL_RCC_OscConfig+0x8fa>
 8001638:	4b2b      	ldr	r3, [pc, #172]	@ (80016e8 <HAL_RCC_OscConfig+0x99c>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	4a2a      	ldr	r2, [pc, #168]	@ (80016e8 <HAL_RCC_OscConfig+0x99c>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6213      	str	r3, [r2, #32]
 8001644:	e035      	b.n	80016b2 <HAL_RCC_OscConfig+0x966>
 8001646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800164a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10c      	bne.n	8001670 <HAL_RCC_OscConfig+0x924>
 8001656:	4b24      	ldr	r3, [pc, #144]	@ (80016e8 <HAL_RCC_OscConfig+0x99c>)
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	4a23      	ldr	r2, [pc, #140]	@ (80016e8 <HAL_RCC_OscConfig+0x99c>)
 800165c:	f023 0301 	bic.w	r3, r3, #1
 8001660:	6213      	str	r3, [r2, #32]
 8001662:	4b21      	ldr	r3, [pc, #132]	@ (80016e8 <HAL_RCC_OscConfig+0x99c>)
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	4a20      	ldr	r2, [pc, #128]	@ (80016e8 <HAL_RCC_OscConfig+0x99c>)
 8001668:	f023 0304 	bic.w	r3, r3, #4
 800166c:	6213      	str	r3, [r2, #32]
 800166e:	e020      	b.n	80016b2 <HAL_RCC_OscConfig+0x966>
 8001670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001674:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	2b05      	cmp	r3, #5
 800167e:	d10c      	bne.n	800169a <HAL_RCC_OscConfig+0x94e>
 8001680:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <HAL_RCC_OscConfig+0x99c>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	4a18      	ldr	r2, [pc, #96]	@ (80016e8 <HAL_RCC_OscConfig+0x99c>)
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	6213      	str	r3, [r2, #32]
 800168c:	4b16      	ldr	r3, [pc, #88]	@ (80016e8 <HAL_RCC_OscConfig+0x99c>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4a15      	ldr	r2, [pc, #84]	@ (80016e8 <HAL_RCC_OscConfig+0x99c>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6213      	str	r3, [r2, #32]
 8001698:	e00b      	b.n	80016b2 <HAL_RCC_OscConfig+0x966>
 800169a:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <HAL_RCC_OscConfig+0x99c>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4a12      	ldr	r2, [pc, #72]	@ (80016e8 <HAL_RCC_OscConfig+0x99c>)
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	6213      	str	r3, [r2, #32]
 80016a6:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <HAL_RCC_OscConfig+0x99c>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4a0f      	ldr	r2, [pc, #60]	@ (80016e8 <HAL_RCC_OscConfig+0x99c>)
 80016ac:	f023 0304 	bic.w	r3, r3, #4
 80016b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 8087 	beq.w	80017d2 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c4:	f7ff f888 	bl	80007d8 <HAL_GetTick>
 80016c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016cc:	e012      	b.n	80016f4 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f7ff f883 	bl	80007d8 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d908      	bls.n	80016f4 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e339      	b.n	8001d5a <HAL_RCC_OscConfig+0x100e>
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000
 80016ec:	10908120 	.word	0x10908120
 80016f0:	40007000 	.word	0x40007000
 80016f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80016fc:	2202      	movs	r2, #2
 80016fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001704:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	fa93 f2a3 	rbit	r2, r3
 800170e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001712:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800171c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001720:	2202      	movs	r2, #2
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001728:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	fa93 f2a3 	rbit	r2, r3
 8001732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001736:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800173a:	601a      	str	r2, [r3, #0]
  return result;
 800173c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001740:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001744:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <HAL_RCC_OscConfig+0xa10>
 8001756:	4b98      	ldr	r3, [pc, #608]	@ (80019b8 <HAL_RCC_OscConfig+0xc6c>)
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	e013      	b.n	8001784 <HAL_RCC_OscConfig+0xa38>
 800175c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001760:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001764:	2202      	movs	r2, #2
 8001766:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800176c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	fa93 f2a3 	rbit	r2, r3
 8001776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800177a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	4b8d      	ldr	r3, [pc, #564]	@ (80019b8 <HAL_RCC_OscConfig+0xc6c>)
 8001782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001784:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001788:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800178c:	2102      	movs	r1, #2
 800178e:	6011      	str	r1, [r2, #0]
 8001790:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001794:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	fa92 f1a2 	rbit	r1, r2
 800179e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017a2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80017a6:	6011      	str	r1, [r2, #0]
  return result;
 80017a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017ac:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	fab2 f282 	clz	r2, r2
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	f002 021f 	and.w	r2, r2, #31
 80017c2:	2101      	movs	r1, #1
 80017c4:	fa01 f202 	lsl.w	r2, r1, r2
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f43f af7f 	beq.w	80016ce <HAL_RCC_OscConfig+0x982>
 80017d0:	e07d      	b.n	80018ce <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d2:	f7ff f801 	bl	80007d8 <HAL_GetTick>
 80017d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017da:	e00b      	b.n	80017f4 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017dc:	f7fe fffc 	bl	80007d8 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e2b2      	b.n	8001d5a <HAL_RCC_OscConfig+0x100e>
 80017f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80017fc:	2202      	movs	r2, #2
 80017fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001804:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	fa93 f2a3 	rbit	r2, r3
 800180e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001812:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800181c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001820:	2202      	movs	r2, #2
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001828:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	fa93 f2a3 	rbit	r2, r3
 8001832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001836:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800183a:	601a      	str	r2, [r3, #0]
  return result;
 800183c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001840:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001844:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001846:	fab3 f383 	clz	r3, r3
 800184a:	b2db      	uxtb	r3, r3
 800184c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d102      	bne.n	800185c <HAL_RCC_OscConfig+0xb10>
 8001856:	4b58      	ldr	r3, [pc, #352]	@ (80019b8 <HAL_RCC_OscConfig+0xc6c>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	e013      	b.n	8001884 <HAL_RCC_OscConfig+0xb38>
 800185c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001860:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001864:	2202      	movs	r2, #2
 8001866:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800186c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	fa93 f2a3 	rbit	r2, r3
 8001876:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800187a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	4b4d      	ldr	r3, [pc, #308]	@ (80019b8 <HAL_RCC_OscConfig+0xc6c>)
 8001882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001884:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001888:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800188c:	2102      	movs	r1, #2
 800188e:	6011      	str	r1, [r2, #0]
 8001890:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001894:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	fa92 f1a2 	rbit	r1, r2
 800189e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018a2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80018a6:	6011      	str	r1, [r2, #0]
  return result;
 80018a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018ac:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	fab2 f282 	clz	r2, r2
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	f002 021f 	and.w	r2, r2, #31
 80018c2:	2101      	movs	r1, #1
 80018c4:	fa01 f202 	lsl.w	r2, r1, r2
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d186      	bne.n	80017dc <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018ce:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d105      	bne.n	80018e2 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d6:	4b38      	ldr	r3, [pc, #224]	@ (80019b8 <HAL_RCC_OscConfig+0xc6c>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	4a37      	ldr	r2, [pc, #220]	@ (80019b8 <HAL_RCC_OscConfig+0xc6c>)
 80018dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018e0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 8232 	beq.w	8001d58 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f4:	4b30      	ldr	r3, [pc, #192]	@ (80019b8 <HAL_RCC_OscConfig+0xc6c>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	f000 8201 	beq.w	8001d04 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001906:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	2b02      	cmp	r3, #2
 8001910:	f040 8157 	bne.w	8001bc2 <HAL_RCC_OscConfig+0xe76>
 8001914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001918:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800191c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001926:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	fa93 f2a3 	rbit	r2, r3
 8001930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001934:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001938:	601a      	str	r2, [r3, #0]
  return result;
 800193a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800193e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001942:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001944:	fab3 f383 	clz	r3, r3
 8001948:	b2db      	uxtb	r3, r3
 800194a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800194e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	461a      	mov	r2, r3
 8001956:	2300      	movs	r3, #0
 8001958:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7fe ff3d 	bl	80007d8 <HAL_GetTick>
 800195e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001962:	e009      	b.n	8001978 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001964:	f7fe ff38 	bl	80007d8 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e1f0      	b.n	8001d5a <HAL_RCC_OscConfig+0x100e>
 8001978:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800197c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001980:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800198a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	fa93 f2a3 	rbit	r2, r3
 8001994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001998:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800199c:	601a      	str	r2, [r3, #0]
  return result;
 800199e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80019a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a8:	fab3 f383 	clz	r3, r3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80019b0:	d804      	bhi.n	80019bc <HAL_RCC_OscConfig+0xc70>
 80019b2:	4b01      	ldr	r3, [pc, #4]	@ (80019b8 <HAL_RCC_OscConfig+0xc6c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	e029      	b.n	8001a0c <HAL_RCC_OscConfig+0xcc0>
 80019b8:	40021000 	.word	0x40021000
 80019bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ce:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	fa93 f2a3 	rbit	r2, r3
 80019d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019dc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80019ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	fa93 f2a3 	rbit	r2, r3
 80019fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a02:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	4bc3      	ldr	r3, [pc, #780]	@ (8001d18 <HAL_RCC_OscConfig+0xfcc>)
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a10:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001a14:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a18:	6011      	str	r1, [r2, #0]
 8001a1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a1e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	fa92 f1a2 	rbit	r1, r2
 8001a28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a2c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a30:	6011      	str	r1, [r2, #0]
  return result;
 8001a32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a36:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	fab2 f282 	clz	r2, r2
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	f042 0220 	orr.w	r2, r2, #32
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	f002 021f 	and.w	r2, r2, #31
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d185      	bne.n	8001964 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a58:	4baf      	ldr	r3, [pc, #700]	@ (8001d18 <HAL_RCC_OscConfig+0xfcc>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001a6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	49a7      	ldr	r1, [pc, #668]	@ (8001d18 <HAL_RCC_OscConfig+0xfcc>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
 8001a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a84:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001a88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a92:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	fa93 f2a3 	rbit	r2, r3
 8001a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001aa4:	601a      	str	r2, [r3, #0]
  return result;
 8001aa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aaa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001aae:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab0:	fab3 f383 	clz	r3, r3
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001aba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac6:	f7fe fe87 	bl	80007d8 <HAL_GetTick>
 8001aca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ace:	e009      	b.n	8001ae4 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7fe fe82 	bl	80007d8 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e13a      	b.n	8001d5a <HAL_RCC_OscConfig+0x100e>
 8001ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001aec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001af0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	fa93 f2a3 	rbit	r2, r3
 8001b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b04:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b08:	601a      	str	r2, [r3, #0]
  return result;
 8001b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b14:	fab3 f383 	clz	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b1c:	d802      	bhi.n	8001b24 <HAL_RCC_OscConfig+0xdd8>
 8001b1e:	4b7e      	ldr	r3, [pc, #504]	@ (8001d18 <HAL_RCC_OscConfig+0xfcc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	e027      	b.n	8001b74 <HAL_RCC_OscConfig+0xe28>
 8001b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b28:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b36:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	fa93 f2a3 	rbit	r2, r3
 8001b40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b44:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	fa93 f2a3 	rbit	r2, r3
 8001b66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b6a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	4b69      	ldr	r3, [pc, #420]	@ (8001d18 <HAL_RCC_OscConfig+0xfcc>)
 8001b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b78:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001b7c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b80:	6011      	str	r1, [r2, #0]
 8001b82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b86:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	fa92 f1a2 	rbit	r1, r2
 8001b90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b94:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001b98:	6011      	str	r1, [r2, #0]
  return result;
 8001b9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b9e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	fab2 f282 	clz	r2, r2
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	f042 0220 	orr.w	r2, r2, #32
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	f002 021f 	and.w	r2, r2, #31
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d087      	beq.n	8001ad0 <HAL_RCC_OscConfig+0xd84>
 8001bc0:	e0ca      	b.n	8001d58 <HAL_RCC_OscConfig+0x100c>
 8001bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001bca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001be6:	601a      	str	r2, [r3, #0]
  return result;
 8001be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bec:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001bf0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001bfc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	461a      	mov	r2, r3
 8001c04:	2300      	movs	r3, #0
 8001c06:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7fe fde6 	bl	80007d8 <HAL_GetTick>
 8001c0c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c10:	e009      	b.n	8001c26 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c12:	f7fe fde1 	bl	80007d8 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e099      	b.n	8001d5a <HAL_RCC_OscConfig+0x100e>
 8001c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c38:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	fa93 f2a3 	rbit	r2, r3
 8001c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c46:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c4a:	601a      	str	r2, [r3, #0]
  return result;
 8001c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c50:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c5e:	d802      	bhi.n	8001c66 <HAL_RCC_OscConfig+0xf1a>
 8001c60:	4b2d      	ldr	r3, [pc, #180]	@ (8001d18 <HAL_RCC_OscConfig+0xfcc>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	e027      	b.n	8001cb6 <HAL_RCC_OscConfig+0xf6a>
 8001c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c6a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c78:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	fa93 f2a3 	rbit	r2, r3
 8001c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c86:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c90:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001c94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	fa93 f2a3 	rbit	r2, r3
 8001ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cac:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	4b19      	ldr	r3, [pc, #100]	@ (8001d18 <HAL_RCC_OscConfig+0xfcc>)
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cba:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001cbe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001cc2:	6011      	str	r1, [r2, #0]
 8001cc4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cc8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	fa92 f1a2 	rbit	r1, r2
 8001cd2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cd6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001cda:	6011      	str	r1, [r2, #0]
  return result;
 8001cdc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ce0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	fab2 f282 	clz	r2, r2
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	f042 0220 	orr.w	r2, r2, #32
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	f002 021f 	and.w	r2, r2, #31
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d187      	bne.n	8001c12 <HAL_RCC_OscConfig+0xec6>
 8001d02:	e029      	b.n	8001d58 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d103      	bne.n	8001d1c <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e020      	b.n	8001d5a <HAL_RCC_OscConfig+0x100e>
 8001d18:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	@ (8001d64 <HAL_RCC_OscConfig+0x1018>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d24:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001d28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d10b      	bne.n	8001d54 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d3c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001d40:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000

08001d68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b09e      	sub	sp, #120	@ 0x78
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e154      	b.n	800202a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4b89      	ldr	r3, [pc, #548]	@ (8001fa8 <HAL_RCC_ClockConfig+0x240>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d910      	bls.n	8001db0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b86      	ldr	r3, [pc, #536]	@ (8001fa8 <HAL_RCC_ClockConfig+0x240>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 0207 	bic.w	r2, r3, #7
 8001d96:	4984      	ldr	r1, [pc, #528]	@ (8001fa8 <HAL_RCC_ClockConfig+0x240>)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9e:	4b82      	ldr	r3, [pc, #520]	@ (8001fa8 <HAL_RCC_ClockConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e13c      	b.n	800202a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dbc:	4b7b      	ldr	r3, [pc, #492]	@ (8001fac <HAL_RCC_ClockConfig+0x244>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4978      	ldr	r1, [pc, #480]	@ (8001fac <HAL_RCC_ClockConfig+0x244>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 80cd 	beq.w	8001f76 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d137      	bne.n	8001e54 <HAL_RCC_ClockConfig+0xec>
 8001de4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001de8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001dec:	fa93 f3a3 	rbit	r3, r3
 8001df0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001df2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df4:	fab3 f383 	clz	r3, r3
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dfc:	d802      	bhi.n	8001e04 <HAL_RCC_ClockConfig+0x9c>
 8001dfe:	4b6b      	ldr	r3, [pc, #428]	@ (8001fac <HAL_RCC_ClockConfig+0x244>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	e00f      	b.n	8001e24 <HAL_RCC_ClockConfig+0xbc>
 8001e04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e16:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e20:	4b62      	ldr	r3, [pc, #392]	@ (8001fac <HAL_RCC_ClockConfig+0x244>)
 8001e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e24:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e28:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001e2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e2c:	fa92 f2a2 	rbit	r2, r2
 8001e30:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001e32:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e34:	fab2 f282 	clz	r2, r2
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	f042 0220 	orr.w	r2, r2, #32
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	f002 021f 	and.w	r2, r2, #31
 8001e44:	2101      	movs	r1, #1
 8001e46:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d171      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0ea      	b.n	800202a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d137      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x164>
 8001e5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e60:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e64:	fa93 f3a3 	rbit	r3, r3
 8001e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001e6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e74:	d802      	bhi.n	8001e7c <HAL_RCC_ClockConfig+0x114>
 8001e76:	4b4d      	ldr	r3, [pc, #308]	@ (8001fac <HAL_RCC_ClockConfig+0x244>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	e00f      	b.n	8001e9c <HAL_RCC_ClockConfig+0x134>
 8001e7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e80:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e98:	4b44      	ldr	r3, [pc, #272]	@ (8001fac <HAL_RCC_ClockConfig+0x244>)
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ea0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001ea2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ea4:	fa92 f2a2 	rbit	r2, r2
 8001ea8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001eaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001eac:	fab2 f282 	clz	r2, r2
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	f042 0220 	orr.w	r2, r2, #32
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	f002 021f 	and.w	r2, r2, #31
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d135      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0ae      	b.n	800202a <HAL_RCC_ClockConfig+0x2c2>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ee2:	d802      	bhi.n	8001eea <HAL_RCC_ClockConfig+0x182>
 8001ee4:	4b31      	ldr	r3, [pc, #196]	@ (8001fac <HAL_RCC_ClockConfig+0x244>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	e00d      	b.n	8001f06 <HAL_RCC_ClockConfig+0x19e>
 8001eea:	2302      	movs	r3, #2
 8001eec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef0:	fa93 f3a3 	rbit	r3, r3
 8001ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	623b      	str	r3, [r7, #32]
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	61fb      	str	r3, [r7, #28]
 8001f02:	4b2a      	ldr	r3, [pc, #168]	@ (8001fac <HAL_RCC_ClockConfig+0x244>)
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f06:	2202      	movs	r2, #2
 8001f08:	61ba      	str	r2, [r7, #24]
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	fa92 f2a2 	rbit	r2, r2
 8001f10:	617a      	str	r2, [r7, #20]
  return result;
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	fab2 f282 	clz	r2, r2
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	f042 0220 	orr.w	r2, r2, #32
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	f002 021f 	and.w	r2, r2, #31
 8001f24:	2101      	movs	r1, #1
 8001f26:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e07a      	b.n	800202a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f34:	4b1d      	ldr	r3, [pc, #116]	@ (8001fac <HAL_RCC_ClockConfig+0x244>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f023 0203 	bic.w	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	491a      	ldr	r1, [pc, #104]	@ (8001fac <HAL_RCC_ClockConfig+0x244>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f46:	f7fe fc47 	bl	80007d8 <HAL_GetTick>
 8001f4a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4c:	e00a      	b.n	8001f64 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4e:	f7fe fc43 	bl	80007d8 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e062      	b.n	800202a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f64:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <HAL_RCC_ClockConfig+0x244>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 020c 	and.w	r2, r3, #12
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d1eb      	bne.n	8001f4e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f76:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <HAL_RCC_ClockConfig+0x240>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d215      	bcs.n	8001fb0 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f84:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <HAL_RCC_ClockConfig+0x240>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f023 0207 	bic.w	r2, r3, #7
 8001f8c:	4906      	ldr	r1, [pc, #24]	@ (8001fa8 <HAL_RCC_ClockConfig+0x240>)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f94:	4b04      	ldr	r3, [pc, #16]	@ (8001fa8 <HAL_RCC_ClockConfig+0x240>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d006      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e041      	b.n	800202a <HAL_RCC_ClockConfig+0x2c2>
 8001fa6:	bf00      	nop
 8001fa8:	40022000 	.word	0x40022000
 8001fac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <HAL_RCC_ClockConfig+0x2cc>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	491a      	ldr	r1, [pc, #104]	@ (8002034 <HAL_RCC_ClockConfig+0x2cc>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d009      	beq.n	8001fee <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fda:	4b16      	ldr	r3, [pc, #88]	@ (8002034 <HAL_RCC_ClockConfig+0x2cc>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4912      	ldr	r1, [pc, #72]	@ (8002034 <HAL_RCC_ClockConfig+0x2cc>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fee:	f000 f829 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8001ff2:	4601      	mov	r1, r0
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8002034 <HAL_RCC_ClockConfig+0x2cc>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ffc:	22f0      	movs	r2, #240	@ 0xf0
 8001ffe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	fa92 f2a2 	rbit	r2, r2
 8002006:	60fa      	str	r2, [r7, #12]
  return result;
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	fab2 f282 	clz	r2, r2
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	40d3      	lsrs	r3, r2
 8002012:	4a09      	ldr	r2, [pc, #36]	@ (8002038 <HAL_RCC_ClockConfig+0x2d0>)
 8002014:	5cd3      	ldrb	r3, [r2, r3]
 8002016:	fa21 f303 	lsr.w	r3, r1, r3
 800201a:	4a08      	ldr	r2, [pc, #32]	@ (800203c <HAL_RCC_ClockConfig+0x2d4>)
 800201c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800201e:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <HAL_RCC_ClockConfig+0x2d8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fb94 	bl	8000750 <HAL_InitTick>
  
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3778      	adds	r7, #120	@ 0x78
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	0800288c 	.word	0x0800288c
 800203c:	20000000 	.word	0x20000000
 8002040:	20000004 	.word	0x20000004

08002044 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002044:	b480      	push	{r7}
 8002046:	b08b      	sub	sp, #44	@ 0x2c
 8002048:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	2300      	movs	r3, #0
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800205e:	4b29      	ldr	r3, [pc, #164]	@ (8002104 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b04      	cmp	r3, #4
 800206c:	d002      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0x30>
 800206e:	2b08      	cmp	r3, #8
 8002070:	d003      	beq.n	800207a <HAL_RCC_GetSysClockFreq+0x36>
 8002072:	e03c      	b.n	80020ee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002074:	4b24      	ldr	r3, [pc, #144]	@ (8002108 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002076:	623b      	str	r3, [r7, #32]
      break;
 8002078:	e03c      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002080:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002084:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	fa92 f2a2 	rbit	r2, r2
 800208c:	607a      	str	r2, [r7, #4]
  return result;
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	fab2 f282 	clz	r2, r2
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	40d3      	lsrs	r3, r2
 8002098:	4a1c      	ldr	r2, [pc, #112]	@ (800210c <HAL_RCC_GetSysClockFreq+0xc8>)
 800209a:	5cd3      	ldrb	r3, [r2, r3]
 800209c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800209e:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	220f      	movs	r2, #15
 80020a8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	fa92 f2a2 	rbit	r2, r2
 80020b0:	60fa      	str	r2, [r7, #12]
  return result;
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	fab2 f282 	clz	r2, r2
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	40d3      	lsrs	r3, r2
 80020bc:	4a14      	ldr	r2, [pc, #80]	@ (8002110 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020be:	5cd3      	ldrb	r3, [r2, r3]
 80020c0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020cc:	4a0e      	ldr	r2, [pc, #56]	@ (8002108 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24
 80020dc:	e004      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002114 <HAL_RCC_GetSysClockFreq+0xd0>)
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ea:	623b      	str	r3, [r7, #32]
      break;
 80020ec:	e002      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020ee:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020f0:	623b      	str	r3, [r7, #32]
      break;
 80020f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020f4:	6a3b      	ldr	r3, [r7, #32]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	372c      	adds	r7, #44	@ 0x2c
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000
 8002108:	007a1200 	.word	0x007a1200
 800210c:	080028a4 	.word	0x080028a4
 8002110:	080028b4 	.word	0x080028b4
 8002114:	003d0900 	.word	0x003d0900

08002118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800211c:	4b03      	ldr	r3, [pc, #12]	@ (800212c <HAL_RCC_GetHCLKFreq+0x14>)
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000000 	.word	0x20000000

08002130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002136:	f7ff ffef 	bl	8002118 <HAL_RCC_GetHCLKFreq>
 800213a:	4601      	mov	r1, r0
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002144:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002148:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	fa92 f2a2 	rbit	r2, r2
 8002150:	603a      	str	r2, [r7, #0]
  return result;
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	fab2 f282 	clz	r2, r2
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	40d3      	lsrs	r3, r2
 800215c:	4a04      	ldr	r2, [pc, #16]	@ (8002170 <HAL_RCC_GetPCLK1Freq+0x40>)
 800215e:	5cd3      	ldrb	r3, [r2, r3]
 8002160:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	0800289c 	.word	0x0800289c

08002174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800217a:	f7ff ffcd 	bl	8002118 <HAL_RCC_GetHCLKFreq>
 800217e:	4601      	mov	r1, r0
 8002180:	4b0b      	ldr	r3, [pc, #44]	@ (80021b0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002188:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800218c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	fa92 f2a2 	rbit	r2, r2
 8002194:	603a      	str	r2, [r7, #0]
  return result;
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	fab2 f282 	clz	r2, r2
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	40d3      	lsrs	r3, r2
 80021a0:	4a04      	ldr	r2, [pc, #16]	@ (80021b4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021a2:	5cd3      	ldrb	r3, [r2, r3]
 80021a4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000
 80021b4:	0800289c 	.word	0x0800289c

080021b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e040      	b.n	800224c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7fe f9f0 	bl	80005c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2224      	movs	r2, #36	@ 0x24
 80021e4:	675a      	str	r2, [r3, #116]	@ 0x74

  __HAL_UART_DISABLE(huart);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0201 	bic.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f82c 	bl	8002254 <UART_SetConfig>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e022      	b.n	800224c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f9a2 	bl	8002558 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 fa29 	bl	800269c <UART_CheckIdleState>
 800224a:	4603      	mov	r3, r0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	4ba2      	ldr	r3, [pc, #648]	@ (800250c <UART_SetConfig+0x2b8>)
 8002284:	4013      	ands	r3, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6812      	ldr	r2, [r2, #0]
 800228a:	6939      	ldr	r1, [r7, #16]
 800228c:	430b      	orrs	r3, r1
 800228e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a90      	ldr	r2, [pc, #576]	@ (8002510 <UART_SetConfig+0x2bc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d120      	bne.n	8002316 <UART_SetConfig+0xc2>
 80022d4:	4b8f      	ldr	r3, [pc, #572]	@ (8002514 <UART_SetConfig+0x2c0>)
 80022d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d817      	bhi.n	8002310 <UART_SetConfig+0xbc>
 80022e0:	a201      	add	r2, pc, #4	@ (adr r2, 80022e8 <UART_SetConfig+0x94>)
 80022e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e6:	bf00      	nop
 80022e8:	080022f9 	.word	0x080022f9
 80022ec:	08002305 	.word	0x08002305
 80022f0:	0800230b 	.word	0x0800230b
 80022f4:	080022ff 	.word	0x080022ff
 80022f8:	2300      	movs	r3, #0
 80022fa:	77fb      	strb	r3, [r7, #31]
 80022fc:	e01d      	b.n	800233a <UART_SetConfig+0xe6>
 80022fe:	2302      	movs	r3, #2
 8002300:	77fb      	strb	r3, [r7, #31]
 8002302:	e01a      	b.n	800233a <UART_SetConfig+0xe6>
 8002304:	2304      	movs	r3, #4
 8002306:	77fb      	strb	r3, [r7, #31]
 8002308:	e017      	b.n	800233a <UART_SetConfig+0xe6>
 800230a:	2308      	movs	r3, #8
 800230c:	77fb      	strb	r3, [r7, #31]
 800230e:	e014      	b.n	800233a <UART_SetConfig+0xe6>
 8002310:	2310      	movs	r3, #16
 8002312:	77fb      	strb	r3, [r7, #31]
 8002314:	e011      	b.n	800233a <UART_SetConfig+0xe6>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a7f      	ldr	r2, [pc, #508]	@ (8002518 <UART_SetConfig+0x2c4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d102      	bne.n	8002326 <UART_SetConfig+0xd2>
 8002320:	2300      	movs	r3, #0
 8002322:	77fb      	strb	r3, [r7, #31]
 8002324:	e009      	b.n	800233a <UART_SetConfig+0xe6>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a7c      	ldr	r2, [pc, #496]	@ (800251c <UART_SetConfig+0x2c8>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d102      	bne.n	8002336 <UART_SetConfig+0xe2>
 8002330:	2300      	movs	r3, #0
 8002332:	77fb      	strb	r3, [r7, #31]
 8002334:	e001      	b.n	800233a <UART_SetConfig+0xe6>
 8002336:	2310      	movs	r3, #16
 8002338:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002342:	f040 8083 	bne.w	800244c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002346:	7ffb      	ldrb	r3, [r7, #31]
 8002348:	2b08      	cmp	r3, #8
 800234a:	d85f      	bhi.n	800240c <UART_SetConfig+0x1b8>
 800234c:	a201      	add	r2, pc, #4	@ (adr r2, 8002354 <UART_SetConfig+0x100>)
 800234e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002352:	bf00      	nop
 8002354:	08002379 	.word	0x08002379
 8002358:	08002399 	.word	0x08002399
 800235c:	080023b9 	.word	0x080023b9
 8002360:	0800240d 	.word	0x0800240d
 8002364:	080023d5 	.word	0x080023d5
 8002368:	0800240d 	.word	0x0800240d
 800236c:	0800240d 	.word	0x0800240d
 8002370:	0800240d 	.word	0x0800240d
 8002374:	080023f5 	.word	0x080023f5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002378:	f7ff feda 	bl	8002130 <HAL_RCC_GetPCLK1Freq>
 800237c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	005a      	lsls	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	085b      	lsrs	r3, r3, #1
 8002388:	441a      	add	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002392:	b29b      	uxth	r3, r3
 8002394:	61bb      	str	r3, [r7, #24]
        break;
 8002396:	e03c      	b.n	8002412 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002398:	f7ff feec 	bl	8002174 <HAL_RCC_GetPCLK2Freq>
 800239c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	005a      	lsls	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	085b      	lsrs	r3, r3, #1
 80023a8:	441a      	add	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	61bb      	str	r3, [r7, #24]
        break;
 80023b6:	e02c      	b.n	8002412 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	085b      	lsrs	r3, r3, #1
 80023be:	f503 0374 	add.w	r3, r3, #15990784	@ 0xf40000
 80023c2:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6852      	ldr	r2, [r2, #4]
 80023ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	61bb      	str	r3, [r7, #24]
        break;
 80023d2:	e01e      	b.n	8002412 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023d4:	f7ff fe36 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 80023d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	005a      	lsls	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	085b      	lsrs	r3, r3, #1
 80023e4:	441a      	add	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	61bb      	str	r3, [r7, #24]
        break;
 80023f2:	e00e      	b.n	8002412 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	085b      	lsrs	r3, r3, #1
 80023fa:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	fbb2 f3f3 	udiv	r3, r2, r3
 8002406:	b29b      	uxth	r3, r3
 8002408:	61bb      	str	r3, [r7, #24]
        break;
 800240a:	e002      	b.n	8002412 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	75fb      	strb	r3, [r7, #23]
        break;
 8002410:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2b0f      	cmp	r3, #15
 8002416:	d916      	bls.n	8002446 <UART_SetConfig+0x1f2>
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800241e:	d212      	bcs.n	8002446 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	b29b      	uxth	r3, r3
 8002424:	f023 030f 	bic.w	r3, r3, #15
 8002428:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	085b      	lsrs	r3, r3, #1
 800242e:	b29b      	uxth	r3, r3
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	b29a      	uxth	r2, r3
 8002436:	897b      	ldrh	r3, [r7, #10]
 8002438:	4313      	orrs	r3, r2
 800243a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	897a      	ldrh	r2, [r7, #10]
 8002442:	60da      	str	r2, [r3, #12]
 8002444:	e07d      	b.n	8002542 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	75fb      	strb	r3, [r7, #23]
 800244a:	e07a      	b.n	8002542 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 800244c:	7ffb      	ldrb	r3, [r7, #31]
 800244e:	2b08      	cmp	r3, #8
 8002450:	d866      	bhi.n	8002520 <UART_SetConfig+0x2cc>
 8002452:	a201      	add	r2, pc, #4	@ (adr r2, 8002458 <UART_SetConfig+0x204>)
 8002454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002458:	0800247d 	.word	0x0800247d
 800245c:	0800249b 	.word	0x0800249b
 8002460:	080024b9 	.word	0x080024b9
 8002464:	08002521 	.word	0x08002521
 8002468:	080024d5 	.word	0x080024d5
 800246c:	08002521 	.word	0x08002521
 8002470:	08002521 	.word	0x08002521
 8002474:	08002521 	.word	0x08002521
 8002478:	080024f3 	.word	0x080024f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800247c:	f7ff fe58 	bl	8002130 <HAL_RCC_GetPCLK1Freq>
 8002480:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	085a      	lsrs	r2, r3, #1
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	441a      	add	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	fbb2 f3f3 	udiv	r3, r2, r3
 8002494:	b29b      	uxth	r3, r3
 8002496:	61bb      	str	r3, [r7, #24]
        break;
 8002498:	e045      	b.n	8002526 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800249a:	f7ff fe6b 	bl	8002174 <HAL_RCC_GetPCLK2Freq>
 800249e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	085a      	lsrs	r2, r3, #1
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	441a      	add	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	61bb      	str	r3, [r7, #24]
        break;
 80024b6:	e036      	b.n	8002526 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	085b      	lsrs	r3, r3, #1
 80024be:	f503 03f4 	add.w	r3, r3, #7995392	@ 0x7a0000
 80024c2:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6852      	ldr	r2, [r2, #4]
 80024ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	61bb      	str	r3, [r7, #24]
        break;
 80024d2:	e028      	b.n	8002526 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024d4:	f7ff fdb6 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 80024d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	085a      	lsrs	r2, r3, #1
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	441a      	add	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	61bb      	str	r3, [r7, #24]
        break;
 80024f0:	e019      	b.n	8002526 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	085b      	lsrs	r3, r3, #1
 80024f8:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	fbb2 f3f3 	udiv	r3, r2, r3
 8002504:	b29b      	uxth	r3, r3
 8002506:	61bb      	str	r3, [r7, #24]
        break;
 8002508:	e00d      	b.n	8002526 <UART_SetConfig+0x2d2>
 800250a:	bf00      	nop
 800250c:	efff69f3 	.word	0xefff69f3
 8002510:	40013800 	.word	0x40013800
 8002514:	40021000 	.word	0x40021000
 8002518:	40004400 	.word	0x40004400
 800251c:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	75fb      	strb	r3, [r7, #23]
        break;
 8002524:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	2b0f      	cmp	r3, #15
 800252a:	d908      	bls.n	800253e <UART_SetConfig+0x2ea>
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002532:	d204      	bcs.n	800253e <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	60da      	str	r2, [r3, #12]
 800253c:	e001      	b.n	8002542 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->TxISR = NULL;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	665a      	str	r2, [r3, #100]	@ 0x64

  return ret;
 800254e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3720      	adds	r7, #32
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00a      	beq.n	80025c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	f003 0310 	and.w	r3, r3, #16
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00a      	beq.n	800260a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01a      	beq.n	800266e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002656:	d10a      	bne.n	800266e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	605a      	str	r2, [r3, #4]
  }
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80026aa:	f7fe f895 	bl	80007d8 <HAL_GetTick>
 80026ae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d10e      	bne.n	80026dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f82a 	bl	8002726 <UART_WaitOnFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e020      	b.n	800271e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d10e      	bne.n	8002708 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f814 	bl	8002726 <UART_WaitOnFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e00a      	b.n	800271e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2220      	movs	r2, #32
 800270c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2220      	movs	r2, #32
 8002712:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UNLOCK(huart);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b084      	sub	sp, #16
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	603b      	str	r3, [r7, #0]
 8002732:	4613      	mov	r3, r2
 8002734:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002736:	e05d      	b.n	80027f4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273e:	d059      	beq.n	80027f4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002740:	f7fe f84a 	bl	80007d8 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	429a      	cmp	r2, r3
 800274e:	d302      	bcc.n	8002756 <UART_WaitOnFlagUntilTimeout+0x30>
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d11b      	bne.n	800278e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8002764:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0201 	bic.w	r2, r2, #1
 8002774:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2220      	movs	r2, #32
 800277a:	675a      	str	r2, [r3, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	679a      	str	r2, [r3, #120]	@ 0x78

        __HAL_UNLOCK(huart);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

        return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e042      	b.n	8002814 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d02b      	beq.n	80027f4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027aa:	d123      	bne.n	80027f4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027b4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80027c4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0201 	bic.w	r2, r2, #1
 80027d4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2220      	movs	r2, #32
 80027da:	675a      	str	r2, [r3, #116]	@ 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2220      	movs	r2, #32
 80027e0:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2220      	movs	r2, #32
 80027e6:	67da      	str	r2, [r3, #124]	@ 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e00f      	b.n	8002814 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	69da      	ldr	r2, [r3, #28]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	4013      	ands	r3, r2
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	429a      	cmp	r2, r3
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	461a      	mov	r2, r3
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	429a      	cmp	r2, r3
 8002810:	d092      	beq.n	8002738 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <memset>:
 800281c:	4402      	add	r2, r0
 800281e:	4603      	mov	r3, r0
 8002820:	4293      	cmp	r3, r2
 8002822:	d100      	bne.n	8002826 <memset+0xa>
 8002824:	4770      	bx	lr
 8002826:	f803 1b01 	strb.w	r1, [r3], #1
 800282a:	e7f9      	b.n	8002820 <memset+0x4>

0800282c <__libc_init_array>:
 800282c:	b570      	push	{r4, r5, r6, lr}
 800282e:	4d0d      	ldr	r5, [pc, #52]	@ (8002864 <__libc_init_array+0x38>)
 8002830:	4c0d      	ldr	r4, [pc, #52]	@ (8002868 <__libc_init_array+0x3c>)
 8002832:	1b64      	subs	r4, r4, r5
 8002834:	10a4      	asrs	r4, r4, #2
 8002836:	2600      	movs	r6, #0
 8002838:	42a6      	cmp	r6, r4
 800283a:	d109      	bne.n	8002850 <__libc_init_array+0x24>
 800283c:	4d0b      	ldr	r5, [pc, #44]	@ (800286c <__libc_init_array+0x40>)
 800283e:	4c0c      	ldr	r4, [pc, #48]	@ (8002870 <__libc_init_array+0x44>)
 8002840:	f000 f818 	bl	8002874 <_init>
 8002844:	1b64      	subs	r4, r4, r5
 8002846:	10a4      	asrs	r4, r4, #2
 8002848:	2600      	movs	r6, #0
 800284a:	42a6      	cmp	r6, r4
 800284c:	d105      	bne.n	800285a <__libc_init_array+0x2e>
 800284e:	bd70      	pop	{r4, r5, r6, pc}
 8002850:	f855 3b04 	ldr.w	r3, [r5], #4
 8002854:	4798      	blx	r3
 8002856:	3601      	adds	r6, #1
 8002858:	e7ee      	b.n	8002838 <__libc_init_array+0xc>
 800285a:	f855 3b04 	ldr.w	r3, [r5], #4
 800285e:	4798      	blx	r3
 8002860:	3601      	adds	r6, #1
 8002862:	e7f2      	b.n	800284a <__libc_init_array+0x1e>
 8002864:	080028c4 	.word	0x080028c4
 8002868:	080028c4 	.word	0x080028c4
 800286c:	080028c4 	.word	0x080028c4
 8002870:	080028c8 	.word	0x080028c8

08002874 <_init>:
 8002874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002876:	bf00      	nop
 8002878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287a:	bc08      	pop	{r3}
 800287c:	469e      	mov	lr, r3
 800287e:	4770      	bx	lr

08002880 <_fini>:
 8002880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002882:	bf00      	nop
 8002884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002886:	bc08      	pop	{r3}
 8002888:	469e      	mov	lr, r3
 800288a:	4770      	bx	lr
